bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes.hasChildren()  &&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	if(allCatchNodes.hasChildren()  &&  NodeUtil.hasFinally(allCatchNodes))  {	  if(allCatchNodes.hasOneChild()    &&    NodeUtil.hasFinally(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	131	6	replace
2	[BUG]  [BUGGY]  if(allCatchNodes.hasChildren()  &&  NodeUtil.hasFinally(allCatchNodes))  {  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes.hasChildren()  &&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes.hasChildren()  &&  NodeUtil.hasFinally(allCatchNodes))  {	  if(allCatchNodes.hasOneChild()    &&    NodeUtil.hasFinally(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	131	6	replace
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes.isEmpty()  &&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	if(allCatchNodes.isEmpty()  &&  NodeUtil.hasFinally(allCatchNodes))  {	  if(allCatchNodes.hasOneChild()    &&    NodeUtil.hasFinally(allCatchNodes))    {    	compilable	  [FE]  AssertionFailedError  	131	6	replace
4	[BUG]  [BUGGY]  if(allCatchNodes.isEmpty()  &&  NodeUtil.hasFinally(allCatchNodes))  {  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes.isEmpty()  &&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes.isEmpty()  &&  NodeUtil.hasFinally(allCatchNodes))  {	  if(allCatchNodes.hasOneChild()    &&    NodeUtil.hasFinally(allCatchNodes))    {    	compilable	  [FE]  AssertionFailedError  	131	6	replace
5	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!allCatchNodes.hasOneChild()  &&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	if(!allCatchNodes.hasOneChild()  &&  NodeUtil.hasFinally(allCatchNodes))  {	  if(allCatchNodes.hasOneChild()    &&    NodeUtil.hasFinally(allCatchNodes))    {    	compilable	  [FE]  AssertionFailedError  	131	6	replace
6	[BUG]  [BUGGY]  if(!allCatchNodes.hasOneChild()  &&  NodeUtil.hasFinally(allCatchNodes))  {  [FE]  AssertionFailedError  [FE]        RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!allCatchNodes.hasOneChild()  &&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!allCatchNodes.hasOneChild()  &&  NodeUtil.hasFinally(allCatchNodes))  {	  if(allCatchNodes.hasOneChild()    &&    NodeUtil.hasFinally(allCatchNodes))    {    	compilable	  [FE]  AssertionFailedError  	131	6	replace
7	[BUG]  [BUGGY]  Node  c  =  allCatchNodes.removeLastChild();  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  c  =  allCatchNodes.removeLastChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  c  =  allCatchNodes.removeLastChild();	  Node    c    =    allCatchNodes.removeFirstChild();    	non-compiled	[CE]  illegal  start  of  type	200	None	replace
8	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  [CE]  illegal  start  of  type  [FE]            RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);	          Preconditions.checkState(allCatchNodes.hasOneChild());    Node    allCatchNodes    =    NodeUtil.getCatchBlock(n);    Preconditions.checkState(allCatchNodes.hasOneChild());    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
9	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  Preconditions.checkState(allCatchNodes.hasOneChild());  [CE]  illegal  start  of  type  [FE]              RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  Preconditions.checkState(allCatchNodes.hasOneChild());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  Preconditions.checkState(allCatchNodes.hasOneChild());	          Preconditions.checkState(allCatchNodes.hasOneChild());    Node    allCatchNodes    =    NodeUtil.getCatchBlock(n);    Preconditions.checkState(allCatchNodes.hasOneChild());    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
10	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock);  [CE]  illegal  start  of  type  [FE]                RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.hasOneChild());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock);	          Preconditions.checkState(allCatchNodes.hasOneChild());    Node    allCatchNodes    =    NodeUtil.getCatchBlock(n);    Preconditions.checkState(allCatchNodes.hasOneChild());    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
11	[BUG]  [BUGGY]  if(!NodeUtil.isCatchHandler(allCatchNodes)&&  NodeUtil.isFinally(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!NodeUtil.isCatchHandler(allCatchNodes)&&  NodeUtil.isFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!NodeUtil.isCatchHandler(allCatchNodes)&&  NodeUtil.isFinally(allCatchNodes))  {	  if(!NodeUtil.hasCatchHandler(allCatchNodes)&&    NodeUtil.isFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	139	None	replace
12	[BUG]  [BUGGY]  if(!NodeUtil.hasCatchHandler(allCatchNodes)||  NodeUtil.isFinally(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!NodeUtil.hasCatchHandler(allCatchNodes)||  NodeUtil.isFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!NodeUtil.hasCatchHandler(allCatchNodes)||  NodeUtil.isFinally(allCatchNodes))  {	  if(!NodeUtil.hasCatchHandler(allCatchNodes)&&    NodeUtil.isFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	139	None	replace
13	[BUG]  [BUGGY]  if(!NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.isExpressionNode(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.isExpressionNode(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.isExpressionNode(allCatchNodes))  {	  if(!NodeUtil.hasCatchHandler(allCatchNodes)&&    NodeUtil.isFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	139	None	replace
14	[BUG]  [BUGGY]  if(!NodeUtil.isFinally(allCatchNodes)&&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!NodeUtil.isFinally(allCatchNodes)&&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!NodeUtil.isFinally(allCatchNodes)&&  NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(!NodeUtil.hasCatchHandler(allCatchNodes)&&    NodeUtil.isFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	139	None	replace
15	[BUG]  [BUGGY]  if(!allCatchNodes.hasChildren()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  if(!allCatchNodes.hasChildren()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!allCatchNodes.hasChildren()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  if(!allCatchNodes.hasChildren()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!allCatchNodes.hasChildren()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    if(!allCatchNodes.hasChildren()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {	  	non-compiled	[CE]  illegal  start  of  expression	208	None	add
16	[BUG]  [BUGGY]  if(!allCatchNodes.hasChildren()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  If(!allCatchNodes.hasChildren()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!allCatchNodes.hasChildren()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  If(!allCatchNodes.hasChildren()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!allCatchNodes.hasChildren()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    If(!allCatchNodes.hasChildren()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {	  	non-compiled	[CE]  ';'  expected	208	None	add
17	[BUG]  [BUGGY]  if(!allCatchNodes.hasChildren()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  if(!allCatchNodes.hasChildren()  &&  nodeUtil.hasCatchHandler(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!allCatchNodes.hasChildren()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  if(!allCatchNodes.hasChildren()  &&  nodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!allCatchNodes.hasChildren()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    if(!allCatchNodes.hasChildren()  &&  nodeUtil.hasCatchHandler(allCatchNodes))  {	  	non-compiled	[CE]  illegal  start  of  expression	208	None	add
18	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.get(1)  ==  null);  [CE]  illegal  start  of  type  [FE]        RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.get(1)  ==  null);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.get(1)  ==  null);	  Preconditions.checkState(allCatchNodes.get(0)    ==    null);    	non-compiled	[CE]  illegal  start  of  type	201	None	replace
19	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.get(1)!=  null);  [CE]  illegal  start  of  type  [FE]          RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.get(1)!=  null);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.get(1)!=  null);	  Preconditions.checkState(allCatchNodes.get(0)    ==    null);    	non-compiled	[CE]  illegal  start  of  type	201	None	replace
20	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.get(0)  >=  null);  [CE]  illegal  start  of  type  [FE]            RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.get(0)  >=  null);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.get(0)  >=  null);	  Preconditions.checkState(allCatchNodes.get(0)    ==    null);    	non-compiled	[CE]  illegal  start  of  type	201	None	replace
21	[BUG]  [BUGGY]  Node  catchNode  =  allCatchNodes.get(0);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  catchNode  =  allCatchNodes.get(0);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  catchNode  =  allCatchNodes.get(0);	  Node    catchNode    =    allCatchNodes.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
22	[BUG]  [BUGGY]  Node  catchNode  =  n.getLastChild();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  catchNode  =  n.getLastChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  catchNode  =  n.getLastChild();	  Node    catchNode    =    allCatchNodes.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
23	[BUG]  [BUGGY]  Node  catchNode  =  tryBlock.getLastChild();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  catchNode  =  tryBlock.getLastChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  catchNode  =  tryBlock.getLastChild();	  Node    catchNode    =    allCatchNodes.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
24	[BUG]  [BUGGY]  Node  catchNode  =  allCatchNodes.getNext()  &&  tryMinimizeExits(tryBlock,  exitType,  labelName);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  catchNode  =  allCatchNodes.getNext()  &&  tryMinimizeExits(tryBlock,  exitType,  labelName);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  catchNode  =  allCatchNodes.getNext()  &&  tryMinimizeExits(tryBlock,  exitType,  labelName);	  Node    catchNode    =    allCatchNodes.getNext();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
25	[BUG]  [BUGGY]  Node  catchNode  =  allCatchNodes.getParent();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  catchNode  =  allCatchNodes.getParent();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  catchNode  =  allCatchNodes.getParent();	  Node    catchNode    =    allCatchNodes.getNext();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
26	[BUG]  [BUGGY]  Node  c  =  allCatchNodes.getFirstChild();  Preconditions.checkState(allCatchNodes.hasOneChild());  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  c  =  allCatchNodes.getFirstChild();  Preconditions.checkState(allCatchNodes.hasOneChild());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  c  =  allCatchNodes.getFirstChild();  Preconditions.checkState(allCatchNodes.hasOneChild());	          Node    c    =    allCatchNodes.getFirstChild();    Node    c    =    allCatchNodes.getFirstChild();    Preconditions.checkState(AllCatchNodes.hasOneChild());    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
27	[BUG]  [BUGGY]  Node  c  =  allCatchNodes.getFirstChild();  Preconditions.checkState(AllCatchNodes.hasOneChild());  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  c  =  allCatchNodes.getFirstChild();  Preconditions.checkState(AllCatchNodes.hasOneChild());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  c  =  allCatchNodes.getFirstChild();  Preconditions.checkState(AllCatchNodes.hasOneChild());	          Node    c    =    allCatchNodes.getFirstChild();    Node    c    =    allCatchNodes.getFirstChild();    Preconditions.checkState(AllCatchNodes.hasOneChild());    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
28	[BUG]  [BUGGY]  Node  c  =  allCatchNodes.getFirstChild();  Preconditions.checkState(c.hasOneChild());  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  c  =  allCatchNodes.getFirstChild();  Preconditions.checkState(c.hasOneChild());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  c  =  allCatchNodes.getFirstChild();  Preconditions.checkState(c.hasOneChild());	          Node    c    =    allCatchNodes.getFirstChild();    Node    c    =    allCatchNodes.getFirstChild();    Preconditions.checkState(AllCatchNodes.hasOneChild());    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
29	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.getLastChild()  ==  null);  Node  elseBlock  =  allCatchNodes.getLastChild();  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.getLastChild()  ==  null);  Node  elseBlock  =  allCatchNodes.getLastChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.getLastChild()  ==  null);  Node  elseBlock  =  allCatchNodes.getLastChild();	          Node    elseBlock    =    allCatchNodes.getLastChild();    Node    elseBlock    =    allCatchNodes.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
30	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.getFirstChild()  ==  null);  Node  elseBlock  =  allCatchNodes.getLastChild();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.getFirstChild()  ==  null);  Node  elseBlock  =  allCatchNodes.getLastChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.getFirstChild()  ==  null);  Node  elseBlock  =  allCatchNodes.getLastChild();	          Node    elseBlock    =    allCatchNodes.getLastChild();    Node    elseBlock    =    allCatchNodes.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
31	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.getLastChild()  ==  n);  Node  elseBlock  =  allCatchNodes.getLastChild();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.getLastChild()  ==  n);  Node  elseBlock  =  allCatchNodes.getLastChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.getLastChild()  ==  n);  Node  elseBlock  =  allCatchNodes.getLastChild();	          Node    elseBlock    =    allCatchNodes.getLastChild();    Node    elseBlock    =    allCatchNodes.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
32	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  &&  allCatchNodes.isEmpty(),  exitType);  [CE]  illegal  start  of  type  [FE]              RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  &&  allCatchNodes.isEmpty(),  exitType);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.isEmpty()  &&  allCatchNodes.isEmpty(),  exitType);	  Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty(),    exitType);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
33	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty(),  exitType,  labelName);  [CE]  illegal  start  of  type  [FE]                RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty(),  exitType,  labelName);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty(),  exitType,  labelName);	  Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty(),    exitType);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
34	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty(),  allCatchNodes.isEmpty(),  exitType);  [CE]  illegal  start  of  type  [FE]                  RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty(),  allCatchNodes.isEmpty(),  exitType);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.isEmpty(),  allCatchNodes.isEmpty(),  exitType);	  Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty(),    exitType);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
35	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty(),  labelName);  [CE]  illegal  start  of  type  [FE]                    RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty(),  labelName);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty(),  labelName);	  Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty(),    exitType);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
36	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  ||  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	if(allCatchNodes!=  null  ||  NodeUtil.hasFinally(allCatchNodes))  {	  if(allCatchNodes!=    null    ||    NodeUtil.hasCatchHandler(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	112	2	replace
37	[BUG]  [BUGGY]  if(allCatchNodes!=  null  ||  NodeUtil.hasFinally(allCatchNodes))  {  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  ||  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=  null  ||  NodeUtil.hasFinally(allCatchNodes))  {	  if(allCatchNodes!=    null    ||    NodeUtil.hasCatchHandler(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	112	2	replace
38	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes  ==  null  ||  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	if(allCatchNodes  ==  null  ||  NodeUtil.hasFinally(allCatchNodes))  {	  if(allCatchNodes!=    null    ||    NodeUtil.hasCatchHandler(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	112	6	replace
39	[BUG]  [BUGGY]  if(allCatchNodes  ==  null  ||  NodeUtil.hasFinally(allCatchNodes))  {  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes  ==  null  ||  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes  ==  null  ||  NodeUtil.hasFinally(allCatchNodes))  {	  if(allCatchNodes!=    null    ||    NodeUtil.hasCatchHandler(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	112	6	replace
40	[BUG]  [BUGGY]  if(allCatchNodes.hasChildCount()  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes.hasChildCount()  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes.hasChildCount()  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(allCatchNodes.hasChildCount()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	155	None	replace
41	[BUG]  [BUGGY]  if(allCatchNodes.hasChildCount()  &&  NodeUtil.hasCatchHandler(n))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes.hasChildCount()  &&  NodeUtil.hasCatchHandler(n))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes.hasChildCount()  &&  NodeUtil.hasCatchHandler(n))  {	  if(allCatchNodes.hasChildCount()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	155	None	replace
42	[BUG]  [BUGGY]  if(allCatchNodes.hasChildCount()  &&  NodeUtil.isCatchHandler(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes.hasChildCount()  &&  NodeUtil.isCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes.hasChildCount()  &&  NodeUtil.isCatchHandler(allCatchNodes))  {	  if(allCatchNodes.hasChildCount()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	155	None	replace
43	[BUG]  [BUGGY]  if(allCatchNodes.hasChildCount()  &&  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes.hasChildCount()  &&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes.hasChildCount()  &&  NodeUtil.hasFinally(allCatchNodes))  {	  if(allCatchNodes.hasChildCount()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	155	None	replace
44	[BUG]  [BUGGY]  if(allCatchNodes!=  null  &&  NodeUtil.hasFinally(allCatchNodes))  {  if(allCatchNodes!=  null  &&  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  &&  NodeUtil.hasFinally(allCatchNodes))  {  if(allCatchNodes!=  null  &&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=    null    &&    NodeUtil.hasFinally(allCatchNodes))    {    if(allCatchNodes!=  null  &&  NodeUtil.hasFinally(allCatchNodes))  {	  	non-compiled	[CE]  illegal  start  of  expression	113	None	add
45	[BUG]  [BUGGY]  if(allCatchNodes!=  null  &&  NodeUtil.hasFinally(allCatchNodes))  {  if(allCatchNodes  ==  null  &&  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  &&  NodeUtil.hasFinally(allCatchNodes))  {  if(allCatchNodes  ==  null  &&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=    null    &&    NodeUtil.hasFinally(allCatchNodes))    {    if(allCatchNodes  ==  null  &&  NodeUtil.hasFinally(allCatchNodes))  {	  	non-compiled	[CE]  illegal  start  of  expression	113	None	add
46	[BUG]  [BUGGY]  if(allCatchNodes!=  null  &&  NodeUtil.hasFinally(allCatchNodes))  {  If(allCatchNodes!=  null  &&  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  ';'  expected  [FE]        RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  &&  NodeUtil.hasFinally(allCatchNodes))  {  If(allCatchNodes!=  null  &&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=    null    &&    NodeUtil.hasFinally(allCatchNodes))    {    If(allCatchNodes!=  null  &&  NodeUtil.hasFinally(allCatchNodes))  {	  	non-compiled	[CE]  ';'  expected	113	None	add
47	[BUG]  [BUGGY]  if(allCatchNodes!=  null  &&  NodeUtil.hasFinally(allCatchNodes))  {  if(allCatchNodes  >=  null  &&  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]          RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  &&  NodeUtil.hasFinally(allCatchNodes))  {  if(allCatchNodes  >=  null  &&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=    null    &&    NodeUtil.hasFinally(allCatchNodes))    {    if(allCatchNodes  >=  null  &&  NodeUtil.hasFinally(allCatchNodes))  {	  	non-compiled	[CE]  illegal  start  of  expression	113	None	add
48	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.get(tryBlock);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  elseBlock  =  allCatchNodes.get(tryBlock);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  elseBlock  =  allCatchNodes.get(tryBlock);	  Node    elseBlock    =    allCatchNodes.get(0);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
49	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.get(2);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  elseBlock  =  allCatchNodes.get(2);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  elseBlock  =  allCatchNodes.get(2);	  Node    elseBlock    =    allCatchNodes.get(0);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
50	[BUG]  [BUGGY]  if(!allCatchNodes.hasOneChild()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  if(!allCatchNodes.hasOneChild()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!allCatchNodes.hasOneChild()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  if(!allCatchNodes.hasOneChild()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!allCatchNodes.hasOneChild()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    if(!allCatchNodes.hasOneChild()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {	  	non-compiled	[CE]  illegal  start  of  expression	134	None	add
51	[BUG]  [BUGGY]  if(!allCatchNodes.hasOneChild()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  If(!allCatchNodes.hasOneChild()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!allCatchNodes.hasOneChild()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  If(!allCatchNodes.hasOneChild()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!allCatchNodes.hasOneChild()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    If(!allCatchNodes.hasOneChild()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {	  	non-compiled	[CE]  ';'  expected	134	None	add
52	[BUG]  [BUGGY]  if(!allCatchNodes.hasOneChild()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  if(!allCatchNodes.hasOneChild()  &&  nodeUtil.hasCatchHandler(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!allCatchNodes.hasOneChild()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  if(!allCatchNodes.hasOneChild()  &&  nodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!allCatchNodes.hasOneChild()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    if(!allCatchNodes.hasOneChild()  &&  nodeUtil.hasCatchHandler(allCatchNodes))  {	  	non-compiled	[CE]  illegal  start  of  expression	134	None	add
53	[BUG]  [BUGGY]  Preconditions.checkState(AllCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [CE]  illegal  start  of  type  [FE]        RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(AllCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(AllCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());	  Preconditions.checkState(allCatchNodes.isEmpty()    &&    allCatchNodes.isEmpty());    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
54	[BUG]  [BUGGY]  Preconditions.checkState(!allCatchNodes.isEmpty()  &&  allCatchNodes.isEmpty());  [CE]  illegal  start  of  type  [FE]          RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(!allCatchNodes.isEmpty()  &&  allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(!allCatchNodes.isEmpty()  &&  allCatchNodes.isEmpty());	  Preconditions.checkState(allCatchNodes.isEmpty()    &&    allCatchNodes.isEmpty());    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
55	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!NodeUtil.hasFinally(allCatchNodes)&&!NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	if(!NodeUtil.hasFinally(allCatchNodes)&&!NodeUtil.hasFinally(allCatchNodes))  {	  if(!NodeUtil.hasFinally(allCatchNodes)||!NodeUtil.hasFinally(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	59	6	replace
56	[BUG]  [BUGGY]  if(!NodeUtil.hasFinally(allCatchNodes)&&!NodeUtil.hasFinally(allCatchNodes))  {  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!NodeUtil.hasFinally(allCatchNodes)&&!NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!NodeUtil.hasFinally(allCatchNodes)&&!NodeUtil.hasFinally(allCatchNodes))  {	  if(!NodeUtil.hasFinally(allCatchNodes)||!NodeUtil.hasFinally(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	59	6	replace
57	[BUG]  [BUGGY]  if(!NodeUtil.isFinally(allCatchNodes)&&!NodeUtil.hasFinally(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!NodeUtil.isFinally(allCatchNodes)&&!NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!NodeUtil.isFinally(allCatchNodes)&&!NodeUtil.hasFinally(allCatchNodes))  {	  if(!NodeUtil.hasFinally(allCatchNodes)||!NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
58	[BUG]  [BUGGY]  if(!NodeUtil.isExpressionNode(allCatchNodes)||!NodeUtil.hasFinally(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!NodeUtil.isExpressionNode(allCatchNodes)||!NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!NodeUtil.isExpressionNode(allCatchNodes)||!NodeUtil.hasFinally(allCatchNodes))  {	  if(!NodeUtil.hasFinally(allCatchNodes)||!NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
59	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  preconditions.checkState(allCatchNodes.hasOneChild());  [CE]  illegal  start  of  type  [FE]                RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  preconditions.checkState(allCatchNodes.hasOneChild());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.hasOneChild());  preconditions.checkState(allCatchNodes.hasOneChild());	          Preconditions.checkState(allCatchNodes.hasOneChild());    Preconditions.checkState(allCatchNodes.hasOneChild());    preconditions.checkState(allCatchNodes.hasOneChild());    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
60	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild(),  allCatchNodes.hasOneChild());  preconditions.checkState(allCatchNodes.hasOneChild());  [CE]  illegal  start  of  type  [FE]                  RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild(),  allCatchNodes.hasOneChild());  preconditions.checkState(allCatchNodes.hasOneChild());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.hasOneChild(),  allCatchNodes.hasOneChild());  preconditions.checkState(allCatchNodes.hasOneChild());	          Preconditions.checkState(allCatchNodes.hasOneChild());    Preconditions.checkState(allCatchNodes.hasOneChild());    preconditions.checkState(allCatchNodes.hasOneChild());    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
61	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.getOneChild());  Preconditions.checkState(allCatchNodes.hasOneChild());  [CE]  illegal  start  of  type  [FE]                    RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.getOneChild());  Preconditions.checkState(allCatchNodes.hasOneChild());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.getOneChild());  Preconditions.checkState(allCatchNodes.hasOneChild());	          Preconditions.checkState(allCatchNodes.hasOneChild());    Preconditions.checkState(allCatchNodes.hasOneChild());    preconditions.checkState(allCatchNodes.hasOneChild());    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
62	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getOwnChild();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  elseBlock  =  allCatchNodes.getOwnChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  elseBlock  =  allCatchNodes.getOwnChild();	  Node    elseBlock    =    allCatchNodes.getOwnerChild();    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
63	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getOwnerChild(),  tryBlock);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  elseBlock  =  allCatchNodes.getOwnerChild(),  tryBlock);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  elseBlock  =  allCatchNodes.getOwnerChild(),  tryBlock);	  Node    elseBlock    =    allCatchNodes.getOwnerChild();    	non-compiled	[CE]  ';'  expected	109	None	replace
64	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getLowerChild();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  elseBlock  =  allCatchNodes.getLowerChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  elseBlock  =  allCatchNodes.getLowerChild();	  Node    elseBlock    =    allCatchNodes.getOwnerChild();    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
65	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkS  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkS  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkS	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    elseBlock    =    allCatchNodes.getFirstChild();    if(NodeUtil.hasCatchHandler(allCatchNodes))    {    Preconditions.checkState(allCatchNodes.hasOneChild());    	non-compiled	[CE]  ';'  expected	147	None	replace
66	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.check  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.check  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.check	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    elseBlock    =    allCatchNodes.getFirstChild();    if(NodeUtil.hasCatchHandler(allCatchNodes))    {    Preconditions.checkState(allCatchNodes.hasOneChild());    	non-compiled	[CE]  ';'  expected	147	None	replace
67	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]              AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    elseBlock    =    allCatchNodes.getFirstChild();    if(NodeUtil.hasCatchHandler(allCatchNodes))    {    Preconditions.checkState(allCatchNodes.hasOneChild());    	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	147	None	replace
68	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    elseBlock    =    allCatchNodes.getFirstChild();    if(NodeUtil.hasCatchHandler(allCatchNodes))    {    Preconditions.checkState(allCatchNodes.hasOneChild());    	non-compiled	[CE]  ';'  expected	147	None	replace
69	[BUG]  [BUGGY]  If(NodeUtil.hasFinally(allCatchNodes))  {  [CE]  ';'  expected  [FE]          RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  If(NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	If(NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.hasFinally(allCatchNodes))    {    If(NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  ';'  expected	106	None	replace
70	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild()  &&  NodeUtil.hasFinally(allCatchNodes))  {  If(NodeUtil.hasFinally(allCatchNodes))  {  [CE]  ';'  expected  [FE]            RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild()  &&  NodeUtil.hasFinally(allCatchNodes))  {  If(NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.hasOneChild()  &&  NodeUtil.hasFinally(allCatchNodes))  {  If(NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.hasFinally(allCatchNodes))    {    If(NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  ';'  expected	106	None	replace
71	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild(),  allCatchNodes.hasOneChild());  [CE]  illegal  start  of  type  [FE]              RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild(),  allCatchNodes.hasOneChild());  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.hasOneChild(),  allCatchNodes.hasOneChild());	  if(NodeUtil.hasFinally(allCatchNodes))    {    If(NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
72	[BUG]  [BUGGY]          Node    elseBlock    =    allCatchNodes.getLastChild();    Node  anotherBlock  =  allCatchNodes.getLastChild();  Node  elseBlock  =  allCatchNodes.getLastChild();  Node  anotherBlock  =  allCatchNodes.getLastChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Node    elseBlock    =    allCatchNodes.getLastChild();    Node  anotherBlock  =  allCatchNodes.getLastChild();  Node  elseBlock  =  allCatchNodes.getLastChild();  Node  anotherBlock  =  allCatchNodes.getLastChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	                Node        elseBlock        =        allCatchNodes.getLastChild();        Node    anotherBlock    =    allCatchNodes.getLastChild();    Node  elseBlock  =  allCatchNodes.getLastChild();  Node  anotherBlock  =  allCatchNodes.getLastChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	34	None	add
73	[BUG]  [BUGGY]          Node    elseBlock    =    allCatchNodes.getLastChild();    Node  anotherBlock  =  allCatchNodes.getLastChild();  Node  elseBlock  =  allCatchNodes.getLastChild();  Node  otherBlock  =  allCatchNodes.getLastChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Node    elseBlock    =    allCatchNodes.getLastChild();    Node  anotherBlock  =  allCatchNodes.getLastChild();  Node  elseBlock  =  allCatchNodes.getLastChild();  Node  otherBlock  =  allCatchNodes.getLastChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	                Node        elseBlock        =        allCatchNodes.getLastChild();        Node    anotherBlock    =    allCatchNodes.getLastChild();    Node  elseBlock  =  allCatchNodes.getLastChild();  Node  otherBlock  =  allCatchNodes.getLastChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	34	None	add
74	[BUG]  [BUGGY]          Node    elseBlock    =    allCatchNodes.getLastChild();    Node  anotherBlock  =  allCatchNodes.getLastChild();  Node  otherBlock  =  allCatchNodes.getLastChild();  Node  anotherBlock  =  allCatchNodes.getLastChild();  [CE]  variable  anotherBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Node    elseBlock    =    allCatchNodes.getLastChild();    Node  anotherBlock  =  allCatchNodes.getLastChild();  Node  otherBlock  =  allCatchNodes.getLastChild();  Node  anotherBlock  =  allCatchNodes.getLastChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	                Node        elseBlock        =        allCatchNodes.getLastChild();        Node    anotherBlock    =    allCatchNodes.getLastChild();    Node  otherBlock  =  allCatchNodes.getLastChild();  Node  anotherBlock  =  allCatchNodes.getLastChild();	  	non-compiled	[CE]  variable  anotherBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	34	None	add
75	[BUG]  [BUGGY]          Node    elseBlock    =    allCatchNodes.getLastChild();    Node  anotherBlock  =  allCatchNodes.getLastChild();  Node  elseBlock  =  allCatchNodes.getLastChild();  Node  anotherBlock  =  otherBlock.getLastChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Node    elseBlock    =    allCatchNodes.getLastChild();    Node  anotherBlock  =  allCatchNodes.getLastChild();  Node  elseBlock  =  allCatchNodes.getLastChild();  Node  anotherBlock  =  otherBlock.getLastChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	                Node        elseBlock        =        allCatchNodes.getLastChild();        Node    anotherBlock    =    allCatchNodes.getLastChild();    Node  elseBlock  =  allCatchNodes.getLastChild();  Node  anotherBlock  =  otherBlock.getLastChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	34	None	add
76	[BUG]  [BUGGY]          Node    elseBlock    =    allCatchNodes.getLastChild();    Node  anotherBlock  =  allCatchNodes.getLastChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  anotherBlock  =  allCatchNodes.getLastChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]            AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Node    elseBlock    =    allCatchNodes.getLastChild();    Node  anotherBlock  =  allCatchNodes.getLastChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  anotherBlock  =  allCatchNodes.getLastChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	                Node        elseBlock        =        allCatchNodes.getLastChild();        Node    anotherBlock    =    allCatchNodes.getLastChild();    Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  anotherBlock  =  allCatchNodes.getLastChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	34	None	add
77	[BUG]  [BUGGY]          Node    elseBlock    =    allCatchNodes.getLastChild();    Node  anotherBlock  =  allCatchNodes.getLastChild();  Node  anotherBlock  =  allCatchNodes.getLastChild();  Node  anotherBlock  =  allCatchNodes.getLastChild();  [CE]  variable  anotherBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]              AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Node    elseBlock    =    allCatchNodes.getLastChild();    Node  anotherBlock  =  allCatchNodes.getLastChild();  Node  anotherBlock  =  allCatchNodes.getLastChild();  Node  anotherBlock  =  allCatchNodes.getLastChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	                Node        elseBlock        =        allCatchNodes.getLastChild();        Node    anotherBlock    =    allCatchNodes.getLastChild();    Node  anotherBlock  =  allCatchNodes.getLastChild();  Node  anotherBlock  =  allCatchNodes.getLastChild();	  	non-compiled	[CE]  variable  anotherBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	34	None	add
78	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.hasFinally(allCatchNodes)&&    NodeUtil.hasFinally(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	9	6	replace
79	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.hasFinally(allCatchNodes)&&    NodeUtil.hasFinally(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	9	6	replace
80	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  ';'  expected  [FE]            RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.hasCatchHandler(allCatchNodes)&&    NodeUtil.hasFinally(allCatchNodes))    {    Node    allCatchNodes    =    NodeUtil.getCatchHandler(allCatchNodes)&&    NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  ';'  expected	56	None	replace
81	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  &&  NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  ';'  expected  [FE]              RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  &&  NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.isEmpty()  &&  NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.hasCatchHandler(allCatchNodes)&&    NodeUtil.hasFinally(allCatchNodes))    {    Node    allCatchNodes    =    NodeUtil.getCatchHandler(allCatchNodes)&&    NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  ';'  expected	56	None	replace
82	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes)&&  NodeUtil.isFinally(allCatchNodes))  {  [CE]  ';'  expected  [FE]                RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes)&&  NodeUtil.isFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes)&&  NodeUtil.isFinally(allCatchNodes))  {	  if(NodeUtil.hasCatchHandler(allCatchNodes)&&    NodeUtil.hasFinally(allCatchNodes))    {    Node    allCatchNodes    =    NodeUtil.getCatchHandler(allCatchNodes)&&    NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  ';'  expected	56	None	replace
83	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes.isEmpty()  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	if(allCatchNodes.isEmpty()  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(allCatchNodes.isEmpty()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    	compilable	  [FE]  AssertionFailedError  	133	2	replace
84	[BUG]  [BUGGY]  if(allCatchNodes.isEmpty()  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes.isEmpty()  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes.isEmpty()  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(allCatchNodes.isEmpty()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    	compilable	  [FE]  AssertionFailedError  	133	2	replace
85	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  &&  allCatchNodes.isEmpty()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	if(allCatchNodes!=  null  &&  allCatchNodes.isEmpty()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(allCatchNodes.isEmpty()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    	compilable	  [FE]  AssertionFailedError  	133	6	replace
86	[BUG]  [BUGGY]  if(allCatchNodes!=  null  &&  allCatchNodes.isEmpty()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  &&  allCatchNodes.isEmpty()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=  null  &&  allCatchNodes.isEmpty()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(allCatchNodes.isEmpty()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    	compilable	  [FE]  AssertionFailedError  	133	6	replace
87	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!allCatchNodes.isEmpty()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	if(!allCatchNodes.isEmpty()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(allCatchNodes.isEmpty()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    	compilable	  [FE]  AssertionFailedError  	133	2	replace
88	[BUG]  [BUGGY]  if(!allCatchNodes.isEmpty()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!allCatchNodes.isEmpty()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!allCatchNodes.isEmpty()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(allCatchNodes.isEmpty()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    	compilable	  [FE]  AssertionFailedError  	133	2	replace
89	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes).getFirstChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  [CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes).getFirstChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes).getFirstChild();  if(NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.hasFinally(allCatchNodes))    {    Node    allCatchNodes    =    NodeUtil.getCatchBlock(allCatchNodes).getFirstChild();    if(NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	185	None	replace
90	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(allCatchNodes).getFirstChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  [CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]            RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(allCatchNodes).getFirstChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(allCatchNodes).getFirstChild();  if(NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.hasFinally(allCatchNodes))    {    Node    allCatchNodes    =    NodeUtil.getCatchBlock(allCatchNodes).getFirstChild();    if(NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	185	None	replace
91	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes).getLastChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  [CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]              RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes).getLastChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes).getLastChild();  if(NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.hasFinally(allCatchNodes))    {    Node    allCatchNodes    =    NodeUtil.getCatchBlock(allCatchNodes).getFirstChild();    if(NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	185	None	replace
92	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes).getFirstChild();  if(NodeUtil.hasFinally(all  [CE]  ')'  expected  [FE]                RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes).getFirstChild();  if(NodeUtil.hasFinally(all  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.hasOneChild());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes).getFirstChild();  if(NodeUtil.hasFinally(all	  if(NodeUtil.hasFinally(allCatchNodes))    {    Node    allCatchNodes    =    NodeUtil.getCatchBlock(allCatchNodes).getFirstChild();    if(NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  ')'  expected	185	None	replace
93	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes.hasChildren()  ||  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	if(allCatchNodes.hasChildren()  ||  NodeUtil.hasFinally(allCatchNodes))  {	  if(allCatchNodes.hasChildren()    ||    NodeUtil.hasCatchHandler(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	154	2	replace
94	[BUG]  [BUGGY]  if(allCatchNodes.hasChildren()  ||  NodeUtil.hasFinally(allCatchNodes))  {  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes.hasChildren()  ||  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes.hasChildren()  ||  NodeUtil.hasFinally(allCatchNodes))  {	  if(allCatchNodes.hasChildren()    ||    NodeUtil.hasCatchHandler(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	154	2	replace
95	[BUG]  [BUGGY]  if(allCatchNodes.hasChildren()  ||  NodeUtil.hasFinally(allCatch))  {  [CE]  cannot  find  symbol  allCatch  [FE]      AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes.hasChildren()  ||  NodeUtil.hasFinally(allCatch))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes.hasChildren()  ||  NodeUtil.hasFinally(allCatch))  {	  if(allCatchNodes.hasChildren()    ||    NodeUtil.hasCatchHandler(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol  allCatch	154	None	replace
96	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);	  if(allCatchNodes!=    null    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    Node    allCatchNodes    =    NodeUtil.getCatchHandler(allCatchNodes);    	non-compiled	[CE]  illegal  start  of  type	159	None	replace
97	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes!=  null  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes!=  null  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes!=  null  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);	  if(allCatchNodes!=    null    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    Node    allCatchNodes    =    NodeUtil.getCatchHandler(allCatchNodes);    	non-compiled	[CE]  ';'  expected	159	None	replace
98	[BUG]  [BUGGY]  if(allCatchNodes!=  null  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  }  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=  null  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  }	  if(allCatchNodes!=    null    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    Node    allCatchNodes    =    NodeUtil.getCatchHandler(allCatchNodes);    	non-compiled	[CE]  illegal  start  of  type	159	None	replace
99	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes!=  null  &&  NodeUtil.hasCatchHandler(allCatchNodes));  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes!=  null  &&  NodeUtil.hasCatchHandler(allCatchNodes));  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes!=  null  &&  NodeUtil.hasCatchHandler(allCatchNodes));	  if(allCatchNodes!=    null    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    Node    allCatchNodes    =    NodeUtil.getCatchHandler(allCatchNodes);    	non-compiled	[CE]  illegal  start  of  type	159	None	replace
100	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  if(NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  if(NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(NodeUtil.hasFinally(allCatchNodes)||    NodeUtil.hasFinally(allCatchNodes))    {    if(NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
101	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  If(NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  If(NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(NodeUtil.hasFinally(allCatchNodes)||    NodeUtil.hasFinally(allCatchNodes))    {    If(NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {	  	non-compiled	[CE]  ';'  expected	4	None	add
102	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  if(allCatchNodes!=  null  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  if(allCatchNodes!=  null  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  if(allCatchNodes!=  null  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(allCatchNodes!=    null    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    Node    allCatchNodes    =    NodeUtil.getCatchHandler(allCatchNodes);    if(allCatchNodes!=    null    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    	non-compiled	[CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	158	None	replace
103	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  if(allCatchNodes!=  null  &&  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  if(allCatchNodes!=  null  &&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  if(allCatchNodes!=  null  &&  NodeUtil.hasFinally(allCatchNodes))  {	  if(allCatchNodes!=    null    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    Node    allCatchNodes    =    NodeUtil.getCatchHandler(allCatchNodes);    if(allCatchNodes!=    null    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    	non-compiled	[CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	158	None	replace
104	[BUG]  [BUGGY]  AllCatchNodes  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  if(allCatchNodes!=  null  &&  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  AllCatchNodes  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  if(allCatchNodes!=  null  &&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	AllCatchNodes  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  if(allCatchNodes!=  null  &&  NodeUtil.hasFinally(allCatchNodes))  {	  if(allCatchNodes!=    null    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    Node    allCatchNodes    =    NodeUtil.getCatchHandler(allCatchNodes);    if(allCatchNodes!=    null    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	158	None	replace
105	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(c);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(c);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(c);	  Node    allCatchNodes    =    NodeUtil.getAllCatchNodes(tryBlock);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
106	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(tryBlock,  labelName);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(tryBlock,  labelName);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(tryBlock,  labelName);	  Node    allCatchNodes    =    NodeUtil.getAllCatchNodes(tryBlock);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
107	[BUG]  [BUGGY]  if(!NodeUtil.isExpressionNode(allCatchNodes)&&!NodeUtil.isExpressionNode(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!NodeUtil.isExpressionNode(allCatchNodes)&&!NodeUtil.isExpressionNode(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!NodeUtil.isExpressionNode(allCatchNodes)&&!NodeUtil.isExpressionNode(allCatchNodes))  {	  if(!NodeUtil.hasFinally(allCatchNodes)||!NodeUtil.isExpressionNode(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
108	[BUG]  [BUGGY]  if(!NodeUtil.isExpressionNode(allCatchNodes)||!NodeUtil.isExpressionNode(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]                RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!NodeUtil.isExpressionNode(allCatchNodes)||!NodeUtil.isExpressionNode(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!NodeUtil.isExpressionNode(allCatchNodes)||!NodeUtil.isExpressionNode(allCatchNodes))  {	  if(!NodeUtil.hasFinally(allCatchNodes)||!NodeUtil.isExpressionNode(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
109	[BUG]  [BUGGY]  if(!NodeUtil.isExpressionNode(allCatchNodes)||!NodeUtil.hasExpressionNode(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]                  RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!NodeUtil.isExpressionNode(allCatchNodes)||!NodeUtil.hasExpressionNode(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!NodeUtil.isExpressionNode(allCatchNodes)||!NodeUtil.hasExpressionNode(allCatchNodes))  {	  if(!NodeUtil.hasFinally(allCatchNodes)||!NodeUtil.isExpressionNode(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
110	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getNext()  &&  tryMinimizeExits(tryBlock,  exitType,  labelName);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  elseBlock  =  allCatchNodes.getNext()  &&  tryMinimizeExits(tryBlock,  exitType,  labelName);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  elseBlock  =  allCatchNodes.getNext()  &&  tryMinimizeExits(tryBlock,  exitType,  labelName);	  Node    elseBlock    =    allCatchNodes.getNext();    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
111	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getParent();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  elseBlock  =  allCatchNodes.getParent();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  elseBlock  =  allCatchNodes.getParent();	  Node    elseBlock    =    allCatchNodes.getNext();    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
112	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.get(labelName);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  elseBlock  =  allCatchNodes.get(labelName);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  elseBlock  =  allCatchNodes.get(labelName);	  Node    elseBlock    =    allCatchNodes.get(1);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
113	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.size()  ==  0);  [CE]  illegal  start  of  type  [FE]        RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.size()  ==  0);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.size()  ==  0);	  Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.size()    >    0);    	non-compiled	[CE]  illegal  start  of  type	167	None	replace
114	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  &&  allCatchNodes.size()  >  0);  [CE]  illegal  start  of  type  [FE]          RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  &&  allCatchNodes.size()  >  0);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.isEmpty()  &&  allCatchNodes.size()  >  0);	  Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.size()    >    0);    	non-compiled	[CE]  illegal  start  of  type	167	None	replace
115	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.size()  >  1);  [CE]  illegal  start  of  type  [FE]            RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.size()  >  1);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.size()  >  1);	  Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.size()    >    0);    	non-compiled	[CE]  illegal  start  of  type	167	None	replace
116	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.size()  <  0);  [CE]  illegal  start  of  type  [FE]              RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.size()  <  0);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.size()  <  0);	  Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.size()    >    0);    	non-compiled	[CE]  illegal  start  of  type	167	None	replace
117	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!allCatchNodes.hasOneChild()  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	if(!allCatchNodes.hasOneChild()  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(!allCatchNodes.hasOneChild()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	135	2	replace
118	[BUG]  [BUGGY]  if(!allCatchNodes.hasOneChild()  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!allCatchNodes.hasOneChild()  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!allCatchNodes.hasOneChild()  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(!allCatchNodes.hasOneChild()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	135	2	replace
119	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getLastChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  Preconditions.checkS  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getLastChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  Preconditions.checkS  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getLastChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  Preconditions.checkS	          Node    elseBlock    =    allCatchNodes.getLastChild();    Node    elseBlock    =    allCatchNodes.getLastChild();    if(NodeUtil.hasFinally(allCatchNodes))    {    Preconditions.checkState(allCatchNodes.hasOneChild());    	non-compiled	[CE]  ';'  expected	174	None	replace
120	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getLastChild();  Node  elseBlock  =  allCatchNodes.getLastChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  Preconditions.  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  elseBlock  =  allCatchNodes.getLastChild();  Node  elseBlock  =  allCatchNodes.getLastChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  Preconditions.  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  elseBlock  =  allCatchNodes.getLastChild();  Node  elseBlock  =  allCatchNodes.getLastChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  Preconditions.	          Node    elseBlock    =    allCatchNodes.getLastChild();    Node    elseBlock    =    allCatchNodes.getLastChild();    if(NodeUtil.hasFinally(allCatchNodes))    {    Preconditions.checkState(allCatchNodes.hasOneChild());    	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	174	None	replace
121	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getLastChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  Preconditions.check  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getLastChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  Preconditions.check  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getLastChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  Preconditions.check	          Node    elseBlock    =    allCatchNodes.getLastChild();    Node    elseBlock    =    allCatchNodes.getLastChild();    if(NodeUtil.hasFinally(allCatchNodes))    {    Preconditions.checkState(allCatchNodes.hasOneChild());    	non-compiled	[CE]  ';'  expected	174	None	replace
122	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getLastChild();  Node  elseBlock  =  allCatchNodes.getLastChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  Preconditions  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  elseBlock  =  allCatchNodes.getLastChild();  Node  elseBlock  =  allCatchNodes.getLastChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  Preconditions  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  elseBlock  =  allCatchNodes.getLastChild();  Node  elseBlock  =  allCatchNodes.getLastChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  Preconditions	          Node    elseBlock    =    allCatchNodes.getLastChild();    Node    elseBlock    =    allCatchNodes.getLastChild();    if(NodeUtil.hasFinally(allCatchNodes))    {    Preconditions.checkState(allCatchNodes.hasOneChild());    	non-compiled	[CE]  ';'  expected	174	None	replace
123	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getLastChild();  Node  elseBlock  =  allCatchNodes.getLastChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  Preconditions.checkS  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  elseBlock  =  allCatchNodes.getLastChild();  Node  elseBlock  =  allCatchNodes.getLastChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  Preconditions.checkS  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  elseBlock  =  allCatchNodes.getLastChild();  Node  elseBlock  =  allCatchNodes.getLastChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  Preconditions.checkS	          Node    elseBlock    =    allCatchNodes.getLastChild();    Node    elseBlock    =    allCatchNodes.getLastChild();    if(NodeUtil.hasFinally(allCatchNodes))    {    Preconditions.checkState(allCatchNodes.hasOneChild());    	non-compiled	[CE]  ';'  expected	174	None	replace
124	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.getFirstChild()  ==  null);  Node  c  =  allCatchNodes.getLastChild();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.getFirstChild()  ==  null);  Node  c  =  allCatchNodes.getLastChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.getFirstChild()  ==  null);  Node  c  =  allCatchNodes.getLastChild();	          Node    c    =    allCatchNodes.getFirstChild();    Node    c    =    allCatchNodes.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
125	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  c  =  allCatchNodes.getLastChild();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  c  =  allCatchNodes.getLastChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.hasOneChild());  Node  c  =  allCatchNodes.getLastChild();	          Node    c    =    allCatchNodes.getFirstChild();    Node    c    =    allCatchNodes.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
126	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.getFirstChild()!=  null);  Node  c  =  allCatchNodes.getLastChild();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.getFirstChild()!=  null);  Node  c  =  allCatchNodes.getLastChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.getFirstChild()!=  null);  Node  c  =  allCatchNodes.getLastChild();	          Node    c    =    allCatchNodes.getFirstChild();    Node    c    =    allCatchNodes.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
127	[BUG]  [BUGGY]  if(allCatchNodes.hasChildren()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  if(allCatchNodes.hasChildren()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes.hasChildren()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  if(allCatchNodes.hasChildren()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes.hasChildren()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    if(allCatchNodes.hasChildren()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {	  	non-compiled	[CE]  illegal  start  of  expression	128	None	add
128	[BUG]  [BUGGY]  if(allCatchNodes.hasChildren()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  If(allCatchNodes.hasChildren()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes.hasChildren()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  If(allCatchNodes.hasChildren()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes.hasChildren()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    If(allCatchNodes.hasChildren()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {	  	non-compiled	[CE]  ';'  expected	128	None	add
129	[BUG]  [BUGGY]  if(allCatchNodes.hasChildren()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  if(allCatchNodes.isChildren()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes.hasChildren()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  if(allCatchNodes.isChildren()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes.hasChildren()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    if(allCatchNodes.isChildren()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {	  	non-compiled	[CE]  illegal  start  of  expression	128	None	add
130	[BUG]  [BUGGY]  if(allCatchNodes.isEmpty())  {  if(NodeUtil.hasFinally(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]        RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes.isEmpty())  {  if(NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes.isEmpty())  {  if(NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.hasFinally(allCatchNodes))    {    if(NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
131	[BUG]  [BUGGY]  Preconditions.checkArgument(allCatchNodes.isEmpty()  ||  tryMinimizeExits(allCatchNodes.getFirstChild(),  exitType,  labelName));  [CE]  illegal  start  of  type  [FE]            RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkArgument(allCatchNodes.isEmpty()  ||  tryMinimizeExits(allCatchNodes.getFirstChild(),  exitType,  labelName));  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkArgument(allCatchNodes.isEmpty()  ||  tryMinimizeExits(allCatchNodes.getFirstChild(),  exitType,  labelName));	  Preconditions.checkArgument(allCatchNodes.isEmpty());    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
132	[BUG]  [BUGGY]  Preconditions.checkArgument(allCatchNodes.isEmpty()  &&  tryMinimizeExits(allCatchNodes.getFirstChild(),  exitType,  labelName));  [CE]  illegal  start  of  type  [FE]              RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkArgument(allCatchNodes.isEmpty()  &&  tryMinimizeExits(allCatchNodes.getFirstChild(),  exitType,  labelName));  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkArgument(allCatchNodes.isEmpty()  &&  tryMinimizeExits(allCatchNodes.getFirstChild(),  exitType,  labelName));	  Preconditions.checkArgument(allCatchNodes.isEmpty());    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
133	[BUG]  [BUGGY]  if(allCatchNodes.hasOneChild()  ||!NodeUtil.hasFinally(allCatchNodes))  {  if(allCatchNodes.hasOneChild()  ||!NodeUtil.hasFinally(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes.hasOneChild()  ||!NodeUtil.hasFinally(allCatchNodes))  {  if(allCatchNodes.hasOneChild()  ||!NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes.hasOneChild()    ||!NodeUtil.hasFinally(allCatchNodes))    {    if(allCatchNodes.hasOneChild()  ||!NodeUtil.hasFinally(allCatchNodes))  {	  	non-compiled	[CE]  illegal  start  of  expression	60	None	add
134	[BUG]  [BUGGY]  if(allCatchNodes.hasOneChild()  ||!NodeUtil.hasFinally(allCatchNodes))  {  If(allCatchNodes.hasOneChild()  ||!NodeUtil.hasFinally(allCatchNodes))  {  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes.hasOneChild()  ||!NodeUtil.hasFinally(allCatchNodes))  {  If(allCatchNodes.hasOneChild()  ||!NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes.hasOneChild()    ||!NodeUtil.hasFinally(allCatchNodes))    {    If(allCatchNodes.hasOneChild()  ||!NodeUtil.hasFinally(allCatchNodes))  {	  	non-compiled	[CE]  ';'  expected	60	None	add
135	[BUG]  [BUGGY]  if(allCatchNodes.hasOneChild()  ||!NodeUtil.hasFinally(allCatchNodes))  {  if(allCatchNodes.hasOneChild()  ||!NodeUtil.isFinally(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]        RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes.hasOneChild()  ||!NodeUtil.hasFinally(allCatchNodes))  {  if(allCatchNodes.hasOneChild()  ||!NodeUtil.isFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes.hasOneChild()    ||!NodeUtil.hasFinally(allCatchNodes))    {    if(allCatchNodes.hasOneChild()  ||!NodeUtil.isFinally(allCatchNodes))  {	  	non-compiled	[CE]  illegal  start  of  expression	60	None	add
136	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.hasCatchHandler(allCatchNodes)&&    NodeUtil.hasFinally(allCatchNodes))    {    Node    allCatchNodes    =    NodeUtil.getCatchHandler(allCatchNodes);    if(NodeUtil.hasCatchHandler(allCatchNodes)&&    NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	156	None	replace
137	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  if(NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  if(NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  if(NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.hasCatchHandler(allCatchNodes)&&    NodeUtil.hasFinally(allCatchNodes))    {    Node    allCatchNodes    =    NodeUtil.getCatchHandler(allCatchNodes);    if(NodeUtil.hasCatchHandler(allCatchNodes)&&    NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	156	None	replace
138	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(allCatch  [CE]  ')'  expected  [FE]            RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(allCatch  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(allCatch	  if(NodeUtil.hasCatchHandler(allCatchNodes)&&    NodeUtil.hasFinally(allCatchNodes))    {    Node    allCatchNodes    =    NodeUtil.getCatchHandler(allCatchNodes);    if(NodeUtil.hasCatchHandler(allCatchNodes)&&    NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  ')'  expected	156	None	replace
139	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(all  [CE]  ')'  expected  [FE]              RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(all  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(all	  if(NodeUtil.hasCatchHandler(allCatchNodes)&&    NodeUtil.hasFinally(allCatchNodes))    {    Node    allCatchNodes    =    NodeUtil.getCatchHandler(allCatchNodes);    if(NodeUtil.hasCatchHandler(allCatchNodes)&&    NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  ')'  expected	156	None	replace
140	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes)  [CE]  ')'  expected  [FE]                RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes)  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes)	  if(NodeUtil.hasCatchHandler(allCatchNodes)&&    NodeUtil.hasFinally(allCatchNodes))    {    Node    allCatchNodes    =    NodeUtil.getCatchHandler(allCatchNodes);    if(NodeUtil.hasCatchHandler(allCatchNodes)&&    NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  ')'  expected	156	None	replace
141	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getLastChild());  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getLastChild());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getLastChild());	          Node    elseBlock    =    allCatchNodes.getLastChild();    Node    elseBlock    =    allCatchNodes.getLastChild());    	non-compiled	[CE]  ';'  expected	211	None	replace
142	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getLastChild();  Node  elseBlock  =  allCatchNodes.getLastChild(),  tryBlock);  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  elseBlock  =  allCatchNodes.getLastChild();  Node  elseBlock  =  allCatchNodes.getLastChild(),  tryBlock);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  elseBlock  =  allCatchNodes.getLastChild();  Node  elseBlock  =  allCatchNodes.getLastChild(),  tryBlock);	          Node    elseBlock    =    allCatchNodes.getLastChild();    Node    elseBlock    =    allCatchNodes.getLastChild());    	non-compiled	[CE]  ';'  expected	211	None	replace
143	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes  ==  null  &&  allCatchNodes.isEmpty());  [CE]  illegal  start  of  type  [FE]          RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes  ==  null  &&  allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes  ==  null  &&  allCatchNodes.isEmpty());	  Preconditions.checkState(allCatchNodes!=    null    &&    allCatchNodes.isEmpty());    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
144	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes  ==  null  ||  allCatchNodes.isEmpty());  [CE]  illegal  start  of  type  [FE]            RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes  ==  null  ||  allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes  ==  null  ||  allCatchNodes.isEmpty());	  Preconditions.checkState(allCatchNodes!=    null    &&    allCatchNodes.isEmpty());    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
145	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes!=  null,  allCatchNodes.isEmpty());  [CE]  illegal  start  of  type  [FE]              RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes!=  null,  allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes!=  null,  allCatchNodes.isEmpty());	  Preconditions.checkState(allCatchNodes!=    null    &&    allCatchNodes.isEmpty());    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
146	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getLastChild();  Node  elseBlock  =  allCatchNodes.getLastChild();  if(NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  elseBlock  =  allCatchNodes.getLastChild();  Node  elseBlock  =  allCatchNodes.getLastChild();  if(NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  elseBlock  =  allCatchNodes.getLastChild();  Node  elseBlock  =  allCatchNodes.getLastChild();  if(NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions	          Node    elseBlock    =    allCatchNodes.getLastChild();    Node    elseBlock    =    allCatchNodes.getLastChild();    if(NodeUtil.hasCatchHandler(allCatchNodes))    {    Preconditions.checkState(allCatchNodes.hasOneChild());    }    	non-compiled	[CE]  ';'  expected	178	None	replace
147	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getLastChild();  if(NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                  AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getLastChild();  if(NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getLastChild();  if(NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.	          Node    elseBlock    =    allCatchNodes.getLastChild();    Node    elseBlock    =    allCatchNodes.getLastChild();    if(NodeUtil.hasCatchHandler(allCatchNodes))    {    Preconditions.checkState(allCatchNodes.hasOneChild());    }    	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	178	None	replace
148	[BUG]  [BUGGY]  if(NodeUtil.isCatchBlock(allCatchNodes)&&  tryMinimizeExits(allCatchNodes.getFirstChild(),  exitType,  labelName))  {  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(NodeUtil.isCatchBlock(allCatchNodes)&&  tryMinimizeExits(allCatchNodes.getFirstChild(),  exitType,  labelName))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(NodeUtil.isCatchBlock(allCatchNodes)&&  tryMinimizeExits(allCatchNodes.getFirstChild(),  exitType,  labelName))  {	  if(NodeUtil.isCatchBlock(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	225	None	replace
149	[BUG]  [BUGGY]  if(NodeUtil.isCatchBlock(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(NodeUtil.isCatchBlock(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(NodeUtil.isCatchBlock(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.isCatchBlock(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	225	None	replace
150	[BUG]  [BUGGY]  if(!NodeUtil.isCatchBlock(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!NodeUtil.isCatchBlock(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!NodeUtil.isCatchBlock(allCatchNodes))  {	  if(NodeUtil.isCatchBlock(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	225	None	replace
151	[BUG]  [BUGGY]  if(NodeUtil.isCatchBlock(allCatchNodes,  tryBlock))  {  [CE]  cannot  find  symbol  [FE]                RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(NodeUtil.isCatchBlock(allCatchNodes,  tryBlock))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(NodeUtil.isCatchBlock(allCatchNodes,  tryBlock))  {	  if(NodeUtil.isCatchBlock(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	225	None	replace
152	[BUG]  [BUGGY]  if(NodeUtil.isCatchBlock(allCatchNodes)||!NodeUtil.hasFinally(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]                  RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(NodeUtil.isCatchBlock(allCatchNodes)||!NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(NodeUtil.isCatchBlock(allCatchNodes)||!NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.isCatchBlock(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	225	None	replace
153	[BUG]  [BUGGY]  if(allCatchNodes  ==  null  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  if(allCatchNodes  ==  null  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes  ==  null  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  if(allCatchNodes  ==  null  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes    ==    null    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    if(allCatchNodes  ==  null  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {	  	non-compiled	[CE]  illegal  start  of  expression	115	None	add
154	[BUG]  [BUGGY]  if(allCatchNodes  ==  null  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  if(allCatchNodes!=  null  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes  ==  null  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  if(allCatchNodes!=  null  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes    ==    null    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    if(allCatchNodes!=  null  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {	  	non-compiled	[CE]  illegal  start  of  expression	115	None	add
155	[BUG]  [BUGGY]  if(allCatchNodes  ==  null  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  If(allCatchNodes  ==  null  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes  ==  null  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  If(allCatchNodes  ==  null  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes    ==    null    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    If(allCatchNodes  ==  null  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {	  	non-compiled	[CE]  ';'  expected	115	None	add
156	[BUG]  [BUGGY]  if(allCatchNodes  ==  null  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes  ==  null  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes    ==    null    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);	  	non-compiled	[CE]  illegal  start  of  expression	115	None	add
157	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getLastChild();  if(NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getLastChild();  if(NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getLastChild();  if(NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions	          Node    elseBlock    =    allCatchNodes.getLastChild();    Node    elseBlock    =    allCatchNodes.getLastChild();    if(NodeUtil.hasCatchHandler(allCatchNodes))    {    Preconditions.checkState(allCatchNodes.hasOneChild());    	non-compiled	[CE]  ';'  expected	175	None	replace
158	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getLastChild();  if(NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkS  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getLastChild();  if(NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkS  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getLastChild();  if(NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkS	          Node    elseBlock    =    allCatchNodes.getLastChild();    Node    elseBlock    =    allCatchNodes.getLastChild();    if(NodeUtil.hasCatchHandler(allCatchNodes))    {    Preconditions.checkState(allCatchNodes.hasOneChild());    	non-compiled	[CE]  ';'  expected	175	None	replace
159	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  otherBlock  =  allCatchNodes.getLastChild();  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  otherBlock  =  allCatchNodes.getLastChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  otherBlock  =  allCatchNodes.getLastChild();	          Node    elseBlock    =    allCatchNodes.getLastChild();    Node    otherBlock    =    allCatchNodes.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
160	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getLastChild();  Node  otherBlock  =  allCatchNodes.getFirstChild();  [CE]  illegal  start  of  type  [FE]      AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  elseBlock  =  allCatchNodes.getLastChild();  Node  otherBlock  =  allCatchNodes.getFirstChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  elseBlock  =  allCatchNodes.getLastChild();  Node  otherBlock  =  allCatchNodes.getFirstChild();	          Node    elseBlock    =    allCatchNodes.getLastChild();    Node    otherBlock    =    allCatchNodes.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
161	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.get(0);  Node  otherBlock  =  allCatchNodes.getLastChild();  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  elseBlock  =  allCatchNodes.get(0);  Node  otherBlock  =  allCatchNodes.getLastChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  elseBlock  =  allCatchNodes.get(0);  Node  otherBlock  =  allCatchNodes.getLastChild();	          Node    elseBlock    =    allCatchNodes.getLastChild();    Node    otherBlock    =    allCatchNodes.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
162	[BUG]  [BUGGY]  If(!NodeUtil.hasFinally(allCatchNodes))  {  [CE]  ';'  expected  [FE]          RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  If(!NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	If(!NodeUtil.hasFinally(allCatchNodes))  {	  if(!NodeUtil.hasFinally(allCatchNodes))    {    If(!NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  ';'  expected	49	None	replace
163	[BUG]  [BUGGY]  if(!NodeUtil.isExpressionNode(allCatchNodes)&&!NodeUtil.hasExpressionNode(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]                RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!NodeUtil.isExpressionNode(allCatchNodes)&&!NodeUtil.hasExpressionNode(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!NodeUtil.isExpressionNode(allCatchNodes)&&!NodeUtil.hasExpressionNode(allCatchNodes))  {	  if(!NodeUtil.hasFinally(allCatchNodes)&&!NodeUtil.isExpressionNode(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
164	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  &&  allCatchNodes.hasOneChild()  &&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	if(allCatchNodes!=  null  &&  allCatchNodes.hasOneChild()  &&  NodeUtil.hasFinally(allCatchNodes))  {	  if(allCatchNodes!=    null    &&    allCatchNodes.hasOneChild()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	152	6	replace
165	[BUG]  [BUGGY]  if(allCatchNodes!=  null  &&  allCatchNodes.hasOneChild()  &&  NodeUtil.hasFinally(allCatchNodes))  {  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  &&  allCatchNodes.hasOneChild()  &&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=  null  &&  allCatchNodes.hasOneChild()  &&  NodeUtil.hasFinally(allCatchNodes))  {	  if(allCatchNodes!=    null    &&    allCatchNodes.hasOneChild()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	152	6	replace
166	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  &&  allCatchNodes.hasOneChild()  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	if(allCatchNodes!=  null  &&  allCatchNodes.hasOneChild()  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(allCatchNodes!=    null    &&    allCatchNodes.hasOneChild()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    	compilable	  [FE]  AssertionFailedError  	152	2	replace
167	[BUG]  [BUGGY]  if(allCatchNodes!=  null  &&  allCatchNodes.hasOneChild()  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  &&  allCatchNodes.hasOneChild()  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=  null  &&  allCatchNodes.hasOneChild()  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(allCatchNodes!=    null    &&    allCatchNodes.hasOneChild()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    	compilable	  [FE]  AssertionFailedError  	152	2	replace
168	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  ||  allCatchNodes.hasOneChild()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	if(allCatchNodes!=  null  ||  allCatchNodes.hasOneChild()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(allCatchNodes!=    null    &&    allCatchNodes.hasOneChild()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	152	2	replace
169	[BUG]  [BUGGY]  if(allCatchNodes!=  null  ||  allCatchNodes.hasOneChild()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  ||  allCatchNodes.hasOneChild()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=  null  ||  allCatchNodes.hasOneChild()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(allCatchNodes!=    null    &&    allCatchNodes.hasOneChild()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	152	2	replace
170	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  &&  allCatchNodes.hasChildren()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	if(allCatchNodes!=  null  &&  allCatchNodes.hasChildren()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(allCatchNodes!=    null    &&    allCatchNodes.hasOneChild()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    	compilable	  [FE]  AssertionFailedError  	152	2	replace
171	[BUG]  [BUGGY]  if(allCatchNodes!=  null  &&  allCatchNodes.hasChildren()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  &&  allCatchNodes.hasChildren()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=  null  &&  allCatchNodes.hasChildren()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(allCatchNodes!=    null    &&    allCatchNodes.hasOneChild()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    	compilable	  [FE]  AssertionFailedError  	152	2	replace
172	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]        RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(NodeUtil.isExpressionNode(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(NodeUtil.isExpressionNode(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.isExpressionNode(allCatchNodes)&&    NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	170	None	replace
173	[BUG]  [BUGGY]  if(!NodeUtil.isExpressionNode(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!NodeUtil.isExpressionNode(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!NodeUtil.isExpressionNode(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.isExpressionNode(allCatchNodes)&&    NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	170	None	replace
174	[BUG]  [BUGGY]  if(AllCatchNodes.isExpressionNode(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  cannot  find  symbol  AllCatchNodes  [FE]            RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(AllCatchNodes.isExpressionNode(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(AllCatchNodes.isExpressionNode(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.isExpressionNode(allCatchNodes)&&    NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol  AllCatchNodes	170	None	replace
175	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  preconditions.checkState(allCatchNodes.isEmpty()  ||  ALLCatchNodes.isEmpty());  [CE]  illegal  start  of  type  [FE]              RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  preconditions.checkState(allCatchNodes.isEmpty()  ||  ALLCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  preconditions.checkState(allCatchNodes.isEmpty()  ||  ALLCatchNodes.isEmpty());	          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkState(allCatchNodes.isEmpty()    ||    ALLCatchNodes.isEmpty());    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
176	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  &&  allCatchNodes.isEmpty());  Preconditions.checkState(allCatchNodes.isEmpty()  ||  ALLCatchNodes.isEmpty());  [CE]  illegal  start  of  type  [FE]                RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  &&  allCatchNodes.isEmpty());  Preconditions.checkState(allCatchNodes.isEmpty()  ||  ALLCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.isEmpty()  &&  allCatchNodes.isEmpty());  Preconditions.checkState(allCatchNodes.isEmpty()  ||  ALLCatchNodes.isEmpty());	          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkState(allCatchNodes.isEmpty()    ||    ALLCatchNodes.isEmpty());    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
177	[BUG]  [BUGGY]  if(!NodeUtil.hasCatchHandler(allCatchNodes)&&  tryBlock.isTree())  {  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!NodeUtil.hasCatchHandler(allCatchNodes)&&  tryBlock.isTree())  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!NodeUtil.hasCatchHandler(allCatchNodes)&&  tryBlock.isTree())  {	  if(!NodeUtil.hasCatchHandler(allCatchNodes)&&    n.isTree())    {    	non-compiled	[CE]  cannot  find  symbol	203	None	replace
178	[BUG]  [BUGGY]  if(!NodeUtil.hasCatchHandler(allCatchNodes)&&  allCatchNodes.isTree())  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!NodeUtil.hasCatchHandler(allCatchNodes)&&  allCatchNodes.isTree())  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!NodeUtil.hasCatchHandler(allCatchNodes)&&  allCatchNodes.isTree())  {	  if(!NodeUtil.hasCatchHandler(allCatchNodes)&&    n.isTree())    {    	non-compiled	[CE]  cannot  find  symbol	203	None	replace
179	[BUG]  [BUGGY]  if(!NodeUtil.isCatchHandler(allCatchNodes)&&  n.isTree())  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!NodeUtil.isCatchHandler(allCatchNodes)&&  n.isTree())  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!NodeUtil.isCatchHandler(allCatchNodes)&&  n.isTree())  {	  if(!NodeUtil.hasCatchHandler(allCatchNodes)&&    n.isTree())    {    	non-compiled	[CE]  cannot  find  symbol	203	None	replace
180	[BUG]  [BUGGY]  if(!NodeUtil.hasCatchHandler(n)&&  allCatchNodes.isTree())  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!NodeUtil.hasCatchHandler(n)&&  allCatchNodes.isTree())  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!NodeUtil.hasCatchHandler(n)&&  allCatchNodes.isTree())  {	  if(!NodeUtil.hasCatchHandler(allCatchNodes)&&    n.isTree())    {    	non-compiled	[CE]  cannot  find  symbol	203	None	replace
181	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  Preconditions.checkS  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  Preconditions.checkS  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  Preconditions.checkS	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    elseBlock    =    allCatchNodes.getFirstChild();    if(NodeUtil.hasFinally(allCatchNodes))    {    Preconditions.checkState(allCatchNodes.isEmpty());    	non-compiled	[CE]  ';'  expected	226	None	replace
182	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  Preconditions.checkState(allCatch  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  Preconditions.checkState(allCatch  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  Preconditions.checkState(allCatch	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    elseBlock    =    allCatchNodes.getFirstChild();    if(NodeUtil.hasFinally(allCatchNodes))    {    Preconditions.checkState(allCatchNodes.isEmpty());    	non-compiled	[CE]  ')'  expected	226	None	replace
183	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  Preconditions.  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  Preconditions.  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  Preconditions.	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    elseBlock    =    allCatchNodes.getFirstChild();    if(NodeUtil.hasFinally(allCatchNodes))    {    Preconditions.checkState(allCatchNodes.isEmpty());    	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	226	None	replace
184	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  Preconditions.check  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  Preconditions.check  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  Preconditions.check	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    elseBlock    =    allCatchNodes.getFirstChild();    if(NodeUtil.hasFinally(allCatchNodes))    {    Preconditions.checkState(allCatchNodes.isEmpty());    	non-compiled	[CE]  ';'  expected	226	None	replace
185	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!NodeUtil.hasCatchHandler(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	if(!NodeUtil.hasCatchHandler(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.hasCatchHandler(allCatchNodes)||    NodeUtil.hasFinally(allCatchNodes))    {    if(NodeUtil.hasCatchHandler(allCatchNodes)||    NodeUtil.hasFinally(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	124	6	replace
186	[BUG]  [BUGGY]  if(!NodeUtil.hasCatchHandler(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  [FE]  RuntimeException  [FE]        RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!NodeUtil.hasCatchHandler(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!NodeUtil.hasCatchHandler(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.hasCatchHandler(allCatchNodes)||    NodeUtil.hasFinally(allCatchNodes))    {    if(NodeUtil.hasCatchHandler(allCatchNodes)||    NodeUtil.hasFinally(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	124	6	replace
187	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	if(!NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.hasCatchHandler(allCatchNodes)||    NodeUtil.hasFinally(allCatchNodes))    {    if(NodeUtil.hasCatchHandler(allCatchNodes)||    NodeUtil.hasFinally(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	124	6	replace
188	[BUG]  [BUGGY]  if(!NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.hasCatchHandler(allCatchNodes)||    NodeUtil.hasFinally(allCatchNodes))    {    if(NodeUtil.hasCatchHandler(allCatchNodes)||    NodeUtil.hasFinally(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	124	6	replace
189	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  ||  tryBlock.isTree());  [CE]  illegal  start  of  type  [FE]        RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  ||  tryBlock.isTree());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.isEmpty()  ||  tryBlock.isTree());	  Preconditions.checkState(allCatchNodes.isEmpty()    ||    n.isTree());    	non-compiled	[CE]  illegal  start  of  type	197	None	replace
190	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  &&  n.isTree());  [CE]  illegal  start  of  type  [FE]          RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  &&  n.isTree());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.isEmpty()  &&  n.isTree());	  Preconditions.checkState(allCatchNodes.isEmpty()    ||    n.isTree());    	non-compiled	[CE]  illegal  start  of  type	197	None	replace
191	[BUG]  [BUGGY]  Preconditions.checkState(n.isEmpty()  ||  allCatchNodes.isTree());  [CE]  illegal  start  of  type  [FE]            RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(n.isEmpty()  ||  allCatchNodes.isTree());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(n.isEmpty()  ||  allCatchNodes.isTree());	  Preconditions.checkState(allCatchNodes.isEmpty()    ||    n.isTree());    	non-compiled	[CE]  illegal  start  of  type	197	None	replace
192	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isTree());  [CE]  illegal  start  of  type  [FE]              RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isTree());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isTree());	  Preconditions.checkState(allCatchNodes.isEmpty()    ||    n.isTree());    	non-compiled	[CE]  illegal  start  of  type	197	None	replace
193	[BUG]  [BUGGY]  Node  allCatchNodes.hasOneChild();  [CE]  ';'  expected  [FE]        RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  allCatchNodes.hasOneChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes.hasOneChild();	          Preconditions.checkState(allCatchNodes.hasOneChild());    Node    allCatchNodes.hasOneChild();    	non-compiled	[CE]  ';'  expected	165	None	replace
194	[BUG]  [BUGGY]  Node  allCatchNodes  =  allCatchNodes.getFirstChild();  [CE]  illegal  start  of  type  [FE]          RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  allCatchNodes  =  allCatchNodes.getFirstChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes  =  allCatchNodes.getFirstChild();	          Preconditions.checkState(allCatchNodes.hasOneChild());    Node    allCatchNodes.hasOneChild();    	non-compiled	[CE]  illegal  start  of  type	165	None	replace
195	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  allCatchNodes.removeChild(allCatchNodes);  [CE]  ';'  expected  [FE]            RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  allCatchNodes.removeChild(allCatchNodes);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.hasOneChild());  Node  allCatchNodes.removeChild(allCatchNodes);	          Preconditions.checkState(allCatchNodes.hasOneChild());    Node    allCatchNodes.hasOneChild();    	non-compiled	[CE]  ';'  expected	165	None	replace
196	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  preconditions.checkState(allCatchNodes.hasOneChild());  [CE]  illegal  start  of  type  [FE]        RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  preconditions.checkState(allCatchNodes.hasOneChild());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  preconditions.checkState(allCatchNodes.hasOneChild());	          Preconditions.checkState(allCatchNodes.hasOneChild());    Node    allCatchNodes    =    NodeUtil.getCatchBlock(n);    preconditions.checkState(allCatchNodes.hasOneChild());    	non-compiled	[CE]  illegal  start  of  type	220	None	replace
197	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.hasFinally()  &&  tryMinimizeExits(tryBlock,  exitType,  labelName));  [CE]  illegal  start  of  type  [FE]            RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.hasFinally()  &&  tryMinimizeExits(tryBlock,  exitType,  labelName));  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.hasFinally()  &&  tryMinimizeExits(tryBlock,  exitType,  labelName));	  Preconditions.checkState(allCatchNodes.hasFinally());    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
198	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.hasFinally()  ||  allCatchNodes.hasFinally());  [CE]  illegal  start  of  type  [FE]              RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.hasFinally()  ||  allCatchNodes.hasFinally());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.hasFinally()  ||  allCatchNodes.hasFinally());	  Preconditions.checkState(allCatchNodes.hasFinally());    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
199	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.hasFinally(),  exitType);  [CE]  illegal  start  of  type  [FE]                RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.hasFinally(),  exitType);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.hasFinally(),  exitType);	  Preconditions.checkState(allCatchNodes.hasFinally());    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
200	[BUG]  [BUGGY]  if(NodeUtil.isCatchHandler(allCatchNodes)&&  NodeUtil.isFinally(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(NodeUtil.isCatchHandler(allCatchNodes)&&  NodeUtil.isFinally(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(NodeUtil.isCatchHandler(allCatchNodes)&&  NodeUtil.isFinally(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.hasCatchHandler(allCatchNodes)&&    NodeUtil.isFinally(allCatchNodes)||    NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	218	None	replace
201	[BUG]  [BUGGY]  if(NodeUtil.hasCatchHandler(allCatchNodes)||  NodeUtil.isFinally(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(NodeUtil.hasCatchHandler(allCatchNodes)||  NodeUtil.isFinally(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(NodeUtil.hasCatchHandler(allCatchNodes)||  NodeUtil.isFinally(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.hasCatchHandler(allCatchNodes)&&    NodeUtil.isFinally(allCatchNodes)||    NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	218	None	replace
202	[BUG]  [BUGGY]  if(!NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.isFinally(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.isFinally(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.isFinally(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.hasCatchHandler(allCatchNodes)&&    NodeUtil.isFinally(allCatchNodes)||    NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	218	None	replace
203	[BUG]  [BUGGY]  if(NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.isName(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.isName(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.isName(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.hasCatchHandler(allCatchNodes)&&    NodeUtil.isFinally(allCatchNodes)||    NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	218	None	replace
204	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(tryBlock,  allCatchNodes,  labelName);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(tryBlock,  allCatchNodes,  labelName);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(tryBlock,  allCatchNodes,  labelName);	  Node    allCatchNodes    =    NodeUtil.getAllCatchNodes(tryBlock,    allCatchNodes);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
205	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(labelName,  allCatchNodes);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(labelName,  allCatchNodes);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(labelName,  allCatchNodes);	  Node    allCatchNodes    =    NodeUtil.getAllCatchNodes(tryBlock,    allCatchNodes);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
206	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(allCatchNodes,  tryBlock);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(allCatchNodes,  tryBlock);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(allCatchNodes,  tryBlock);	  Node    allCatchNodes    =    NodeUtil.getAllCatchNodes(tryBlock,    allCatchNodes);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
207	[BUG]  [BUGGY]  if(NodeUtil.isFinally(allCatchNodes)||  NodeUtil.isExpressionNode(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(NodeUtil.isFinally(allCatchNodes)||  NodeUtil.isExpressionNode(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(NodeUtil.isFinally(allCatchNodes)||  NodeUtil.isExpressionNode(allCatchNodes))  {	  if(NodeUtil.hasFinally(allCatchNodes)||    NodeUtil.isExpressionNode(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
208	[BUG]  [BUGGY]  if(NodeUtil.isFinally(allCatchNodes)&&  NodeUtil.isExpressionNode(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]        RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(NodeUtil.isFinally(allCatchNodes)&&  NodeUtil.isExpressionNode(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(NodeUtil.isFinally(allCatchNodes)&&  NodeUtil.isExpressionNode(allCatchNodes))  {	  if(NodeUtil.hasFinally(allCatchNodes)&&    NodeUtil.isExpressionNode(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	224	None	replace
209	[BUG]  [BUGGY]  if(!NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.isExpressionNode(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.isExpressionNode(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.isExpressionNode(allCatchNodes))  {	  if(NodeUtil.hasFinally(allCatchNodes)&&    NodeUtil.isExpressionNode(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	224	None	replace
210	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  anotherBlock  =  allCatchNodes.getLastChild();  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  anotherBlock  =  allCatchNodes.getLastChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  anotherBlock  =  allCatchNodes.getLastChild();	          Node    elseBlock    =    allCatchNodes.getLastChild();    Node    anotherBlock    =    allCatchNodes.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
211	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getLastChild();  Node  anotherBlock  =  allCatchNodes.getFirstChild();  [CE]  illegal  start  of  type  [FE]      AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  elseBlock  =  allCatchNodes.getLastChild();  Node  anotherBlock  =  allCatchNodes.getFirstChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  elseBlock  =  allCatchNodes.getLastChild();  Node  anotherBlock  =  allCatchNodes.getFirstChild();	          Node    elseBlock    =    allCatchNodes.getLastChild();    Node    anotherBlock    =    allCatchNodes.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
212	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.get(0);  Node  anotherBlock  =  allCatchNodes.getLastChild();  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  elseBlock  =  allCatchNodes.get(0);  Node  anotherBlock  =  allCatchNodes.getLastChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  elseBlock  =  allCatchNodes.get(0);  Node  anotherBlock  =  allCatchNodes.getLastChild();	          Node    elseBlock    =    allCatchNodes.getLastChild();    Node    anotherBlock    =    allCatchNodes.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
213	[BUG]  [BUGGY]  Node  catchNode  =  n.removeFirstChild();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  catchNode  =  n.removeFirstChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  catchNode  =  n.removeFirstChild();	  Node    catchNode    =    allCatchNodes.removeFirstChild();    	non-compiled	[CE]  illegal  start  of  type	198	None	replace
214	[BUG]  [BUGGY]  Node  catchNode  =  allCatchNodes.removeFirstChild(),  tryBlock);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  catchNode  =  allCatchNodes.removeFirstChild(),  tryBlock);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  catchNode  =  allCatchNodes.removeFirstChild(),  tryBlock);	  Node    catchNode    =    allCatchNodes.removeFirstChild();    	non-compiled	[CE]  ';'  expected	198	None	replace
215	[BUG]  [BUGGY]  if(allCatchNodes.hasOneChild()  ||!NodeUtil.hasCatchHandler(allCatchNodes))  {  if(allCatchNodes.hasOneChild()  ||!NodeUtil.hasCatchHandler(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes.hasOneChild()  ||!NodeUtil.hasCatchHandler(allCatchNodes))  {  if(allCatchNodes.hasOneChild()  ||!NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes.hasOneChild()    ||!NodeUtil.hasCatchHandler(allCatchNodes))    {    if(allCatchNodes.hasOneChild()  ||!NodeUtil.hasCatchHandler(allCatchNodes))  {	  	non-compiled	[CE]  illegal  start  of  expression	85	None	add
216	[BUG]  [BUGGY]  if(allCatchNodes.hasOneChild()  ||!NodeUtil.hasCatchHandler(allCatchNodes))  {  If(allCatchNodes.hasOneChild()  ||!NodeUtil.hasCatchHandler(allCatchNodes))  {  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes.hasOneChild()  ||!NodeUtil.hasCatchHandler(allCatchNodes))  {  If(allCatchNodes.hasOneChild()  ||!NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes.hasOneChild()    ||!NodeUtil.hasCatchHandler(allCatchNodes))    {    If(allCatchNodes.hasOneChild()  ||!NodeUtil.hasCatchHandler(allCatchNodes))  {	  	non-compiled	[CE]  ';'  expected	85	None	add
217	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Preconditions.checkNotNull(allCatchNodes.getFirstChild());  [CE]  illegal  start  of  type  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Preconditions.checkNotNull(allCatchNodes.getFirstChild());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.hasOneChild());  Preconditions.checkNotNull(allCatchNodes.getFirstChild());	          Preconditions.checkState(allCatchNodes.hasOneChild());    Preconditions.checkNotNull(allCatchNodes.hasOneChild());    	non-compiled	[CE]  illegal  start  of  type	223	None	replace
218	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.hasChildren());  Preconditions.checkNotNull(allCatchNodes.hasChildren());  [CE]  illegal  start  of  type  [FE]      RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.hasChildren());  Preconditions.checkNotNull(allCatchNodes.hasChildren());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.hasChildren());  Preconditions.checkNotNull(allCatchNodes.hasChildren());	          Preconditions.checkState(allCatchNodes.hasOneChild());    Preconditions.checkNotNull(allCatchNodes.hasOneChild());    	non-compiled	[CE]  illegal  start  of  type	223	None	replace
219	[BUG]  [BUGGY]  Preconditions.checkNotNull(allCatchNodes.hasOneChild());  [CE]  illegal  start  of  type  [FE]        RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkNotNull(allCatchNodes.hasOneChild());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkNotNull(allCatchNodes.hasOneChild());	          Preconditions.checkState(allCatchNodes.hasOneChild());    Preconditions.checkNotNull(allCatchNodes.hasOneChild());    	non-compiled	[CE]  illegal  start  of  type	223	None	replace
220	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes.isEmpty());  [CE]  illegal  start  of  type  [FE]        RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes.isEmpty());	          Preconditions.checkState(allCatchNodes.isEmpty());    Node    allCatchNodes    =    NodeUtil.getCatchBlock(allCatchNodes.isEmpty());    	non-compiled	[CE]  illegal  start  of  type	171	None	replace
221	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n.isEmpty());  [CE]  illegal  start  of  type  [FE]          RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(n.isEmpty());	          Preconditions.checkState(allCatchNodes.isEmpty());    Node    allCatchNodes    =    NodeUtil.getCatchBlock(allCatchNodes.isEmpty());    	non-compiled	[CE]  illegal  start  of  type	171	None	replace
222	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(labelName.isEmpty());  [CE]  illegal  start  of  type  [FE]            RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(labelName.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(labelName.isEmpty());	          Preconditions.checkState(allCatchNodes.isEmpty());    Node    allCatchNodes    =    NodeUtil.getCatchBlock(allCatchNodes.isEmpty());    	non-compiled	[CE]  illegal  start  of  type	171	None	replace
223	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(catchNodes.isEmpty());  [CE]  illegal  start  of  type  [FE]              RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(catchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(catchNodes.isEmpty());	          Preconditions.checkState(allCatchNodes.isEmpty());    Node    allCatchNodes    =    NodeUtil.getCatchBlock(allCatchNodes.isEmpty());    	non-compiled	[CE]  illegal  start  of  type	171	None	replace
224	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes  ==  null  ||!NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	if(allCatchNodes  ==  null  ||!NodeUtil.hasFinally(allCatchNodes))  {	  if(allCatchNodes!=    null    ||!NodeUtil.hasFinally(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	144	6	replace
225	[BUG]  [BUGGY]  if(allCatchNodes  ==  null  ||!NodeUtil.hasFinally(allCatchNodes))  {  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes  ==  null  ||!NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes  ==  null  ||!NodeUtil.hasFinally(allCatchNodes))  {	  if(allCatchNodes!=    null    ||!NodeUtil.hasFinally(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	144	6	replace
226	[BUG]  [BUGGY]  Node  allCatchNodes.isEmpty());  [CE]  ';'  expected  [FE]            RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes.isEmpty());	          Preconditions.checkState(allCatchNodes.isEmpty());    Node    allCatchNodes.isEmpty());    	non-compiled	[CE]  ';'  expected	22	None	replace
227	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty());  Node  allCatchNodes.removeChild(allCatchNodes);  [CE]  ';'  expected  [FE]              RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty());  Node  allCatchNodes.removeChild(allCatchNodes);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.isEmpty());  Node  allCatchNodes.removeChild(allCatchNodes);	          Preconditions.checkState(allCatchNodes.isEmpty());    Node    allCatchNodes.isEmpty());    	non-compiled	[CE]  ';'  expected	22	None	replace
228	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty());  Node  allCatchNodes.clear();  [CE]  ';'  expected  [FE]                RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty());  Node  allCatchNodes.clear();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.isEmpty());  Node  allCatchNodes.clear();	          Preconditions.checkState(allCatchNodes.isEmpty());    Node    allCatchNodes.isEmpty());    	non-compiled	[CE]  ';'  expected	22	None	replace
229	[BUG]  [BUGGY]  Node  allCatchNodes  =  allCatchNodes.get(0);  [CE]  illegal  start  of  type  [FE]                  RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  allCatchNodes  =  allCatchNodes.get(0);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes  =  allCatchNodes.get(0);	          Preconditions.checkState(allCatchNodes.isEmpty());    Node    allCatchNodes.isEmpty());    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
230	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty());  Node  allCatchNodes.setEmpty());  [CE]  ';'  expected  [FE]                    RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty());  Node  allCatchNodes.setEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.isEmpty());  Node  allCatchNodes.setEmpty());	          Preconditions.checkState(allCatchNodes.isEmpty());    Node    allCatchNodes.isEmpty());    	non-compiled	[CE]  ';'  expected	22	None	replace
231	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.hasOneChild()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(allCatchNodes.hasOneChild()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    if(allCatchNodes.isOneChild()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    	non-compiled	[CE]  ';'  expected	3	None	replace
232	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild()  &&  NodeUtil.hasCatchHandler(allCatchNodes));  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild()  &&  NodeUtil.hasCatchHandler(allCatchNodes));  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.hasOneChild()  &&  NodeUtil.hasCatchHandler(allCatchNodes));	  if(allCatchNodes.hasOneChild()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    if(allCatchNodes.isOneChild()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
233	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild()  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild()  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.hasOneChild()  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(allCatchNodes.hasOneChild()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    if(allCatchNodes.isOneChild()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    	non-compiled	[CE]  ';'  expected	3	None	replace
234	[BUG]  [BUGGY]  if(allCatchNodes!=  null  &&!NodeUtil.hasCatchHandler(allCatchNodes))  {  if(allCatchNodes!=  null  &&!NodeUtil.hasCatchHandler(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  &&!NodeUtil.hasCatchHandler(allCatchNodes))  {  if(allCatchNodes!=  null  &&!NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=    null    &&!NodeUtil.hasCatchHandler(allCatchNodes))    {    if(allCatchNodes!=  null  &&!NodeUtil.hasCatchHandler(allCatchNodes))  {	  	non-compiled	[CE]  illegal  start  of  expression	160	None	add
235	[BUG]  [BUGGY]  if(allCatchNodes!=  null  &&!NodeUtil.hasCatchHandler(allCatchNodes))  {  if(allCatchNodes  ==  null  &&!NodeUtil.hasCatchHandler(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  &&!NodeUtil.hasCatchHandler(allCatchNodes))  {  if(allCatchNodes  ==  null  &&!NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=    null    &&!NodeUtil.hasCatchHandler(allCatchNodes))    {    if(allCatchNodes  ==  null  &&!NodeUtil.hasCatchHandler(allCatchNodes))  {	  	non-compiled	[CE]  illegal  start  of  expression	160	None	add
236	[BUG]  [BUGGY]  if(allCatchNodes!=  null  &&!NodeUtil.hasCatchHandler(allCatchNodes))  {  If(allCatchNodes!=  null  &&!NodeUtil.hasCatchHandler(allCatchNodes))  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  &&!NodeUtil.hasCatchHandler(allCatchNodes))  {  If(allCatchNodes!=  null  &&!NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=    null    &&!NodeUtil.hasCatchHandler(allCatchNodes))    {    If(allCatchNodes!=  null  &&!NodeUtil.hasCatchHandler(allCatchNodes))  {	  	non-compiled	[CE]  ';'  expected	160	None	add
237	[BUG]  [BUGGY]  if(allCatchNodes!=  null  &&!NodeUtil.hasCatchHandler(allCatchNodes))  {  if(allCatchNodes  >=  null  &&!NodeUtil.hasCatchHandler(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  &&!NodeUtil.hasCatchHandler(allCatchNodes))  {  if(allCatchNodes  >=  null  &&!NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=    null    &&!NodeUtil.hasCatchHandler(allCatchNodes))    {    if(allCatchNodes  >=  null  &&!NodeUtil.hasCatchHandler(allCatchNodes))  {	  	non-compiled	[CE]  illegal  start  of  expression	160	None	add
238	[BUG]  [BUGGY]  if(allCatchNodes!=  null  &&!NodeUtil.hasCatchHandler(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  &&!NodeUtil.hasCatchHandler(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=    null    &&!NodeUtil.hasCatchHandler(allCatchNodes))    {    Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);	  	non-compiled	[CE]  illegal  start  of  expression	160	None	add
239	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  if(!NodeUtil.hasFinally(allCatchNodes))  {  [CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  if(!NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  if(!NodeUtil.hasFinally(allCatchNodes))  {	  if(!NodeUtil.hasCatchHandler(allCatchNodes))    {    Node    allCatchNodes    =    NodeUtil.getCatchHandler(allCatchNodes);    if(!NodeUtil.hasCatchHandler(allCatchNodes))    {    	non-compiled	[CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	188	None	replace
240	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes);  if(!NodeUtil.hasFinally(allCatchNodes))  {  [CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes);  if(!NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes);  if(!NodeUtil.hasFinally(allCatchNodes))  {	  if(!NodeUtil.hasCatchHandler(allCatchNodes))    {    Node    allCatchNodes    =    NodeUtil.getCatchHandler(allCatchNodes);    if(!NodeUtil.hasCatchHandler(allCatchNodes))    {    	non-compiled	[CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	188	None	replace
241	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  if(!NodeUtil.hasFinally(allCatchNodes))  {  [CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  if(!NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.hasOneChild());  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  if(!NodeUtil.hasFinally(allCatchNodes))  {	  if(!NodeUtil.hasCatchHandler(allCatchNodes))    {    Node    allCatchNodes    =    NodeUtil.getCatchHandler(allCatchNodes);    if(!NodeUtil.hasCatchHandler(allCatchNodes))    {    	non-compiled	[CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	188	None	replace
242	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  if(!NodeUtil.isFinally(allCatchNodes))  {  [CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]              AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  if(!NodeUtil.isFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  if(!NodeUtil.isFinally(allCatchNodes))  {	  if(!NodeUtil.hasCatchHandler(allCatchNodes))    {    Node    allCatchNodes    =    NodeUtil.getCatchHandler(allCatchNodes);    if(!NodeUtil.hasCatchHandler(allCatchNodes))    {    	non-compiled	[CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	188	None	replace
243	[BUG]  [BUGGY]  if(!NodeUtil.hasCatchHandler(allCatchNodes)&&  tryMinimizeExits(allCatchNodes.getLastChild(),  exitType,  labelName);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!NodeUtil.hasCatchHandler(allCatchNodes)&&  tryMinimizeExits(allCatchNodes.getLastChild(),  exitType,  labelName);  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!NodeUtil.hasCatchHandler(allCatchNodes)&&  tryMinimizeExits(allCatchNodes.getLastChild(),  exitType,  labelName);	  if(!NodeUtil.hasCatchHandler(allCatchNodes)&&    tryMinimizeExits(allCatchNodes.getFirstChild(),    exitType,    labelName);    	non-compiled	[CE]  ')'  expected	90	None	replace
244	[BUG]  [BUGGY]  if(!NodeUtil.isExpressionNode(allCatchNodes)&&  tryMinimizeExits(allCatchNodes.getFirstChild(),  exitType,  labelName);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!NodeUtil.isExpressionNode(allCatchNodes)&&  tryMinimizeExits(allCatchNodes.getFirstChild(),  exitType,  labelName);  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!NodeUtil.isExpressionNode(allCatchNodes)&&  tryMinimizeExits(allCatchNodes.getFirstChild(),  exitType,  labelName);	  if(!NodeUtil.hasCatchHandler(allCatchNodes)&&    tryMinimizeExits(allCatchNodes.getFirstChild(),    exitType,    labelName);    	non-compiled	[CE]  ')'  expected	90	None	replace
245	[BUG]  [BUGGY]  if(!NodeUtil.isCatchHandler(allCatchNodes)&&  tryMinimizeExits(allCatchNodes.getFirstChild(),  exitType,  labelName);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!NodeUtil.isCatchHandler(allCatchNodes)&&  tryMinimizeExits(allCatchNodes.getFirstChild(),  exitType,  labelName);  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!NodeUtil.isCatchHandler(allCatchNodes)&&  tryMinimizeExits(allCatchNodes.getFirstChild(),  exitType,  labelName);	  if(!NodeUtil.hasCatchHandler(allCatchNodes)&&    tryMinimizeExits(allCatchNodes.getFirstChild(),    exitType,    labelName);    	non-compiled	[CE]  ')'  expected	90	None	replace
246	[BUG]  [BUGGY]  if(!NodeUtil.hasCatchHandler(allCatchNodes)&&  tryMinimizeExits(allCatchNodes.getFirstChild(),  labelName,  exitType);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!NodeUtil.hasCatchHandler(allCatchNodes)&&  tryMinimizeExits(allCatchNodes.getFirstChild(),  labelName,  exitType);  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!NodeUtil.hasCatchHandler(allCatchNodes)&&  tryMinimizeExits(allCatchNodes.getFirstChild(),  labelName,  exitType);	  if(!NodeUtil.hasCatchHandler(allCatchNodes)&&    tryMinimizeExits(allCatchNodes.getFirstChild(),    exitType,    labelName);    	non-compiled	[CE]  ')'  expected	90	None	replace
247	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.hasChildren()  ||  allCatchNodes.hasChildren());  [CE]  illegal  start  of  type  [FE]        RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.hasChildren()  ||  allCatchNodes.hasChildren());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.hasChildren()  ||  allCatchNodes.hasChildren());	  Preconditions.checkState(allCatchNodes.hasChildren());    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
248	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.hasChildren()  &&  tryMinimizeExits(tryBlock,  exitType,  labelName));  [CE]  illegal  start  of  type  [FE]          RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.hasChildren()  &&  tryMinimizeExits(tryBlock,  exitType,  labelName));  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.hasChildren()  &&  tryMinimizeExits(tryBlock,  exitType,  labelName));	  Preconditions.checkState(allCatchNodes.hasChildren());    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
249	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.hasChildren(),  exitType);  [CE]  illegal  start  of  type  [FE]            RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.hasChildren(),  exitType);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.hasChildren(),  exitType);	  Preconditions.checkState(allCatchNodes.hasChildren());    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
250	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(allCatchNodes)||  NodeUtil.isExpressionNode(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]        RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(NodeUtil.isExpressionNode(allCatchNodes)||  NodeUtil.isExpressionNode(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(NodeUtil.isExpressionNode(allCatchNodes)||  NodeUtil.isExpressionNode(allCatchNodes))  {	  if(NodeUtil.isExpressionNode(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	145	None	replace
251	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(allCatchNodes,  labelName))  {  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(NodeUtil.isExpressionNode(allCatchNodes,  labelName))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(NodeUtil.isExpressionNode(allCatchNodes,  labelName))  {	  if(NodeUtil.isExpressionNode(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	145	None	replace
252	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(allCatchNodes)||  allCatchNodes.hasOneChild())  {  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(NodeUtil.isExpressionNode(allCatchNodes)||  allCatchNodes.hasOneChild())  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(NodeUtil.isExpressionNode(allCatchNodes)||  allCatchNodes.hasOneChild())  {	  if(NodeUtil.isExpressionNode(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	145	None	replace
253	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes);  if(!NodeUtil.hasFinally(allCatchNodes))  {  [CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes);  if(!NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.hasOneChild());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes);  if(!NodeUtil.hasFinally(allCatchNodes))  {	  if(!NodeUtil.hasFinally(allCatchNodes))    {    Node    allCatchNodes    =    NodeUtil.getCatchBlock(allCatchNodes);    if(!NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	182	None	replace
254	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(allCatchNodes);  if(!NodeUtil.hasFinally(allCatchNodes))  {  [CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(allCatchNodes);  if(!NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(allCatchNodes);  if(!NodeUtil.hasFinally(allCatchNodes))  {	  if(!NodeUtil.hasFinally(allCatchNodes))    {    Node    allCatchNodes    =    NodeUtil.getCatchBlock(allCatchNodes);    if(!NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	182	None	replace
255	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes);  if(!NodeUtil.hasFinally(allCatchNodes)||!NodeUtil.hasFinally(allCatchNodes))  {  [CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]            RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes);  if(!NodeUtil.hasFinally(allCatchNodes)||!NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes);  if(!NodeUtil.hasFinally(allCatchNodes)||!NodeUtil.hasFinally(allCatchNodes))  {	  if(!NodeUtil.hasFinally(allCatchNodes))    {    Node    allCatchNodes    =    NodeUtil.getCatchBlock(allCatchNodes);    if(!NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	182	None	replace
256	[BUG]  [BUGGY]  Node  c  =  allCatchNodes.getParent();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  c  =  allCatchNodes.getParent();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  c  =  allCatchNodes.getParent();	  Node    c    =    allCatchNodes.getNext();    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
257	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(n,  tryBlock);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(n,  tryBlock);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(n,  tryBlock);	  Node    allCatchNodes    =    NodeUtil.getAllCatchNodes(n,    allCatchNodes);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
258	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(tryBlock,  n);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(tryBlock,  n);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(tryBlock,  n);	  Node    allCatchNodes    =    NodeUtil.getAllCatchNodes(n,    allCatchNodes);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
259	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  &&  allCatchNodes.isEmpty());  Preconditions.checkState(AllCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [CE]  illegal  start  of  type  [FE]            RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  &&  allCatchNodes.isEmpty());  Preconditions.checkState(AllCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.isEmpty()  &&  allCatchNodes.isEmpty());  Preconditions.checkState(AllCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());	          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkState(AllCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
260	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  preconditions.checkState(AllCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [CE]  illegal  start  of  type  [FE]              RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  preconditions.checkState(AllCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  preconditions.checkState(AllCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());	          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkState(AllCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
261	[BUG]  [BUGGY]  if(!NodeUtil.hasFinally(allCatchNodes))  {  If(!NodeUtil.hasCatchHandler(allCatchNodes))  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!NodeUtil.hasFinally(allCatchNodes))  {  If(!NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!NodeUtil.hasFinally(allCatchNodes))  {  If(!NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(!NodeUtil.hasCatchHandler(allCatchNodes))    {    If(!NodeUtil.hasCatchHandler(allCatchNodes))    {    	non-compiled	[CE]  ';'  expected	52	None	replace
262	[BUG]  [BUGGY]  if(!NodeUtil.isFinally(allCatchNodes))  {  If(!NodeUtil.hasCatchHandler(allCatchNodes))  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!NodeUtil.isFinally(allCatchNodes))  {  If(!NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!NodeUtil.isFinally(allCatchNodes))  {  If(!NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(!NodeUtil.hasCatchHandler(allCatchNodes))    {    If(!NodeUtil.hasCatchHandler(allCatchNodes))    {    	non-compiled	[CE]  ';'  expected	52	None	replace
263	[BUG]  [BUGGY]  if(!NodeUtil.hasFinally(allCatchNodes))  {  if(!NodeUtil.hasCatchHandler(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!NodeUtil.hasFinally(allCatchNodes))  {  if(!NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!NodeUtil.hasFinally(allCatchNodes))  {  if(!NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(!NodeUtil.hasCatchHandler(allCatchNodes))    {    If(!NodeUtil.hasCatchHandler(allCatchNodes))    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
264	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkNotNull(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkNotNull(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	                Preconditions.checkState(allCatchNodes.isEmpty()        ||        allCatchNodes.isEmpty());        Preconditions.checkNotNull(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkNotNull(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());	  	compilable	  [FE]  RuntimeException  	215	6	add
265	[BUG]  [BUGGY]          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkNotNull(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkNotNull(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkNotNull(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkNotNull(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	                Preconditions.checkState(allCatchNodes.isEmpty()        ||        allCatchNodes.isEmpty());        Preconditions.checkNotNull(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkNotNull(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());	  	compilable	  [FE]  RuntimeException  	215	6	add
266	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkNotNull(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	                Preconditions.checkState(allCatchNodes.isEmpty()        ||        allCatchNodes.isEmpty());        Preconditions.checkNotNull(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());	  	compilable	  [FE]  RuntimeException  	215	6	add
267	[BUG]  [BUGGY]          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkNotNull(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkNotNull(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	                Preconditions.checkState(allCatchNodes.isEmpty()        ||        allCatchNodes.isEmpty());        Preconditions.checkNotNull(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());	  	compilable	  [FE]  RuntimeException  	215	6	add
268	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkNotNull(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkNotNull(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	                Preconditions.checkState(allCatchNodes.isEmpty()        ||        allCatchNodes.isEmpty());        Preconditions.checkNotNull(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkNotNull(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());	  	compilable	  [FE]  RuntimeException  	215	6	add
269	[BUG]  [BUGGY]          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkNotNull(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkNotNull(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkNotNull(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkNotNull(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	                Preconditions.checkState(allCatchNodes.isEmpty()        ||        allCatchNodes.isEmpty());        Preconditions.checkNotNull(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkNotNull(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());	  	compilable	  [FE]  RuntimeException  	215	6	add
270	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkNotNull(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkNotNull(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkNotNull(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	                Preconditions.checkState(allCatchNodes.isEmpty()        ||        allCatchNodes.isEmpty());        Preconditions.checkNotNull(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkNotNull(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkNotNull(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());	  	compilable	  [FE]  RuntimeException  	215	6	add
271	[BUG]  [BUGGY]          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkNotNull(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkNotNull(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkNotNull(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkNotNull(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkNotNull(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkNotNull(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	                Preconditions.checkState(allCatchNodes.isEmpty()        ||        allCatchNodes.isEmpty());        Preconditions.checkNotNull(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkNotNull(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkNotNull(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());	  	compilable	  [FE]  RuntimeException  	215	6	add
272	[BUG]  [BUGGY]          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkNotNull(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkNotNull(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  preconditions.checkNotNull(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [CE]  cannot  find  symbol  preconditions  [FE]            RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkNotNull(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkNotNull(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  preconditions.checkNotNull(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	                Preconditions.checkState(allCatchNodes.isEmpty()        ||        allCatchNodes.isEmpty());        Preconditions.checkNotNull(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkNotNull(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  preconditions.checkNotNull(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());	  	non-compiled	[CE]  cannot  find  symbol  preconditions	215	None	add
273	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  thenBlock  =  allCatchNodes.getLastChild();  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  thenBlock  =  allCatchNodes.getLastChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  thenBlock  =  allCatchNodes.getLastChild();	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    thenBlock    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
274	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getLastChild();  Node  thenBlock  =  allCatchNodes.getFirstChild();  [CE]  illegal  start  of  type  [FE]      AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  elseBlock  =  allCatchNodes.getLastChild();  Node  thenBlock  =  allCatchNodes.getFirstChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  elseBlock  =  allCatchNodes.getLastChild();  Node  thenBlock  =  allCatchNodes.getFirstChild();	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    thenBlock    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
275	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  thenBlock  =  allCatchNodes.getFirstChild();  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  thenBlock  =  allCatchNodes.getFirstChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.hasOneChild());  Node  thenBlock  =  allCatchNodes.getFirstChild();	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    thenBlock    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
276	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(n);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(n);  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchHandler(n);	  if(!NodeUtil.hasCatchHandler(allCatchNodes))    {    Node    allCatchNodes    =    NodeUtil.getCatchHandler(allCatchNodes);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
277	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.hasCatchHandler(allCatchNodes));  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(!NodeUtil.hasCatchHandler(allCatchNodes));  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(!NodeUtil.hasCatchHandler(allCatchNodes));	  if(!NodeUtil.hasCatchHandler(allCatchNodes))    {    Node    allCatchNodes    =    NodeUtil.getCatchHandler(allCatchNodes);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
278	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(labelName);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(labelName);  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchHandler(labelName);	  if(!NodeUtil.hasCatchHandler(allCatchNodes))    {    Node    allCatchNodes    =    NodeUtil.getCatchHandler(allCatchNodes);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
279	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getChildCount()  -  1;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  elseBlock  =  allCatchNodes.getChildCount()  -  1;  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  elseBlock  =  allCatchNodes.getChildCount()  -  1;	  Node    elseBlock    =    allCatchNodes.getChildCount();    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
280	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getChildCount()  +  1;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  elseBlock  =  allCatchNodes.getChildCount()  +  1;  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  elseBlock  =  allCatchNodes.getChildCount()  +  1;	  Node    elseBlock    =    allCatchNodes.getChildCount();    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
281	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getChildCount()  -  2;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  elseBlock  =  allCatchNodes.getChildCount()  -  2;  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  elseBlock  =  allCatchNodes.getChildCount()  -  2;	  Node    elseBlock    =    allCatchNodes.getChildCount();    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
282	[BUG]  [BUGGY]  Node  elseBlock  =  tryBlock.getLastChild();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  elseBlock  =  tryBlock.getLastChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  elseBlock  =  tryBlock.getLastChild();	  Node    elseBlock    =    tryBlock.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	181	None	replace
283	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.hasChildren());  Preconditions.checkState(allCatchNodes.hasChildren());  [CE]  illegal  start  of  type  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.hasChildren());  Preconditions.checkState(allCatchNodes.hasChildren());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.hasChildren());  Preconditions.checkState(allCatchNodes.hasChildren());	          Preconditions.checkState(allCatchNodes.hasOneChild());    Preconditions.checkState(allCatchNodes.hasOneChild());    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
284	[BUG]  [BUGGY]  if(allCatchNodes!=  null  ||!NodeUtil.hasCatchHandler(allCatchNodes))  {  if(allCatchNodes!=  null  ||!NodeUtil.hasCatchHandler(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  ||!NodeUtil.hasCatchHandler(allCatchNodes))  {  if(allCatchNodes!=  null  ||!NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=    null    ||!NodeUtil.hasCatchHandler(allCatchNodes))    {    if(allCatchNodes!=  null  ||!NodeUtil.hasCatchHandler(allCatchNodes))  {	  	non-compiled	[CE]  illegal  start  of  expression	162	None	add
285	[BUG]  [BUGGY]  if(allCatchNodes!=  null  ||!NodeUtil.hasCatchHandler(allCatchNodes))  {  if(allCatchNodes  ==  null  ||!NodeUtil.hasCatchHandler(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  ||!NodeUtil.hasCatchHandler(allCatchNodes))  {  if(allCatchNodes  ==  null  ||!NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=    null    ||!NodeUtil.hasCatchHandler(allCatchNodes))    {    if(allCatchNodes  ==  null  ||!NodeUtil.hasCatchHandler(allCatchNodes))  {	  	non-compiled	[CE]  illegal  start  of  expression	162	None	add
286	[BUG]  [BUGGY]  if(allCatchNodes!=  null  ||!NodeUtil.hasCatchHandler(allCatchNodes))  {  If(allCatchNodes!=  null  ||!NodeUtil.hasCatchHandler(allCatchNodes))  {  [CE]  ';'  expected  [FE]        RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  ||!NodeUtil.hasCatchHandler(allCatchNodes))  {  If(allCatchNodes!=  null  ||!NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=    null    ||!NodeUtil.hasCatchHandler(allCatchNodes))    {    If(allCatchNodes!=  null  ||!NodeUtil.hasCatchHandler(allCatchNodes))  {	  	non-compiled	[CE]  ';'  expected	162	None	add
287	[BUG]  [BUGGY]  if(allCatchNodes!=  null  ||!NodeUtil.hasCatchHandler(allCatchNodes))  {  if(allCatchNodes  >=  null  ||!NodeUtil.hasCatchHandler(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]          RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  ||!NodeUtil.hasCatchHandler(allCatchNodes))  {  if(allCatchNodes  >=  null  ||!NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=    null    ||!NodeUtil.hasCatchHandler(allCatchNodes))    {    if(allCatchNodes  >=  null  ||!NodeUtil.hasCatchHandler(allCatchNodes))  {	  	non-compiled	[CE]  illegal  start  of  expression	162	None	add
288	[BUG]  [BUGGY]  if(NodeUtil.hasCatchHandler(allCatchNodes)||  NodeUtil.isExpressionNode(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(NodeUtil.hasCatchHandler(allCatchNodes)||  NodeUtil.isExpressionNode(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(NodeUtil.hasCatchHandler(allCatchNodes)||  NodeUtil.isExpressionNode(allCatchNodes))  {	  if(NodeUtil.hasCatchHandler(allCatchNodes)&&    NodeUtil.isExpressionNode(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	138	None	replace
289	[BUG]  [BUGGY]  if(NodeUtil.isCatchHandler(allCatchNodes)&&  NodeUtil.isExpressionNode(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(NodeUtil.isCatchHandler(allCatchNodes)&&  NodeUtil.isExpressionNode(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(NodeUtil.isCatchHandler(allCatchNodes)&&  NodeUtil.isExpressionNode(allCatchNodes))  {	  if(NodeUtil.hasCatchHandler(allCatchNodes)&&    NodeUtil.isExpressionNode(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	138	None	replace
290	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(allCatchNodes)&&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(NodeUtil.isExpressionNode(allCatchNodes)&&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(NodeUtil.isExpressionNode(allCatchNodes)&&  NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(NodeUtil.hasCatchHandler(allCatchNodes)&&    NodeUtil.isExpressionNode(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	138	None	replace
291	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty();  [CE]  ')'  expected  [FE]                RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty();	          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty();    	non-compiled	[CE]  ')'  expected	123	None	replace
292	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  &&  allCatchNodes.isEmpty());  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty();  [CE]  ')'  expected  [FE]                  RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  &&  allCatchNodes.isEmpty());  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.isEmpty()  &&  allCatchNodes.isEmpty());  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty();	          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty();    	non-compiled	[CE]  ')'  expected	123	None	replace
293	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty();  [CE]  ')'  expected  [FE]                    RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty();	          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty();    	non-compiled	[CE]  ')'  expected	123	None	replace
294	[BUG]  [BUGGY]  Node  finallyBlock  =  allCatchNodes.getFirstChild(),  tryBlock,  labelName);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  finallyBlock  =  allCatchNodes.getFirstChild(),  tryBlock,  labelName);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  finallyBlock  =  allCatchNodes.getFirstChild(),  tryBlock,  labelName);	  Node    finallyBlock    =    allCatchNodes.getFirstChild(),    tryBlock);    	non-compiled	[CE]  ';'  expected	94	None	replace
295	[BUG]  [BUGGY]  Node  finallyBlock  =  allCatchNodes.getFirstChild(),  tryBlock,  falseBlock);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  finallyBlock  =  allCatchNodes.getFirstChild(),  tryBlock,  falseBlock);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  finallyBlock  =  allCatchNodes.getFirstChild(),  tryBlock,  falseBlock);	  Node    finallyBlock    =    allCatchNodes.getFirstChild(),    tryBlock);    	non-compiled	[CE]  ';'  expected	94	None	replace
296	[BUG]  [BUGGY]  Node  finallyBlock  =  allCatchNodes.getLastChild(),  tryBlock);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  finallyBlock  =  allCatchNodes.getLastChild(),  tryBlock);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  finallyBlock  =  allCatchNodes.getLastChild(),  tryBlock);	  Node    finallyBlock    =    allCatchNodes.getFirstChild(),    tryBlock);    	non-compiled	[CE]  ';'  expected	94	None	replace
297	[BUG]  [BUGGY]  Node  finallyBlock  =  allCatchNodes.getFirstChild(),  tryMinimizeExits(tryBlock,  exitType,  labelName);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  finallyBlock  =  allCatchNodes.getFirstChild(),  tryMinimizeExits(tryBlock,  exitType,  labelName);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  finallyBlock  =  allCatchNodes.getFirstChild(),  tryMinimizeExits(tryBlock,  exitType,  labelName);	  Node    finallyBlock    =    allCatchNodes.getFirstChild(),    tryBlock);    	non-compiled	[CE]  ';'  expected	94	None	replace
298	[BUG]  [BUGGY]  if(allCatchNodes.hasOneChild()  ||  NodeUtil.hasFinally(allCatchNodes))  {  if(allCatchNodes.hasOneChild()  ||  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes.hasOneChild()  ||  NodeUtil.hasFinally(allCatchNodes))  {  if(allCatchNodes.hasOneChild()  ||  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes.hasOneChild()    ||    NodeUtil.hasFinally(allCatchNodes))    {    if(allCatchNodes.hasOneChild()  ||  NodeUtil.hasFinally(allCatchNodes))  {	  	non-compiled	[CE]  illegal  start  of  expression	14	None	add
299	[BUG]  [BUGGY]  if(allCatchNodes.hasOneChild()  ||  NodeUtil.hasFinally(allCatchNodes))  {  If(allCatchNodes.hasOneChild()  ||  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes.hasOneChild()  ||  NodeUtil.hasFinally(allCatchNodes))  {  If(allCatchNodes.hasOneChild()  ||  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes.hasOneChild()    ||    NodeUtil.hasFinally(allCatchNodes))    {    If(allCatchNodes.hasOneChild()  ||  NodeUtil.hasFinally(allCatchNodes))  {	  	non-compiled	[CE]  ';'  expected	14	None	add
300	[BUG]  [BUGGY]  if(allCatchNodes.hasOneChild()  ||  NodeUtil.hasFinally(allCatchNodes))  {  if(allCatchNodes.hasOneChild()  ||  NodeUtil.isFinally(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]        RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes.hasOneChild()  ||  NodeUtil.hasFinally(allCatchNodes))  {  if(allCatchNodes.hasOneChild()  ||  NodeUtil.isFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes.hasOneChild()    ||    NodeUtil.hasFinally(allCatchNodes))    {    if(allCatchNodes.hasOneChild()  ||  NodeUtil.isFinally(allCatchNodes))  {	  	non-compiled	[CE]  illegal  start  of  expression	14	None	add
301	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Preconditions.checkState(allCatchNodes.hasOneChild());    Preconditions.checkNotNull(allCatchNodes.hasOneChild());  Preconditions.checkState(allCatchNodes.hasOneChild());  Preconditions.checkNotNull(allCatchNodes.hasOneChild());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	                Preconditions.checkState(allCatchNodes.hasOneChild());        Preconditions.checkNotNull(allCatchNodes.hasOneChild());    Preconditions.checkState(allCatchNodes.hasOneChild());  Preconditions.checkNotNull(allCatchNodes.hasOneChild());	  	compilable	  [FE]  RuntimeException  	222	2	add
302	[BUG]  [BUGGY]          Preconditions.checkState(allCatchNodes.hasOneChild());    Preconditions.checkNotNull(allCatchNodes.hasOneChild());  Preconditions.checkState(allCatchNodes.hasOneChild());  Preconditions.checkNotNull(allCatchNodes.hasOneChild());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Preconditions.checkState(allCatchNodes.hasOneChild());    Preconditions.checkNotNull(allCatchNodes.hasOneChild());  Preconditions.checkState(allCatchNodes.hasOneChild());  Preconditions.checkNotNull(allCatchNodes.hasOneChild());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	                Preconditions.checkState(allCatchNodes.hasOneChild());        Preconditions.checkNotNull(allCatchNodes.hasOneChild());    Preconditions.checkState(allCatchNodes.hasOneChild());  Preconditions.checkNotNull(allCatchNodes.hasOneChild());	  	compilable	  [FE]  RuntimeException  	222	2	add
303	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Preconditions.checkState(allCatchNodes.hasOneChild());    Preconditions.checkNotNull(allCatchNodes.hasOneChild());  Preconditions.checkNotNull(allCatchNodes.hasOneChild());  Preconditions.checkNotNull(allCatchNodes.hasOneChild());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	                Preconditions.checkState(allCatchNodes.hasOneChild());        Preconditions.checkNotNull(allCatchNodes.hasOneChild());    Preconditions.checkNotNull(allCatchNodes.hasOneChild());  Preconditions.checkNotNull(allCatchNodes.hasOneChild());	  	compilable	  [FE]  RuntimeException  	222	2	add
304	[BUG]  [BUGGY]          Preconditions.checkState(allCatchNodes.hasOneChild());    Preconditions.checkNotNull(allCatchNodes.hasOneChild());  Preconditions.checkNotNull(allCatchNodes.hasOneChild());  Preconditions.checkNotNull(allCatchNodes.hasOneChild());  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Preconditions.checkState(allCatchNodes.hasOneChild());    Preconditions.checkNotNull(allCatchNodes.hasOneChild());  Preconditions.checkNotNull(allCatchNodes.hasOneChild());  Preconditions.checkNotNull(allCatchNodes.hasOneChild());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	                Preconditions.checkState(allCatchNodes.hasOneChild());        Preconditions.checkNotNull(allCatchNodes.hasOneChild());    Preconditions.checkNotNull(allCatchNodes.hasOneChild());  Preconditions.checkNotNull(allCatchNodes.hasOneChild());	  	compilable	  [FE]  RuntimeException  	222	2	add
305	[BUG]  [BUGGY]          Preconditions.checkState(allCatchNodes.hasOneChild());    Preconditions.checkNotNull(allCatchNodes.hasOneChild());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  Preconditions.checkNotNull(allCatchNodes.hasOneChild());  [CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Preconditions.checkState(allCatchNodes.hasOneChild());    Preconditions.checkNotNull(allCatchNodes.hasOneChild());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  Preconditions.checkNotNull(allCatchNodes.hasOneChild());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	                Preconditions.checkState(allCatchNodes.hasOneChild());        Preconditions.checkNotNull(allCatchNodes.hasOneChild());    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  Preconditions.checkNotNull(allCatchNodes.hasOneChild());	  	non-compiled	[CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	222	None	add
306	[BUG]  [BUGGY]          Preconditions.checkState(allCatchNodes.hasOneChild());    Preconditions.checkNotNull(allCatchNodes.hasOneChild());  Preconditions.checkEquals(allCatchNodes.hasOneChild());  Preconditions.checkNotNull(allCatchNodes.hasOneChild());  [CE]  cannot  find  symbol  [FE]          RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Preconditions.checkState(allCatchNodes.hasOneChild());    Preconditions.checkNotNull(allCatchNodes.hasOneChild());  Preconditions.checkEquals(allCatchNodes.hasOneChild());  Preconditions.checkNotNull(allCatchNodes.hasOneChild());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	                Preconditions.checkState(allCatchNodes.hasOneChild());        Preconditions.checkNotNull(allCatchNodes.hasOneChild());    Preconditions.checkEquals(allCatchNodes.hasOneChild());  Preconditions.checkNotNull(allCatchNodes.hasOneChild());	  	non-compiled	[CE]  cannot  find  symbol	222	None	add
307	[BUG]  [BUGGY]          Preconditions.checkState(allCatchNodes.hasOneChild());    Preconditions.checkNotNull(allCatchNodes.hasOneChild());  Node  allCatchNodes.hasOneChild());  Preconditions.checkNotNull(allCatchNodes.hasOneChild());  [CE]  ';'  expected  [FE]            RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Preconditions.checkState(allCatchNodes.hasOneChild());    Preconditions.checkNotNull(allCatchNodes.hasOneChild());  Node  allCatchNodes.hasOneChild());  Preconditions.checkNotNull(allCatchNodes.hasOneChild());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	                Preconditions.checkState(allCatchNodes.hasOneChild());        Preconditions.checkNotNull(allCatchNodes.hasOneChild());    Node  allCatchNodes.hasOneChild());  Preconditions.checkNotNull(allCatchNodes.hasOneChild());	  	non-compiled	[CE]  ';'  expected	222	None	add
308	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Preconditions.checkState(allCatchNodes.hasOneChild());    Preconditions.checkNotNull(allCatchNodes.hasOneChild());  Preconditions.checkNotNull(allCatchNodes.hasOneChild());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	                Preconditions.checkState(allCatchNodes.hasOneChild());        Preconditions.checkNotNull(allCatchNodes.hasOneChild());    Preconditions.checkNotNull(allCatchNodes.hasOneChild());	  	compilable	  [FE]  RuntimeException  	222	2	add
309	[BUG]  [BUGGY]          Preconditions.checkState(allCatchNodes.hasOneChild());    Preconditions.checkNotNull(allCatchNodes.hasOneChild());  Preconditions.checkNotNull(allCatchNodes.hasOneChild());  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Preconditions.checkState(allCatchNodes.hasOneChild());    Preconditions.checkNotNull(allCatchNodes.hasOneChild());  Preconditions.checkNotNull(allCatchNodes.hasOneChild());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	                Preconditions.checkState(allCatchNodes.hasOneChild());        Preconditions.checkNotNull(allCatchNodes.hasOneChild());    Preconditions.checkNotNull(allCatchNodes.hasOneChild());	  	compilable	  [FE]  RuntimeException  	222	2	add
310	[BUG]  [BUGGY]  If(NodeUtil.hasCatchHandler(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  ';'  expected  [FE]          RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  If(NodeUtil.hasCatchHandler(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	If(NodeUtil.hasCatchHandler(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.hasCatchHandler(allCatchNodes)||    NodeUtil.hasFinally(allCatchNodes))    {    If(NodeUtil.hasCatchHandler(allCatchNodes)||    NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  ';'  expected	125	None	replace
311	[BUG]  [BUGGY]  if(NodeUtil.hasCatchHandler(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  If(NodeUtil.hasCatchHandler(allCatchNodes)||  NodeUtil.  [CE]  ')'  expected  [FE]            RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(NodeUtil.hasCatchHandler(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  If(NodeUtil.hasCatchHandler(allCatchNodes)||  NodeUtil.  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(NodeUtil.hasCatchHandler(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  If(NodeUtil.hasCatchHandler(allCatchNodes)||  NodeUtil.	  if(NodeUtil.hasCatchHandler(allCatchNodes)||    NodeUtil.hasFinally(allCatchNodes))    {    If(NodeUtil.hasCatchHandler(allCatchNodes)||    NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  ')'  expected	125	None	replace
312	[BUG]  [BUGGY]  if(NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  If(NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.  [CE]  ')'  expected  [FE]              RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  If(NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  If(NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.	  if(NodeUtil.hasCatchHandler(allCatchNodes)||    NodeUtil.hasFinally(allCatchNodes))    {    If(NodeUtil.hasCatchHandler(allCatchNodes)||    NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  ')'  expected	125	None	replace
313	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  If(NodeUtil.hasCatchHandler(allCatchNodes)||  NodeUtil.hasFinally  [CE]  ')'  expected  [FE]                RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  If(NodeUtil.hasCatchHandler(allCatchNodes)||  NodeUtil.hasFinally  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  If(NodeUtil.hasCatchHandler(allCatchNodes)||  NodeUtil.hasFinally	  if(NodeUtil.hasCatchHandler(allCatchNodes)||    NodeUtil.hasFinally(allCatchNodes))    {    If(NodeUtil.hasCatchHandler(allCatchNodes)||    NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  ')'  expected	125	None	replace
314	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  &&  allCatchNodes.isEmpty());  Preconditions.checkArgument(allCatchNodes.isEmpty()  &&  allCatchNodes.isEmpty());  [CE]  illegal  start  of  type  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  &&  allCatchNodes.isEmpty());  Preconditions.checkArgument(allCatchNodes.isEmpty()  &&  allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.isEmpty()  &&  allCatchNodes.isEmpty());  Preconditions.checkArgument(allCatchNodes.isEmpty()  &&  allCatchNodes.isEmpty());	          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkArgument(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    	non-compiled	[CE]  illegal  start  of  type	214	None	replace
315	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  &&  allCatchNodes.isEmpty());  Preconditions.checkArgument(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [CE]  illegal  start  of  type  [FE]      RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  &&  allCatchNodes.isEmpty());  Preconditions.checkArgument(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.isEmpty()  &&  allCatchNodes.isEmpty());  Preconditions.checkArgument(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());	          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkArgument(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    	non-compiled	[CE]  illegal  start  of  type	214	None	replace
316	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  otherBlock  =  allCatchNodes.getFirstChild();  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  otherBlock  =  allCatchNodes.getFirstChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.hasOneChild());  Node  otherBlock  =  allCatchNodes.getFirstChild();	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    otherBlock    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
317	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  Preconditions  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  Preconditions  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  Preconditions	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    elseBlock    =    allCatchNodes.getFirstChild();    if(NodeUtil.hasFinally(allCatchNodes))    {    Preconditions.checkState(allCatchNodes.hasOneChild());    return;    }    	non-compiled	[CE]  ';'  expected	227	None	replace
318	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes.isEmpty());  Preconditions.checkState(allCatchNodes.isEmpty());  [CE]  illegal  start  of  type  [FE]          RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes.isEmpty());  Preconditions.checkState(allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes.isEmpty());  Preconditions.checkState(allCatchNodes.isEmpty());	          Preconditions.checkState(allCatchNodes.isEmpty());    Node    allCatchNodes    =    NodeUtil.getCatchBlock(allCatchNodes.isEmpty());    Preconditions.checkState(allCatchNodes.isEmpty());    	non-compiled	[CE]  illegal  start  of  type	172	None	replace
319	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n.isEmpty());  Preconditions.checkState(allCatchNodes.isEmpty());  [CE]  illegal  start  of  type  [FE]            RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n.isEmpty());  Preconditions.checkState(allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(n.isEmpty());  Preconditions.checkState(allCatchNodes.isEmpty());	          Preconditions.checkState(allCatchNodes.isEmpty());    Node    allCatchNodes    =    NodeUtil.getCatchBlock(allCatchNodes.isEmpty());    Preconditions.checkState(allCatchNodes.isEmpty());    	non-compiled	[CE]  illegal  start  of  type	172	None	replace
320	[BUG]  [BUGGY]  if(allCatchNodes!=  null  &&  NodeUtil.hasCatchHandler(allCatchNodes)||  allCatchNodes.isTree())  {  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  &&  NodeUtil.hasCatchHandler(allCatchNodes)||  allCatchNodes.isTree())  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=  null  &&  NodeUtil.hasCatchHandler(allCatchNodes)||  allCatchNodes.isTree())  {	  if(allCatchNodes!=    null    &&    NodeUtil.hasCatchHandler(allCatchNodes)||    n.isTree())    {    	non-compiled	[CE]  cannot  find  symbol	204	None	replace
321	[BUG]  [BUGGY]  if(allCatchNodes!=  null  &&  NodeUtil.hasCatchHandler(allCatchNodes)||  tryBlock.isTree())  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  &&  NodeUtil.hasCatchHandler(allCatchNodes)||  tryBlock.isTree())  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=  null  &&  NodeUtil.hasCatchHandler(allCatchNodes)||  tryBlock.isTree())  {	  if(allCatchNodes!=    null    &&    NodeUtil.hasCatchHandler(allCatchNodes)||    n.isTree())    {    	non-compiled	[CE]  cannot  find  symbol	204	None	replace
322	[BUG]  [BUGGY]  if(allCatchNodes!=  null  &&  NodeUtil.hasCatchHandler(n)||  allCatchNodes.isTree())  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  &&  NodeUtil.hasCatchHandler(n)||  allCatchNodes.isTree())  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=  null  &&  NodeUtil.hasCatchHandler(n)||  allCatchNodes.isTree())  {	  if(allCatchNodes!=    null    &&    NodeUtil.hasCatchHandler(allCatchNodes)||    n.isTree())    {    	non-compiled	[CE]  cannot  find  symbol	204	None	replace
323	[BUG]  [BUGGY]  if(allCatchNodes!=  null  ||  NodeUtil.hasCatchHandler(allCatchNodes)||  n.isTree())  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  ||  NodeUtil.hasCatchHandler(allCatchNodes)||  n.isTree())  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=  null  ||  NodeUtil.hasCatchHandler(allCatchNodes)||  n.isTree())  {	  if(allCatchNodes!=    null    &&    NodeUtil.hasCatchHandler(allCatchNodes)||    n.isTree())    {    	non-compiled	[CE]  cannot  find  symbol	204	None	replace
324	[BUG]  [BUGGY]  Node  c  =  allCatchNodes.getfirstChild();  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  c  =  allCatchNodes.getfirstChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  c  =  allCatchNodes.getfirstChild();	  Node    c    =    allCatchNodes.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
325	[BUG]  [BUGGY]          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  thenBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  thenBlock  =  allCatchNodes.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  thenBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  thenBlock  =  allCatchNodes.getFirstChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	                Node        elseBlock        =        allCatchNodes.getFirstChild();        Node    thenBlock    =    allCatchNodes.getFirstChild();    Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  thenBlock  =  allCatchNodes.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	99	None	add
326	[BUG]  [BUGGY]          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  thenBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  thenBlock  =  allCatchNodes.getLastChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  thenBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  thenBlock  =  allCatchNodes.getLastChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	                Node        elseBlock        =        allCatchNodes.getFirstChild();        Node    thenBlock    =    allCatchNodes.getFirstChild();    Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  thenBlock  =  allCatchNodes.getLastChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	99	None	add
327	[BUG]  [BUGGY]          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  thenBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getLastChild();  Node  thenBlock  =  allCatchNodes.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  thenBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getLastChild();  Node  thenBlock  =  allCatchNodes.getFirstChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	                Node        elseBlock        =        allCatchNodes.getFirstChild();        Node    thenBlock    =    allCatchNodes.getFirstChild();    Node  elseBlock  =  allCatchNodes.getLastChild();  Node  thenBlock  =  allCatchNodes.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	99	None	add
328	[BUG]  [BUGGY]          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  thenBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  finallyBlock  =  allCatchNodes.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  thenBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  finallyBlock  =  allCatchNodes.getFirstChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	                Node        elseBlock        =        allCatchNodes.getFirstChild();        Node    thenBlock    =    allCatchNodes.getFirstChild();    Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  finallyBlock  =  allCatchNodes.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	99	None	add
329	[BUG]  [BUGGY]          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  thenBlock  =  allCatchNodes.getFirstChild();  Node  otherBlock  =  allCatchNodes.getFirstChild();  Node  thenBlock  =  allCatchNodes.getFirstChild();  [CE]  variable  thenBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]            AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  thenBlock  =  allCatchNodes.getFirstChild();  Node  otherBlock  =  allCatchNodes.getFirstChild();  Node  thenBlock  =  allCatchNodes.getFirstChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	                Node        elseBlock        =        allCatchNodes.getFirstChild();        Node    thenBlock    =    allCatchNodes.getFirstChild();    Node  otherBlock  =  allCatchNodes.getFirstChild();  Node  thenBlock  =  allCatchNodes.getFirstChild();	  	non-compiled	[CE]  variable  thenBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	99	None	add
330	[BUG]  [BUGGY]  if(allCatchNodes!=  null  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {  if(allCatchNodes!=  null  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {  if(allCatchNodes!=  null  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=    null    ||    NodeUtil.hasCatchHandler(allCatchNodes))    {    if(allCatchNodes!=  null  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {	  	non-compiled	[CE]  illegal  start  of  expression	111	None	add
331	[BUG]  [BUGGY]  if(allCatchNodes!=  null  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {  if(allCatchNodes  ==  null  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {  if(allCatchNodes  ==  null  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=    null    ||    NodeUtil.hasCatchHandler(allCatchNodes))    {    if(allCatchNodes  ==  null  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {	  	non-compiled	[CE]  illegal  start  of  expression	111	None	add
332	[BUG]  [BUGGY]  if(allCatchNodes!=  null  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {  If(allCatchNodes!=  null  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {  [CE]  ';'  expected  [FE]        RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {  If(allCatchNodes!=  null  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=    null    ||    NodeUtil.hasCatchHandler(allCatchNodes))    {    If(allCatchNodes!=  null  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {	  	non-compiled	[CE]  ';'  expected	111	None	add
333	[BUG]  [BUGGY]  if(allCatchNodes!=  null  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {  if(allCatchNodes  >=  null  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]          RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {  if(allCatchNodes  >=  null  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=    null    ||    NodeUtil.hasCatchHandler(allCatchNodes))    {    if(allCatchNodes  >=  null  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {	  	non-compiled	[CE]  illegal  start  of  expression	111	None	add
334	[BUG]  [BUGGY]  if(allCatchNodes!=  null  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  [CE]  illegal  start  of  expression  [FE]            RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=    null    ||    NodeUtil.hasCatchHandler(allCatchNodes))    {    Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);	  	non-compiled	[CE]  illegal  start  of  expression	111	None	add
335	[BUG]  [BUGGY]  if(!NodeUtil.isExpressionNode(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]        RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!NodeUtil.isExpressionNode(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!NodeUtil.isExpressionNode(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.isExpressionNode(allCatchNodes)||    NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	169	None	replace
336	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes);  Preconditions.checkState(allCatchNodes.hasOneChild());  [CE]  illegal  start  of  type  [FE]            RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes);  Preconditions.checkState(allCatchNodes.hasOneChild());  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes);  Preconditions.checkState(allCatchNodes.hasOneChild());	  if(NodeUtil.hasFinally(allCatchNodes))    {    Node    allCatchNodes    =    NodeUtil.getCatchBlock(allCatchNodes);    Preconditions.checkState(allCatchNodes.hasOneChild());    	non-compiled	[CE]  illegal  start  of  type	186	None	replace
337	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes);  [CE]  illegal  start  of  type  [FE]              RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes);  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes);	  if(NodeUtil.hasFinally(allCatchNodes))    {    Node    allCatchNodes    =    NodeUtil.getCatchBlock(allCatchNodes);    Preconditions.checkState(allCatchNodes.hasOneChild());    	non-compiled	[CE]  illegal  start  of  type	186	None	replace
338	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(labelName);  Preconditions.checkState(allCatchNodes.hasOneChild());  [CE]  illegal  start  of  type  [FE]                RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(labelName);  Preconditions.checkState(allCatchNodes.hasOneChild());  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(labelName);  Preconditions.checkState(allCatchNodes.hasOneChild());	  if(NodeUtil.hasFinally(allCatchNodes))    {    Node    allCatchNodes    =    NodeUtil.getCatchBlock(allCatchNodes);    Preconditions.checkState(allCatchNodes.hasOneChild());    	non-compiled	[CE]  illegal  start  of  type	186	None	replace
339	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes.hasOneChild()  &&!NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	if(allCatchNodes.hasOneChild()  &&!NodeUtil.hasFinally(allCatchNodes))  {	  if(allCatchNodes.hasOneChild()    ||!NodeUtil.hasFinally(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	61	6	replace
340	[BUG]  [BUGGY]  if(allCatchNodes.hasOneChild()  &&!NodeUtil.hasFinally(allCatchNodes))  {  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes.hasOneChild()  &&!NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes.hasOneChild()  &&!NodeUtil.hasFinally(allCatchNodes))  {	  if(allCatchNodes.hasOneChild()    ||!NodeUtil.hasFinally(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	61	6	replace
341	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes.hasChildren()  ||!NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	if(allCatchNodes.hasChildren()  ||!NodeUtil.hasFinally(allCatchNodes))  {	  if(allCatchNodes.hasOneChild()    ||!NodeUtil.hasFinally(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	61	2	replace
342	[BUG]  [BUGGY]  if(allCatchNodes.hasChildren()  ||!NodeUtil.hasFinally(allCatchNodes))  {  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes.hasChildren()  ||!NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes.hasChildren()  ||!NodeUtil.hasFinally(allCatchNodes))  {	  if(allCatchNodes.hasOneChild()    ||!NodeUtil.hasFinally(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	61	2	replace
343	[BUG]  [BUGGY]  if(allCatchNodes.isEmpty()  ||!NodeUtil.hasFinally(allCatchNodes))  {  if(allCatchNodes.isEmpty()  ||!NodeUtil.hasFinally(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes.isEmpty()  ||!NodeUtil.hasFinally(allCatchNodes))  {  if(allCatchNodes.isEmpty()  ||!NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes.isEmpty()    ||!NodeUtil.hasFinally(allCatchNodes))    {    if(allCatchNodes.isEmpty()  ||!NodeUtil.hasFinally(allCatchNodes))  {	  	non-compiled	[CE]  illegal  start  of  expression	206	None	add
344	[BUG]  [BUGGY]  if(allCatchNodes.isEmpty()  ||!NodeUtil.hasFinally(allCatchNodes))  {  If(allCatchNodes.isEmpty()  ||!NodeUtil.hasFinally(allCatchNodes))  {  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes.isEmpty()  ||!NodeUtil.hasFinally(allCatchNodes))  {  If(allCatchNodes.isEmpty()  ||!NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes.isEmpty()    ||!NodeUtil.hasFinally(allCatchNodes))    {    If(allCatchNodes.isEmpty()  ||!NodeUtil.hasFinally(allCatchNodes))  {	  	non-compiled	[CE]  ';'  expected	206	None	add
345	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Preconditions.checkState(allCatchNodes.isEmpty());    Preconditions.checkArgument(allCatchNodes.isEmpty());  Preconditions.checkArgument(allCatchNodes.isEmpty());  Preconditions.checkArgument(allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	                Preconditions.checkState(allCatchNodes.isEmpty());        Preconditions.checkArgument(allCatchNodes.isEmpty());    Preconditions.checkArgument(allCatchNodes.isEmpty());  Preconditions.checkArgument(allCatchNodes.isEmpty());	  	compilable	  [FE]  RuntimeException  	192	6	add
346	[BUG]  [BUGGY]          Preconditions.checkState(allCatchNodes.isEmpty());    Preconditions.checkArgument(allCatchNodes.isEmpty());  Preconditions.checkArgument(allCatchNodes.isEmpty());  Preconditions.checkArgument(allCatchNodes.isEmpty());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Preconditions.checkState(allCatchNodes.isEmpty());    Preconditions.checkArgument(allCatchNodes.isEmpty());  Preconditions.checkArgument(allCatchNodes.isEmpty());  Preconditions.checkArgument(allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	                Preconditions.checkState(allCatchNodes.isEmpty());        Preconditions.checkArgument(allCatchNodes.isEmpty());    Preconditions.checkArgument(allCatchNodes.isEmpty());  Preconditions.checkArgument(allCatchNodes.isEmpty());	  	compilable	  [FE]  RuntimeException  	192	6	add
347	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Preconditions.checkState(allCatchNodes.isEmpty());    Preconditions.checkArgument(allCatchNodes.isEmpty());  Preconditions.checkState(allCatchNodes.isEmpty());  Preconditions.checkArgument(allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	                Preconditions.checkState(allCatchNodes.isEmpty());        Preconditions.checkArgument(allCatchNodes.isEmpty());    Preconditions.checkState(allCatchNodes.isEmpty());  Preconditions.checkArgument(allCatchNodes.isEmpty());	  	compilable	  [FE]  RuntimeException  	192	6	add
348	[BUG]  [BUGGY]          Preconditions.checkState(allCatchNodes.isEmpty());    Preconditions.checkArgument(allCatchNodes.isEmpty());  Preconditions.checkState(allCatchNodes.isEmpty());  Preconditions.checkArgument(allCatchNodes.isEmpty());  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Preconditions.checkState(allCatchNodes.isEmpty());    Preconditions.checkArgument(allCatchNodes.isEmpty());  Preconditions.checkState(allCatchNodes.isEmpty());  Preconditions.checkArgument(allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	                Preconditions.checkState(allCatchNodes.isEmpty());        Preconditions.checkArgument(allCatchNodes.isEmpty());    Preconditions.checkState(allCatchNodes.isEmpty());  Preconditions.checkArgument(allCatchNodes.isEmpty());	  	compilable	  [FE]  RuntimeException  	192	6	add
349	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Preconditions.checkState(allCatchNodes.isEmpty());    Preconditions.checkArgument(allCatchNodes.isEmpty());  Preconditions.checkArgument(allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	                Preconditions.checkState(allCatchNodes.isEmpty());        Preconditions.checkArgument(allCatchNodes.isEmpty());    Preconditions.checkArgument(allCatchNodes.isEmpty());	  	compilable	  [FE]  RuntimeException  	192	6	add
350	[BUG]  [BUGGY]          Preconditions.checkState(allCatchNodes.isEmpty());    Preconditions.checkArgument(allCatchNodes.isEmpty());  Preconditions.checkArgument(allCatchNodes.isEmpty());  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Preconditions.checkState(allCatchNodes.isEmpty());    Preconditions.checkArgument(allCatchNodes.isEmpty());  Preconditions.checkArgument(allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	                Preconditions.checkState(allCatchNodes.isEmpty());        Preconditions.checkArgument(allCatchNodes.isEmpty());    Preconditions.checkArgument(allCatchNodes.isEmpty());	  	compilable	  [FE]  RuntimeException  	192	6	add
351	[BUG]  [BUGGY]          Preconditions.checkState(allCatchNodes.isEmpty());    Preconditions.checkArgument(allCatchNodes.isEmpty());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  Preconditions.checkArgument(allCatchNodes.isEmpty());  [CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Preconditions.checkState(allCatchNodes.isEmpty());    Preconditions.checkArgument(allCatchNodes.isEmpty());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  Preconditions.checkArgument(allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	                Preconditions.checkState(allCatchNodes.isEmpty());        Preconditions.checkArgument(allCatchNodes.isEmpty());    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  Preconditions.checkArgument(allCatchNodes.isEmpty());	  	non-compiled	[CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	192	None	add
352	[BUG]  [BUGGY]          Preconditions.checkState(allCatchNodes.isEmpty());    Preconditions.checkArgument(allCatchNodes.isEmpty());  Preconditions.checkArgument(allCatchNodes.isEmpty());  preconditions.checkArgument(allCatchNodes.isEmpty());  [CE]  cannot  find  symbol  preconditions  [FE]            RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Preconditions.checkState(allCatchNodes.isEmpty());    Preconditions.checkArgument(allCatchNodes.isEmpty());  Preconditions.checkArgument(allCatchNodes.isEmpty());  preconditions.checkArgument(allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	                Preconditions.checkState(allCatchNodes.isEmpty());        Preconditions.checkArgument(allCatchNodes.isEmpty());    Preconditions.checkArgument(allCatchNodes.isEmpty());  preconditions.checkArgument(allCatchNodes.isEmpty());	  	non-compiled	[CE]  cannot  find  symbol  preconditions	192	None	add
353	[BUG]  [BUGGY]  Node  allCatchNodes  =  AllCatchNodes.isEmpty();  [CE]  illegal  start  of  type  [FE]                RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  allCatchNodes  =  AllCatchNodes.isEmpty();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes  =  AllCatchNodes.isEmpty();	          Preconditions.checkState(allCatchNodes.isEmpty());    Node    allCatchNodes    =    AllCatchNodes.isEmpty();    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
354	[BUG]  [BUGGY]  if(allCatchNodes.isEmpty())  {  Preconditions.checkState(allCatchNodes.isEmpty());  Node  allCatchNodes  =  AllCatchNodes.isEmpty();  }  [CE]  illegal  start  of  type  [FE]                  RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes.isEmpty())  {  Preconditions.checkState(allCatchNodes.isEmpty());  Node  allCatchNodes  =  AllCatchNodes.isEmpty();  }  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes.isEmpty())  {  Preconditions.checkState(allCatchNodes.isEmpty());  Node  allCatchNodes  =  AllCatchNodes.isEmpty();  }	          Preconditions.checkState(allCatchNodes.isEmpty());    Node    allCatchNodes    =    AllCatchNodes.isEmpty();    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
355	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  allCatchNodes  =  AllCatchNodes.isEmpty();  [CE]  illegal  start  of  type  [FE]                    RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  allCatchNodes  =  AllCatchNodes.isEmpty();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.hasOneChild());  Node  allCatchNodes  =  AllCatchNodes.isEmpty();	          Preconditions.checkState(allCatchNodes.isEmpty());    Node    allCatchNodes    =    AllCatchNodes.isEmpty();    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
356	[BUG]  [BUGGY]  if(allCatchNodes.isEmpty())  {  Preconditions.checkState(allCatchNodes.isEmpty();  Node  allCatchNodes  =  AllCatchNodes.isEmpty();  }  [CE]  ')'  expected  [FE]                      RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes.isEmpty())  {  Preconditions.checkState(allCatchNodes.isEmpty();  Node  allCatchNodes  =  AllCatchNodes.isEmpty();  }  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes.isEmpty())  {  Preconditions.checkState(allCatchNodes.isEmpty();  Node  allCatchNodes  =  AllCatchNodes.isEmpty();  }	          Preconditions.checkState(allCatchNodes.isEmpty());    Node    allCatchNodes    =    AllCatchNodes.isEmpty();    	non-compiled	[CE]  ')'  expected	24	None	replace
357	[BUG]  [BUGGY]  if(!NodeUtil.hasFinally(allCatchNodes)||!NodeUtil.hasFinally(allCatchNodes))  {  if(!NodeUtil.hasFinally(allCatchNodes)||!NodeUtil.hasFinally(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!NodeUtil.hasFinally(allCatchNodes)||!NodeUtil.hasFinally(allCatchNodes))  {  if(!NodeUtil.hasFinally(allCatchNodes)||!NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!NodeUtil.hasFinally(allCatchNodes)||!NodeUtil.hasFinally(allCatchNodes))    {    if(!NodeUtil.hasFinally(allCatchNodes)||!NodeUtil.hasFinally(allCatchNodes))  {	  	non-compiled	[CE]  illegal  start  of  expression	58	None	add
358	[BUG]  [BUGGY]  if(!NodeUtil.hasFinally(allCatchNodes)||!NodeUtil.hasFinally(allCatchNodes))  {  If(!NodeUtil.hasFinally(allCatchNodes)||!NodeUtil.hasFinally(allCatchNodes))  {  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!NodeUtil.hasFinally(allCatchNodes)||!NodeUtil.hasFinally(allCatchNodes))  {  If(!NodeUtil.hasFinally(allCatchNodes)||!NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!NodeUtil.hasFinally(allCatchNodes)||!NodeUtil.hasFinally(allCatchNodes))    {    If(!NodeUtil.hasFinally(allCatchNodes)||!NodeUtil.hasFinally(allCatchNodes))  {	  	non-compiled	[CE]  ';'  expected	58	None	add
359	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock);  [CE]  illegal  start  of  type  [FE]              RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock);	          Preconditions.checkState(allCatchNodes.isEmpty());    Node    allCatchNodes    =    NodeUtil.getCatchBlock(n);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
360	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock);  [CE]  illegal  start  of  type  [FE]                RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.isEmpty());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock);	          Preconditions.checkState(allCatchNodes.isEmpty());    Node    allCatchNodes    =    NodeUtil.getCatchBlock(n);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
361	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock,  n);  [CE]  illegal  start  of  type  [FE]                  RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock,  n);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.isEmpty());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock,  n);	          Preconditions.checkState(allCatchNodes.isEmpty());    Node    allCatchNodes    =    NodeUtil.getCatchBlock(n);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
362	[BUG]  [BUGGY]  Preconditions.checkState(labelName.isEmpty());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  [CE]  illegal  start  of  type  [FE]                    RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(labelName.isEmpty());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(labelName.isEmpty());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);	          Preconditions.checkState(allCatchNodes.isEmpty());    Node    allCatchNodes    =    NodeUtil.getCatchBlock(n);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
363	[BUG]  [BUGGY]  Node  finallyBlock  =  allCatchNodes.removeFirstChild(),  tryBlock);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  finallyBlock  =  allCatchNodes.removeFirstChild(),  tryBlock);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  finallyBlock  =  allCatchNodes.removeFirstChild(),  tryBlock);	  Node    finallyBlock    =    allCatchNodes.removeFirstChild();    	non-compiled	[CE]  ';'  expected	196	None	replace
364	[BUG]  [BUGGY]  Node  finallyBlock  =  tryBlock.removeFirstChild();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  finallyBlock  =  tryBlock.removeFirstChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  finallyBlock  =  tryBlock.removeFirstChild();	  Node    finallyBlock    =    allCatchNodes.removeFirstChild();    	non-compiled	[CE]  illegal  start  of  type	196	None	replace
365	[BUG]  [BUGGY]  if(NodeUtil.isFinally(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(NodeUtil.isFinally(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(NodeUtil.isFinally(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.hasFinally(allCatchNodes)||    NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
366	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	if(!NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.hasFinally(allCatchNodes)||    NodeUtil.hasFinally(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	5	6	replace
367	[BUG]  [BUGGY]  if(!NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.hasFinally(allCatchNodes)||    NodeUtil.hasFinally(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	5	6	replace
368	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes.hasOneChild()  &&!NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	if(allCatchNodes.hasOneChild()  &&!NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(allCatchNodes.hasOneChild()    ||!NodeUtil.hasCatchHandler(allCatchNodes))    {    	compilable	  [FE]  AssertionFailedError  	86	6	replace
369	[BUG]  [BUGGY]  if(allCatchNodes.hasOneChild()  &&!NodeUtil.hasCatchHandler(allCatchNodes))  {  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes.hasOneChild()  &&!NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes.hasOneChild()  &&!NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(allCatchNodes.hasOneChild()    ||!NodeUtil.hasCatchHandler(allCatchNodes))    {    	compilable	  [FE]  AssertionFailedError  	86	6	replace
370	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes.hasChildren()  ||!NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	if(allCatchNodes.hasChildren()  ||!NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(allCatchNodes.hasOneChild()    ||!NodeUtil.hasCatchHandler(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	86	2	replace
371	[BUG]  [BUGGY]  if(allCatchNodes.hasChildren()  ||!NodeUtil.hasCatchHandler(allCatchNodes))  {  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes.hasChildren()  ||!NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes.hasChildren()  ||!NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(allCatchNodes.hasOneChild()    ||!NodeUtil.hasCatchHandler(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	86	2	replace
372	[BUG]  [BUGGY]  if(!NodeUtil.isCatchHandler(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]        RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!NodeUtil.isCatchHandler(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!NodeUtil.isCatchHandler(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.isCatchHandler(allCatchNodes)&&    NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
373	[BUG]  [BUGGY]  if(NodeUtil.isCatchHandler(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(NodeUtil.isCatchHandler(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(NodeUtil.isCatchHandler(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.isCatchHandler(allCatchNodes)&&    NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
374	[BUG]  [BUGGY]  if(AllCatchNodes.isCatchHandler(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  cannot  find  symbol  AllCatchNodes  [FE]            RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(AllCatchNodes.isCatchHandler(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(AllCatchNodes.isCatchHandler(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.isCatchHandler(allCatchNodes)&&    NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol  AllCatchNodes	57	None	replace
375	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.get(0);  Node  thenBlock  =  allCatchNodes.getLastChild();  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  elseBlock  =  allCatchNodes.get(0);  Node  thenBlock  =  allCatchNodes.getLastChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  elseBlock  =  allCatchNodes.get(0);  Node  thenBlock  =  allCatchNodes.getLastChild();	          Node    elseBlock    =    allCatchNodes.getLastChild();    Node    thenBlock    =    allCatchNodes.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
376	[BUG]  [BUGGY]  if(allCatchNodes!=  null  ||  NodeUtil.hasCatchHandler(allCatchNodes)||  tryMinimizeExits(allCatchNodes.getFirstChild(),  exitType,  labelName))  {  [CE]  'void'  type  not  allowed  here  [FE]              AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  ||  NodeUtil.hasCatchHandler(allCatchNodes)||  tryMinimizeExits(allCatchNodes.getFirstChild(),  exitType,  labelName))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=  null  ||  NodeUtil.hasCatchHandler(allCatchNodes)||  tryMinimizeExits(allCatchNodes.getFirstChild(),  exitType,  labelName))  {	  if(allCatchNodes!=    null    &&    NodeUtil.hasCatchHandler(allCatchNodes)||    tryMinimizeExits(allCatchNodes.getFirstChild(),    exitType,    labelName))    {    	non-compiled	[CE]  'void'  type  not  allowed  here	117	None	replace
377	[BUG]  [BUGGY]  if(allCatchNodes!=  null  &&  NodeUtil.hasCatchHandler(allCatchNodes)&&  tryMinimizeExits(allCatchNodes.getFirstChild(),  exitType,  labelName))  {  [CE]  'void'  type  not  allowed  here  [FE]                AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  &&  NodeUtil.hasCatchHandler(allCatchNodes)&&  tryMinimizeExits(allCatchNodes.getFirstChild(),  exitType,  labelName))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=  null  &&  NodeUtil.hasCatchHandler(allCatchNodes)&&  tryMinimizeExits(allCatchNodes.getFirstChild(),  exitType,  labelName))  {	  if(allCatchNodes!=    null    &&    NodeUtil.hasCatchHandler(allCatchNodes)||    tryMinimizeExits(allCatchNodes.getFirstChild(),    exitType,    labelName))    {    	non-compiled	[CE]  'void'  type  not  allowed  here	117	None	replace
378	[BUG]  [BUGGY]  if(allCatchNodes!=  null  &&  NodeUtil.hasCatchHandler(labelName)||  tryMinimizeExits(allCatchNodes.getFirstChild(),  exitType,  labelName))  {  [CE]  method  hasCatchHandler  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  &&  NodeUtil.hasCatchHandler(labelName)||  tryMinimizeExits(allCatchNodes.getFirstChild(),  exitType,  labelName))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=  null  &&  NodeUtil.hasCatchHandler(labelName)||  tryMinimizeExits(allCatchNodes.getFirstChild(),  exitType,  labelName))  {	  if(allCatchNodes!=    null    &&    NodeUtil.hasCatchHandler(allCatchNodes)||    tryMinimizeExits(allCatchNodes.getFirstChild(),    exitType,    labelName))    {    	non-compiled	[CE]  method  hasCatchHandler  in  class  NodeUtil  cannot  be  applied  to  given  types;	117	None	replace
379	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes);  if(NodeUtil.hasFinally(allCatchNodes))  {  [CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes);  if(NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes);  if(NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.hasFinally(allCatchNodes))    {    Node    allCatchNodes    =    NodeUtil.getCatchBlock(allCatchNodes);    if(NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	184	None	replace
380	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes);  if(NodeUtil.hasFinally(allCatchNodes))  {  [CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes);  if(NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.hasOneChild());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes);  if(NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.hasFinally(allCatchNodes))    {    Node    allCatchNodes    =    NodeUtil.getCatchBlock(allCatchNodes);    if(NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	184	None	replace
381	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes);  if(NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]            RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes);  if(NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes);  if(NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.hasFinally(allCatchNodes))    {    Node    allCatchNodes    =    NodeUtil.getCatchBlock(allCatchNodes);    if(NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	184	None	replace
382	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(allCatchNodes);  if(NodeUtil.hasFinally(allCatchNodes))  {  [CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]              RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(allCatchNodes);  if(NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(allCatchNodes);  if(NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.hasFinally(allCatchNodes))    {    Node    allCatchNodes    =    NodeUtil.getCatchBlock(allCatchNodes);    if(NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	184	None	replace
383	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes).getFirstChild();  if(!NodeUtil.hasFinally(allCatchNodes))  {  [CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes).getFirstChild();  if(!NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes).getFirstChild();  if(!NodeUtil.hasFinally(allCatchNodes))  {	  if(!NodeUtil.hasFinally(allCatchNodes))    {    Node    allCatchNodes    =    NodeUtil.getCatchBlock(allCatchNodes).getFirstChild();    if(!NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	183	None	replace
384	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(allCatchNodes).getFirstChild();  if(!NodeUtil.hasFinally(allCatchNodes))  {  [CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]            RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(allCatchNodes).getFirstChild();  if(!NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(allCatchNodes).getFirstChild();  if(!NodeUtil.hasFinally(allCatchNodes))  {	  if(!NodeUtil.hasFinally(allCatchNodes))    {    Node    allCatchNodes    =    NodeUtil.getCatchBlock(allCatchNodes).getFirstChild();    if(!NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	183	None	replace
385	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes).getLastChild();  if(!NodeUtil.hasFinally(allCatchNodes))  {  [CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]              RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes).getLastChild();  if(!NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes).getLastChild();  if(!NodeUtil.hasFinally(allCatchNodes))  {	  if(!NodeUtil.hasFinally(allCatchNodes))    {    Node    allCatchNodes    =    NodeUtil.getCatchBlock(allCatchNodes).getFirstChild();    if(!NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	183	None	replace
386	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes).getFirstChild();  if(!NodeUtil.hasFinally(all  [CE]  ')'  expected  [FE]                RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes).getFirstChild();  if(!NodeUtil.hasFinally(all  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.hasOneChild());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes).getFirstChild();  if(!NodeUtil.hasFinally(all	  if(!NodeUtil.hasFinally(allCatchNodes))    {    Node    allCatchNodes    =    NodeUtil.getCatchBlock(allCatchNodes).getFirstChild();    if(!NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  ')'  expected	183	None	replace
387	[BUG]  [BUGGY]  if(allCatchNodes!=  null  &&  allCatchNodes.hasOneChild()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  if(allCatchNodes!=  null  &&  allCatchNodes.hasOneChild()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  &&  allCatchNodes.hasOneChild()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  if(allCatchNodes!=  null  &&  allCatchNodes.hasOneChild()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=    null    &&    allCatchNodes.hasOneChild()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    if(allCatchNodes!=  null  &&  allCatchNodes.hasOneChild()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {	  	non-compiled	[CE]  illegal  start  of  expression	151	None	add
388	[BUG]  [BUGGY]  if(allCatchNodes!=  null  &&  allCatchNodes.hasOneChild()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  if(allCatchNodes  ==  null  &&  allCatchNodes.hasOneChild()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  &&  allCatchNodes.hasOneChild()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  if(allCatchNodes  ==  null  &&  allCatchNodes.hasOneChild()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=    null    &&    allCatchNodes.hasOneChild()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    if(allCatchNodes  ==  null  &&  allCatchNodes.hasOneChild()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {	  	non-compiled	[CE]  illegal  start  of  expression	151	None	add
389	[BUG]  [BUGGY]  if(allCatchNodes!=  null  &&  allCatchNodes.hasOneChild()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  If(allCatchNodes!=  null  &&  allCatchNodes.hasOneChild()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  &&  allCatchNodes.hasOneChild()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  If(allCatchNodes!=  null  &&  allCatchNodes.hasOneChild()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=    null    &&    allCatchNodes.hasOneChild()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    If(allCatchNodes!=  null  &&  allCatchNodes.hasOneChild()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {	  	non-compiled	[CE]  ';'  expected	151	None	add
390	[BUG]  [BUGGY]  if(allCatchNodes!=  null  &&  allCatchNodes.hasOneChild()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  if(allCatchNodes  >=  null  &&  allCatchNodes.hasOneChild()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  &&  allCatchNodes.hasOneChild()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  if(allCatchNodes  >=  null  &&  allCatchNodes.hasOneChild()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=    null    &&    allCatchNodes.hasOneChild()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    if(allCatchNodes  >=  null  &&  allCatchNodes.hasOneChild()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {	  	non-compiled	[CE]  illegal  start  of  expression	151	None	add
391	[BUG]  [BUGGY]  if(allCatchNodes!=  null  &&  allCatchNodes.hasOneChild()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  if(allCatchNodes!=  null  &&  allCatchNodes.hasOneChild()  &&  nodeUtil.hasCatchHandler(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  &&  allCatchNodes.hasOneChild()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  if(allCatchNodes!=  null  &&  allCatchNodes.hasOneChild()  &&  nodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=    null    &&    allCatchNodes.hasOneChild()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    if(allCatchNodes!=  null  &&  allCatchNodes.hasOneChild()  &&  nodeUtil.hasCatchHandler(allCatchNodes))  {	  	non-compiled	[CE]  illegal  start  of  expression	151	None	add
392	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  &&!NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	if(allCatchNodes!=  null  &&!NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {	  if(!NodeUtil.hasCatchHandler(allCatchNodes)&&    NodeUtil.hasFinally(allCatchNodes))    {    	compilable	  [FE]  AssertionFailedError  	7	6	replace
393	[BUG]  [BUGGY]  if(allCatchNodes!=  null  &&!NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  &&!NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=  null  &&!NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {	  if(!NodeUtil.hasCatchHandler(allCatchNodes)&&    NodeUtil.hasFinally(allCatchNodes))    {    	compilable	  [FE]  AssertionFailedError  	7	6	replace
394	[BUG]  [BUGGY]  Node  c  =  allCatchNodes.getChildCount()  -  1;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  c  =  allCatchNodes.getChildCount()  -  1;  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  c  =  allCatchNodes.getChildCount()  -  1;	  Node    c    =    allCatchNodes.getChildCount();    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
395	[BUG]  [BUGGY]  Node  c  =  allCatchNodes.getChildCount()  +  1;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  c  =  allCatchNodes.getChildCount()  +  1;  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  c  =  allCatchNodes.getChildCount()  +  1;	  Node    c    =    allCatchNodes.getChildCount();    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
396	[BUG]  [BUGGY]  Node  c  =  allCatchNodes.getChildCount()  -  2;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  c  =  allCatchNodes.getChildCount()  -  2;  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  c  =  allCatchNodes.getChildCount()  -  2;	  Node    c    =    allCatchNodes.getChildCount();    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
397	[BUG]  [BUGGY]  Node  c  =  allCatchNodes.getChildCount()  *  2;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  c  =  allCatchNodes.getChildCount()  *  2;  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  c  =  allCatchNodes.getChildCount()  *  2;	  Node    c    =    allCatchNodes.getChildCount();    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
398	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty(),  exitType,  labelName);  [CE]  illegal  start  of  type  [FE]        RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty(),  exitType,  labelName);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.isEmpty(),  exitType,  labelName);	  Preconditions.checkState(allCatchNodes.isEmpty(),    exitType);    	non-compiled	[CE]  illegal  start  of  type	179	None	replace
399	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  ||  exitType);  [CE]  illegal  start  of  type  [FE]          RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  ||  exitType);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.isEmpty()  ||  exitType);	  Preconditions.checkState(allCatchNodes.isEmpty(),    exitType);    	non-compiled	[CE]  illegal  start  of  type	179	None	replace
400	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty(),  tryMinimizeExits,  exitType);  [CE]  illegal  start  of  type  [FE]            RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty(),  tryMinimizeExits,  exitType);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.isEmpty(),  tryMinimizeExits,  exitType);	  Preconditions.checkState(allCatchNodes.isEmpty(),    exitType);    	non-compiled	[CE]  illegal  start  of  type	179	None	replace
401	[BUG]  [BUGGY]  Preconditions.checkState(!allCatchNodes.isEmpty(),  exitType);  [CE]  illegal  start  of  type  [FE]              RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(!allCatchNodes.isEmpty(),  exitType);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(!allCatchNodes.isEmpty(),  exitType);	  Preconditions.checkState(allCatchNodes.isEmpty(),    exitType);    	non-compiled	[CE]  illegal  start  of  type	179	None	replace
402	[BUG]  [BUGGY]  if(!NodeUtil.isCatchHandler(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]        RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!NodeUtil.isCatchHandler(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!NodeUtil.isCatchHandler(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.isCatchHandler(allCatchNodes)||    NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	191	None	replace
403	[BUG]  [BUGGY]  if(AllCatchNodes.isCatchHandler(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  cannot  find  symbol  AllCatchNodes  [FE]          RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(AllCatchNodes.isCatchHandler(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(AllCatchNodes.isCatchHandler(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.isCatchHandler(allCatchNodes)||    NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol  AllCatchNodes	191	None	replace
404	[BUG]  [BUGGY]  Node  catchNode  =  anyCatchNodes.getFirstChild();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  catchNode  =  anyCatchNodes.getFirstChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  catchNode  =  anyCatchNodes.getFirstChild();	  Node    catchNode    =    tryBlock.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
405	[BUG]  [BUGGY]  if(allCatchNodes.hasOneChild())  {  if(!NodeUtil.hasCatchHandler(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes.hasOneChild())  {  if(!NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes.hasOneChild())  {  if(!NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(!NodeUtil.hasCatchHandler(allCatchNodes))    {    if(!NodeUtil.hasCatchHandler(allCatchNodes))    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
406	[BUG]  [BUGGY]  if(allCatchNodes.isEmpty())  {  if(!NodeUtil.hasCatchHandler(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes.isEmpty())  {  if(!NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes.isEmpty())  {  if(!NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(!NodeUtil.hasCatchHandler(allCatchNodes))    {    if(!NodeUtil.hasCatchHandler(allCatchNodes))    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
407	[BUG]  [BUGGY]  if(allCatchNodes!=  null)  {  if(!NodeUtil.hasCatchHandler(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null)  {  if(!NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=  null)  {  if(!NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(!NodeUtil.hasCatchHandler(allCatchNodes))    {    if(!NodeUtil.hasCatchHandler(allCatchNodes))    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
408	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.getFirstChild()  ==  null);  Node  c  =  allCatchNodes.getFirstChild();  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.getFirstChild()  ==  null);  Node  c  =  allCatchNodes.getFirstChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.getFirstChild()  ==  null);  Node  c  =  allCatchNodes.getFirstChild();	          Node    c    =    allCatchNodes.getFirstChild();    Node    c    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
409	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  c  =  allCatchNodes.getFirstChild();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  c  =  allCatchNodes.getFirstChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.hasOneChild());  Node  c  =  allCatchNodes.getFirstChild();	          Node    c    =    allCatchNodes.getFirstChild();    Node    c    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
410	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.getFirstChild()!=  null);  Node  c  =  allCatchNodes.getFirstChild();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.getFirstChild()!=  null);  Node  c  =  allCatchNodes.getFirstChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.getFirstChild()!=  null);  Node  c  =  allCatchNodes.getFirstChild();	          Node    c    =    allCatchNodes.getFirstChild();    Node    c    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
411	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.getFirstChild()  ==  n);  Node  c  =  allCatchNodes.getFirstChild();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.getFirstChild()  ==  n);  Node  c  =  allCatchNodes.getFirstChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.getFirstChild()  ==  n);  Node  c  =  allCatchNodes.getFirstChild();	          Node    c    =    allCatchNodes.getFirstChild();    Node    c    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
412	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)||  allCatchNodes.isEmpty())  {  if(NodeUtil.hasFinally(allCatchNodes)||  allCatchNodes.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)||  allCatchNodes.isEmpty())  {  if(NodeUtil.hasFinally(allCatchNodes)||  allCatchNodes.isEmpty())  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(NodeUtil.hasFinally(allCatchNodes)||    allCatchNodes.isEmpty())    {    if(NodeUtil.hasFinally(allCatchNodes)||  allCatchNodes.isEmpty())  {	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
413	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)||  allCatchNodes.isEmpty())  {  If(NodeUtil.hasFinally(allCatchNodes)||  allCatchNodes.isEmpty())  {  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)||  allCatchNodes.isEmpty())  {  If(NodeUtil.hasFinally(allCatchNodes)||  allCatchNodes.isEmpty())  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(NodeUtil.hasFinally(allCatchNodes)||    allCatchNodes.isEmpty())    {    If(NodeUtil.hasFinally(allCatchNodes)||  allCatchNodes.isEmpty())  {	  	non-compiled	[CE]  ';'  expected	17	None	add
414	[BUG]  [BUGGY]  if(!NodeUtil.hasCatchHandler(allCatchNodes)||!NodeUtil.hasFinally(allCatchNodes))  {  if(!NodeUtil.hasCatchHandler(allCatchNodes)||!NodeUtil.hasFinally(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!NodeUtil.hasCatchHandler(allCatchNodes)||!NodeUtil.hasFinally(allCatchNodes))  {  if(!NodeUtil.hasCatchHandler(allCatchNodes)||!NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!NodeUtil.hasCatchHandler(allCatchNodes)||!NodeUtil.hasFinally(allCatchNodes))    {    if(!NodeUtil.hasCatchHandler(allCatchNodes)||!NodeUtil.hasFinally(allCatchNodes))  {	  	non-compiled	[CE]  illegal  start  of  expression	87	None	add
415	[BUG]  [BUGGY]  if(!NodeUtil.hasCatchHandler(allCatchNodes)||!NodeUtil.hasFinally(allCatchNodes))  {  if(!NodeUtil.hasCatchHandler(allCatchNodes)&|!NodeUtil.hasFinally(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!NodeUtil.hasCatchHandler(allCatchNodes)||!NodeUtil.hasFinally(allCatchNodes))  {  if(!NodeUtil.hasCatchHandler(allCatchNodes)&|!NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!NodeUtil.hasCatchHandler(allCatchNodes)||!NodeUtil.hasFinally(allCatchNodes))    {    if(!NodeUtil.hasCatchHandler(allCatchNodes)&|!NodeUtil.hasFinally(allCatchNodes))  {	  	non-compiled	[CE]  illegal  start  of  expression	87	None	add
416	[BUG]  [BUGGY]  if(!NodeUtil.hasCatchHandler(allCatchNodes)||!NodeUtil.hasFinally(allCatchNodes))  {  If(!NodeUtil.hasCatchHandler(allCatchNodes)||!NodeUtil.hasFinally(allCatchNodes))  {  [CE]  ';'  expected  [FE]        RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!NodeUtil.hasCatchHandler(allCatchNodes)||!NodeUtil.hasFinally(allCatchNodes))  {  If(!NodeUtil.hasCatchHandler(allCatchNodes)||!NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!NodeUtil.hasCatchHandler(allCatchNodes)||!NodeUtil.hasFinally(allCatchNodes))    {    If(!NodeUtil.hasCatchHandler(allCatchNodes)||!NodeUtil.hasFinally(allCatchNodes))  {	  	non-compiled	[CE]  ';'  expected	87	None	add
417	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(n);  Preconditions.checkState(allCatchNodes.hasOneChild());  [CE]  illegal  start  of  type  [FE]          RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(n);  Preconditions.checkState(allCatchNodes.hasOneChild());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(n);  Preconditions.checkState(allCatchNodes.hasOneChild());	          Preconditions.checkState(allCatchNodes.hasOneChild());    Node    allCatchNodes    =    NodeUtil.getAllCatchNodes(n);    Preconditions.checkState(allCatchNodes.hasOneChild());    	non-compiled	[CE]  illegal  start  of  type	221	None	replace
418	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(tryBlock);  [CE]  illegal  start  of  type  [FE]            RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(tryBlock);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.hasOneChild());  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(tryBlock);	          Preconditions.checkState(allCatchNodes.hasOneChild());    Node    allCatchNodes    =    NodeUtil.getAllCatchNodes(n);    Preconditions.checkState(allCatchNodes.hasOneChild());    	non-compiled	[CE]  illegal  start  of  type	221	None	replace
419	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(n);  [CE]  illegal  start  of  type  [FE]              RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(n);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.hasOneChild());  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(n);	          Preconditions.checkState(allCatchNodes.hasOneChild());    Node    allCatchNodes    =    NodeUtil.getAllCatchNodes(n);    Preconditions.checkState(allCatchNodes.hasOneChild());    	non-compiled	[CE]  illegal  start  of  type	221	None	replace
420	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  elseBlock  =  allCatchNodes.getFirstChild();  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  elseBlock  =  allCatchNodes.getFirstChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.hasOneChild());  Node  elseBlock  =  allCatchNodes.getFirstChild();	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    elseBlock    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
421	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.getFirstChild()  ==  null);  Node  elseBlock  =  allCatchNodes.getFirstChild();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.getFirstChild()  ==  null);  Node  elseBlock  =  allCatchNodes.getFirstChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.getFirstChild()  ==  null);  Node  elseBlock  =  allCatchNodes.getFirstChild();	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    elseBlock    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
422	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.getFirstChild()!=  null);  Node  elseBlock  =  allCatchNodes.getFirstChild();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.getFirstChild()!=  null);  Node  elseBlock  =  allCatchNodes.getFirstChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.getFirstChild()!=  null);  Node  elseBlock  =  allCatchNodes.getFirstChild();	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    elseBlock    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
423	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.getFirstChild()  ==  n);  Node  elseBlock  =  allCatchNodes.getFirstChild();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.getFirstChild()  ==  n);  Node  elseBlock  =  allCatchNodes.getFirstChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.getFirstChild()  ==  n);  Node  elseBlock  =  allCatchNodes.getFirstChild();	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    elseBlock    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
424	[BUG]  [BUGGY]  if(allCatchNodes!=  null  ||!NodeUtil.hasFinally(allCatchNodes))  {  if(allCatchNodes!=  null  ||!NodeUtil.hasFinally(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  ||!NodeUtil.hasFinally(allCatchNodes))  {  if(allCatchNodes!=  null  ||!NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=    null    ||!NodeUtil.hasFinally(allCatchNodes))    {    if(allCatchNodes!=  null  ||!NodeUtil.hasFinally(allCatchNodes))  {	  	non-compiled	[CE]  illegal  start  of  expression	143	None	add
425	[BUG]  [BUGGY]  if(allCatchNodes!=  null  ||!NodeUtil.hasFinally(allCatchNodes))  {  if(allCatchNodes  ==  null  ||!NodeUtil.hasFinally(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  ||!NodeUtil.hasFinally(allCatchNodes))  {  if(allCatchNodes  ==  null  ||!NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=    null    ||!NodeUtil.hasFinally(allCatchNodes))    {    if(allCatchNodes  ==  null  ||!NodeUtil.hasFinally(allCatchNodes))  {	  	non-compiled	[CE]  illegal  start  of  expression	143	None	add
426	[BUG]  [BUGGY]  if(allCatchNodes!=  null  ||!NodeUtil.hasFinally(allCatchNodes))  {  If(allCatchNodes!=  null  ||!NodeUtil.hasFinally(allCatchNodes))  {  [CE]  ';'  expected  [FE]        RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  ||!NodeUtil.hasFinally(allCatchNodes))  {  If(allCatchNodes!=  null  ||!NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=    null    ||!NodeUtil.hasFinally(allCatchNodes))    {    If(allCatchNodes!=  null  ||!NodeUtil.hasFinally(allCatchNodes))  {	  	non-compiled	[CE]  ';'  expected	143	None	add
427	[BUG]  [BUGGY]  if(allCatchNodes!=  null  ||!NodeUtil.hasFinally(allCatchNodes))  {  if(allCatchNodes  >=  null  ||!NodeUtil.hasFinally(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]          RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  ||!NodeUtil.hasFinally(allCatchNodes))  {  if(allCatchNodes  >=  null  ||!NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=    null    ||!NodeUtil.hasFinally(allCatchNodes))    {    if(allCatchNodes  >=  null  ||!NodeUtil.hasFinally(allCatchNodes))  {	  	non-compiled	[CE]  illegal  start  of  expression	143	None	add
428	[BUG]  [BUGGY]  if(NodeUtil.isCatchHandler(allCatchNodes)||  NodeUtil.isFinally(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(NodeUtil.isCatchHandler(allCatchNodes)||  NodeUtil.isFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(NodeUtil.isCatchHandler(allCatchNodes)||  NodeUtil.isFinally(allCatchNodes))  {	  if(NodeUtil.isCatchHandler(allCatchNodes)&&    NodeUtil.isFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	136	None	replace
429	[BUG]  [BUGGY]  if(NodeUtil.isFinally(allCatchNodes)&&  NodeUtil.isCatchHandler(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(NodeUtil.isFinally(allCatchNodes)&&  NodeUtil.isCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(NodeUtil.isFinally(allCatchNodes)&&  NodeUtil.isCatchHandler(allCatchNodes))  {	  if(NodeUtil.isCatchHandler(allCatchNodes)&&    NodeUtil.isFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	136	None	replace
430	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(labelName,  tryBlock);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(labelName,  tryBlock);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(labelName,  tryBlock);	  Node    allCatchNodes    =    NodeUtil.getAllCatchNodes(labelName);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
431	[BUG]  [BUGGY]  Node  allCatchNodes.hasOneChild());  [CE]  ';'  expected  [FE]              RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  allCatchNodes.hasOneChild());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes.hasOneChild());	          Preconditions.checkState(allCatchNodes.hasOneChild());    Node    allCatchNodes.hasOneChild());    	non-compiled	[CE]  ';'  expected	82	None	replace
432	[BUG]  [BUGGY]  Node  finallyBlock  =  allCatchNodes.get(0);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  finallyBlock  =  allCatchNodes.get(0);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  finallyBlock  =  allCatchNodes.get(0);	  Node    finallyBlock    =    allCatchNodes.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
433	[BUG]  [BUGGY]  Node  finallyBlock  =  n.getLastChild();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  finallyBlock  =  n.getLastChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  finallyBlock  =  n.getLastChild();	  Node    finallyBlock    =    allCatchNodes.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
434	[BUG]  [BUGGY]  if(!NodeUtil.isCatchHandler(allCatchNodes)&&  tryMinimizeExits(allCatchNodes.getFirstChild(),  exitType,  labelName))  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!NodeUtil.isCatchHandler(allCatchNodes)&&  tryMinimizeExits(allCatchNodes.getFirstChild(),  exitType,  labelName))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!NodeUtil.isCatchHandler(allCatchNodes)&&  tryMinimizeExits(allCatchNodes.getFirstChild(),  exitType,  labelName))  {	  if(!NodeUtil.hasCatchHandler(allCatchNodes)&&    tryMinimizeExits(allCatchNodes.getFirstChild(),    exitType,    labelName))    {    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
435	[BUG]  [BUGGY]  if(!NodeUtil.hasCatchHandler(allCatchNodes)&&  tryMinimizeExits(allCatchNodes.getLastChild(),  exitType,  labelName))  {  [CE]  'void'  type  not  allowed  here  [FE]              AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!NodeUtil.hasCatchHandler(allCatchNodes)&&  tryMinimizeExits(allCatchNodes.getLastChild(),  exitType,  labelName))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!NodeUtil.hasCatchHandler(allCatchNodes)&&  tryMinimizeExits(allCatchNodes.getLastChild(),  exitType,  labelName))  {	  if(!NodeUtil.hasCatchHandler(allCatchNodes)&&    tryMinimizeExits(allCatchNodes.getFirstChild(),    exitType,    labelName))    {    	non-compiled	[CE]  'void'  type  not  allowed  here	89	None	replace
436	[BUG]  [BUGGY]  if(!NodeUtil.isExpressionNode(allCatchNodes)&&  tryMinimizeExits(allCatchNodes.getFirstChild(),  exitType,  labelName))  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!NodeUtil.isExpressionNode(allCatchNodes)&&  tryMinimizeExits(allCatchNodes.getFirstChild(),  exitType,  labelName))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!NodeUtil.isExpressionNode(allCatchNodes)&&  tryMinimizeExits(allCatchNodes.getFirstChild(),  exitType,  labelName))  {	  if(!NodeUtil.hasCatchHandler(allCatchNodes)&&    tryMinimizeExits(allCatchNodes.getFirstChild(),    exitType,    labelName))    {    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
437	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(NodeUtil.hasFinally(allCatchNodes)&&    NodeUtil.hasFinally(allCatchNodes))    {    if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
438	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  If(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  If(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(NodeUtil.hasFinally(allCatchNodes)&&    NodeUtil.hasFinally(allCatchNodes))    {    If(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {	  	non-compiled	[CE]  ';'  expected	8	None	add
439	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild()  &&  NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  ';'  expected  [FE]        RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild()  &&  NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.hasOneChild()  &&  NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.hasCatchHandler(allCatchNodes)&&    NodeUtil.hasFinally(allCatchNodes))    {    if(NodeUtil.hasCatchHandler(allCatchNodes)&&    NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  ';'  expected	54	None	replace
440	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild()  &&  NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  ';'  expected  [FE]          RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild()  &&  NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.hasOneChild()  &&  NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.hasCatchHandler(allCatchNodes)&&    NodeUtil.hasFinally(allCatchNodes))    {    if(NodeUtil.hasCatchHandler(allCatchNodes)&&    NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  ';'  expected	54	None	replace
441	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	if(NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.hasCatchHandler(allCatchNodes)&&    NodeUtil.hasFinally(allCatchNodes))    {    if(NodeUtil.hasCatchHandler(allCatchNodes)&&    NodeUtil.hasFinally(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	54	6	replace
442	[BUG]  [BUGGY]  if(NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.hasCatchHandler(allCatchNodes)&&    NodeUtil.hasFinally(allCatchNodes))    {    if(NodeUtil.hasCatchHandler(allCatchNodes)&&    NodeUtil.hasFinally(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	54	6	replace
443	[BUG]  [BUGGY]  if(allCatchNodes!=  null  &&  NodeUtil.isCatchBlock(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  &&  NodeUtil.isCatchBlock(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=  null  &&  NodeUtil.isCatchBlock(allCatchNodes))  {	  if(allCatchNodes!=    null    &&    NodeUtil.hasCatchBlock(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	205	None	replace
444	[BUG]  [BUGGY]  if(allCatchNodes  ==  null  &&  NodeUtil.hasCatchBlock(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes  ==  null  &&  NodeUtil.hasCatchBlock(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes  ==  null  &&  NodeUtil.hasCatchBlock(allCatchNodes))  {	  if(allCatchNodes!=    null    &&    NodeUtil.hasCatchBlock(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	205	None	replace
445	[BUG]  [BUGGY]  if(allCatchNodes!=  null  ||  NodeUtil.hasCatchBlock(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  ||  NodeUtil.hasCatchBlock(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=  null  ||  NodeUtil.hasCatchBlock(allCatchNodes))  {	  if(allCatchNodes!=    null    &&    NodeUtil.hasCatchBlock(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	205	None	replace
446	[BUG]  [BUGGY]  Preconditions.checkArgument(allCatchNodes.isEmpty()  &&  allCatchNodes.isEmpty());  [CE]  illegal  start  of  type  [FE]        RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkArgument(allCatchNodes.isEmpty()  &&  allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkArgument(allCatchNodes.isEmpty()  &&  allCatchNodes.isEmpty());	  Preconditions.checkArgument(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    	non-compiled	[CE]  illegal  start  of  type	228	None	replace
447	[BUG]  [BUGGY]  Preconditions.checkArgument(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty()  &&  tryMinimizeExits(tryBlock,  exitType,  labelName));  [CE]  illegal  start  of  type  [FE]          RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkArgument(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty()  &&  tryMinimizeExits(tryBlock,  exitType,  labelName));  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkArgument(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty()  &&  tryMinimizeExits(tryBlock,  exitType,  labelName));	  Preconditions.checkArgument(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    	non-compiled	[CE]  illegal  start  of  type	228	None	replace
448	[BUG]  [BUGGY]  Preconditions.checkArgument(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty(),  exitType);  [CE]  illegal  start  of  type  [FE]            RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkArgument(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty(),  exitType);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkArgument(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty(),  exitType);	  Preconditions.checkArgument(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    	non-compiled	[CE]  illegal  start  of  type	228	None	replace
449	[BUG]  [BUGGY]  Node  allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [CE]  ';'  expected  [FE]          RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());	          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Node    allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    	non-compiled	[CE]  ';'  expected	120	None	replace
450	[BUG]  [BUGGY]  if(allCatchNodes.isEmpty())  {  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Node  allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  }  [CE]  ';'  expected  [FE]            RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes.isEmpty())  {  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Node  allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  }  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes.isEmpty())  {  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Node  allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  }	          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Node    allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    	non-compiled	[CE]  ';'  expected	120	None	replace
451	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  &&  allCatchNodes.isEmpty());  Node  allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [CE]  ';'  expected  [FE]              RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  &&  allCatchNodes.isEmpty());  Node  allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.isEmpty()  &&  allCatchNodes.isEmpty());  Node  allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());	          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Node    allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    	non-compiled	[CE]  ';'  expected	120	None	replace
452	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  &&  allCatchNodes.isEmpty());  Node  allCatchNodes.isEmpty()  &&  allCatchNodes.isEmpty());  [CE]  ';'  expected  [FE]                RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  &&  allCatchNodes.isEmpty());  Node  allCatchNodes.isEmpty()  &&  allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.isEmpty()  &&  allCatchNodes.isEmpty());  Node  allCatchNodes.isEmpty()  &&  allCatchNodes.isEmpty());	          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Node    allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    	non-compiled	[CE]  ';'  expected	120	None	replace
453	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes.isEmpty()  ||  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	if(allCatchNodes.isEmpty()  ||  NodeUtil.hasFinally(allCatchNodes))  {	  if(allCatchNodes.hasOneChild()    ||    NodeUtil.hasFinally(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	15	6	replace
454	[BUG]  [BUGGY]  if(allCatchNodes.isEmpty()  ||  NodeUtil.hasFinally(allCatchNodes))  {  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes.isEmpty()  ||  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes.isEmpty()  ||  NodeUtil.hasFinally(allCatchNodes))  {	  if(allCatchNodes.hasOneChild()    ||    NodeUtil.hasFinally(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	15	6	replace
455	[BUG]  [BUGGY]  if(allCatchNodes.getFirstChild()  ||  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]      RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes.getFirstChild()  ||  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes.getFirstChild()  ||  NodeUtil.hasFinally(allCatchNodes))  {	  if(allCatchNodes.hasOneChild()    ||    NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	15	None	replace
456	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes.isEmpty()  &&!NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	if(allCatchNodes.isEmpty()  &&!NodeUtil.hasFinally(allCatchNodes))  {	  if(allCatchNodes.isEmpty()    ||!NodeUtil.hasFinally(allCatchNodes))    {    	compilable	  [FE]  AssertionFailedError  	207	6	replace
457	[BUG]  [BUGGY]  if(allCatchNodes.isEmpty()  &&!NodeUtil.hasFinally(allCatchNodes))  {  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes.isEmpty()  &&!NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes.isEmpty()  &&!NodeUtil.hasFinally(allCatchNodes))  {	  if(allCatchNodes.isEmpty()    ||!NodeUtil.hasFinally(allCatchNodes))    {    	compilable	  [FE]  AssertionFailedError  	207	6	replace
458	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  ||  allCatchNodes.isEmpty()  ||!NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	if(allCatchNodes!=  null  ||  allCatchNodes.isEmpty()  ||!NodeUtil.hasFinally(allCatchNodes))  {	  if(allCatchNodes.isEmpty()    ||!NodeUtil.hasFinally(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	207	2	replace
459	[BUG]  [BUGGY]  if(allCatchNodes!=  null  ||  allCatchNodes.isEmpty()  ||!NodeUtil.hasFinally(allCatchNodes))  {  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  ||  allCatchNodes.isEmpty()  ||!NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=  null  ||  allCatchNodes.isEmpty()  ||!NodeUtil.hasFinally(allCatchNodes))  {	  if(allCatchNodes.isEmpty()    ||!NodeUtil.hasFinally(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	207	2	replace
460	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Preconditions.checkState(allCatchNodes.hasOneChild());    Preconditions.checkState(allCatchNodes.hasOneChild());  Preconditions.checkState(allCatchNodes.hasOneChild());  Preconditions.checkState(allCatchNodes.hasOneChild());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	                Preconditions.checkState(allCatchNodes.hasOneChild());        Preconditions.checkState(allCatchNodes.hasOneChild());    Preconditions.checkState(allCatchNodes.hasOneChild());  Preconditions.checkState(allCatchNodes.hasOneChild());	  	compilable	  [FE]  RuntimeException  	78	2	add
461	[BUG]  [BUGGY]          Preconditions.checkState(allCatchNodes.hasOneChild());    Preconditions.checkState(allCatchNodes.hasOneChild());  Preconditions.checkState(allCatchNodes.hasOneChild());  Preconditions.checkState(allCatchNodes.hasOneChild());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Preconditions.checkState(allCatchNodes.hasOneChild());    Preconditions.checkState(allCatchNodes.hasOneChild());  Preconditions.checkState(allCatchNodes.hasOneChild());  Preconditions.checkState(allCatchNodes.hasOneChild());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	                Preconditions.checkState(allCatchNodes.hasOneChild());        Preconditions.checkState(allCatchNodes.hasOneChild());    Preconditions.checkState(allCatchNodes.hasOneChild());  Preconditions.checkState(allCatchNodes.hasOneChild());	  	compilable	  [FE]  RuntimeException  	78	2	add
462	[BUG]  [BUGGY]          Preconditions.checkState(allCatchNodes.hasOneChild());    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  Preconditions.checkState(allCatchNodes.hasOneChild());  [CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Preconditions.checkState(allCatchNodes.hasOneChild());    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  Preconditions.checkState(allCatchNodes.hasOneChild());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	                Preconditions.checkState(allCatchNodes.hasOneChild());        Preconditions.checkState(allCatchNodes.hasOneChild());    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  Preconditions.checkState(allCatchNodes.hasOneChild());	  	non-compiled	[CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	78	None	add
463	[BUG]  [BUGGY]          Preconditions.checkState(allCatchNodes.hasOneChild());    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  allCatchNodes.hasOneChild());  Preconditions.checkState(allCatchNodes.hasOneChild());  [CE]  ';'  expected  [FE]        RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Preconditions.checkState(allCatchNodes.hasOneChild());    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  allCatchNodes.hasOneChild());  Preconditions.checkState(allCatchNodes.hasOneChild());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	                Preconditions.checkState(allCatchNodes.hasOneChild());        Preconditions.checkState(allCatchNodes.hasOneChild());    Node  allCatchNodes.hasOneChild());  Preconditions.checkState(allCatchNodes.hasOneChild());	  	non-compiled	[CE]  ';'  expected	78	None	add
464	[BUG]  [BUGGY]          Preconditions.checkState(allCatchNodes.hasOneChild());    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes);  Preconditions.checkState(allCatchNodes.hasOneChild());  [CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Preconditions.checkState(allCatchNodes.hasOneChild());    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes);  Preconditions.checkState(allCatchNodes.hasOneChild());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	                Preconditions.checkState(allCatchNodes.hasOneChild());        Preconditions.checkState(allCatchNodes.hasOneChild());    Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes);  Preconditions.checkState(allCatchNodes.hasOneChild());	  	non-compiled	[CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	78	None	add
465	[BUG]  [BUGGY]          Preconditions.checkState(allCatchNodes.hasOneChild());    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  [CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]            RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Preconditions.checkState(allCatchNodes.hasOneChild());    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	                Preconditions.checkState(allCatchNodes.hasOneChild());        Preconditions.checkState(allCatchNodes.hasOneChild());    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);	  	non-compiled	[CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	78	None	add
466	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.get(tryBlock,  n);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  elseBlock  =  allCatchNodes.get(tryBlock,  n);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  elseBlock  =  allCatchNodes.get(tryBlock,  n);	  Node    elseBlock    =    allCatchNodes.get(n);    	non-compiled	[CE]  illegal  start  of  type	219	None	replace
467	[BUG]  [BUGGY]          Node    elseBlock    =    allCatchNodes.getLastChild();    Node  thenBlock  =  allCatchNodes.getLastChild();  Node  elseBlock  =  allCatchNodes.getLastChild();  Node  thenBlock  =  allCatchNodes.getLastChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Node    elseBlock    =    allCatchNodes.getLastChild();    Node  thenBlock  =  allCatchNodes.getLastChild();  Node  elseBlock  =  allCatchNodes.getLastChild();  Node  thenBlock  =  allCatchNodes.getLastChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	                Node        elseBlock        =        allCatchNodes.getLastChild();        Node    thenBlock    =    allCatchNodes.getLastChild();    Node  elseBlock  =  allCatchNodes.getLastChild();  Node  thenBlock  =  allCatchNodes.getLastChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	32	None	add
468	[BUG]  [BUGGY]          Node    elseBlock    =    allCatchNodes.getLastChild();    Node  thenBlock  =  allCatchNodes.getLastChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  thenBlock  =  allCatchNodes.getLastChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Node    elseBlock    =    allCatchNodes.getLastChild();    Node  thenBlock  =  allCatchNodes.getLastChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  thenBlock  =  allCatchNodes.getLastChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	                Node        elseBlock        =        allCatchNodes.getLastChild();        Node    thenBlock    =    allCatchNodes.getLastChild();    Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  thenBlock  =  allCatchNodes.getLastChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	32	None	add
469	[BUG]  [BUGGY]          Node    elseBlock    =    allCatchNodes.getLastChild();    Node  thenBlock  =  allCatchNodes.getLastChild();  Node  elseBlock  =  allCatchNodes.getLastChild();  Node  finallyBlock  =  allCatchNodes.getLastChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Node    elseBlock    =    allCatchNodes.getLastChild();    Node  thenBlock  =  allCatchNodes.getLastChild();  Node  elseBlock  =  allCatchNodes.getLastChild();  Node  finallyBlock  =  allCatchNodes.getLastChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	                Node        elseBlock        =        allCatchNodes.getLastChild();        Node    thenBlock    =    allCatchNodes.getLastChild();    Node  elseBlock  =  allCatchNodes.getLastChild();  Node  finallyBlock  =  allCatchNodes.getLastChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	32	None	add
470	[BUG]  [BUGGY]          Node    elseBlock    =    allCatchNodes.getLastChild();    Node  thenBlock  =  allCatchNodes.getLastChild();  Node  elseBlock  =  AllCatchNodes.getLastChild();  Node  thenBlock  =  allCatchNodes.getLastChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Node    elseBlock    =    allCatchNodes.getLastChild();    Node  thenBlock  =  allCatchNodes.getLastChild();  Node  elseBlock  =  AllCatchNodes.getLastChild();  Node  thenBlock  =  allCatchNodes.getLastChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	                Node        elseBlock        =        allCatchNodes.getLastChild();        Node    thenBlock    =    allCatchNodes.getLastChild();    Node  elseBlock  =  AllCatchNodes.getLastChild();  Node  thenBlock  =  allCatchNodes.getLastChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	32	None	add
471	[BUG]  [BUGGY]          Node    elseBlock    =    allCatchNodes.getLastChild();    Node  thenBlock  =  allCatchNodes.getLastChild();  Node  elseBlock  =  allCatchNodes.getLastChild();  Node  alsoBlock  =  allCatchNodes.getLastChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]            AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Node    elseBlock    =    allCatchNodes.getLastChild();    Node  thenBlock  =  allCatchNodes.getLastChild();  Node  elseBlock  =  allCatchNodes.getLastChild();  Node  alsoBlock  =  allCatchNodes.getLastChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	                Node        elseBlock        =        allCatchNodes.getLastChild();        Node    thenBlock    =    allCatchNodes.getLastChild();    Node  elseBlock  =  allCatchNodes.getLastChild();  Node  alsoBlock  =  allCatchNodes.getLastChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	32	None	add
472	[BUG]  [BUGGY]  if(allCatchNodes!=  null  &&!NodeUtil.hasFinally(allCatchNodes))  {  if(allCatchNodes!=  null  &&!NodeUtil.hasFinally(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  &&!NodeUtil.hasFinally(allCatchNodes))  {  if(allCatchNodes!=  null  &&!NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=    null    &&!NodeUtil.hasFinally(allCatchNodes))    {    if(allCatchNodes!=  null  &&!NodeUtil.hasFinally(allCatchNodes))  {	  	non-compiled	[CE]  illegal  start  of  expression	141	None	add
473	[BUG]  [BUGGY]  if(allCatchNodes!=  null  &&!NodeUtil.hasFinally(allCatchNodes))  {  if(allCatchNodes  ==  null  &&!NodeUtil.hasFinally(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  &&!NodeUtil.hasFinally(allCatchNodes))  {  if(allCatchNodes  ==  null  &&!NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=    null    &&!NodeUtil.hasFinally(allCatchNodes))    {    if(allCatchNodes  ==  null  &&!NodeUtil.hasFinally(allCatchNodes))  {	  	non-compiled	[CE]  illegal  start  of  expression	141	None	add
474	[BUG]  [BUGGY]  if(allCatchNodes!=  null  &&!NodeUtil.hasFinally(allCatchNodes))  {  If(allCatchNodes!=  null  &&!NodeUtil.hasFinally(allCatchNodes))  {  [CE]  ';'  expected  [FE]        RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  &&!NodeUtil.hasFinally(allCatchNodes))  {  If(allCatchNodes!=  null  &&!NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=    null    &&!NodeUtil.hasFinally(allCatchNodes))    {    If(allCatchNodes!=  null  &&!NodeUtil.hasFinally(allCatchNodes))  {	  	non-compiled	[CE]  ';'  expected	141	None	add
475	[BUG]  [BUGGY]  if(allCatchNodes!=  null  &&!NodeUtil.hasFinally(allCatchNodes))  {  if(allCatchNodes  >=  null  &&!NodeUtil.hasFinally(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]          RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  &&!NodeUtil.hasFinally(allCatchNodes))  {  if(allCatchNodes  >=  null  &&!NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=    null    &&!NodeUtil.hasFinally(allCatchNodes))    {    if(allCatchNodes  >=  null  &&!NodeUtil.hasFinally(allCatchNodes))  {	  	non-compiled	[CE]  illegal  start  of  expression	141	None	add
476	[BUG]  [BUGGY]  if(allCatchNodes.getFirstChild()  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]    AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes.getFirstChild()  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes.getFirstChild()  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(allCatchNodes.hasOneChild()    ||    NodeUtil.hasCatchHandler(allCatchNodes))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	127	None	replace
477	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(n);  Preconditions.checkState(allCatchNodes.isEmpty());  [CE]  illegal  start  of  type  [FE]            RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(n);  Preconditions.checkState(allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(n);  Preconditions.checkState(allCatchNodes.isEmpty());	          Preconditions.checkState(allCatchNodes.isEmpty());    Node    allCatchNodes    =    NodeUtil.getAllCatchNodes(n);    Preconditions.checkState(allCatchNodes.isEmpty());    	non-compiled	[CE]  illegal  start  of  type	195	None	replace
478	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty());  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(tryBlock);  Preconditions.checkState(allCatchNodes.isEmpty());  [CE]  illegal  start  of  type  [FE]              RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty());  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(tryBlock);  Preconditions.checkState(allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.isEmpty());  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(tryBlock);  Preconditions.checkState(allCatchNodes.isEmpty());	          Preconditions.checkState(allCatchNodes.isEmpty());    Node    allCatchNodes    =    NodeUtil.getAllCatchNodes(n);    Preconditions.checkState(allCatchNodes.isEmpty());    	non-compiled	[CE]  illegal  start  of  type	195	None	replace
479	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(tryBlock);  Preconditions.checkState(allCatchNodes.isEmpty());  [CE]  illegal  start  of  type  [FE]                RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(tryBlock);  Preconditions.checkState(allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(tryBlock);  Preconditions.checkState(allCatchNodes.isEmpty());	          Preconditions.checkState(allCatchNodes.isEmpty());    Node    allCatchNodes    =    NodeUtil.getAllCatchNodes(n);    Preconditions.checkState(allCatchNodes.isEmpty());    	non-compiled	[CE]  illegal  start  of  type	195	None	replace
480	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock,  n);  [CE]  illegal  start  of  type  [FE]                  RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock,  n);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.hasOneChild());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock,  n);	          Preconditions.checkState(allCatchNodes.hasOneChild());    Node    allCatchNodes    =    NodeUtil.getCatchBlock(n);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
481	[BUG]  [BUGGY]  Preconditions.checkState(n.hasOneChild());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  [CE]  illegal  start  of  type  [FE]                    RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(n.hasOneChild());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(n.hasOneChild());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);	          Preconditions.checkState(allCatchNodes.hasOneChild());    Node    allCatchNodes    =    NodeUtil.getCatchBlock(n);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
482	[BUG]  [BUGGY]  If(allCatchNodes.hasOneChild()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  If(allCatchNodes.hasOneChild()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	If(allCatchNodes.hasOneChild()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(allCatchNodes.hasOneChild()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    If(allCatchNodes.hasOneChild()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    	non-compiled	[CE]  ';'  expected	2	None	replace
483	[BUG]  [BUGGY]  AssertionFailedError.checkState(allCatchNodes.hasOneChild()  &&  NodeUtil.hasCatchHandler(allCatchNodes));  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  AssertionFailedError.checkState(allCatchNodes.hasOneChild()  &&  NodeUtil.hasCatchHandler(allCatchNodes));  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	AssertionFailedError.checkState(allCatchNodes.hasOneChild()  &&  NodeUtil.hasCatchHandler(allCatchNodes));	  if(allCatchNodes.hasOneChild()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    If(allCatchNodes.hasOneChild()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
484	[BUG]  [BUGGY]  if(allCatchNodes.hasOneChild()  &&  NodeUtil.hasFinally(allCatchNodes))  {  if(allCatchNodes.hasOneChild()  &&  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes.hasOneChild()  &&  NodeUtil.hasFinally(allCatchNodes))  {  if(allCatchNodes.hasOneChild()  &&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes.hasOneChild()    &&    NodeUtil.hasFinally(allCatchNodes))    {    if(allCatchNodes.hasOneChild()  &&  NodeUtil.hasFinally(allCatchNodes))  {	  	non-compiled	[CE]  illegal  start  of  expression	130	None	add
485	[BUG]  [BUGGY]  if(allCatchNodes.hasOneChild()  &&  NodeUtil.hasFinally(allCatchNodes))  {  If(allCatchNodes.hasOneChild()  &&  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes.hasOneChild()  &&  NodeUtil.hasFinally(allCatchNodes))  {  If(allCatchNodes.hasOneChild()  &&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes.hasOneChild()    &&    NodeUtil.hasFinally(allCatchNodes))    {    If(allCatchNodes.hasOneChild()  &&  NodeUtil.hasFinally(allCatchNodes))  {	  	non-compiled	[CE]  ';'  expected	130	None	add
486	[BUG]  [BUGGY]  if(allCatchNodes.hasOneChild()  &&  NodeUtil.hasFinally(allCatchNodes))  {  if(allCatchNodes.isOneChild()  &&  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]        RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes.hasOneChild()  &&  NodeUtil.hasFinally(allCatchNodes))  {  if(allCatchNodes.isOneChild()  &&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes.hasOneChild()    &&    NodeUtil.hasFinally(allCatchNodes))    {    if(allCatchNodes.isOneChild()  &&  NodeUtil.hasFinally(allCatchNodes))  {	  	non-compiled	[CE]  illegal  start  of  expression	130	None	add
487	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.hasChildCount()  -  1);  [CE]  illegal  start  of  type  [FE]              RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.hasChildCount()  -  1);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.hasChildCount()  -  1);	  Preconditions.checkState(allCatchNodes.hasChildCount());    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
488	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.hasChildCount()  ||  allCatchNodes.hasChildCount());  [CE]  illegal  start  of  type  [FE]                RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.hasChildCount()  ||  allCatchNodes.hasChildCount());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.hasChildCount()  ||  allCatchNodes.hasChildCount());	  Preconditions.checkState(allCatchNodes.hasChildCount());    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
489	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.hasChildCount()  +  1);  [CE]  illegal  start  of  type  [FE]                  RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.hasChildCount()  +  1);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.hasChildCount()  +  1);	  Preconditions.checkState(allCatchNodes.hasChildCount());    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
490	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.hasChildCount(),  exitType);  [CE]  illegal  start  of  type  [FE]                    RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.hasChildCount(),  exitType);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.hasChildCount(),  exitType);	  Preconditions.checkState(allCatchNodes.hasChildCount());    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
491	[BUG]  [BUGGY]  if(!NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  if(!NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  if(!NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!NodeUtil.hasCatchHandler(allCatchNodes)&&    NodeUtil.hasFinally(allCatchNodes))    {    if(!NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
492	[BUG]  [BUGGY]  if(!NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  If(!NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  If(!NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!NodeUtil.hasCatchHandler(allCatchNodes)&&    NodeUtil.hasFinally(allCatchNodes))    {    If(!NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {	  	non-compiled	[CE]  ';'  expected	6	None	add
493	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes.hasOneChild());  [CE]  illegal  start  of  type  [FE]          RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes.hasOneChild());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes.hasOneChild());	          Preconditions.checkState(allCatchNodes.hasOneChild());    Node    allCatchNodes    =    NodeUtil.getCatchBlock(allCatchNodes.hasOneChild());    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
494	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n.hasOneChild());  [CE]  illegal  start  of  type  [FE]            RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n.hasOneChild());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(n.hasOneChild());	          Preconditions.checkState(allCatchNodes.hasOneChild());    Node    allCatchNodes    =    NodeUtil.getCatchBlock(allCatchNodes.hasOneChild());    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
495	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes.nextChild());  [CE]  illegal  start  of  type  [FE]              RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes.nextChild());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.hasOneChild());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes.nextChild());	          Preconditions.checkState(allCatchNodes.hasOneChild());    Node    allCatchNodes    =    NodeUtil.getCatchBlock(allCatchNodes.hasOneChild());    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
496	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes.getFirstChild());  [CE]  illegal  start  of  type  [FE]                RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes.getFirstChild());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.hasOneChild());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes.getFirstChild());	          Preconditions.checkState(allCatchNodes.hasOneChild());    Node    allCatchNodes    =    NodeUtil.getCatchBlock(allCatchNodes.hasOneChild());    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
497	[BUG]  [BUGGY]  Node  catchNode  =  allCatchNodes.getChildCount()  -  1;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  catchNode  =  allCatchNodes.getChildCount()  -  1;  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  catchNode  =  allCatchNodes.getChildCount()  -  1;	  Node    catchNode    =    allCatchNodes.getChildCount();    	non-compiled	[CE]  illegal  start  of  type	187	None	replace
498	[BUG]  [BUGGY]  Node  catchNode  =  allCatchNodes.getChildCount()  +  1;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  catchNode  =  allCatchNodes.getChildCount()  +  1;  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  catchNode  =  allCatchNodes.getChildCount()  +  1;	  Node    catchNode    =    allCatchNodes.getChildCount();    	non-compiled	[CE]  illegal  start  of  type	187	None	replace
499	[BUG]  [BUGGY]  Node  catchNode  =  allCatchNodes.getChildCount()  -  2;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  catchNode  =  allCatchNodes.getChildCount()  -  2;  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  catchNode  =  allCatchNodes.getChildCount()  -  2;	  Node    catchNode    =    allCatchNodes.getChildCount();    	non-compiled	[CE]  illegal  start  of  type	187	None	replace
500	[BUG]  [BUGGY]  if(allCatchNodes!=  null  &&  NodeUtil.hasCatchHandler(allCatchNodes)&&  tryMinimizeExits(allCatchNodes.getFirstChild(),  exitType,  labelName);  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  &&  NodeUtil.hasCatchHandler(allCatchNodes)&&  tryMinimizeExits(allCatchNodes.getFirstChild(),  exitType,  labelName);  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=  null  &&  NodeUtil.hasCatchHandler(allCatchNodes)&&  tryMinimizeExits(allCatchNodes.getFirstChild(),  exitType,  labelName);	  if(allCatchNodes!=    null    &&    NodeUtil.hasCatchHandler(allCatchNodes)||    tryMinimizeExits(allCatchNodes.getFirstChild(),    exitType,    labelName);    	non-compiled	[CE]  ')'  expected	168	None	replace
501	[BUG]  [BUGGY]  if(allCatchNodes!=  null  ||  NodeUtil.hasCatchHandler(allCatchNodes)||  tryMinimizeExits(allCatchNodes.getFirstChild(),  exitType,  labelName);  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  ||  NodeUtil.hasCatchHandler(allCatchNodes)||  tryMinimizeExits(allCatchNodes.getFirstChild(),  exitType,  labelName);  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=  null  ||  NodeUtil.hasCatchHandler(allCatchNodes)||  tryMinimizeExits(allCatchNodes.getFirstChild(),  exitType,  labelName);	  if(allCatchNodes!=    null    &&    NodeUtil.hasCatchHandler(allCatchNodes)||    tryMinimizeExits(allCatchNodes.getFirstChild(),    exitType,    labelName);    	non-compiled	[CE]  ')'  expected	168	None	replace
502	[BUG]  [BUGGY]  if(allCatchNodes!=  null  &&  NodeUtil.hasCatchHandler(allCatchNodes)||  tryMinimizeExits(allCatchNodes.getFirstChild(),  labelName,  exitType);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  &&  NodeUtil.hasCatchHandler(allCatchNodes)||  tryMinimizeExits(allCatchNodes.getFirstChild(),  labelName,  exitType);  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=  null  &&  NodeUtil.hasCatchHandler(allCatchNodes)||  tryMinimizeExits(allCatchNodes.getFirstChild(),  labelName,  exitType);	  if(allCatchNodes!=    null    &&    NodeUtil.hasCatchHandler(allCatchNodes)||    tryMinimizeExits(allCatchNodes.getFirstChild(),    exitType,    labelName);    	non-compiled	[CE]  ')'  expected	168	None	replace
503	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Preconditions.checkState(allCatchNodes.isEmpty());    Preconditions.checkState(allCatchNodes.isEmpty());  Preconditions.checkState(allCatchNodes.isEmpty());  Preconditions.checkState(allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	                Preconditions.checkState(allCatchNodes.isEmpty());        Preconditions.checkState(allCatchNodes.isEmpty());    Preconditions.checkState(allCatchNodes.isEmpty());  Preconditions.checkState(allCatchNodes.isEmpty());	  	compilable	  [FE]  RuntimeException  	19	6	add
504	[BUG]  [BUGGY]          Preconditions.checkState(allCatchNodes.isEmpty());    Preconditions.checkState(allCatchNodes.isEmpty());  Preconditions.checkState(allCatchNodes.isEmpty());  Preconditions.checkState(allCatchNodes.isEmpty());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Preconditions.checkState(allCatchNodes.isEmpty());    Preconditions.checkState(allCatchNodes.isEmpty());  Preconditions.checkState(allCatchNodes.isEmpty());  Preconditions.checkState(allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	                Preconditions.checkState(allCatchNodes.isEmpty());        Preconditions.checkState(allCatchNodes.isEmpty());    Preconditions.checkState(allCatchNodes.isEmpty());  Preconditions.checkState(allCatchNodes.isEmpty());	  	compilable	  [FE]  RuntimeException  	19	6	add
505	[BUG]  [BUGGY]          Preconditions.checkState(allCatchNodes.isEmpty());    Preconditions.checkState(allCatchNodes.isEmpty());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  Preconditions.checkState(allCatchNodes.isEmpty());  [CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Preconditions.checkState(allCatchNodes.isEmpty());    Preconditions.checkState(allCatchNodes.isEmpty());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  Preconditions.checkState(allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	                Preconditions.checkState(allCatchNodes.isEmpty());        Preconditions.checkState(allCatchNodes.isEmpty());    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  Preconditions.checkState(allCatchNodes.isEmpty());	  	non-compiled	[CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	19	None	add
506	[BUG]  [BUGGY]          Preconditions.checkState(allCatchNodes.isEmpty());    Preconditions.checkState(allCatchNodes.isEmpty());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes);  Preconditions.checkState(allCatchNodes.isEmpty());  [CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Preconditions.checkState(allCatchNodes.isEmpty());    Preconditions.checkState(allCatchNodes.isEmpty());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes);  Preconditions.checkState(allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	                Preconditions.checkState(allCatchNodes.isEmpty());        Preconditions.checkState(allCatchNodes.isEmpty());    Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes);  Preconditions.checkState(allCatchNodes.isEmpty());	  	non-compiled	[CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	19	None	add
507	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Preconditions.checkState(allCatchNodes.isEmpty());    Preconditions.checkState(allCatchNodes.isEmpty());  Preconditions.checkNotNull(allCatchNodes.isEmpty());  Preconditions.checkState(allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	                Preconditions.checkState(allCatchNodes.isEmpty());        Preconditions.checkState(allCatchNodes.isEmpty());    Preconditions.checkNotNull(allCatchNodes.isEmpty());  Preconditions.checkState(allCatchNodes.isEmpty());	  	compilable	  [FE]  RuntimeException  	19	6	add
508	[BUG]  [BUGGY]          Preconditions.checkState(allCatchNodes.isEmpty());    Preconditions.checkState(allCatchNodes.isEmpty());  Preconditions.checkNotNull(allCatchNodes.isEmpty());  Preconditions.checkState(allCatchNodes.isEmpty());  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Preconditions.checkState(allCatchNodes.isEmpty());    Preconditions.checkState(allCatchNodes.isEmpty());  Preconditions.checkNotNull(allCatchNodes.isEmpty());  Preconditions.checkState(allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	                Preconditions.checkState(allCatchNodes.isEmpty());        Preconditions.checkState(allCatchNodes.isEmpty());    Preconditions.checkNotNull(allCatchNodes.isEmpty());  Preconditions.checkState(allCatchNodes.isEmpty());	  	compilable	  [FE]  RuntimeException  	19	6	add
509	[BUG]  [BUGGY]          Preconditions.checkState(allCatchNodes.isEmpty());    Preconditions.checkState(allCatchNodes.isEmpty());  Preconditions.checkState(allCatchNodes.isEmpty());  preconditions.checkState(allCatchNodes.isEmpty());  [CE]  cannot  find  symbol  preconditions  [FE]            RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Preconditions.checkState(allCatchNodes.isEmpty());    Preconditions.checkState(allCatchNodes.isEmpty());  Preconditions.checkState(allCatchNodes.isEmpty());  preconditions.checkState(allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	                Preconditions.checkState(allCatchNodes.isEmpty());        Preconditions.checkState(allCatchNodes.isEmpty());    Preconditions.checkState(allCatchNodes.isEmpty());  preconditions.checkState(allCatchNodes.isEmpty());	  	non-compiled	[CE]  cannot  find  symbol  preconditions	19	None	add
510	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.hasFinally(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  [CE]  ';'  expected  [FE]        RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(!NodeUtil.hasFinally(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(!NodeUtil.hasFinally(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);	  if(!NodeUtil.hasFinally(allCatchNodes))    {    Node    allCatchNodes    =    NodeUtil.getCatchBlock(n);    	non-compiled	[CE]  ';'  expected	199	None	replace
511	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.hasFinally(allCatchNodes));  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  [CE]  illegal  start  of  type  [FE]          RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(NodeUtil.hasFinally(allCatchNodes));  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(NodeUtil.hasFinally(allCatchNodes));  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);	  if(!NodeUtil.hasFinally(allCatchNodes))    {    Node    allCatchNodes    =    NodeUtil.getCatchBlock(n);    	non-compiled	[CE]  illegal  start  of  type	199	None	replace
512	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.hasFinally(allCatchNodes));  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock);  [CE]  illegal  start  of  type  [FE]            RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(!NodeUtil.hasFinally(allCatchNodes));  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock);  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(!NodeUtil.hasFinally(allCatchNodes));  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock);	  if(!NodeUtil.hasFinally(allCatchNodes))    {    Node    allCatchNodes    =    NodeUtil.getCatchBlock(n);    	non-compiled	[CE]  illegal  start  of  type	199	None	replace
513	[BUG]  [BUGGY]  Node  c  =  allCatchNodes.getFirstChild();  preconditions.checkState(c.hasOneChild());  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  c  =  allCatchNodes.getFirstChild();  preconditions.checkState(c.hasOneChild());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  c  =  allCatchNodes.getFirstChild();  preconditions.checkState(c.hasOneChild());	          Node    c    =    allCatchNodes.getFirstChild();    Node    c    =    allCatchNodes.getFirstChild();    preconditions.checkState(allCatchNodes.hasOneChild());    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
514	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  &&  allCatchNodes.isEmpty());  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [CE]  illegal  start  of  type  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  &&  allCatchNodes.isEmpty());  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.isEmpty()  &&  allCatchNodes.isEmpty());  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());	          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
515	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  &&  allCatchNodes.isEmpty());  Preconditions.checkState(allCatchNodes.isEmpty()  &&  allCatchNodes.isEmpty());  [CE]  illegal  start  of  type  [FE]      RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  &&  allCatchNodes.isEmpty());  Preconditions.checkState(allCatchNodes.isEmpty()  &&  allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.isEmpty()  &&  allCatchNodes.isEmpty());  Preconditions.checkState(allCatchNodes.isEmpty()  &&  allCatchNodes.isEmpty());	          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
516	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [CE]  illegal  start  of  type  [FE]        RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());	          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
517	[BUG]  [BUGGY]  if(allCatchNodes.hasOneChild())  {  if(!NodeUtil.hasFinally(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]        RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes.hasOneChild())  {  if(!NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes.hasOneChild())  {  if(!NodeUtil.hasFinally(allCatchNodes))  {	  if(!NodeUtil.hasFinally(allCatchNodes))    {    if(!NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
518	[BUG]  [BUGGY]  if(allCatchNodes.isEmpty())  {  if(!NodeUtil.hasFinally(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]          RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes.isEmpty())  {  if(!NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes.isEmpty())  {  if(!NodeUtil.hasFinally(allCatchNodes))  {	  if(!NodeUtil.hasFinally(allCatchNodes))    {    if(!NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
519	[BUG]  [BUGGY]  if(allCatchNodes!=  null  &&  NodeUtil.hasFinally(allCatchNodes))  {  If(allCatchNodes!=  null  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  &&  NodeUtil.hasFinally(allCatchNodes))  {  If(allCatchNodes!=  null  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=  null  &&  NodeUtil.hasFinally(allCatchNodes))  {  If(allCatchNodes!=  null  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(allCatchNodes!=    null    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    If(allCatchNodes!=    null    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    	non-compiled	[CE]  ';'  expected	103	None	replace
520	[BUG]  [BUGGY]  if(allCatchNodes!=  null  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {  If(allCatchNodes!=  null  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {  If(allCatchNodes!=  null  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=  null  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {  If(allCatchNodes!=  null  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(allCatchNodes!=    null    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    If(allCatchNodes!=    null    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    	non-compiled	[CE]  ';'  expected	103	None	replace
521	[BUG]  [BUGGY]  If(allCatchNodes!=  null  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  If(allCatchNodes!=  null  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	If(allCatchNodes!=  null  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(allCatchNodes!=    null    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    If(allCatchNodes!=    null    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    	non-compiled	[CE]  ';'  expected	103	None	replace
522	[BUG]  [BUGGY]  if(allCatchNodes  ==  null  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  If(allCatchNodes!=  null  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes  ==  null  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  If(allCatchNodes!=  null  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes  ==  null  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  If(allCatchNodes!=  null  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(allCatchNodes!=    null    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    If(allCatchNodes!=    null    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    	non-compiled	[CE]  ';'  expected	103	None	replace
523	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes!=  null  ||  allCatchNodes.size()  >  0);  [CE]  illegal  start  of  type  [FE]        RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes!=  null  ||  allCatchNodes.size()  >  0);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes!=  null  ||  allCatchNodes.size()  >  0);	  Preconditions.checkState(allCatchNodes!=    null    ||    allCatchNodes.isEmpty());    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
524	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!allCatchNodes.hasChildren()  &&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	if(!allCatchNodes.hasChildren()  &&  NodeUtil.hasFinally(allCatchNodes))  {	  if(!allCatchNodes.hasChildren()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    	compilable	  [FE]  AssertionFailedError  	209	6	replace
525	[BUG]  [BUGGY]  if(!allCatchNodes.hasChildren()  &&  NodeUtil.hasFinally(allCatchNodes))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!allCatchNodes.hasChildren()  &&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!allCatchNodes.hasChildren()  &&  NodeUtil.hasFinally(allCatchNodes))  {	  if(!allCatchNodes.hasChildren()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    	compilable	  [FE]  AssertionFailedError  	209	6	replace
526	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!allCatchNodes.hasChildren()  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	if(!allCatchNodes.hasChildren()  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(!allCatchNodes.hasChildren()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	209	2	replace
527	[BUG]  [BUGGY]  if(!allCatchNodes.hasChildren()  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!allCatchNodes.hasChildren()  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!allCatchNodes.hasChildren()  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(!allCatchNodes.hasChildren()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	209	2	replace
528	[BUG]  [BUGGY]  if(allCatchNodes.isEmpty()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  if(allCatchNodes.isEmpty()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes.isEmpty()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  if(allCatchNodes.isEmpty()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes.isEmpty()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    if(allCatchNodes.isEmpty()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {	  	non-compiled	[CE]  illegal  start  of  expression	132	None	add
529	[BUG]  [BUGGY]  if(allCatchNodes.isEmpty()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  If(allCatchNodes.isEmpty()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes.isEmpty()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  If(allCatchNodes.isEmpty()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes.isEmpty()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    If(allCatchNodes.isEmpty()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {	  	non-compiled	[CE]  ';'  expected	132	None	add
530	[BUG]  [BUGGY]  if(allCatchNodes.isEmpty()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  if(AllCatchNodes.isEmpty()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes.isEmpty()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  if(AllCatchNodes.isEmpty()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes.isEmpty()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    if(AllCatchNodes.isEmpty()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {	  	non-compiled	[CE]  illegal  start  of  expression	132	None	add
531	[BUG]  [BUGGY]  if(allCatchNodes.hasOneChild()  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {  if(allCatchNodes.hasOneChild()  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes.hasOneChild()  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {  if(allCatchNodes.hasOneChild()  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes.hasOneChild()    ||    NodeUtil.hasCatchHandler(allCatchNodes))    {    if(allCatchNodes.hasOneChild()  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {	  	non-compiled	[CE]  illegal  start  of  expression	126	None	add
532	[BUG]  [BUGGY]  if(allCatchNodes.hasOneChild()  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {  If(allCatchNodes.hasOneChild()  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes.hasOneChild()  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {  If(allCatchNodes.hasOneChild()  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes.hasOneChild()    ||    NodeUtil.hasCatchHandler(allCatchNodes))    {    If(allCatchNodes.hasOneChild()  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {	  	non-compiled	[CE]  ';'  expected	126	None	add
533	[BUG]  [BUGGY]  if(allCatchNodes.hasOneChild()  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes.hasOneChild()  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes.hasOneChild()    ||    NodeUtil.hasCatchHandler(allCatchNodes))    {    Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);	  	non-compiled	[CE]  illegal  start  of  expression	126	None	add
534	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.removeLastChild();  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  elseBlock  =  allCatchNodes.removeLastChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  elseBlock  =  allCatchNodes.removeLastChild();	  Node    elseBlock    =    allCatchNodes.removeFirstChild();    	non-compiled	[CE]  illegal  start  of  type	210	None	replace
535	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.removeFirstChild(),  tryBlock);  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  elseBlock  =  allCatchNodes.removeFirstChild(),  tryBlock);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  elseBlock  =  allCatchNodes.removeFirstChild(),  tryBlock);	  Node    elseBlock    =    allCatchNodes.removeFirstChild();    	non-compiled	[CE]  ';'  expected	210	None	replace
536	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.hasLastChild());  [CE]  illegal  start  of  type  [FE]          RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.hasLastChild());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.hasLastChild());	  Preconditions.checkState(allCatchNodes.hasFirstChild());    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
537	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.getFirstChild()  ==  null);  [CE]  illegal  start  of  type  [FE]            RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.getFirstChild()  ==  null);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.getFirstChild()  ==  null);	  Preconditions.checkState(allCatchNodes.hasFirstChild());    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
538	[BUG]  [BUGGY]  Node  finallyBlock  =  allCatchNodes.getfirstChild();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  finallyBlock  =  allCatchNodes.getfirstChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  finallyBlock  =  allCatchNodes.getfirstChild();	  Node    finallyBlock    =    tryBlock.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	190	None	replace
539	[BUG]  [BUGGY]  Node  finallyBlock  =  allCatchNodes.getLeastChild();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  finallyBlock  =  allCatchNodes.getLeastChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  finallyBlock  =  allCatchNodes.getLeastChild();	  Node    finallyBlock    =    tryBlock.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	190	None	replace
540	[BUG]  [BUGGY]          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  otherBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  otherBlock  =  allCatchNodes.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  otherBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  otherBlock  =  allCatchNodes.getFirstChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	                Node        elseBlock        =        allCatchNodes.getFirstChild();        Node    otherBlock    =    allCatchNodes.getFirstChild();    Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  otherBlock  =  allCatchNodes.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	97	None	add
541	[BUG]  [BUGGY]          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  otherBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  otherBlock  =  allCatchNodes.getLastChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  otherBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  otherBlock  =  allCatchNodes.getLastChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	                Node        elseBlock        =        allCatchNodes.getFirstChild();        Node    otherBlock    =    allCatchNodes.getFirstChild();    Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  otherBlock  =  allCatchNodes.getLastChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	97	None	add
542	[BUG]  [BUGGY]          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  otherBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getLastChild();  Node  otherBlock  =  allCatchNodes.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  otherBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getLastChild();  Node  otherBlock  =  allCatchNodes.getFirstChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	                Node        elseBlock        =        allCatchNodes.getFirstChild();        Node    otherBlock    =    allCatchNodes.getFirstChild();    Node  elseBlock  =  allCatchNodes.getLastChild();  Node  otherBlock  =  allCatchNodes.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	97	None	add
543	[BUG]  [BUGGY]          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  otherBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  othersBlock  =  allCatchNodes.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  otherBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  othersBlock  =  allCatchNodes.getFirstChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	                Node        elseBlock        =        allCatchNodes.getFirstChild();        Node    otherBlock    =    allCatchNodes.getFirstChild();    Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  othersBlock  =  allCatchNodes.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	97	None	add
544	[BUG]  [BUGGY]          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  otherBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  anotherBlock  =  allCatchNodes.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]            AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  otherBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  anotherBlock  =  allCatchNodes.getFirstChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	                Node        elseBlock        =        allCatchNodes.getFirstChild();        Node    otherBlock    =    allCatchNodes.getFirstChild();    Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  anotherBlock  =  allCatchNodes.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	97	None	add
545	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)&&  allCatchNodes.isEmpty())  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	if(NodeUtil.hasFinally(allCatchNodes)&&  allCatchNodes.isEmpty())  {	  if(NodeUtil.hasFinally(allCatchNodes)||    allCatchNodes.isEmpty())    {    	compilable	  [FE]  RuntimeException  	18	6	replace
546	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)&&  allCatchNodes.isEmpty())  {  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)&&  allCatchNodes.isEmpty())  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(NodeUtil.hasFinally(allCatchNodes)&&  allCatchNodes.isEmpty())  {	  if(NodeUtil.hasFinally(allCatchNodes)||    allCatchNodes.isEmpty())    {    	compilable	  [FE]  RuntimeException  	18	6	replace
547	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!NodeUtil.hasFinally(allCatchNodes)&&  allCatchNodes.isEmpty())  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	if(!NodeUtil.hasFinally(allCatchNodes)&&  allCatchNodes.isEmpty())  {	  if(NodeUtil.hasFinally(allCatchNodes)||    allCatchNodes.isEmpty())    {    	compilable	  [FE]  RuntimeException  	18	6	replace
548	[BUG]  [BUGGY]  if(!NodeUtil.hasFinally(allCatchNodes)&&  allCatchNodes.isEmpty())  {  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!NodeUtil.hasFinally(allCatchNodes)&&  allCatchNodes.isEmpty())  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!NodeUtil.hasFinally(allCatchNodes)&&  allCatchNodes.isEmpty())  {	  if(NodeUtil.hasFinally(allCatchNodes)||    allCatchNodes.isEmpty())    {    	compilable	  [FE]  RuntimeException  	18	6	replace
549	[BUG]  [BUGGY]  if(NodeUtil.isFinally(allCatchNodes)&&  allCatchNodes.isEmpty())  {  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(NodeUtil.isFinally(allCatchNodes)&&  allCatchNodes.isEmpty())  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(NodeUtil.isFinally(allCatchNodes)&&  allCatchNodes.isEmpty())  {	  if(NodeUtil.hasFinally(allCatchNodes)||    allCatchNodes.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
550	[BUG]  [BUGGY]  if(NodeUtil.isFinally(allCatchNodes)||  allCatchNodes.isEmpty())  {  [CE]  cannot  find  symbol  [FE]          RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(NodeUtil.isFinally(allCatchNodes)||  allCatchNodes.isEmpty())  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(NodeUtil.isFinally(allCatchNodes)||  allCatchNodes.isEmpty())  {	  if(NodeUtil.hasFinally(allCatchNodes)||    allCatchNodes.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
551	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes  ==  null  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	if(allCatchNodes  ==  null  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(allCatchNodes    ==    null    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    	compilable	  [FE]  AssertionFailedError  	116	2	replace
552	[BUG]  [BUGGY]  if(allCatchNodes  ==  null  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes  ==  null  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes  ==  null  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(allCatchNodes    ==    null    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    	compilable	  [FE]  AssertionFailedError  	116	2	replace
553	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  Preconditions.checkState(allCatchNodes.isEmpty());  [CE]  illegal  start  of  type  [FE]            RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  Preconditions.checkState(allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  Preconditions.checkState(allCatchNodes.isEmpty());	          Preconditions.checkState(allCatchNodes.isEmpty());    Node    allCatchNodes    =    NodeUtil.getCatchBlock(n);    Preconditions.checkState(allCatchNodes.isEmpty());    	non-compiled	[CE]  illegal  start  of  type	173	None	replace
554	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock);  Preconditions.checkState(allCatchNodes.isEmpty());  [CE]  illegal  start  of  type  [FE]              RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock);  Preconditions.checkState(allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock);  Preconditions.checkState(allCatchNodes.isEmpty());	          Preconditions.checkState(allCatchNodes.isEmpty());    Node    allCatchNodes    =    NodeUtil.getCatchBlock(n);    Preconditions.checkState(allCatchNodes.isEmpty());    	non-compiled	[CE]  illegal  start  of  type	173	None	replace
555	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!NodeUtil.hasCatchHandler(allCatchNodes)&&!NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	if(!NodeUtil.hasCatchHandler(allCatchNodes)&&!NodeUtil.hasFinally(allCatchNodes))  {	  if(!NodeUtil.hasCatchHandler(allCatchNodes)||!NodeUtil.hasFinally(allCatchNodes))    {    	compilable	  [FE]  AssertionFailedError  	88	6	replace
556	[BUG]  [BUGGY]  if(!NodeUtil.hasCatchHandler(allCatchNodes)&&!NodeUtil.hasFinally(allCatchNodes))  {  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!NodeUtil.hasCatchHandler(allCatchNodes)&&!NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!NodeUtil.hasCatchHandler(allCatchNodes)&&!NodeUtil.hasFinally(allCatchNodes))  {	  if(!NodeUtil.hasCatchHandler(allCatchNodes)||!NodeUtil.hasFinally(allCatchNodes))    {    	compilable	  [FE]  AssertionFailedError  	88	6	replace
557	[BUG]  [BUGGY]  if(!NodeUtil.isCatchHandler(allCatchNodes)&&!NodeUtil.hasFinally(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!NodeUtil.isCatchHandler(allCatchNodes)&&!NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!NodeUtil.isCatchHandler(allCatchNodes)&&!NodeUtil.hasFinally(allCatchNodes))  {	  if(!NodeUtil.hasCatchHandler(allCatchNodes)||!NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
558	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkArgument(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkArgument(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	                Preconditions.checkState(allCatchNodes.isEmpty()        ||        allCatchNodes.isEmpty());        Preconditions.checkArgument(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkArgument(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());	  	compilable	  [FE]  RuntimeException  	213	6	add
559	[BUG]  [BUGGY]          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkArgument(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkArgument(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkArgument(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkArgument(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	                Preconditions.checkState(allCatchNodes.isEmpty()        ||        allCatchNodes.isEmpty());        Preconditions.checkArgument(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkArgument(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());	  	compilable	  [FE]  RuntimeException  	213	6	add
560	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkArgument(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkArgument(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkArgument(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	                Preconditions.checkState(allCatchNodes.isEmpty()        ||        allCatchNodes.isEmpty());        Preconditions.checkArgument(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkArgument(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkArgument(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());	  	compilable	  [FE]  RuntimeException  	213	6	add
561	[BUG]  [BUGGY]          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkArgument(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkArgument(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkArgument(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkArgument(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkArgument(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkArgument(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	                Preconditions.checkState(allCatchNodes.isEmpty()        ||        allCatchNodes.isEmpty());        Preconditions.checkArgument(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkArgument(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkArgument(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());	  	compilable	  [FE]  RuntimeException  	213	6	add
562	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkArgument(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkArgument(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	                Preconditions.checkState(allCatchNodes.isEmpty()        ||        allCatchNodes.isEmpty());        Preconditions.checkArgument(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkArgument(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());	  	compilable	  [FE]  RuntimeException  	213	6	add
563	[BUG]  [BUGGY]          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkArgument(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkArgument(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkArgument(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkArgument(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	                Preconditions.checkState(allCatchNodes.isEmpty()        ||        allCatchNodes.isEmpty());        Preconditions.checkArgument(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkArgument(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());	  	compilable	  [FE]  RuntimeException  	213	6	add
564	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkArgument(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	                Preconditions.checkState(allCatchNodes.isEmpty()        ||        allCatchNodes.isEmpty());        Preconditions.checkArgument(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());	  	compilable	  [FE]  RuntimeException  	213	6	add
565	[BUG]  [BUGGY]          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkArgument(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkArgument(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	                Preconditions.checkState(allCatchNodes.isEmpty()        ||        allCatchNodes.isEmpty());        Preconditions.checkArgument(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());	  	compilable	  [FE]  RuntimeException  	213	6	add
566	[BUG]  [BUGGY]          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkArgument(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkArgument(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  preconditions.checkArgument(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [CE]  cannot  find  symbol  preconditions  [FE]            RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkArgument(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkArgument(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  preconditions.checkArgument(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	                Preconditions.checkState(allCatchNodes.isEmpty()        ||        allCatchNodes.isEmpty());        Preconditions.checkArgument(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkArgument(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  preconditions.checkArgument(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());	  	non-compiled	[CE]  cannot  find  symbol  preconditions	213	None	add
567	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	                Preconditions.checkState(allCatchNodes.isEmpty()        ||        allCatchNodes.isEmpty());        Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());	  	compilable	  [FE]  RuntimeException  	118	6	add
568	[BUG]  [BUGGY]          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	                Preconditions.checkState(allCatchNodes.isEmpty()        ||        allCatchNodes.isEmpty());        Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());	  	compilable	  [FE]  RuntimeException  	118	6	add
569	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	                Preconditions.checkState(allCatchNodes.isEmpty()        ||        allCatchNodes.isEmpty());        Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());	  	compilable	  [FE]  RuntimeException  	118	6	add
570	[BUG]  [BUGGY]          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	                Preconditions.checkState(allCatchNodes.isEmpty()        ||        allCatchNodes.isEmpty());        Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());	  	compilable	  [FE]  RuntimeException  	118	6	add
571	[BUG]  [BUGGY]          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [CE]  cannot  find  symbol  preconditions  [FE]        RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	                Preconditions.checkState(allCatchNodes.isEmpty()        ||        allCatchNodes.isEmpty());        Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());	  	non-compiled	[CE]  cannot  find  symbol  preconditions	118	None	add
572	[BUG]  [BUGGY]          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Node  allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [CE]  ';'  expected  [FE]          RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Node  allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	                Preconditions.checkState(allCatchNodes.isEmpty()        ||        allCatchNodes.isEmpty());        Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Node  allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());	  	non-compiled	[CE]  ';'  expected	118	None	add
573	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes!=  null);  Preconditions.checkArgument(allCatchNodes.isEmpty());  [CE]  illegal  start  of  type  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes!=  null);  Preconditions.checkArgument(allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes!=  null);  Preconditions.checkArgument(allCatchNodes.isEmpty());	          Preconditions.checkState(allCatchNodes.isEmpty());    Preconditions.checkArgument(allCatchNodes.isEmpty());    	non-compiled	[CE]  illegal  start  of  type	193	None	replace
574	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty();  Preconditions.checkArgument(allCatchNodes.isEmpty());  [CE]  ')'  expected  [FE]      RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty();  Preconditions.checkArgument(allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.isEmpty();  Preconditions.checkArgument(allCatchNodes.isEmpty());	          Preconditions.checkState(allCatchNodes.isEmpty());    Preconditions.checkArgument(allCatchNodes.isEmpty());    	non-compiled	[CE]  ')'  expected	193	None	replace
575	[BUG]  [BUGGY]  if(!NodeUtil.isExpressionNode(allCatchNodes,  labelName))  {  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!NodeUtil.isExpressionNode(allCatchNodes,  labelName))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!NodeUtil.isExpressionNode(allCatchNodes,  labelName))  {	  if(!NodeUtil.isExpressionNode(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
576	[BUG]  [BUGGY]  if(!NodeUtil.isExpressionNode(allCatchNodes)&&!NodeUtil.hasFinally(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!NodeUtil.isExpressionNode(allCatchNodes)&&!NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!NodeUtil.isExpressionNode(allCatchNodes)&&!NodeUtil.hasFinally(allCatchNodes))  {	  if(!NodeUtil.isExpressionNode(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
577	[BUG]  [BUGGY]  If(NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  ';'  expected  [FE]          RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  If(NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	If(NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.hasCatchHandler(allCatchNodes)&&    NodeUtil.hasFinally(allCatchNodes))    {    If(NodeUtil.hasCatchHandler(allCatchNodes)&&    NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  ';'  expected	55	None	replace
578	[BUG]  [BUGGY]  if(NodeUtil.hasCatchHandler(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  If(NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.  [CE]  ')'  expected  [FE]            RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(NodeUtil.hasCatchHandler(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  If(NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(NodeUtil.hasCatchHandler(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  If(NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.	  if(NodeUtil.hasCatchHandler(allCatchNodes)&&    NodeUtil.hasFinally(allCatchNodes))    {    If(NodeUtil.hasCatchHandler(allCatchNodes)&&    NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  ')'  expected	55	None	replace
579	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  If(NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.  [CE]  ')'  expected  [FE]              RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  If(NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  If(NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.	  if(NodeUtil.hasCatchHandler(allCatchNodes)&&    NodeUtil.hasFinally(allCatchNodes))    {    If(NodeUtil.hasCatchHandler(allCatchNodes)&&    NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  ')'  expected	55	None	replace
580	[BUG]  [BUGGY]  Node  c  =  allCatchNodes.getFirstChild();  Integer  c  =  allCatchNodes.getFirstChild();  Preconditions.checkState(allCatchNodes.hasOneChild());  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  c  =  allCatchNodes.getFirstChild();  Integer  c  =  allCatchNodes.getFirstChild();  Preconditions.checkState(allCatchNodes.hasOneChild());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  c  =  allCatchNodes.getFirstChild();  Integer  c  =  allCatchNodes.getFirstChild();  Preconditions.checkState(allCatchNodes.hasOneChild());	          Node    c    =    allCatchNodes.getFirstChild();    Node    c    =    allCatchNodes.getFirstChild();    Preconditions.checkState(allCatchNodes.hasOneChild());    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
581	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes  ==  null  &&!NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	if(allCatchNodes  ==  null  &&!NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(allCatchNodes!=    null    &&!NodeUtil.hasCatchHandler(allCatchNodes))    {    	compilable	  [FE]  AssertionFailedError  	161	6	replace
582	[BUG]  [BUGGY]  if(allCatchNodes  ==  null  &&!NodeUtil.hasCatchHandler(allCatchNodes))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes  ==  null  &&!NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes  ==  null  &&!NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(allCatchNodes!=    null    &&!NodeUtil.hasCatchHandler(allCatchNodes))    {    	compilable	  [FE]  AssertionFailedError  	161	6	replace
583	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  &&  allCatchNodes.getFirstChild());  [CE]  illegal  start  of  type  [FE]            RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  &&  allCatchNodes.getFirstChild());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.isEmpty()  &&  allCatchNodes.getFirstChild());	  Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.getFirstChild());    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
584	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.getLastChild());  [CE]  illegal  start  of  type  [FE]              RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.getLastChild());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.getLastChild());	  Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.getFirstChild());    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
585	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.hasChildren());  [CE]  illegal  start  of  type  [FE]                RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.hasChildren());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.hasChildren());	  Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.getFirstChild());    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
586	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.getFirstChild()  <  n);  [CE]  illegal  start  of  type  [FE]                  RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.getFirstChild()  <  n);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.getFirstChild()  <  n);	  Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.getFirstChild());    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
587	[BUG]  [BUGGY]  Preconditions.checkEquals(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [CE]  illegal  start  of  type  [FE]              RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkEquals(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkEquals(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());	          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkEquals(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    	non-compiled	[CE]  illegal  start  of  type	217	None	replace
588	[BUG]  [BUGGY]  Preconditions.checkState(AllCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkEquals(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [CE]  illegal  start  of  type  [FE]                RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(AllCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkEquals(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(AllCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkEquals(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());	          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkEquals(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    	non-compiled	[CE]  illegal  start  of  type	217	None	replace
589	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  preconditions.checkEquals(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [CE]  illegal  start  of  type  [FE]                  RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  preconditions.checkEquals(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  preconditions.checkEquals(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());	          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkEquals(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    	non-compiled	[CE]  illegal  start  of  type	217	None	replace
590	[BUG]  [BUGGY]  if(allCatchNodes.hasOneChild())  {  if(!NodeUtil.isFinally(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]            RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes.hasOneChild())  {  if(!NodeUtil.isFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes.hasOneChild())  {  if(!NodeUtil.isFinally(allCatchNodes))  {	  if(!NodeUtil.hasFinally(allCatchNodes))    {    if(!NodeUtil.isFinally(allCatchNodes))    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
591	[BUG]  [BUGGY]  if(!NodeUtil.isFinally(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!NodeUtil.isFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!NodeUtil.isFinally(allCatchNodes))  {	  if(!NodeUtil.hasFinally(allCatchNodes))    {    if(!NodeUtil.isFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
592	[BUG]  [BUGGY]  if(allCatchNodes.isEmpty())  {  if(!NodeUtil.isFinally(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]                RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes.isEmpty())  {  if(!NodeUtil.isFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes.isEmpty())  {  if(!NodeUtil.isFinally(allCatchNodes))  {	  if(!NodeUtil.hasFinally(allCatchNodes))    {    if(!NodeUtil.isFinally(allCatchNodes))    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
593	[BUG]  [BUGGY]  if(!NodeUtil.isFinally(allCatchNodes)||!NodeUtil.isFinally(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]                  RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!NodeUtil.isFinally(allCatchNodes)||!NodeUtil.isFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!NodeUtil.isFinally(allCatchNodes)||!NodeUtil.isFinally(allCatchNodes))  {	  if(!NodeUtil.hasFinally(allCatchNodes))    {    if(!NodeUtil.isFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
594	[BUG]  [BUGGY]  if(!NodeUtil.isFinally(allCatchNodes)&&!NodeUtil.isFinally(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]                    RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!NodeUtil.isFinally(allCatchNodes)&&!NodeUtil.isFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!NodeUtil.isFinally(allCatchNodes)&&!NodeUtil.isFinally(allCatchNodes))  {	  if(!NodeUtil.hasFinally(allCatchNodes))    {    if(!NodeUtil.isFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
595	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  preconditions.checkState(allCatchNodes.isEmpty());  [CE]  illegal  start  of  type  [FE]          RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  preconditions.checkState(allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  preconditions.checkState(allCatchNodes.isEmpty());	          Preconditions.checkState(allCatchNodes.isEmpty());    Node    allCatchNodes    =    NodeUtil.getCatchBlock(n);    preconditions.checkState(allCatchNodes.isEmpty());    	non-compiled	[CE]  illegal  start  of  type	194	None	replace
596	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock);  preconditions.checkState(allCatchNodes.isEmpty());  [CE]  illegal  start  of  type  [FE]            RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock);  preconditions.checkState(allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.isEmpty());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock);  preconditions.checkState(allCatchNodes.isEmpty());	          Preconditions.checkState(allCatchNodes.isEmpty());    Node    allCatchNodes    =    NodeUtil.getCatchBlock(n);    preconditions.checkState(allCatchNodes.isEmpty());    	non-compiled	[CE]  illegal  start  of  type	194	None	replace
597	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  &&  allCatchNodes.isEmpty());  AllCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [CE]  not  a  statement  [FE]        RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  &&  allCatchNodes.isEmpty());  AllCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.isEmpty()  &&  allCatchNodes.isEmpty());  AllCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());	          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    AllCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    	non-compiled	[CE]  not  a  statement	164	None	replace
598	[BUG]  [BUGGY]  AllCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [CE]  not  a  statement  [FE]          RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  AllCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	AllCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());	          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    AllCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    	non-compiled	[CE]  not  a  statement	164	None	replace
599	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  AllCatchNodes.isEmpty()  &&  allCatchNodes.isEmpty());  [CE]  not  a  statement  [FE]            RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  AllCatchNodes.isEmpty()  &&  allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  AllCatchNodes.isEmpty()  &&  allCatchNodes.isEmpty());	          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    AllCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    	non-compiled	[CE]  not  a  statement	164	None	replace
600	[BUG]  [BUGGY]  Node  c  =  allCatchNodes.get(tryBlock);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  c  =  allCatchNodes.get(tryBlock);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  c  =  allCatchNodes.get(tryBlock);	  Node    c    =    allCatchNodes.get(0);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
601	[BUG]  [BUGGY]  Node  c  =  allCatchNodes.get(1);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  c  =  allCatchNodes.get(1);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  c  =  allCatchNodes.get(1);	  Node    c    =    allCatchNodes.get(0);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
602	[BUG]  [BUGGY]  Node  c  =  allCatchNodes.get(n);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  c  =  allCatchNodes.get(n);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  c  =  allCatchNodes.get(n);	  Node    c    =    allCatchNodes.get(0);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
603	[BUG]  [BUGGY]  Node  c  =  allCatchNodes.get(labelName);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  c  =  allCatchNodes.get(labelName);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  c  =  allCatchNodes.get(labelName);	  Node    c    =    allCatchNodes.get(0);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
604	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes  ==  null  &&!NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	if(allCatchNodes  ==  null  &&!NodeUtil.hasFinally(allCatchNodes))  {	  if(allCatchNodes!=    null    &&!NodeUtil.hasFinally(allCatchNodes))    {    	compilable	  [FE]  AssertionFailedError  	142	6	replace
605	[BUG]  [BUGGY]  if(allCatchNodes  ==  null  &&!NodeUtil.hasFinally(allCatchNodes))  {  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes  ==  null  &&!NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes  ==  null  &&!NodeUtil.hasFinally(allCatchNodes))  {	  if(allCatchNodes!=    null    &&!NodeUtil.hasFinally(allCatchNodes))    {    	compilable	  [FE]  AssertionFailedError  	142	6	replace
606	[BUG]  [BUGGY]  if(allCatchNodes!=  null  &&!NodeUtil.isFinally(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  &&!NodeUtil.isFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=  null  &&!NodeUtil.isFinally(allCatchNodes))  {	  if(allCatchNodes!=    null    &&!NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	142	None	replace
607	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  &&  allCatchNodes.isEmpty()  &&  tryMinimizeExits(tryBlock,  exitType,  labelName));  [CE]  illegal  start  of  type  [FE]          RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  &&  allCatchNodes.isEmpty()  &&  tryMinimizeExits(tryBlock,  exitType,  labelName));  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.isEmpty()  &&  allCatchNodes.isEmpty()  &&  tryMinimizeExits(tryBlock,  exitType,  labelName));	  Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty()    &&    tryMinimizeExits(tryBlock,    exitType,    labelName));    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
608	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty()  &&  tryMinimizeExits(elseBlock,  exitType,  labelName));  [CE]  illegal  start  of  type  [FE]            RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty()  &&  tryMinimizeExits(elseBlock,  exitType,  labelName));  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty()  &&  tryMinimizeExits(elseBlock,  exitType,  labelName));	  Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty()    &&    tryMinimizeExits(tryBlock,    exitType,    labelName));    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
609	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty()  &&  tryMinimizeExits(catchCodeBlock,  exitType,  labelName));  [CE]  illegal  start  of  type  [FE]              RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty()  &&  tryMinimizeExits(catchCodeBlock,  exitType,  labelName));  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty()  &&  tryMinimizeExits(catchCodeBlock,  exitType,  labelName));	  Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty()    &&    tryMinimizeExits(tryBlock,    exitType,    labelName));    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
610	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty()  &&  tryMinimizeExits(catch,  exitType,  labelName));  [CE]  illegal  start  of  expression  [FE]                RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty()  &&  tryMinimizeExits(catch,  exitType,  labelName));  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty()  &&  tryMinimizeExits(catch,  exitType,  labelName));	  Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty()    &&    tryMinimizeExits(tryBlock,    exitType,    labelName));    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
611	[BUG]  [BUGGY]  Preconditions.checkNotNull(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [CE]  illegal  start  of  type  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkNotNull(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkNotNull(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());	          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkNotNull(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    	non-compiled	[CE]  illegal  start  of  type	216	None	replace
612	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  &&  allCatchNodes.isEmpty());  Preconditions.checkNotNull(allCatchNodes.isEmpty()  &&  allCatchNodes.isEmpty());  [CE]  illegal  start  of  type  [FE]      RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  &&  allCatchNodes.isEmpty());  Preconditions.checkNotNull(allCatchNodes.isEmpty()  &&  allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.isEmpty()  &&  allCatchNodes.isEmpty());  Preconditions.checkNotNull(allCatchNodes.isEmpty()  &&  allCatchNodes.isEmpty());	          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkNotNull(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    	non-compiled	[CE]  illegal  start  of  type	216	None	replace
613	[BUG]  [BUGGY]  Preconditions.checkNotNull(allCatchNodes.isEmpty(),  allCatchNodes.isEmpty());  [CE]  illegal  start  of  type  [FE]        RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkNotNull(allCatchNodes.isEmpty(),  allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkNotNull(allCatchNodes.isEmpty(),  allCatchNodes.isEmpty());	          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkNotNull(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    	non-compiled	[CE]  illegal  start  of  type	216	None	replace
614	[BUG]  [BUGGY]  if(allCatchNodes.hasChildren()  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {  if(allCatchNodes.hasChildren()  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes.hasChildren()  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {  if(allCatchNodes.hasChildren()  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes.hasChildren()    ||    NodeUtil.hasCatchHandler(allCatchNodes))    {    if(allCatchNodes.hasChildren()  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {	  	non-compiled	[CE]  illegal  start  of  expression	153	None	add
615	[BUG]  [BUGGY]  if(allCatchNodes.hasChildren()  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {  If(allCatchNodes.hasChildren()  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes.hasChildren()  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {  If(allCatchNodes.hasChildren()  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes.hasChildren()    ||    NodeUtil.hasCatchHandler(allCatchNodes))    {    If(allCatchNodes.hasChildren()  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {	  	non-compiled	[CE]  ';'  expected	153	None	add
616	[BUG]  [BUGGY]  if(allCatchNodes.hasChildren()  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {  if(AllCatchNodes.hasChildren()  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes.hasChildren()  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {  if(AllCatchNodes.hasChildren()  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes.hasChildren()    ||    NodeUtil.hasCatchHandler(allCatchNodes))    {    if(AllCatchNodes.hasChildren()  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {	  	non-compiled	[CE]  illegal  start  of  expression	153	None	add
617	[BUG]  [BUGGY]          Node    elseBlock    =    allCatchNodes.getLastChild();    Node  otherBlock  =  allCatchNodes.getLastChild();  Node  elseBlock  =  allCatchNodes.getLastChild();  Node  otherBlock  =  allCatchNodes.getLastChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Node    elseBlock    =    allCatchNodes.getLastChild();    Node  otherBlock  =  allCatchNodes.getLastChild();  Node  elseBlock  =  allCatchNodes.getLastChild();  Node  otherBlock  =  allCatchNodes.getLastChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	                Node        elseBlock        =        allCatchNodes.getLastChild();        Node    otherBlock    =    allCatchNodes.getLastChild();    Node  elseBlock  =  allCatchNodes.getLastChild();  Node  otherBlock  =  allCatchNodes.getLastChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	30	None	add
618	[BUG]  [BUGGY]          Node    elseBlock    =    allCatchNodes.getLastChild();    Node  otherBlock  =  allCatchNodes.getLastChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  otherBlock  =  allCatchNodes.getLastChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Node    elseBlock    =    allCatchNodes.getLastChild();    Node  otherBlock  =  allCatchNodes.getLastChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  otherBlock  =  allCatchNodes.getLastChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	                Node        elseBlock        =        allCatchNodes.getLastChild();        Node    otherBlock    =    allCatchNodes.getLastChild();    Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  otherBlock  =  allCatchNodes.getLastChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	30	None	add
619	[BUG]  [BUGGY]          Node    elseBlock    =    allCatchNodes.getLastChild();    Node  otherBlock  =  allCatchNodes.getLastChild();  Node  elseBlock  =  allCatchNodes.getLastChild();  Node  othersBlock  =  allCatchNodes.getLastChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Node    elseBlock    =    allCatchNodes.getLastChild();    Node  otherBlock  =  allCatchNodes.getLastChild();  Node  elseBlock  =  allCatchNodes.getLastChild();  Node  othersBlock  =  allCatchNodes.getLastChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	                Node        elseBlock        =        allCatchNodes.getLastChild();        Node    otherBlock    =    allCatchNodes.getLastChild();    Node  elseBlock  =  allCatchNodes.getLastChild();  Node  othersBlock  =  allCatchNodes.getLastChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	30	None	add
620	[BUG]  [BUGGY]          Node    elseBlock    =    allCatchNodes.getLastChild();    Node  otherBlock  =  allCatchNodes.getLastChild();  Node  elseBlock  =  allCatchNodes.getLastChild();  Node  anotherBlock  =  allCatchNodes.getLastChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Node    elseBlock    =    allCatchNodes.getLastChild();    Node  otherBlock  =  allCatchNodes.getLastChild();  Node  elseBlock  =  allCatchNodes.getLastChild();  Node  anotherBlock  =  allCatchNodes.getLastChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	                Node        elseBlock        =        allCatchNodes.getLastChild();        Node    otherBlock    =    allCatchNodes.getLastChild();    Node  elseBlock  =  allCatchNodes.getLastChild();  Node  anotherBlock  =  allCatchNodes.getLastChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	30	None	add
621	[BUG]  [BUGGY]          Node    elseBlock    =    allCatchNodes.getLastChild();    Node  otherBlock  =  allCatchNodes.getLastChild();  Node  elseBlock  =  AllCatchNodes.getLastChild();  Node  otherBlock  =  allCatchNodes.getLastChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]            AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Node    elseBlock    =    allCatchNodes.getLastChild();    Node  otherBlock  =  allCatchNodes.getLastChild();  Node  elseBlock  =  AllCatchNodes.getLastChild();  Node  otherBlock  =  allCatchNodes.getLastChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	                Node        elseBlock        =        allCatchNodes.getLastChild();        Node    otherBlock    =    allCatchNodes.getLastChild();    Node  elseBlock  =  AllCatchNodes.getLastChild();  Node  otherBlock  =  allCatchNodes.getLastChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	30	None	add
622	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  elseBlock  =  allCatchNodes.getLastChild();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  elseBlock  =  allCatchNodes.getLastChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.hasOneChild());  Node  elseBlock  =  allCatchNodes.getLastChild();	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    elseBlock    =    allCatchNodes.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
623	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.getFirstChild()!=  null);  Node  elseBlock  =  allCatchNodes.getLastChild();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.getFirstChild()!=  null);  Node  elseBlock  =  allCatchNodes.getLastChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.getFirstChild()!=  null);  Node  elseBlock  =  allCatchNodes.getLastChild();	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    elseBlock    =    allCatchNodes.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
624	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes  ==  null  &&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	if(allCatchNodes  ==  null  &&  NodeUtil.hasFinally(allCatchNodes))  {	  if(allCatchNodes!=    null    &&    NodeUtil.hasFinally(allCatchNodes))    {    	compilable	  [FE]  AssertionFailedError  	114	6	replace
625	[BUG]  [BUGGY]  if(allCatchNodes  ==  null  &&  NodeUtil.hasFinally(allCatchNodes))  {  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes  ==  null  &&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes  ==  null  &&  NodeUtil.hasFinally(allCatchNodes))  {	  if(allCatchNodes!=    null    &&    NodeUtil.hasFinally(allCatchNodes))    {    	compilable	  [FE]  AssertionFailedError  	114	6	replace
626	[BUG]  [BUGGY]  if(allCatchNodes!=  null  &&  NodeUtil.isFinally(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  &&  NodeUtil.isFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=  null  &&  NodeUtil.isFinally(allCatchNodes))  {	  if(allCatchNodes!=    null    &&    NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	114	None	replace
627	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Preconditions.checkState(allCatchNodes.isEmpty());  [CE]  illegal  start  of  type  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Preconditions.checkState(allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.hasOneChild());  Preconditions.checkState(allCatchNodes.isEmpty());	          Preconditions.checkState(allCatchNodes.isEmpty());    Preconditions.checkState(allCatchNodes.isEmpty());    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
628	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes!=  null);  Preconditions.checkState(allCatchNodes.isEmpty());  [CE]  illegal  start  of  type  [FE]      RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes!=  null);  Preconditions.checkState(allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes!=  null);  Preconditions.checkState(allCatchNodes.isEmpty());	          Preconditions.checkState(allCatchNodes.isEmpty());    Preconditions.checkState(allCatchNodes.isEmpty());    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
629	[BUG]  [BUGGY]  Node  allCatchNodes  =  allCatchNodes.getFirstChild();  Preconditions.checkState(allCatchNodes.isEmpty());  [CE]  illegal  start  of  type  [FE]        RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  allCatchNodes  =  allCatchNodes.getFirstChild();  Preconditions.checkState(allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes  =  allCatchNodes.getFirstChild();  Preconditions.checkState(allCatchNodes.isEmpty());	          Preconditions.checkState(allCatchNodes.isEmpty());    Preconditions.checkState(allCatchNodes.isEmpty());    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
630	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  Preconditions.checkState(!NodeUtil.hasFinally(allCatchNodes))  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  Preconditions.checkState(!NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  Preconditions.checkState(!NodeUtil.hasFinally(allCatchNodes))  {	  if(!NodeUtil.hasCatchHandler(allCatchNodes))    {    Node    allCatchNodes    =    NodeUtil.getCatchHandler(allCatchNodes);    Preconditions.checkState(!NodeUtil.hasCatchHandler(allCatchNodes))    {    	non-compiled	[CE]  ';'  expected	189	None	replace
631	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes);  Preconditions.checkState(!NodeUtil.hasFinally(allCatchNodes))  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes);  Preconditions.checkState(!NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes);  Preconditions.checkState(!NodeUtil.hasFinally(allCatchNodes))  {	  if(!NodeUtil.hasCatchHandler(allCatchNodes))    {    Node    allCatchNodes    =    NodeUtil.getCatchHandler(allCatchNodes);    Preconditions.checkState(!NodeUtil.hasCatchHandler(allCatchNodes))    {    	non-compiled	[CE]  ';'  expected	189	None	replace
632	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes);  Preconditions.checkState(!NodeUtil.hasCatchHandler(allCatchNodes))  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes);  Preconditions.checkState(!NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes);  Preconditions.checkState(!NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(!NodeUtil.hasCatchHandler(allCatchNodes))    {    Node    allCatchNodes    =    NodeUtil.getCatchHandler(allCatchNodes);    Preconditions.checkState(!NodeUtil.hasCatchHandler(allCatchNodes))    {    	non-compiled	[CE]  ';'  expected	189	None	replace
633	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  Preconditions.checkState(!NodeUtil.isFinally(allCatchNodes))  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  Preconditions.checkState(!NodeUtil.isFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  Preconditions.checkState(!NodeUtil.isFinally(allCatchNodes))  {	  if(!NodeUtil.hasCatchHandler(allCatchNodes))    {    Node    allCatchNodes    =    NodeUtil.getCatchHandler(allCatchNodes);    Preconditions.checkState(!NodeUtil.hasCatchHandler(allCatchNodes))    {    	non-compiled	[CE]  ';'  expected	189	None	replace
634	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.hasFinally(allCatchNodes))  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(!NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(!NodeUtil.hasFinally(allCatchNodes))  {	  if(!NodeUtil.hasCatchHandler(allCatchNodes))    {    Node    allCatchNodes    =    NodeUtil.getCatchHandler(allCatchNodes);    Preconditions.checkState(!NodeUtil.hasCatchHandler(allCatchNodes))    {    	non-compiled	[CE]  ';'  expected	189	None	replace
635	[BUG]  [BUGGY]  Node  allCatchNodes  =  allCatchNodes.isEmpty();  [CE]  illegal  start  of  type  [FE]          RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  allCatchNodes  =  allCatchNodes.isEmpty();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes  =  allCatchNodes.isEmpty();	          Preconditions.checkState(allCatchNodes.isEmpty());    Node    allCatchNodes    =    allCatchNodes.isEmpty());    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
636	[BUG]  [BUGGY]  if(allCatchNodes.isEmpty())  {  Preconditions.checkState(allCatchNodes.isEmpty());  Node  allCatchNodes  =  allCatchNodes.isEmpty());  }  [CE]  ';'  expected  [FE]            RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes.isEmpty())  {  Preconditions.checkState(allCatchNodes.isEmpty());  Node  allCatchNodes  =  allCatchNodes.isEmpty());  }  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes.isEmpty())  {  Preconditions.checkState(allCatchNodes.isEmpty());  Node  allCatchNodes  =  allCatchNodes.isEmpty());  }	          Preconditions.checkState(allCatchNodes.isEmpty());    Node    allCatchNodes    =    allCatchNodes.isEmpty());    	non-compiled	[CE]  ';'  expected	21	None	replace
637	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty());  Node  allCatchNodes  =  allCatchNodes.get(0);  [CE]  illegal  start  of  type  [FE]              RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty());  Node  allCatchNodes  =  allCatchNodes.get(0);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.isEmpty());  Node  allCatchNodes  =  allCatchNodes.get(0);	          Preconditions.checkState(allCatchNodes.isEmpty());    Node    allCatchNodes    =    allCatchNodes.isEmpty());    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
638	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty());  Node  allCatchNodes  =  allCatchNodes.isEmpty();  [CE]  illegal  start  of  type  [FE]                RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty());  Node  allCatchNodes  =  allCatchNodes.isEmpty();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.isEmpty());  Node  allCatchNodes  =  allCatchNodes.isEmpty();	          Preconditions.checkState(allCatchNodes.isEmpty());    Node    allCatchNodes    =    allCatchNodes.isEmpty());    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
639	[BUG]  [BUGGY]  if(allCatchNodes.hasOneChild())  {  if(NodeUtil.isFinally(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]            RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes.hasOneChild())  {  if(NodeUtil.isFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes.hasOneChild())  {  if(NodeUtil.isFinally(allCatchNodes))  {	  if(NodeUtil.hasFinally(allCatchNodes))    {    if(NodeUtil.isFinally(allCatchNodes))    {    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
640	[BUG]  [BUGGY]  if(NodeUtil.isFinally(allCatchNodes)||  NodeUtil.isFinally(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(NodeUtil.isFinally(allCatchNodes)||  NodeUtil.isFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(NodeUtil.isFinally(allCatchNodes)||  NodeUtil.isFinally(allCatchNodes))  {	  if(NodeUtil.hasFinally(allCatchNodes))    {    if(NodeUtil.isFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
641	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [CE]  illegal  start  of  type  [FE]        RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());	          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Node    allCatchNodes    =    NodeUtil.getCatchBlock(n);    Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    	non-compiled	[CE]  illegal  start  of  type	212	None	replace
642	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  [CE]  illegal  start  of  type  [FE]          RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);	          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Node    allCatchNodes    =    NodeUtil.getCatchBlock(n);    Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    	non-compiled	[CE]  illegal  start  of  type	212	None	replace
643	[BUG]  [BUGGY]  if(NodeUtil.hasCatchName(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]        RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(NodeUtil.hasCatchName(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(NodeUtil.hasCatchName(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.hasCatchHandler(allCatchNodes)||    NodeUtil.hasFinally(allCatchNodes))    {    if(NodeUtil.hasCatchHandler(allCatchNodes)||    NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	124	None	replace
644	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.mayHaveSideEffects(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.mayHaveSideEffects(allCatchNodes))  {	  if(NodeUtil.hasFinally(allCatchNodes)&&    NodeUtil.isExpressionNode(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	224	6	replace
645	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.mayHaveSideEffects(allCatchNodes))  {  [FE]  RuntimeException  [FE]        RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.mayHaveSideEffects(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.mayHaveSideEffects(allCatchNodes))  {	  if(NodeUtil.hasFinally(allCatchNodes)&&    NodeUtil.isExpressionNode(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	224	6	replace
646	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  Preconditions.checkState(!NodeUtil.hasCatchHandler(allCatchNodes))  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  Preconditions.checkState(!NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  Preconditions.checkState(!NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(!NodeUtil.hasCatchHandler(allCatchNodes))    {    Node    allCatchNodes    =    NodeUtil.getCatchHandler(allCatchNodes);    Preconditions.checkState(!NodeUtil.hasCatchHandler(allCatchNodes))    {    	non-compiled	[CE]  ';'  expected	189	None	replace
647	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  Preconditions.checkState(!NodeUtil.hasAllCatchNodes(allCatchNodes))  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  Preconditions.checkState(!NodeUtil.hasAllCatchNodes(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  Preconditions.checkState(!NodeUtil.hasAllCatchNodes(allCatchNodes))  {	  if(!NodeUtil.hasCatchHandler(allCatchNodes))    {    Node    allCatchNodes    =    NodeUtil.getCatchHandler(allCatchNodes);    Preconditions.checkState(!NodeUtil.hasCatchHandler(allCatchNodes))    {    	non-compiled	[CE]  ';'  expected	189	None	replace
648	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty()  ||  tryMinimizeExits(tryBlock,  exitType,  labelName));  [CE]  illegal  start  of  type  [FE]          RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty()  ||  tryMinimizeExits(tryBlock,  exitType,  labelName));  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty()  ||  tryMinimizeExits(tryBlock,  exitType,  labelName));	  Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty()    &&    tryMinimizeExits(tryBlock,    exitType,    labelName));    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
649	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty()  &&  tryMinimizeExits(cursor,  exitType,  labelName));  [CE]  illegal  start  of  type  [FE]            RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty()  &&  tryMinimizeExits(cursor,  exitType,  labelName));  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty()  &&  tryMinimizeExits(cursor,  exitType,  labelName));	  Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty()    &&    tryMinimizeExits(tryBlock,    exitType,    labelName));    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
650	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(allCatchNodes)&&  allCatchNodes.isEmpty())  {  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(NodeUtil.isExpressionNode(allCatchNodes)&&  allCatchNodes.isEmpty())  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(NodeUtil.isExpressionNode(allCatchNodes)&&  allCatchNodes.isEmpty())  {	  if(NodeUtil.hasFinally(allCatchNodes)||    allCatchNodes.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
651	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes!=  null);  [CE]  illegal  start  of  type  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes!=  null);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes!=  null);	          Preconditions.checkState(allCatchNodes.isEmpty());    Preconditions.checkState(allCatchNodes.isEmpty());    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
652	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.size()  >  0);  [CE]  illegal  start  of  type  [FE]      RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.size()  >  0);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.size()  >  0);	          Preconditions.checkState(allCatchNodes.isEmpty());    Preconditions.checkState(allCatchNodes.isEmpty());    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
653	[BUG]  [BUGGY]  Preconditions.checkState(tryBlock.isEmpty());  [CE]  illegal  start  of  type  [FE]            RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(tryBlock.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(tryBlock.isEmpty());	          Preconditions.checkState(allCatchNodes.isEmpty());    Node    allCatchNodes    =    NodeUtil.getCatchBlock(n);    Preconditions.checkState(allCatchNodes.isEmpty());    	non-compiled	[CE]  illegal  start  of  type	173	None	replace
654	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild()  &&!NodeUtil.hasFinally(allCatchNodes))  {  [CE]  ';'  expected  [FE]        RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild()  &&!NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.hasOneChild()  &&!NodeUtil.hasFinally(allCatchNodes))  {	  if(!NodeUtil.hasFinally(allCatchNodes))    {    Node    allCatchNodes    =    NodeUtil.getCatchBlock(allCatchNodes);    if(!NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  ';'  expected	182	None	replace
655	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty());  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(tryBlock);  [CE]  illegal  start  of  type  [FE]            RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty());  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(tryBlock);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.isEmpty());  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(tryBlock);	          Preconditions.checkState(allCatchNodes.isEmpty());    Node    allCatchNodes    =    NodeUtil.getAllCatchNodes(n);    Preconditions.checkState(allCatchNodes.isEmpty());    	non-compiled	[CE]  illegal  start  of  type	195	None	replace
656	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty());  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(n);  [CE]  illegal  start  of  type  [FE]              RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty());  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(n);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.isEmpty());  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(n);	          Preconditions.checkState(allCatchNodes.isEmpty());    Node    allCatchNodes    =    NodeUtil.getAllCatchNodes(n);    Preconditions.checkState(allCatchNodes.isEmpty());    	non-compiled	[CE]  illegal  start  of  type	195	None	replace
657	[BUG]  [BUGGY]          Node    elseBlock    =    allCatchNodes.getLastChild();    Node  otherBlock  =  allCatchNodes.getLastChild();  Node  elseBlock  =  allCatchNodes.getLastChild();  Node  otherBlock  =  AllCatchNodes.getLastChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Node    elseBlock    =    allCatchNodes.getLastChild();    Node  otherBlock  =  allCatchNodes.getLastChild();  Node  elseBlock  =  allCatchNodes.getLastChild();  Node  otherBlock  =  AllCatchNodes.getLastChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	                Node        elseBlock        =        allCatchNodes.getLastChild();        Node    otherBlock    =    allCatchNodes.getLastChild();    Node  elseBlock  =  allCatchNodes.getLastChild();  Node  otherBlock  =  AllCatchNodes.getLastChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	30	None	add
658	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes).getFirstChild();  [CE]  illegal  start  of  type  [FE]          RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes).getFirstChild();  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes).getFirstChild();	  if(!NodeUtil.hasFinally(allCatchNodes))    {    Node    allCatchNodes    =    NodeUtil.getCatchBlock(allCatchNodes).getFirstChild();    if(!NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  illegal  start  of  type	183	None	replace
659	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes).getFirstChild();  if(!NodeUtil.hasFinally(allCatchNodes)&&!  [CE]  ')'  expected  [FE]            RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes).getFirstChild();  if(!NodeUtil.hasFinally(allCatchNodes)&&!  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes).getFirstChild();  if(!NodeUtil.hasFinally(allCatchNodes)&&!	  if(!NodeUtil.hasFinally(allCatchNodes))    {    Node    allCatchNodes    =    NodeUtil.getCatchBlock(allCatchNodes).getFirstChild();    if(!NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  ')'  expected	183	None	replace
660	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!NodeUtil.hasCatchHandler(allCatchNodes)&&!NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	if(!NodeUtil.hasCatchHandler(allCatchNodes)&&!NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(!NodeUtil.hasCatchHandler(allCatchNodes))    {    if(!NodeUtil.hasCatchHandler(allCatchNodes))    {    	compilable	  [FE]  AssertionFailedError  	51	6	replace
661	[BUG]  [BUGGY]  if(!NodeUtil.hasCatchHandler(allCatchNodes)&&!NodeUtil.hasCatchHandler(allCatchNodes))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!NodeUtil.hasCatchHandler(allCatchNodes)&&!NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!NodeUtil.hasCatchHandler(allCatchNodes)&&!NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(!NodeUtil.hasCatchHandler(allCatchNodes))    {    if(!NodeUtil.hasCatchHandler(allCatchNodes))    {    	compilable	  [FE]  AssertionFailedError  	51	6	replace
662	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!NodeUtil.hasCatchHandler(allCatchNodes)||!NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	if(!NodeUtil.hasCatchHandler(allCatchNodes)||!NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(!NodeUtil.hasCatchHandler(allCatchNodes))    {    if(!NodeUtil.hasCatchHandler(allCatchNodes))    {    	compilable	  [FE]  AssertionFailedError  	51	6	replace
663	[BUG]  [BUGGY]  if(!NodeUtil.hasCatchHandler(allCatchNodes)||!NodeUtil.hasCatchHandler(allCatchNodes))  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!NodeUtil.hasCatchHandler(allCatchNodes)||!NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!NodeUtil.hasCatchHandler(allCatchNodes)||!NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(!NodeUtil.hasCatchHandler(allCatchNodes))    {    if(!NodeUtil.hasCatchHandler(allCatchNodes))    {    	compilable	  [FE]  AssertionFailedError  	51	6	replace
664	[BUG]  [BUGGY]  n  =  allCatchNodes.getFirstChild();  Node  c  =  allCatchNodes.getFirstChild();  Preconditions.checkState(allCatchNodes.hasOneChild());  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  n  =  allCatchNodes.getFirstChild();  Node  c  =  allCatchNodes.getFirstChild();  Preconditions.checkState(allCatchNodes.hasOneChild());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	n  =  allCatchNodes.getFirstChild();  Node  c  =  allCatchNodes.getFirstChild();  Preconditions.checkState(allCatchNodes.hasOneChild());	          Node    c    =    allCatchNodes.getFirstChild();    Node    c    =    allCatchNodes.getFirstChild();    Preconditions.checkState(allCatchNodes.hasOneChild());    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
665	[BUG]  [BUGGY]  if(allCatchNodes!=  null  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  if(allCatchNodes!=  null  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  if(allCatchNodes!=  null  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=    null    ||    NodeUtil.hasCatchHandler(allCatchNodes))    {    Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  if(allCatchNodes!=  null  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {	  	non-compiled	[CE]  illegal  start  of  expression	111	None	add
666	[BUG]  [BUGGY]  Node  catchNode  =  allCatchNodes.removeChild(tryBlock);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  catchNode  =  allCatchNodes.removeChild(tryBlock);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  catchNode  =  allCatchNodes.removeChild(tryBlock);	  Node    catchNode    =    allCatchNodes.removeFirstChild();    	non-compiled	[CE]  illegal  start  of  type	198	None	replace
667	[BUG]  [BUGGY]  if(allCatchNodes.isEmpty()  ||!NodeUtil.hasFinally(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes);  if(allCatchNodes.isEmpty()  ||!NodeUtil.hasFinally(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes.isEmpty()  ||!NodeUtil.hasFinally(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes);  if(allCatchNodes.isEmpty()  ||!NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes.isEmpty()    ||!NodeUtil.hasFinally(allCatchNodes))    {    Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes);  if(allCatchNodes.isEmpty()  ||!NodeUtil.hasFinally(allCatchNodes))  {	  	non-compiled	[CE]  illegal  start  of  expression	206	None	add
668	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n.getFirstChild());  Preconditions.checkState(allCatchNodes.isEmpty());  [CE]  illegal  start  of  type  [FE]          RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n.getFirstChild());  Preconditions.checkState(allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(n.getFirstChild());  Preconditions.checkState(allCatchNodes.isEmpty());	          Preconditions.checkState(allCatchNodes.isEmpty());    Node    allCatchNodes    =    NodeUtil.getCatchBlock(allCatchNodes.isEmpty());    Preconditions.checkState(allCatchNodes.isEmpty());    	non-compiled	[CE]  illegal  start  of  type	172	None	replace
669	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.hasChildCount(),  tryBlock);  [CE]  illegal  start  of  type  [FE]              RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.hasChildCount(),  tryBlock);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.hasChildCount(),  tryBlock);	  Preconditions.checkState(allCatchNodes.hasChildCount());    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
670	[BUG]  [BUGGY]  if(NodeUtil.hasExpressionNode(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]        RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(NodeUtil.hasExpressionNode(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(NodeUtil.hasExpressionNode(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.isExpressionNode(allCatchNodes)&&    NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	170	None	replace
671	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(labelName,  exitType);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(labelName,  exitType);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(labelName,  exitType);	  Node    allCatchNodes    =    NodeUtil.getAllCatchNodes(labelName);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
672	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  ||  tryBlock.getFirstChild());  [CE]  illegal  start  of  type  [FE]            RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  ||  tryBlock.getFirstChild());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.isEmpty()  ||  tryBlock.getFirstChild());	  Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.getFirstChild());    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
673	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  ||  allCatchNodes.hasChildren()  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	if(allCatchNodes!=  null  ||  allCatchNodes.hasChildren()  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(allCatchNodes.hasChildren()    ||    NodeUtil.hasCatchHandler(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	154	2	replace
674	[BUG]  [BUGGY]  if(allCatchNodes!=  null  ||  allCatchNodes.hasChildren()  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  ||  allCatchNodes.hasChildren()  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=  null  ||  allCatchNodes.hasChildren()  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(allCatchNodes.hasChildren()    ||    NodeUtil.hasCatchHandler(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	154	2	replace
675	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes)&&  nodeUtil.hasFinally(allCatchNodes))  {  [CE]  ';'  expected  [FE]            RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes)&&  nodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes)&&  nodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.hasCatchHandler(allCatchNodes)&&    NodeUtil.hasFinally(allCatchNodes))    {    Node    allCatchNodes    =    NodeUtil.getCatchHandler(allCatchNodes)&&    NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  ';'  expected	56	None	replace
676	[BUG]  [BUGGY]  if(allCatchNodes.hasChildren()  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes.hasChildren()  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes.hasChildren()    ||    NodeUtil.hasCatchHandler(allCatchNodes))    {    Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);	  	non-compiled	[CE]  illegal  start  of  expression	153	None	add
677	[BUG]  [BUGGY]  if(NodeUtil.isFinally(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(NodeUtil.isFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(NodeUtil.isFinally(allCatchNodes))  {	  if(NodeUtil.hasFinally(allCatchNodes))    {    if(NodeUtil.isFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
678	[BUG]  [BUGGY]  if(NodeUtil.isFinally(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(NodeUtil.isFinally(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(NodeUtil.isFinally(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.hasFinally(allCatchNodes))    {    if(NodeUtil.isFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
679	[BUG]  [BUGGY]  Preconditions.checkArgument(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty()  &&  tryMinimizeExits(tryBlock,  exitType,  labelName);  [CE]  ')'  expected  [FE]        RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkArgument(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty()  &&  tryMinimizeExits(tryBlock,  exitType,  labelName);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkArgument(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty()  &&  tryMinimizeExits(tryBlock,  exitType,  labelName);	  Preconditions.checkArgument(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    	non-compiled	[CE]  ')'  expected	228	None	replace
680	[BUG]  [BUGGY]  Preconditions.checkState(tryBlock.hasOneChild());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  [CE]  illegal  start  of  type  [FE]                  RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(tryBlock.hasOneChild());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(tryBlock.hasOneChild());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);	          Preconditions.checkState(allCatchNodes.hasOneChild());    Node    allCatchNodes    =    NodeUtil.getCatchBlock(n);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
681	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.hasChildren());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock);  [CE]  illegal  start  of  type  [FE]                    RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.hasChildren());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.hasChildren());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock);	          Preconditions.checkState(allCatchNodes.hasOneChild());    Node    allCatchNodes    =    NodeUtil.getCatchBlock(n);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
682	[BUG]  [BUGGY]  if(allCatchNodes  ==  null  &&  NodeUtil.hasCatchHandler(allCatchNodes)||  tryMinimizeExits(allCatchNodes.getFirstChild(),  exitType,  labelName))  {  [CE]  'void'  type  not  allowed  here  [FE]              AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes  ==  null  &&  NodeUtil.hasCatchHandler(allCatchNodes)||  tryMinimizeExits(allCatchNodes.getFirstChild(),  exitType,  labelName))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes  ==  null  &&  NodeUtil.hasCatchHandler(allCatchNodes)||  tryMinimizeExits(allCatchNodes.getFirstChild(),  exitType,  labelName))  {	  if(allCatchNodes!=    null    &&    NodeUtil.hasCatchHandler(allCatchNodes)||    tryMinimizeExits(allCatchNodes.getFirstChild(),    exitType,    labelName))    {    	non-compiled	[CE]  'void'  type  not  allowed  here	117	None	replace
683	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty(),  tryMinimizeExits(tryBlock,  exitType,  labelName);  [CE]  ')'  expected  [FE]              RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty(),  tryMinimizeExits(tryBlock,  exitType,  labelName);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty(),  tryMinimizeExits(tryBlock,  exitType,  labelName);	  Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty(),    exitType);    	non-compiled	[CE]  ')'  expected	68	None	replace
684	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty(),  tryMinimizeExits(exitType,  labelName);  [CE]  ')'  expected  [FE]                RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty(),  tryMinimizeExits(exitType,  labelName);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty(),  tryMinimizeExits(exitType,  labelName);	  Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty(),    exitType);    	non-compiled	[CE]  ')'  expected	68	None	replace
685	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null)  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	if(allCatchNodes!=  null)  {	  if(allCatchNodes!=    null    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    if(allCatchNodes    ==    null    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	102	2	replace
686	[BUG]  [BUGGY]  if(allCatchNodes!=  null)  {  [FE]  RuntimeException  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null)  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=  null)  {	  if(allCatchNodes!=    null    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    if(allCatchNodes    ==    null    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	102	2	replace
687	[BUG]  [BUGGY]  Preconditions.checkState(tryBlock.isEmpty());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  [CE]  illegal  start  of  type  [FE]              RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(tryBlock.isEmpty());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(tryBlock.isEmpty());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);	          Preconditions.checkState(allCatchNodes.isEmpty());    Node    allCatchNodes    =    NodeUtil.getCatchBlock(n);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
688	[BUG]  [BUGGY]  Preconditions.checkState(anyCatchNodes.isEmpty());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock);  [CE]  illegal  start  of  type  [FE]                RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(anyCatchNodes.isEmpty());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(anyCatchNodes.isEmpty());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock);	          Preconditions.checkState(allCatchNodes.isEmpty());    Node    allCatchNodes    =    NodeUtil.getCatchBlock(n);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
689	[BUG]  [BUGGY]  if(NodeUtil.isFunction(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(NodeUtil.isFunction(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(NodeUtil.isFunction(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.hasFinally(allCatchNodes)&&    NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
690	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.hasFinally(),  tryBlock);  [CE]  illegal  start  of  type  [FE]            RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.hasFinally(),  tryBlock);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.hasFinally(),  tryBlock);	  Preconditions.checkState(allCatchNodes.hasFinally());    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
691	[BUG]  [BUGGY]  if(!NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  if(!NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  if(!NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!NodeUtil.hasCatchHandler(allCatchNodes)&&    NodeUtil.hasFinally(allCatchNodes))    {    Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  if(!NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
692	[BUG]  [BUGGY]  if(!NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  if(!NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes)  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  if(!NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes)  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!NodeUtil.hasCatchHandler(allCatchNodes)&&    NodeUtil.hasFinally(allCatchNodes))    {    Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  if(!NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes)	  	non-compiled	[CE]  ')'  expected	6	None	add
693	[BUG]  [BUGGY]          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	                Preconditions.checkState(allCatchNodes.isEmpty()        ||        allCatchNodes.isEmpty());        Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());	  	non-compiled	[CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	118	None	add
694	[BUG]  [BUGGY]          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkState(AllCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [CE]  cannot  find  symbol  AllCatchNodes  [FE]      RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkState(AllCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	                Preconditions.checkState(allCatchNodes.isEmpty()        ||        allCatchNodes.isEmpty());        Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkState(AllCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());	  	non-compiled	[CE]  cannot  find  symbol  AllCatchNodes	118	None	add
695	[BUG]  [BUGGY]  if(NodeUtil.isCatchBlock(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(NodeUtil.isCatchBlock(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(NodeUtil.isCatchBlock(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.isCatchBlock(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	225	None	replace
696	[BUG]  [BUGGY]  if(NodeUtil.isCatchBlock(allCatchNodes)&&  tryBlock.hasFinally(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(NodeUtil.isCatchBlock(allCatchNodes)&&  tryBlock.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(NodeUtil.isCatchBlock(allCatchNodes)&&  tryBlock.hasFinally(allCatchNodes))  {	  if(NodeUtil.isCatchBlock(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	225	None	replace
697	[BUG]  [BUGGY]  if(allCatchNodes.hasOneChild()  ||!NodeUtil.hasFinally(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes);  if(allCatchNodes.hasOneChild()  ||!NodeUtil.hasFinally(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes.hasOneChild()  ||!NodeUtil.hasFinally(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes);  if(allCatchNodes.hasOneChild()  ||!NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes.hasOneChild()    ||!NodeUtil.hasFinally(allCatchNodes))    {    Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes);  if(allCatchNodes.hasOneChild()  ||!NodeUtil.hasFinally(allCatchNodes))  {	  	non-compiled	[CE]  illegal  start  of  expression	60	None	add
698	[BUG]  [BUGGY]  if(NodeUtil.hasCatchName(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]        RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(NodeUtil.hasCatchName(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(NodeUtil.hasCatchName(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.hasCatchHandler(allCatchNodes)&&    NodeUtil.hasFinally(allCatchNodes))    {    if(NodeUtil.hasCatchHandler(allCatchNodes)&&    NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
699	[BUG]  [BUGGY]  if(!NodeUtil.isExpressionNode(allCatchNodes))  {  If(!NodeUtil.hasFinally(allCatchNodes))  {  [CE]  ';'  expected  [FE]          RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!NodeUtil.isExpressionNode(allCatchNodes))  {  If(!NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!NodeUtil.isExpressionNode(allCatchNodes))  {  If(!NodeUtil.hasFinally(allCatchNodes))  {	  if(!NodeUtil.hasFinally(allCatchNodes))    {    If(!NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  ';'  expected	49	None	replace
700	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getfirstChild();  Node  elseBlock  =  allCatchNodes.getLastChild());  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  elseBlock  =  allCatchNodes.getfirstChild();  Node  elseBlock  =  allCatchNodes.getLastChild());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  elseBlock  =  allCatchNodes.getfirstChild();  Node  elseBlock  =  allCatchNodes.getLastChild());	          Node    elseBlock    =    allCatchNodes.getLastChild();    Node    elseBlock    =    allCatchNodes.getLastChild());    	non-compiled	[CE]  ';'  expected	211	None	replace
701	[BUG]  [BUGGY]  Node  allCatchNodes  =  allCatchNodes.isEmpty());  [CE]  ';'  expected  [FE]          RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  allCatchNodes  =  allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes  =  allCatchNodes.isEmpty());	          Preconditions.checkState(allCatchNodes.isEmpty());    Node    allCatchNodes    =    allCatchNodes.isEmpty());    	non-compiled	[CE]  ';'  expected	21	None	replace
702	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.remove(tryBlock);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  elseBlock  =  allCatchNodes.remove(tryBlock);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  elseBlock  =  allCatchNodes.remove(tryBlock);	  Node    elseBlock    =    allCatchNodes.get(n);    	non-compiled	[CE]  illegal  start  of  type	219	None	replace
703	[BUG]  [BUGGY]  if(NodeUtil.isCatchHandler(allCatchNodes)&&  NodeUtil.mayHaveSideEffects(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(NodeUtil.isCatchHandler(allCatchNodes)&&  NodeUtil.mayHaveSideEffects(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(NodeUtil.isCatchHandler(allCatchNodes)&&  NodeUtil.mayHaveSideEffects(allCatchNodes))  {	  if(NodeUtil.isCatchHandler(allCatchNodes)&&    NodeUtil.isFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	136	None	replace
704	[BUG]  [BUGGY]  if(allCatchNodes!=  null  &&  NodeUtil.hasFinally(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes);  if(allCatchNodes!=  null  &&  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  &&  NodeUtil.hasFinally(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes);  if(allCatchNodes!=  null  &&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=    null    &&    NodeUtil.hasFinally(allCatchNodes))    {    Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes);  if(allCatchNodes!=  null  &&  NodeUtil.hasFinally(allCatchNodes))  {	  	non-compiled	[CE]  illegal  start  of  expression	113	None	add
705	[BUG]  [BUGGY]  Node  finallyBlock  =  allCatchNodes.getFirstChild(),  tryBlock,  exitType);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  finallyBlock  =  allCatchNodes.getFirstChild(),  tryBlock,  exitType);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  finallyBlock  =  allCatchNodes.getFirstChild(),  tryBlock,  exitType);	  Node    finallyBlock    =    allCatchNodes.getFirstChild(),    tryBlock);    	non-compiled	[CE]  ';'  expected	94	None	replace
706	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes!=  null  &&  allCatchNodes.size()  >  0);  [CE]  illegal  start  of  type  [FE]          RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes!=  null  &&  allCatchNodes.size()  >  0);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes!=  null  &&  allCatchNodes.size()  >  0);	  Preconditions.checkState(allCatchNodes!=    null    &&    allCatchNodes.isEmpty());    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
707	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getfirstChild();  Node  thenBlock  =  allCatchNodes.getLastChild();  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  elseBlock  =  allCatchNodes.getfirstChild();  Node  thenBlock  =  allCatchNodes.getLastChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  elseBlock  =  allCatchNodes.getfirstChild();  Node  thenBlock  =  allCatchNodes.getLastChild();	          Node    elseBlock    =    allCatchNodes.getLastChild();    Node    thenBlock    =    allCatchNodes.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
708	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild()  &&!NodeUtil.hasCatchHandler(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild()  &&!NodeUtil.hasCatchHandler(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.hasOneChild()  &&!NodeUtil.hasCatchHandler(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);	  if(!NodeUtil.hasCatchHandler(allCatchNodes))    {    Node    allCatchNodes    =    NodeUtil.getCatchHandler(allCatchNodes);    	non-compiled	[CE]  ';'  expected	53	None	replace
709	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.hasCatchHandler(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(!NodeUtil.hasCatchHandler(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(!NodeUtil.hasCatchHandler(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);	  if(!NodeUtil.hasCatchHandler(allCatchNodes))    {    Node    allCatchNodes    =    NodeUtil.getCatchHandler(allCatchNodes);    	non-compiled	[CE]  ';'  expected	53	None	replace
710	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.hasCatchHandler(allCatchNodes)||  NodeUtil.hasCatchHandler(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(!NodeUtil.hasCatchHandler(allCatchNodes)||  NodeUtil.hasCatchHandler(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(!NodeUtil.hasCatchHandler(allCatchNodes)||  NodeUtil.hasCatchHandler(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);	  if(!NodeUtil.hasCatchHandler(allCatchNodes))    {    Node    allCatchNodes    =    NodeUtil.getCatchHandler(allCatchNodes);    	non-compiled	[CE]  ';'  expected	53	None	replace
711	[BUG]  [BUGGY]  Preconditions.checkState(CatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [CE]  illegal  start  of  type  [FE]            RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(CatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(CatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());	          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkState(AllCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
712	[BUG]  [BUGGY]  Preconditions.checkState(ALLCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [CE]  illegal  start  of  type  [FE]              RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(ALLCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(ALLCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());	          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkState(AllCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
713	[BUG]  [BUGGY]  Preconditions.checkState(catchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [CE]  illegal  start  of  type  [FE]                RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(catchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(catchNodes.isEmpty()  ||  allCatchNodes.isEmpty());	          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkState(AllCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
714	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  ||  allCatchNodes.hasOneChild()  ||  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	if(allCatchNodes!=  null  ||  allCatchNodes.hasOneChild()  ||  NodeUtil.hasFinally(allCatchNodes))  {	  if(allCatchNodes.hasOneChild()    ||    NodeUtil.hasFinally(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	15	2	replace
715	[BUG]  [BUGGY]  if(allCatchNodes!=  null  ||  allCatchNodes.hasOneChild()  ||  NodeUtil.hasFinally(allCatchNodes))  {  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  ||  allCatchNodes.hasOneChild()  ||  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=  null  ||  allCatchNodes.hasOneChild()  ||  NodeUtil.hasFinally(allCatchNodes))  {	  if(allCatchNodes.hasOneChild()    ||    NodeUtil.hasFinally(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	15	2	replace
716	[BUG]  [BUGGY]  if(allCatchNodes.hasChildCount()  ||  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes.hasChildCount()  ||  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes.hasChildCount()  ||  NodeUtil.hasFinally(allCatchNodes))  {	  if(allCatchNodes.hasOneChild()    ||    NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
717	[BUG]  [BUGGY]          Node    elseBlock    =    allCatchNodes.getLastChild();    Node  thenBlock  =  allCatchNodes.getLastChild();  Node  elseBlock  =  allCatchNodes.getLastChild();  Node  alreadyBlock  =  allCatchNodes.getLastChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Node    elseBlock    =    allCatchNodes.getLastChild();    Node  thenBlock  =  allCatchNodes.getLastChild();  Node  elseBlock  =  allCatchNodes.getLastChild();  Node  alreadyBlock  =  allCatchNodes.getLastChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	                Node        elseBlock        =        allCatchNodes.getLastChild();        Node    thenBlock    =    allCatchNodes.getLastChild();    Node  elseBlock  =  allCatchNodes.getLastChild();  Node  alreadyBlock  =  allCatchNodes.getLastChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	32	None	add
718	[BUG]  [BUGGY]          Node    elseBlock    =    allCatchNodes.getLastChild();    Node  thenBlock  =  allCatchNodes.getLastChild();  Node  elseBlock  =  allCatchNodes.getLastChild();  Node  otherBlock  =  allCatchNodes.getLastChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Node    elseBlock    =    allCatchNodes.getLastChild();    Node  thenBlock  =  allCatchNodes.getLastChild();  Node  elseBlock  =  allCatchNodes.getLastChild();  Node  otherBlock  =  allCatchNodes.getLastChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	                Node        elseBlock        =        allCatchNodes.getLastChild();        Node    thenBlock    =    allCatchNodes.getLastChild();    Node  elseBlock  =  allCatchNodes.getLastChild();  Node  otherBlock  =  allCatchNodes.getLastChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	32	None	add
719	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getOwner();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  elseBlock  =  allCatchNodes.getOwner();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  elseBlock  =  allCatchNodes.getOwner();	  Node    elseBlock    =    allCatchNodes.getNext();    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
720	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  Preconditions.checkState  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  Preconditions.checkState  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  Preconditions.checkState	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    elseBlock    =    allCatchNodes.getFirstChild();    if(NodeUtil.hasFinally(allCatchNodes))    {    Preconditions.checkState(allCatchNodes.hasOneChild());    	non-compiled	[CE]  ';'  expected	146	None	replace
721	[BUG]  [BUGGY]  if(allCatchNodes!=  null  &&  allCatchNodes.hasChildCount()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  &&  allCatchNodes.hasChildCount()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=  null  &&  allCatchNodes.hasChildCount()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(allCatchNodes!=    null    &&    allCatchNodes.hasOneChild()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	152	None	replace
722	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes);  if(NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes);  if(NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes);  if(NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.hasCatchHandler(allCatchNodes)&&    NodeUtil.hasFinally(allCatchNodes))    {    Node    allCatchNodes    =    NodeUtil.getCatchHandler(allCatchNodes);    if(NodeUtil.hasCatchHandler(allCatchNodes)&&    NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	156	None	replace
723	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  if(NodeUtil.hasFinally(allCatchNodes))  {  [CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  if(NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  if(NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.hasCatchHandler(allCatchNodes)&&    NodeUtil.hasFinally(allCatchNodes))    {    Node    allCatchNodes    =    NodeUtil.getCatchHandler(allCatchNodes);    if(NodeUtil.hasCatchHandler(allCatchNodes)&&    NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	156	None	replace
724	[BUG]  [BUGGY]  if(allCatchNodes.hasOneChild()  &&  NodeUtil.hasFinally(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes);  if(allCatchNodes.hasOneChild()  &&  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes.hasOneChild()  &&  NodeUtil.hasFinally(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes);  if(allCatchNodes.hasOneChild()  &&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes.hasOneChild()    &&    NodeUtil.hasFinally(allCatchNodes))    {    Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes);  if(allCatchNodes.hasOneChild()  &&  NodeUtil.hasFinally(allCatchNodes))  {	  	non-compiled	[CE]  illegal  start  of  expression	130	None	add
725	[BUG]  [BUGGY]  if(allCatchNodes.hasOneChild()  &&  NodeUtil.hasFinally(allCatchNodes))  {  if(AllCatchNodes.hasOneChild()  &&  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes.hasOneChild()  &&  NodeUtil.hasFinally(allCatchNodes))  {  if(AllCatchNodes.hasOneChild()  &&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes.hasOneChild()    &&    NodeUtil.hasFinally(allCatchNodes))    {    if(AllCatchNodes.hasOneChild()  &&  NodeUtil.hasFinally(allCatchNodes))  {	  	non-compiled	[CE]  illegal  start  of  expression	130	None	add
726	[BUG]  [BUGGY]  if(!allCatchNodes.hasChildCount()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!allCatchNodes.hasChildCount()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!allCatchNodes.hasChildCount()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(allCatchNodes.hasChildCount()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	155	None	replace
727	[BUG]  [BUGGY]  if(allCatchNodes.isChildCount()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes.isChildCount()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes.isChildCount()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(allCatchNodes.hasChildCount()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	155	None	replace
728	[BUG]  [BUGGY]  Node  elseBlock  =  n.getOwnerChild();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  elseBlock  =  n.getOwnerChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  elseBlock  =  n.getOwnerChild();	  Node    elseBlock    =    allCatchNodes.getOwnerChild();    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
729	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  ||  allCatchNodes.hasOneChild()  ||!NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	if(allCatchNodes!=  null  ||  allCatchNodes.hasOneChild()  ||!NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(allCatchNodes.hasOneChild()    ||!NodeUtil.hasCatchHandler(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	86	2	replace
730	[BUG]  [BUGGY]  if(allCatchNodes!=  null  ||  allCatchNodes.hasOneChild()  ||!NodeUtil.hasCatchHandler(allCatchNodes))  {  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  ||  allCatchNodes.hasOneChild()  ||!NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=  null  ||  allCatchNodes.hasOneChild()  ||!NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(allCatchNodes.hasOneChild()    ||!NodeUtil.hasCatchHandler(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	86	2	replace
731	[BUG]  [BUGGY]  Preconditions.checkState(tryBlock.hasOneChild());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes.hasOneChild());  [CE]  illegal  start  of  type  [FE]          RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(tryBlock.hasOneChild());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes.hasOneChild());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(tryBlock.hasOneChild());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes.hasOneChild());	          Preconditions.checkState(allCatchNodes.hasOneChild());    Node    allCatchNodes    =    NodeUtil.getCatchBlock(allCatchNodes.hasOneChild());    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
732	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes!=  null  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes!=  null  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes!=  null  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);	  if(allCatchNodes!=    null    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    Node    allCatchNodes    =    NodeUtil.getCatchHandler(allCatchNodes);    	non-compiled	[CE]  ';'  expected	159	None	replace
733	[BUG]  [BUGGY]  if(allCatchNodes!=  null  ||!NodeUtil.hasCatchHandler(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  if(allCatchNodes!=  null  ||!NodeUtil.hasCatchHandler(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  ||!NodeUtil.hasCatchHandler(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  if(allCatchNodes!=  null  ||!NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=    null    ||!NodeUtil.hasCatchHandler(allCatchNodes))    {    Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  if(allCatchNodes!=  null  ||!NodeUtil.hasCatchHandler(allCatchNodes))  {	  	non-compiled	[CE]  illegal  start  of  expression	162	None	add
734	[BUG]  [BUGGY]  if(!NodeUtil.hasCatchHandler(allCatchNodes)||  tryMinimizeExits(allCatchNodes.getFirstChild(),  exitType,  labelName))  {  [CE]  'void'  type  not  allowed  here  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!NodeUtil.hasCatchHandler(allCatchNodes)||  tryMinimizeExits(allCatchNodes.getFirstChild(),  exitType,  labelName))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!NodeUtil.hasCatchHandler(allCatchNodes)||  tryMinimizeExits(allCatchNodes.getFirstChild(),  exitType,  labelName))  {	  if(!NodeUtil.hasCatchHandler(allCatchNodes)&&    tryMinimizeExits(allCatchNodes.getFirstChild(),    exitType,    labelName))    {    	non-compiled	[CE]  'void'  type  not  allowed  here	89	None	replace
735	[BUG]  [BUGGY]  Node  finallyBlock  =  allCatchNodes.get  lastChild();  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  finallyBlock  =  allCatchNodes.get  lastChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  finallyBlock  =  allCatchNodes.get  lastChild();	  Node    finallyBlock    =    tryBlock.getLastChild();    	non-compiled	[CE]  ';'  expected	190	None	replace
736	[BUG]  [BUGGY]  if(allCatchNodes.hasChildren()  &&  NodeUtil.hasExitType(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes.hasChildren()  &&  NodeUtil.hasExitType(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes.hasChildren()  &&  NodeUtil.hasExitType(allCatchNodes))  {	  if(allCatchNodes.hasChildren()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	129	None	replace
737	[BUG]  [BUGGY]  Node  c  =  allCatchNodes.getChildren();  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  c  =  allCatchNodes.getChildren();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  c  =  allCatchNodes.getChildren();	  Node    c    =    allCatchNodes.getLeastChild();    	non-compiled	[CE]  illegal  start  of  type	166	None	replace
738	[BUG]  [BUGGY]  If(!NodeUtil.hasCatchHandler(allCatchNodes))  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  If(!NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	If(!NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(!NodeUtil.hasCatchHandler(allCatchNodes))    {    If(!NodeUtil.hasCatchHandler(allCatchNodes))    {    	non-compiled	[CE]  ';'  expected	52	None	replace
739	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.hasChildren(),  tryBlock);  [CE]  illegal  start  of  type  [FE]        RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.hasChildren(),  tryBlock);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.hasChildren(),  tryBlock);	  Preconditions.checkState(allCatchNodes.hasChildren());    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
740	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.getChildren()  ==  null);  [CE]  illegal  start  of  type  [FE]          RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.getChildren()  ==  null);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.getChildren()  ==  null);	  Preconditions.checkState(allCatchNodes.hasChildren());    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
741	[BUG]  [BUGGY]  Preconditions.checkNotNull(allCatchNodes.isEmpty());  [CE]  illegal  start  of  type  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkNotNull(allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkNotNull(allCatchNodes.isEmpty());	          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkNotNull(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    	non-compiled	[CE]  illegal  start  of  type	216	None	replace
742	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!allCatchNodes.isEmpty()  &&!NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	if(!allCatchNodes.isEmpty()  &&!NodeUtil.hasFinally(allCatchNodes))  {	  if(allCatchNodes.isEmpty()    ||!NodeUtil.hasFinally(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	207	6	replace
743	[BUG]  [BUGGY]  if(!allCatchNodes.isEmpty()  &&!NodeUtil.hasFinally(allCatchNodes))  {  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!allCatchNodes.isEmpty()  &&!NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!allCatchNodes.isEmpty()  &&!NodeUtil.hasFinally(allCatchNodes))  {	  if(allCatchNodes.isEmpty()    ||!NodeUtil.hasFinally(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	207	6	replace
744	[BUG]  [BUGGY]  if(allCatchNodes.isEmpty()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  if(allCatchNodes.isEmpty()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes.isEmpty()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  if(allCatchNodes.isEmpty()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes.isEmpty()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  if(allCatchNodes.isEmpty()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {	  	non-compiled	[CE]  illegal  start  of  expression	132	None	add
745	[BUG]  [BUGGY]  if(NodeUtil.isCatchHandler(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes,  tryBlock))  {  [CE]  cannot  find  symbol  [FE]        RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(NodeUtil.isCatchHandler(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes,  tryBlock))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(NodeUtil.isCatchHandler(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes,  tryBlock))  {	  if(NodeUtil.isCatchHandler(allCatchNodes)&&    NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
746	[BUG]  [BUGGY]  if(!allCatchNodes.hasChildren()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  if(!allCatchNodes.hasChildren()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!allCatchNodes.hasChildren()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  if(!allCatchNodes.hasChildren()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!allCatchNodes.hasChildren()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  if(!allCatchNodes.hasChildren()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {	  	non-compiled	[CE]  illegal  start  of  expression	208	None	add
747	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  Preconditions.checkState(anyCatchNodes.  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  Preconditions.checkState(anyCatchNodes.  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  Preconditions.checkState(anyCatchNodes.	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    elseBlock    =    allCatchNodes.getFirstChild();    if(NodeUtil.hasFinally(allCatchNodes))    {    Preconditions.checkState(anyCatchNodes.hasOneChild());    	non-compiled	[CE]  ')'  expected	150	None	replace
748	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  ||  ALLCatchNodes.isEmpty());  [CE]  illegal  start  of  type  [FE]              RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  ||  ALLCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.isEmpty()  ||  ALLCatchNodes.isEmpty());	          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkState(allCatchNodes.isEmpty()    ||    ALLCatchNodes.isEmpty());    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
749	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  ||  AllCatchNodes.isEmpty());  [CE]  illegal  start  of  type  [FE]                RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  ||  AllCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.isEmpty()  ||  AllCatchNodes.isEmpty());	          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkState(allCatchNodes.isEmpty()    ||    ALLCatchNodes.isEmpty());    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
750	[BUG]  [BUGGY]  Preconditions.checkArgument(AllCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [CE]  illegal  start  of  type  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkArgument(AllCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkArgument(AllCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());	          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkArgument(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    	non-compiled	[CE]  illegal  start  of  type	214	None	replace
751	[BUG]  [BUGGY]  Preconditions.checkArgument(allCatchNodes.isEmpty(),  allCatchNodes.isEmpty());  [CE]  illegal  start  of  type  [FE]      RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkArgument(allCatchNodes.isEmpty(),  allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkArgument(allCatchNodes.isEmpty(),  allCatchNodes.isEmpty());	          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkArgument(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    	non-compiled	[CE]  illegal  start  of  type	214	None	replace
752	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(triesBlock,  allCatchNodes);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(triesBlock,  allCatchNodes);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(triesBlock,  allCatchNodes);	  Node    allCatchNodes    =    NodeUtil.getAllCatchNodes(n,    allCatchNodes);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
753	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.get(n.getLastChild());  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  elseBlock  =  allCatchNodes.get(n.getLastChild());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  elseBlock  =  allCatchNodes.get(n.getLastChild());	  Node    elseBlock    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	140	None	replace
754	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Preconditions.checkState(allCatchNodes.isEmpty());    Preconditions.checkState(allCatchNodes.isEmpty());  Preconditions.checkState(allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	                Preconditions.checkState(allCatchNodes.isEmpty());        Preconditions.checkState(allCatchNodes.isEmpty());    Preconditions.checkState(allCatchNodes.isEmpty());	  	compilable	  [FE]  RuntimeException  	19	6	add
755	[BUG]  [BUGGY]          Preconditions.checkState(allCatchNodes.isEmpty());    Preconditions.checkState(allCatchNodes.isEmpty());  Preconditions.checkState(allCatchNodes.isEmpty());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Preconditions.checkState(allCatchNodes.isEmpty());    Preconditions.checkState(allCatchNodes.isEmpty());  Preconditions.checkState(allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	                Preconditions.checkState(allCatchNodes.isEmpty());        Preconditions.checkState(allCatchNodes.isEmpty());    Preconditions.checkState(allCatchNodes.isEmpty());	  	compilable	  [FE]  RuntimeException  	19	6	add
756	[BUG]  [BUGGY]          Preconditions.checkState(allCatchNodes.isEmpty());    Preconditions.checkState(allCatchNodes.isEmpty());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  [CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Preconditions.checkState(allCatchNodes.isEmpty());    Preconditions.checkState(allCatchNodes.isEmpty());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	                Preconditions.checkState(allCatchNodes.isEmpty());        Preconditions.checkState(allCatchNodes.isEmpty());    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);	  	non-compiled	[CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	19	None	add
757	[BUG]  [BUGGY]          Preconditions.checkState(allCatchNodes.isEmpty());    Preconditions.checkState(allCatchNodes.isEmpty());  Preconditions.checkEquals(allCatchNodes.isEmpty());  Preconditions.checkState(allCatchNodes.isEmpty());  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Preconditions.checkState(allCatchNodes.isEmpty());    Preconditions.checkState(allCatchNodes.isEmpty());  Preconditions.checkEquals(allCatchNodes.isEmpty());  Preconditions.checkState(allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	                Preconditions.checkState(allCatchNodes.isEmpty());        Preconditions.checkState(allCatchNodes.isEmpty());    Preconditions.checkEquals(allCatchNodes.isEmpty());  Preconditions.checkState(allCatchNodes.isEmpty());	  	non-compiled	[CE]  cannot  find  symbol	19	None	add
758	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.getFirstChild()  ==  n);  Node  elseBlock  =  allCatchNodes.getLastChild();  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.getFirstChild()  ==  n);  Node  elseBlock  =  allCatchNodes.getLastChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.getFirstChild()  ==  n);  Node  elseBlock  =  allCatchNodes.getLastChild();	          Node    elseBlock    =    allCatchNodes.getLastChild();    Node    elseBlock    =    allCatchNodes.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
759	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  ||  allCatchNodes.hasOneChild()  ||!NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	if(allCatchNodes!=  null  ||  allCatchNodes.hasOneChild()  ||!NodeUtil.hasFinally(allCatchNodes))  {	  if(allCatchNodes.hasOneChild()    ||!NodeUtil.hasFinally(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	61	2	replace
760	[BUG]  [BUGGY]  if(allCatchNodes!=  null  ||  allCatchNodes.hasOneChild()  ||!NodeUtil.hasFinally(allCatchNodes))  {  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  ||  allCatchNodes.hasOneChild()  ||!NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=  null  ||  allCatchNodes.hasOneChild()  ||!NodeUtil.hasFinally(allCatchNodes))  {	  if(allCatchNodes.hasOneChild()    ||!NodeUtil.hasFinally(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	61	2	replace
761	[BUG]  [BUGGY]  Preconditions.checkState(AllCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  AllCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [CE]  not  a  statement  [FE]        RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(AllCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  AllCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(AllCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  AllCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());	          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    AllCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    	non-compiled	[CE]  not  a  statement	164	None	replace
762	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isAll());  [CE]  illegal  start  of  type  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isAll());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isAll());	          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
763	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getfirstChild();  Node  otherBlock  =  allCatchNodes.getLastChild();  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  elseBlock  =  allCatchNodes.getfirstChild();  Node  otherBlock  =  allCatchNodes.getLastChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  elseBlock  =  allCatchNodes.getfirstChild();  Node  otherBlock  =  allCatchNodes.getLastChild();	          Node    elseBlock    =    allCatchNodes.getLastChild();    Node    otherBlock    =    allCatchNodes.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
764	[BUG]  [BUGGY]  if(allCatchNodes!=  null  &&!NodeUtil.hasCatchHandler(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  if(allCatchNodes!=  null  &&!NodeUtil.hasCatchHandler(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  &&!NodeUtil.hasCatchHandler(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  if(allCatchNodes!=  null  &&!NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=    null    &&!NodeUtil.hasCatchHandler(allCatchNodes))    {    Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  if(allCatchNodes!=  null  &&!NodeUtil.hasCatchHandler(allCatchNodes))  {	  	non-compiled	[CE]  illegal  start  of  expression	160	None	add
765	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)||  allCatchNodes.isEmpty())  {  if(NodeUtil.hasFinally(allCatchNodes)&|  allCatchNodes.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)||  allCatchNodes.isEmpty())  {  if(NodeUtil.hasFinally(allCatchNodes)&|  allCatchNodes.isEmpty())  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(NodeUtil.hasFinally(allCatchNodes)||    allCatchNodes.isEmpty())    {    if(NodeUtil.hasFinally(allCatchNodes)&|  allCatchNodes.isEmpty())  {	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
766	[BUG]  [BUGGY]  Node  c  =  allCatchNodes.removeChild(tryBlock);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  c  =  allCatchNodes.removeChild(tryBlock);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  c  =  allCatchNodes.removeChild(tryBlock);	  Node    c    =    allCatchNodes.removeFirstChild();    	non-compiled	[CE]  illegal  start  of  type	200	None	replace
767	[BUG]  [BUGGY]          Node    elseBlock    =    allCatchNodes.getLastChild();    Node  anotherBlock  =  allCatchNodes.getLastChild();  Node  elseBlock  =  allCatchNodes.getLastChild();  Node  nextBlock  =  allCatchNodes.getLastChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Node    elseBlock    =    allCatchNodes.getLastChild();    Node  anotherBlock  =  allCatchNodes.getLastChild();  Node  elseBlock  =  allCatchNodes.getLastChild();  Node  nextBlock  =  allCatchNodes.getLastChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	                Node        elseBlock        =        allCatchNodes.getLastChild();        Node    anotherBlock    =    allCatchNodes.getLastChild();    Node  elseBlock  =  allCatchNodes.getLastChild();  Node  nextBlock  =  allCatchNodes.getLastChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	34	None	add
768	[BUG]  [BUGGY]          Node    elseBlock    =    allCatchNodes.getLastChild();    Node  anotherBlock  =  allCatchNodes.getLastChild();  Node  elseBlock  =  allCatchNodes.getLastChild();  Node  anotherBlock  =  anyCatchNodes.getLastChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Node    elseBlock    =    allCatchNodes.getLastChild();    Node  anotherBlock  =  allCatchNodes.getLastChild();  Node  elseBlock  =  allCatchNodes.getLastChild();  Node  anotherBlock  =  anyCatchNodes.getLastChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	                Node        elseBlock        =        allCatchNodes.getLastChild();        Node    anotherBlock    =    allCatchNodes.getLastChild();    Node  elseBlock  =  allCatchNodes.getLastChild();  Node  anotherBlock  =  anyCatchNodes.getLastChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	34	None	add
769	[BUG]  [BUGGY]  if(allCatchNodes!=  null  ||!NodeUtil.hasFinally(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes);  if(allCatchNodes!=  null  ||!NodeUtil.hasFinally(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  ||!NodeUtil.hasFinally(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes);  if(allCatchNodes!=  null  ||!NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=    null    ||!NodeUtil.hasFinally(allCatchNodes))    {    Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes);  if(allCatchNodes!=  null  ||!NodeUtil.hasFinally(allCatchNodes))  {	  	non-compiled	[CE]  illegal  start  of  expression	143	None	add
770	[BUG]  [BUGGY]  if(!NodeUtil.isExpressionNode(allCatchNodes)&&  NodeUtil.isFinally(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!NodeUtil.isExpressionNode(allCatchNodes)&&  NodeUtil.isFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!NodeUtil.isExpressionNode(allCatchNodes)&&  NodeUtil.isFinally(allCatchNodes))  {	  if(!NodeUtil.hasCatchHandler(allCatchNodes)&&    NodeUtil.isFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	139	None	replace
771	[BUG]  [BUGGY]  Node  elseBlock  =  anyCatchNodes.getFirstChild();  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  elseBlock  =  anyCatchNodes.getFirstChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  elseBlock  =  anyCatchNodes.getFirstChild();	  Node    elseBlock    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	180	None	replace
772	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes!=  null  ||  allCatchNodes.size()  ==  0);  [CE]  illegal  start  of  type  [FE]        RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes!=  null  ||  allCatchNodes.size()  ==  0);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes!=  null  ||  allCatchNodes.size()  ==  0);	  Preconditions.checkState(allCatchNodes!=    null    ||    allCatchNodes.isEmpty());    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
773	[BUG]  [BUGGY]  if(allCatchNodes  ==  null  &&  NodeUtil.hasCatchHandler(allCatchNodes)||  tryMinimizeExits(allCatchNodes.getFirstChild(),  exitType,  labelName);  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes  ==  null  &&  NodeUtil.hasCatchHandler(allCatchNodes)||  tryMinimizeExits(allCatchNodes.getFirstChild(),  exitType,  labelName);  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes  ==  null  &&  NodeUtil.hasCatchHandler(allCatchNodes)||  tryMinimizeExits(allCatchNodes.getFirstChild(),  exitType,  labelName);	  if(allCatchNodes!=    null    &&    NodeUtil.hasCatchHandler(allCatchNodes)||    tryMinimizeExits(allCatchNodes.getFirstChild(),    exitType,    labelName);    	non-compiled	[CE]  ')'  expected	168	None	replace
774	[BUG]  [BUGGY]  if(allCatchNodes  ==  null  ||  NodeUtil.hasCatchHandler(allCatchNodes)||  tryMinimizeExits(allCatchNodes.getFirstChild(),  exitType,  labelName);  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes  ==  null  ||  NodeUtil.hasCatchHandler(allCatchNodes)||  tryMinimizeExits(allCatchNodes.getFirstChild(),  exitType,  labelName);  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes  ==  null  ||  NodeUtil.hasCatchHandler(allCatchNodes)||  tryMinimizeExits(allCatchNodes.getFirstChild(),  exitType,  labelName);	  if(allCatchNodes!=    null    &&    NodeUtil.hasCatchHandler(allCatchNodes)||    tryMinimizeExits(allCatchNodes.getFirstChild(),    exitType,    labelName);    	non-compiled	[CE]  ')'  expected	168	None	replace
775	[BUG]  [BUGGY]  if(!allCatchNodes.hasOneChild()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  if(!allCatchNodes.hasOneChild()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!allCatchNodes.hasOneChild()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  if(!allCatchNodes.hasOneChild()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!allCatchNodes.hasOneChild()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  if(!allCatchNodes.hasOneChild()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {	  	non-compiled	[CE]  illegal  start  of  expression	134	None	add
776	[BUG]  [BUGGY]  Preconditions.checkArgument(allCatchNodes.isEmpty()  &&  tryMinimizeExits(tryBlock,  exitType,  labelName));  [CE]  illegal  start  of  type  [FE]            RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkArgument(allCatchNodes.isEmpty()  &&  tryMinimizeExits(tryBlock,  exitType,  labelName));  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkArgument(allCatchNodes.isEmpty()  &&  tryMinimizeExits(tryBlock,  exitType,  labelName));	  Preconditions.checkArgument(allCatchNodes.isEmpty());    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
777	[BUG]  [BUGGY]  Preconditions.checkArgument(allCatchNodes.isEmpty()  &&  tryMinimizeExits(tryBlock,  exitType,  labelName);  [CE]  ')'  expected  [FE]              RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkArgument(allCatchNodes.isEmpty()  &&  tryMinimizeExits(tryBlock,  exitType,  labelName);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkArgument(allCatchNodes.isEmpty()  &&  tryMinimizeExits(tryBlock,  exitType,  labelName);	  Preconditions.checkArgument(allCatchNodes.isEmpty());    	non-compiled	[CE]  ')'  expected	77	None	replace
778	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.size()  >=  0);  [CE]  illegal  start  of  type  [FE]        RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.size()  >=  0);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.size()  >=  0);	  Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.size()    >    0);    	non-compiled	[CE]  illegal  start  of  type	167	None	replace
779	[BUG]  [BUGGY]  Preconditions.checkState(AllCatchNodes.hasOneChild());  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(AllCatchNodes.hasOneChild());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(AllCatchNodes.hasOneChild());	          Node    c    =    allCatchNodes.getFirstChild();    Node    c    =    allCatchNodes.getFirstChild();    Preconditions.checkState(AllCatchNodes.hasOneChild());    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
780	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes  ==  null  ||!NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	if(allCatchNodes  ==  null  ||!NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(allCatchNodes!=    null    ||!NodeUtil.hasCatchHandler(allCatchNodes))    {    	compilable	  [FE]  AssertionFailedError  	163	6	replace
781	[BUG]  [BUGGY]  if(allCatchNodes  ==  null  ||!NodeUtil.hasCatchHandler(allCatchNodes))  {  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes  ==  null  ||!NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes  ==  null  ||!NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(allCatchNodes!=    null    ||!NodeUtil.hasCatchHandler(allCatchNodes))    {    	compilable	  [FE]  AssertionFailedError  	163	6	replace
782	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild()  &&!NodeUtil.hasFinally(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  [CE]  ';'  expected  [FE]        RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild()  &&!NodeUtil.hasFinally(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.hasOneChild()  &&!NodeUtil.hasFinally(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);	  if(!NodeUtil.hasFinally(allCatchNodes))    {    Node    allCatchNodes    =    NodeUtil.getCatchBlock(n);    	non-compiled	[CE]  ';'  expected	199	None	replace
783	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.hasFinally(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock);  [CE]  ';'  expected  [FE]          RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(!NodeUtil.hasFinally(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock);  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(!NodeUtil.hasFinally(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock);	  if(!NodeUtil.hasFinally(allCatchNodes))    {    Node    allCatchNodes    =    NodeUtil.getCatchBlock(n);    	non-compiled	[CE]  ';'  expected	199	None	replace
784	[BUG]  [BUGGY]  Preconditions.checkNotNull(allCatchNodes.get(0));  [CE]  illegal  start  of  type  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkNotNull(allCatchNodes.get(0));  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkNotNull(allCatchNodes.get(0));	          Preconditions.checkState(allCatchNodes.hasOneChild());    Preconditions.checkNotNull(allCatchNodes.hasOneChild());    	non-compiled	[CE]  illegal  start  of  type	223	None	replace
785	[BUG]  [BUGGY]  Preconditions.checkNotNull(allCatchNodes.getFirstChild());  [CE]  illegal  start  of  type  [FE]      RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkNotNull(allCatchNodes.getFirstChild());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkNotNull(allCatchNodes.getFirstChild());	          Preconditions.checkState(allCatchNodes.hasOneChild());    Preconditions.checkNotNull(allCatchNodes.hasOneChild());    	non-compiled	[CE]  illegal  start  of  type	223	None	replace
786	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Node  allCatchNodes.isEmpty()  &&  allCatchNodes.isEmpty());  [CE]  ';'  expected  [FE]          RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Node  allCatchNodes.isEmpty()  &&  allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Node  allCatchNodes.isEmpty()  &&  allCatchNodes.isEmpty());	          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Node    allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    	non-compiled	[CE]  ';'  expected	120	None	replace
787	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.get(3);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  elseBlock  =  allCatchNodes.get(3);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  elseBlock  =  allCatchNodes.get(3);	  Node    elseBlock    =    allCatchNodes.get(1);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
788	[BUG]  [BUGGY]          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkArgument(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  Preconditions.checkArgument(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkArgument(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  Preconditions.checkArgument(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	                Preconditions.checkState(allCatchNodes.isEmpty()        ||        allCatchNodes.isEmpty());        Preconditions.checkArgument(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  Preconditions.checkArgument(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());	  	non-compiled	[CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	213	None	add
789	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.hasChildren());  Node  allCatchNodes.hasOneChild());  [CE]  ';'  expected  [FE]              RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.hasChildren());  Node  allCatchNodes.hasOneChild());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.hasChildren());  Node  allCatchNodes.hasOneChild());	          Preconditions.checkState(allCatchNodes.hasOneChild());    Node    allCatchNodes.hasOneChild());    	non-compiled	[CE]  ';'  expected	82	None	replace
790	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.hasChildren());  Node  allCatchNodes.hasChildren());  [CE]  ';'  expected  [FE]                RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.hasChildren());  Node  allCatchNodes.hasChildren());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.hasChildren());  Node  allCatchNodes.hasChildren());	          Preconditions.checkState(allCatchNodes.hasOneChild());    Node    allCatchNodes.hasOneChild());    	non-compiled	[CE]  ';'  expected	82	None	replace
791	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(NodeUtil.hasFinally(allCatchNodes)&&    NodeUtil.hasFinally(allCatchNodes))    {    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
792	[BUG]  [BUGGY]  if(allCatchNodes!=  null  &&!NodeUtil.hasFinally(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes);  if(allCatchNodes!=  null  &&!NodeUtil.hasFinally(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  &&!NodeUtil.hasFinally(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes);  if(allCatchNodes!=  null  &&!NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=    null    &&!NodeUtil.hasFinally(allCatchNodes))    {    Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes);  if(allCatchNodes!=  null  &&!NodeUtil.hasFinally(allCatchNodes))  {	  	non-compiled	[CE]  illegal  start  of  expression	141	None	add
793	[BUG]  [BUGGY]  Preconditions.checkState(anyCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [CE]  illegal  start  of  type  [FE]        RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(anyCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(anyCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());	          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Node    allCatchNodes    =    NodeUtil.getCatchBlock(n);    Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    	non-compiled	[CE]  illegal  start  of  type	212	None	replace
794	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  ||  n.isFinally());  [CE]  illegal  start  of  type  [FE]        RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  ||  n.isFinally());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.isEmpty()  ||  n.isFinally());	  Preconditions.checkState(allCatchNodes.isEmpty()    ||    n.isTree());    	non-compiled	[CE]  illegal  start  of  type	197	None	replace
795	[BUG]  [BUGGY]  Preconditions.checkState(tryBlock.isEmpty());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes.isEmpty());  [CE]  illegal  start  of  type  [FE]        RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(tryBlock.isEmpty());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(tryBlock.isEmpty());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes.isEmpty());	          Preconditions.checkState(allCatchNodes.isEmpty());    Node    allCatchNodes    =    NodeUtil.getCatchBlock(allCatchNodes.isEmpty());    	non-compiled	[CE]  illegal  start  of  type	171	None	replace
796	[BUG]  [BUGGY]  Node  elseBlock  =  n.removeFirstChild();  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  elseBlock  =  n.removeFirstChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  elseBlock  =  n.removeFirstChild();	  Node    elseBlock    =    allCatchNodes.removeFirstChild();    	non-compiled	[CE]  illegal  start  of  type	210	None	replace
797	[BUG]  [BUGGY]  if(allCatchNodes.hasOneChild()  ||!NodeUtil.hasCatchHandler(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes);  if(allCatchNodes.hasOneChild()  ||!NodeUtil.hasCatchHandler(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes.hasOneChild()  ||!NodeUtil.hasCatchHandler(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes);  if(allCatchNodes.hasOneChild()  ||!NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes.hasOneChild()    ||!NodeUtil.hasCatchHandler(allCatchNodes))    {    Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes);  if(allCatchNodes.hasOneChild()  ||!NodeUtil.hasCatchHandler(allCatchNodes))  {	  	non-compiled	[CE]  illegal  start  of  expression	85	None	add
798	[BUG]  [BUGGY]  if(!NodeUtil.isCatchHandler(allCatchNodes)&&  tryBlock.isTree())  {  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!NodeUtil.isCatchHandler(allCatchNodes)&&  tryBlock.isTree())  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!NodeUtil.isCatchHandler(allCatchNodes)&&  tryBlock.isTree())  {	  if(!NodeUtil.hasCatchHandler(allCatchNodes)&&    n.isTree())    {    	non-compiled	[CE]  cannot  find  symbol	203	None	replace
799	[BUG]  [BUGGY]          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkNotNull(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  Preconditions.checkNotNull(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkNotNull(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  Preconditions.checkNotNull(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	                Preconditions.checkState(allCatchNodes.isEmpty()        ||        allCatchNodes.isEmpty());        Preconditions.checkNotNull(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  Preconditions.checkNotNull(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());	  	non-compiled	[CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	215	None	add
800	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.hasChildren());  preconditions.checkState(allCatchNodes.hasOneChild());  [CE]  illegal  start  of  type  [FE]                RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.hasChildren());  preconditions.checkState(allCatchNodes.hasOneChild());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.hasChildren());  preconditions.checkState(allCatchNodes.hasOneChild());	          Preconditions.checkState(allCatchNodes.hasOneChild());    Preconditions.checkState(allCatchNodes.hasOneChild());    preconditions.checkState(allCatchNodes.hasOneChild());    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
801	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  preconditions.checkState(allCatchNodes.getOneChild());  [CE]  illegal  start  of  type  [FE]                  RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  preconditions.checkState(allCatchNodes.getOneChild());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.hasOneChild());  preconditions.checkState(allCatchNodes.getOneChild());	          Preconditions.checkState(allCatchNodes.hasOneChild());    Preconditions.checkState(allCatchNodes.hasOneChild());    preconditions.checkState(allCatchNodes.hasOneChild());    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
802	[BUG]  [BUGGY]  Node  allCatchNodes  =  allCatchNodes.getOneChild();  [CE]  illegal  start  of  type  [FE]        RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  allCatchNodes  =  allCatchNodes.getOneChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes  =  allCatchNodes.getOneChild();	          Preconditions.checkState(allCatchNodes.hasOneChild());    Node    allCatchNodes.hasOneChild();    	non-compiled	[CE]  illegal  start  of  type	165	None	replace
803	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.hasChildren());  Node  allCatchNodes.hasOneChild();  [CE]  ';'  expected  [FE]          RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.hasChildren());  Node  allCatchNodes.hasOneChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.hasChildren());  Node  allCatchNodes.hasOneChild();	          Preconditions.checkState(allCatchNodes.hasOneChild());    Node    allCatchNodes.hasOneChild();    	non-compiled	[CE]  ';'  expected	165	None	replace
804	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getallCatchNodes(tryBlock);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getallCatchNodes(tryBlock);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes  =  NodeUtil.getallCatchNodes(tryBlock);	  Node    allCatchNodes    =    NodeUtil.getAllCatchNodes(n);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
805	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getLastChild();  Node  elseBlock  =  allCatchNodes.getLastChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  Preconditions.check  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  elseBlock  =  allCatchNodes.getLastChild();  Node  elseBlock  =  allCatchNodes.getLastChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  Preconditions.check  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  elseBlock  =  allCatchNodes.getLastChild();  Node  elseBlock  =  allCatchNodes.getLastChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  Preconditions.check	          Node    elseBlock    =    allCatchNodes.getLastChild();    Node    elseBlock    =    allCatchNodes.getLastChild();    if(NodeUtil.hasFinally(allCatchNodes))    {    Preconditions.checkState(allCatchNodes.hasOneChild());    	non-compiled	[CE]  ';'  expected	174	None	replace
806	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasCatchHandler(allCatchNodes))  {  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasCatchHandler(allCatchNodes))  {	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    elseBlock    =    allCatchNodes.getFirstChild();    if(NodeUtil.hasCatchHandler(allCatchNodes))    {    Preconditions.checkState(allCatchNodes.hasOneChild());    	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	147	None	replace
807	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    elseBlock    =    allCatchNodes.getFirstChild();    if(NodeUtil.hasCatchHandler(allCatchNodes))    {    Preconditions.checkState(allCatchNodes.hasOneChild());    	non-compiled	[CE]  ';'  expected	147	None	replace
808	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  ||  allCatchNodes.hasOneChild()  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	if(allCatchNodes!=  null  ||  allCatchNodes.hasOneChild()  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(allCatchNodes.hasOneChild()    ||    NodeUtil.hasCatchHandler(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	127	2	replace
809	[BUG]  [BUGGY]  if(allCatchNodes!=  null  ||  allCatchNodes.hasOneChild()  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  ||  allCatchNodes.hasOneChild()  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=  null  ||  allCatchNodes.hasOneChild()  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(allCatchNodes.hasOneChild()    ||    NodeUtil.hasCatchHandler(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	127	2	replace
810	[BUG]  [BUGGY]  if(allCatchNodes!=  null  &&  NodeUtil.isExpressionNode(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  &&  NodeUtil.isExpressionNode(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=  null  &&  NodeUtil.isExpressionNode(allCatchNodes))  {	  if(allCatchNodes!=    null    &&    NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	114	None	replace
811	[BUG]  [BUGGY]  if(NodeUtil.hasCatchName(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  If(NodeUtil.hasCatchHandler(allCatchNodes)||  NodeUtil.  [CE]  ')'  expected  [FE]          RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(NodeUtil.hasCatchName(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  If(NodeUtil.hasCatchHandler(allCatchNodes)||  NodeUtil.  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(NodeUtil.hasCatchName(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  If(NodeUtil.hasCatchHandler(allCatchNodes)||  NodeUtil.	  if(NodeUtil.hasCatchHandler(allCatchNodes)||    NodeUtil.hasFinally(allCatchNodes))    {    If(NodeUtil.hasCatchHandler(allCatchNodes)||    NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  ')'  expected	125	None	replace
812	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  if(allCatchNodes!=  null  &&  NodeUtil.hasCatchHand  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  if(allCatchNodes!=  null  &&  NodeUtil.hasCatchHand  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  if(allCatchNodes!=  null  &&  NodeUtil.hasCatchHand	  if(allCatchNodes!=    null    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    Node    allCatchNodes    =    NodeUtil.getCatchHandler(allCatchNodes);    if(allCatchNodes!=    null    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    	non-compiled	[CE]  ')'  expected	158	None	replace
813	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  if(allCatchNodes  ==  null  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  if(allCatchNodes  ==  null  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  if(allCatchNodes  ==  null  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(allCatchNodes!=    null    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    Node    allCatchNodes    =    NodeUtil.getCatchHandler(allCatchNodes);    if(allCatchNodes!=    null    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    	non-compiled	[CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	158	None	replace
814	[BUG]  [BUGGY]  if(allCatchNodes.hasOneChild()  ||  NodeUtil.hasFinally(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes);  if(allCatchNodes.hasOneChild()  ||  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes.hasOneChild()  ||  NodeUtil.hasFinally(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes);  if(allCatchNodes.hasOneChild()  ||  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes.hasOneChild()    ||    NodeUtil.hasFinally(allCatchNodes))    {    Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes);  if(allCatchNodes.hasOneChild()  ||  NodeUtil.hasFinally(allCatchNodes))  {	  	non-compiled	[CE]  illegal  start  of  expression	14	None	add
815	[BUG]  [BUGGY]  if(NodeUtil.hasCatchName(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  If(NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.  [CE]  ')'  expected  [FE]          RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(NodeUtil.hasCatchName(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  If(NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(NodeUtil.hasCatchName(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  If(NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.	  if(NodeUtil.hasCatchHandler(allCatchNodes)&&    NodeUtil.hasFinally(allCatchNodes))    {    If(NodeUtil.hasCatchHandler(allCatchNodes)&&    NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  ')'  expected	55	None	replace
816	[BUG]  [BUGGY]  if(!NodeUtil.isFinally(allCatchNodes)&&!NodeUtil.isExpressionNode(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!NodeUtil.isFinally(allCatchNodes)&&!NodeUtil.isExpressionNode(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!NodeUtil.isFinally(allCatchNodes)&&!NodeUtil.isExpressionNode(allCatchNodes))  {	  if(!NodeUtil.hasFinally(allCatchNodes)||!NodeUtil.isExpressionNode(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
817	[BUG]  [BUGGY]  if(allCatchNodes!=  null  &&  NodeUtil.hasCatchBlock(allCatchNodes))  {  If(allCatchNodes!=  null  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  &&  NodeUtil.hasCatchBlock(allCatchNodes))  {  If(allCatchNodes!=  null  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=  null  &&  NodeUtil.hasCatchBlock(allCatchNodes))  {  If(allCatchNodes!=  null  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(allCatchNodes!=    null    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    If(allCatchNodes!=    null    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    	non-compiled	[CE]  ';'  expected	103	None	replace
818	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(allCatchNodes)||!NodeUtil.hasFinally(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]        RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(NodeUtil.isExpressionNode(allCatchNodes)||!NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(NodeUtil.isExpressionNode(allCatchNodes)||!NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.isExpressionNode(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	145	None	replace
819	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(allCatchNodes)||  n.getType()  ==  Token.EXPR_RESULT)  {  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(NodeUtil.isExpressionNode(allCatchNodes)||  n.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(NodeUtil.isExpressionNode(allCatchNodes)||  n.getType()  ==  Token.EXPR_RESULT)  {	  if(NodeUtil.isExpressionNode(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	145	None	replace
820	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.getFirstChild()  ==  tryBlock);  Node  elseBlock  =  allCatchNodes.getFirstChild();  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.getFirstChild()  ==  tryBlock);  Node  elseBlock  =  allCatchNodes.getFirstChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.getFirstChild()  ==  tryBlock);  Node  elseBlock  =  allCatchNodes.getFirstChild();	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    elseBlock    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
821	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes).getFirstChild();  if(NodeUtil.hasFinally(allCatchNodes)  [CE]  ')'  expected  [FE]          RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes).getFirstChild();  if(NodeUtil.hasFinally(allCatchNodes)  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.hasOneChild());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes).getFirstChild();  if(NodeUtil.hasFinally(allCatchNodes)	  if(NodeUtil.hasFinally(allCatchNodes))    {    Node    allCatchNodes    =    NodeUtil.getCatchBlock(allCatchNodes).getFirstChild();    if(NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  ')'  expected	185	None	replace
822	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty(),  tryBlock);  [CE]  illegal  start  of  type  [FE]        RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty(),  tryBlock);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.isEmpty(),  tryBlock);	  Preconditions.checkState(allCatchNodes.isEmpty(),    exitType);    	non-compiled	[CE]  illegal  start  of  type	179	None	replace
823	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty(),  tryMinimizeExits(tryBlock,  exitType,  labelName);  [CE]  ')'  expected  [FE]          RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty(),  tryMinimizeExits(tryBlock,  exitType,  labelName);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.isEmpty(),  tryMinimizeExits(tryBlock,  exitType,  labelName);	  Preconditions.checkState(allCatchNodes.isEmpty(),    exitType);    	non-compiled	[CE]  ')'  expected	179	None	replace
824	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty(),  tryBlock,  exitType);  [CE]  illegal  start  of  type  [FE]            RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty(),  tryBlock,  exitType);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.isEmpty(),  tryBlock,  exitType);	  Preconditions.checkState(allCatchNodes.isEmpty(),    exitType);    	non-compiled	[CE]  illegal  start  of  type	179	None	replace
825	[BUG]  [BUGGY]  if(allCatchNodes!=  null  &&  NodeUtil.hasCatchHandler(allCatchNodes)||  callNodes.isTree())  {  [CE]  cannot  find  symbol  callNodes  [FE]        AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  &&  NodeUtil.hasCatchHandler(allCatchNodes)||  callNodes.isTree())  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=  null  &&  NodeUtil.hasCatchHandler(allCatchNodes)||  callNodes.isTree())  {	  if(allCatchNodes!=    null    &&    NodeUtil.hasCatchHandler(allCatchNodes)||    n.isTree())    {    	non-compiled	[CE]  cannot  find  symbol  callNodes	204	None	replace
826	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty();  Node  allCatchNodes  =  AllCatchNodes.isEmpty();  [CE]  ')'  expected  [FE]                RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty();  Node  allCatchNodes  =  AllCatchNodes.isEmpty();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.isEmpty();  Node  allCatchNodes  =  AllCatchNodes.isEmpty();	          Preconditions.checkState(allCatchNodes.isEmpty());    Node    allCatchNodes    =    AllCatchNodes.isEmpty();    	non-compiled	[CE]  ')'  expected	24	None	replace
827	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock);  Preconditions.checkState(allCatchNodes.hasOneChild());  [CE]  illegal  start  of  type  [FE]            RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock);  Preconditions.checkState(allCatchNodes.hasOneChild());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock);  Preconditions.checkState(allCatchNodes.hasOneChild());	          Preconditions.checkState(allCatchNodes.hasOneChild());    Node    allCatchNodes    =    NodeUtil.getCatchBlock(n);    Preconditions.checkState(allCatchNodes.hasOneChild());    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
828	[BUG]  [BUGGY]  if(allCatchNodes!=  null)  {  if(!NodeUtil.hasFinally(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]        RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null)  {  if(!NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=  null)  {  if(!NodeUtil.hasFinally(allCatchNodes))  {	  if(!NodeUtil.hasFinally(allCatchNodes))    {    if(!NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
829	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.get(0)  ==  null  &&  tryMinimizeExits(tryBlock,  exitType,  labelName));  [CE]  illegal  start  of  type  [FE]        RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.get(0)  ==  null  &&  tryMinimizeExits(tryBlock,  exitType,  labelName));  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.get(0)  ==  null  &&  tryMinimizeExits(tryBlock,  exitType,  labelName));	  Preconditions.checkState(allCatchNodes.get(0)    ==    null);    	non-compiled	[CE]  illegal  start  of  type	201	None	replace
830	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getfirstChild();  Node  anotherBlock  =  allCatchNodes.getLastChild();  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  elseBlock  =  allCatchNodes.getfirstChild();  Node  anotherBlock  =  allCatchNodes.getLastChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  elseBlock  =  allCatchNodes.getfirstChild();  Node  anotherBlock  =  allCatchNodes.getLastChild();	          Node    elseBlock    =    allCatchNodes.getLastChild();    Node    anotherBlock    =    allCatchNodes.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
831	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  ||  allCatchNodes.isEmpty()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	if(allCatchNodes!=  null  ||  allCatchNodes.isEmpty()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(allCatchNodes.isEmpty()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	133	2	replace
832	[BUG]  [BUGGY]  if(allCatchNodes!=  null  ||  allCatchNodes.isEmpty()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  ||  allCatchNodes.isEmpty()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=  null  ||  allCatchNodes.isEmpty()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(allCatchNodes.isEmpty()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	133	2	replace
833	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes  ==  null  ||  allCatchNodes.isEmpty()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	if(allCatchNodes  ==  null  ||  allCatchNodes.isEmpty()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(allCatchNodes.isEmpty()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    	compilable	  [FE]  AssertionFailedError  	133	6	replace
834	[BUG]  [BUGGY]  if(allCatchNodes  ==  null  ||  allCatchNodes.isEmpty()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes  ==  null  ||  allCatchNodes.isEmpty()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes  ==  null  ||  allCatchNodes.isEmpty()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(allCatchNodes.isEmpty()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    	compilable	  [FE]  AssertionFailedError  	133	6	replace
835	[BUG]  [BUGGY]  if(!NodeUtil.hasFinally(allCatchNodes)||!NodeUtil.hasFinally(allCatchNodes))  {  if(!NodeUtil.hasFinally(allCatchNodes)&|!NodeUtil.hasFinally(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!NodeUtil.hasFinally(allCatchNodes)||!NodeUtil.hasFinally(allCatchNodes))  {  if(!NodeUtil.hasFinally(allCatchNodes)&|!NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!NodeUtil.hasFinally(allCatchNodes)||!NodeUtil.hasFinally(allCatchNodes))    {    if(!NodeUtil.hasFinally(allCatchNodes)&|!NodeUtil.hasFinally(allCatchNodes))  {	  	non-compiled	[CE]  illegal  start  of  expression	58	None	add
836	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if(NodeUtil.hasFinally(allCatchNodes))  {  [CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if(NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if(NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.hasFinally(allCatchNodes))    {    Node    allCatchNodes    =    NodeUtil.getCatchBlock(allCatchNodes);    if(NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	184	None	replace
837	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes);  if(NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes)  [CE]  ')'  expected  [FE]          RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes);  if(NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes)  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes);  if(NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes)	  if(NodeUtil.hasFinally(allCatchNodes))    {    Node    allCatchNodes    =    NodeUtil.getCatchBlock(allCatchNodes);    if(NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  ')'  expected	184	None	replace
838	[BUG]  [BUGGY]  if(allCatchNodes!=  null)  {  if(!NodeUtil.isFinally(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]            RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null)  {  if(!NodeUtil.isFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=  null)  {  if(!NodeUtil.isFinally(allCatchNodes))  {	  if(!NodeUtil.hasFinally(allCatchNodes))    {    if(!NodeUtil.isFinally(allCatchNodes))    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
839	[BUG]  [BUGGY]  if(allCatchNodes!=  null  &&  NodeUtil.canCatchBlock(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  &&  NodeUtil.canCatchBlock(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=  null  &&  NodeUtil.canCatchBlock(allCatchNodes))  {	  if(allCatchNodes!=    null    &&    NodeUtil.hasCatchBlock(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	205	None	replace
840	[BUG]  [BUGGY]  if(allCatchNodes!=  null  &&  NodeUtil.hasCatchBlock(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  &&  NodeUtil.hasCatchBlock(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=  null  &&  NodeUtil.hasCatchBlock(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {	  if(allCatchNodes!=    null    &&    NodeUtil.hasCatchBlock(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	205	None	replace
841	[BUG]  [BUGGY]          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  thenBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  alsoBlock  =  allCatchNodes.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  thenBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  alsoBlock  =  allCatchNodes.getFirstChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	                Node        elseBlock        =        allCatchNodes.getFirstChild();        Node    thenBlock    =    allCatchNodes.getFirstChild();    Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  alsoBlock  =  allCatchNodes.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	99	None	add
842	[BUG]  [BUGGY]          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  thenBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  thenBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	                Node        elseBlock        =        allCatchNodes.getFirstChild();        Node    thenBlock    =    allCatchNodes.getFirstChild();    Node  elseBlock  =  allCatchNodes.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	99	None	add
843	[BUG]  [BUGGY]  Node  finallyBlock  =  allCatchNodes.removeLastChild();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  finallyBlock  =  allCatchNodes.removeLastChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  finallyBlock  =  allCatchNodes.removeLastChild();	  Node    finallyBlock    =    allCatchNodes.removeFirstChild();    	non-compiled	[CE]  illegal  start  of  type	196	None	replace
844	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.size()  >  0);  Node  allCatchNodes  =  allCatchNodes.isEmpty());  [CE]  ';'  expected  [FE]          RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.size()  >  0);  Node  allCatchNodes  =  allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.size()  >  0);  Node  allCatchNodes  =  allCatchNodes.isEmpty());	          Preconditions.checkState(allCatchNodes.isEmpty());    Node    allCatchNodes    =    allCatchNodes.isEmpty());    	non-compiled	[CE]  ';'  expected	21	None	replace
845	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.size()  >  0  ||  allCatchNodes.isEmpty());  [CE]  illegal  start  of  type  [FE]            RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.size()  >  0  ||  allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.size()  >  0  ||  allCatchNodes.isEmpty());	          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkState(AllCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
846	[BUG]  [BUGGY]  if(allCatchNodes.hasOneChild()  ||!NodeUtil.hasCatchHandler(allCatchNodes))  {  if(AllCatchNodes.hasOneChild()  ||!NodeUtil.hasCatchHandler(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes.hasOneChild()  ||!NodeUtil.hasCatchHandler(allCatchNodes))  {  if(AllCatchNodes.hasOneChild()  ||!NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes.hasOneChild()    ||!NodeUtil.hasCatchHandler(allCatchNodes))    {    if(AllCatchNodes.hasOneChild()  ||!NodeUtil.hasCatchHandler(allCatchNodes))  {	  	non-compiled	[CE]  illegal  start  of  expression	85	None	add
847	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  if(NodeUtil.hasFinally(allCatchNodes)&&  nodeUtil.hasFinally(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  if(NodeUtil.hasFinally(allCatchNodes)&&  nodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(NodeUtil.hasFinally(allCatchNodes)&&    NodeUtil.hasFinally(allCatchNodes))    {    if(NodeUtil.hasFinally(allCatchNodes)&&  nodeUtil.hasFinally(allCatchNodes))  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
848	[BUG]  [BUGGY]          Preconditions.checkState(allCatchNodes.isEmpty());    Preconditions.checkArgument(allCatchNodes.isEmpty());  Preconditions.checkArgument(AllCatchNodes.isEmpty());  Preconditions.checkArgument(allCatchNodes.isEmpty());  [CE]  cannot  find  symbol  AllCatchNodes  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Preconditions.checkState(allCatchNodes.isEmpty());    Preconditions.checkArgument(allCatchNodes.isEmpty());  Preconditions.checkArgument(AllCatchNodes.isEmpty());  Preconditions.checkArgument(allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	                Preconditions.checkState(allCatchNodes.isEmpty());        Preconditions.checkArgument(allCatchNodes.isEmpty());    Preconditions.checkArgument(AllCatchNodes.isEmpty());  Preconditions.checkArgument(allCatchNodes.isEmpty());	  	non-compiled	[CE]  cannot  find  symbol  AllCatchNodes	192	None	add
849	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(allCatchNodes))  {  If(NodeUtil.hasCatchHandler(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  ';'  expected  [FE]          RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(NodeUtil.isExpressionNode(allCatchNodes))  {  If(NodeUtil.hasCatchHandler(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(NodeUtil.isExpressionNode(allCatchNodes))  {  If(NodeUtil.hasCatchHandler(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.hasCatchHandler(allCatchNodes)||    NodeUtil.hasFinally(allCatchNodes))    {    If(NodeUtil.hasCatchHandler(allCatchNodes)||    NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  ';'  expected	125	None	replace
850	[BUG]  [BUGGY]  Node  anotherBlock  =  allCatchNodes.getLastChild();  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  anotherBlock  =  allCatchNodes.getLastChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  anotherBlock  =  allCatchNodes.getLastChild();	          Node    elseBlock    =    allCatchNodes.getLastChild();    Node    anotherBlock    =    allCatchNodes.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
851	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!NodeUtil.hasFinally(allCatchNodes)&&!NodeUtil.mayHaveSideEffects(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	if(!NodeUtil.hasFinally(allCatchNodes)&&!NodeUtil.mayHaveSideEffects(allCatchNodes))  {	  if(!NodeUtil.hasFinally(allCatchNodes)&&!NodeUtil.isExpressionNode(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	64	6	replace
852	[BUG]  [BUGGY]  if(!NodeUtil.hasFinally(allCatchNodes)&&!NodeUtil.mayHaveSideEffects(allCatchNodes))  {  [FE]  RuntimeException  [FE]                RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!NodeUtil.hasFinally(allCatchNodes)&&!NodeUtil.mayHaveSideEffects(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!NodeUtil.hasFinally(allCatchNodes)&&!NodeUtil.mayHaveSideEffects(allCatchNodes))  {	  if(!NodeUtil.hasFinally(allCatchNodes)&&!NodeUtil.isExpressionNode(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	64	6	replace
853	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(allCatchNodes)||  allCatchNodes.isEmpty())  {  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(NodeUtil.isExpressionNode(allCatchNodes)||  allCatchNodes.isEmpty())  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(NodeUtil.isExpressionNode(allCatchNodes)||  allCatchNodes.isEmpty())  {	  if(NodeUtil.hasFinally(allCatchNodes)||    allCatchNodes.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
854	[BUG]  [BUGGY]          Preconditions.checkState(allCatchNodes.hasOneChild());    Preconditions.checkState(allCatchNodes.hasOneChild());  Preconditions.checkState(allCatchNodes.hasChild());  Preconditions.checkState(allCatchNodes.hasOneChild());  [CE]  method  hasChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Preconditions.checkState(allCatchNodes.hasOneChild());    Preconditions.checkState(allCatchNodes.hasOneChild());  Preconditions.checkState(allCatchNodes.hasChild());  Preconditions.checkState(allCatchNodes.hasOneChild());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	                Preconditions.checkState(allCatchNodes.hasOneChild());        Preconditions.checkState(allCatchNodes.hasOneChild());    Preconditions.checkState(allCatchNodes.hasChild());  Preconditions.checkState(allCatchNodes.hasOneChild());	  	non-compiled	[CE]  method  hasChild  in  class  Node  cannot  be  applied  to  given  types;	78	None	add
855	[BUG]  [BUGGY]          Preconditions.checkState(allCatchNodes.hasOneChild());    Preconditions.checkState(allCatchNodes.hasOneChild());  Preconditions.checkState(AllCatchNodes.hasOneChild());  Preconditions.checkState(allCatchNodes.hasOneChild());  [CE]  cannot  find  symbol  AllCatchNodes  [FE]      RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Preconditions.checkState(allCatchNodes.hasOneChild());    Preconditions.checkState(allCatchNodes.hasOneChild());  Preconditions.checkState(AllCatchNodes.hasOneChild());  Preconditions.checkState(allCatchNodes.hasOneChild());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	                Preconditions.checkState(allCatchNodes.hasOneChild());        Preconditions.checkState(allCatchNodes.hasOneChild());    Preconditions.checkState(AllCatchNodes.hasOneChild());  Preconditions.checkState(allCatchNodes.hasOneChild());	  	non-compiled	[CE]  cannot  find  symbol  AllCatchNodes	78	None	add
856	[BUG]  [BUGGY]          Preconditions.checkState(allCatchNodes.hasOneChild());    Preconditions.checkState(allCatchNodes.hasOneChild());  Preconditions.checkState(allCatchNodes.isOneChild());  Preconditions.checkState(allCatchNodes.hasOneChild());  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Preconditions.checkState(allCatchNodes.hasOneChild());    Preconditions.checkState(allCatchNodes.hasOneChild());  Preconditions.checkState(allCatchNodes.isOneChild());  Preconditions.checkState(allCatchNodes.hasOneChild());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	                Preconditions.checkState(allCatchNodes.hasOneChild());        Preconditions.checkState(allCatchNodes.hasOneChild());    Preconditions.checkState(allCatchNodes.isOneChild());  Preconditions.checkState(allCatchNodes.hasOneChild());	  	non-compiled	[CE]  cannot  find  symbol	78	None	add
857	[BUG]  [BUGGY]  if(allCatchNodes.hasOneChild())  {  If(allCatchNodes.hasOneChild()  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes.hasOneChild())  {  If(allCatchNodes.hasOneChild()  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes.hasOneChild())  {  If(allCatchNodes.hasOneChild()  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(allCatchNodes.hasOneChild()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    If(allCatchNodes.hasOneChild()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    	non-compiled	[CE]  ';'  expected	2	None	replace
858	[BUG]  [BUGGY]  if(allCatchNodes.hasChildren())  {  If(allCatchNodes.hasOneChild()  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes.hasChildren())  {  If(allCatchNodes.hasOneChild()  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes.hasChildren())  {  If(allCatchNodes.hasOneChild()  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(allCatchNodes.hasOneChild()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    If(allCatchNodes.hasOneChild()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    	non-compiled	[CE]  ';'  expected	2	None	replace
859	[BUG]  [BUGGY]  If(allCatchNodes.hasOneChild()  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  If(allCatchNodes.hasOneChild()  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	If(allCatchNodes.hasOneChild()  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(allCatchNodes.hasOneChild()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    If(allCatchNodes.hasOneChild()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    	non-compiled	[CE]  ';'  expected	2	None	replace
860	[BUG]  [BUGGY]  if(allCatchNodes.hasChildren())  {  If(allCatchNodes.hasOneChild()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes.hasChildren())  {  If(allCatchNodes.hasOneChild()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes.hasChildren())  {  If(allCatchNodes.hasOneChild()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(allCatchNodes.hasOneChild()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    If(allCatchNodes.hasOneChild()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    	non-compiled	[CE]  ';'  expected	2	None	replace
861	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild()  ||  allCatchNodes.hasOneChild());  [CE]  illegal  start  of  type  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild()  ||  allCatchNodes.hasOneChild());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.hasOneChild()  ||  allCatchNodes.hasOneChild());	          Preconditions.checkState(allCatchNodes.hasOneChild());    Preconditions.checkState(allCatchNodes.hasOneChild());    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
862	[BUG]  [BUGGY]  if(allCatchNodes.hasChildren()  ||  NodeUtil.hasExitType(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes.hasChildren()  ||  NodeUtil.hasExitType(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes.hasChildren()  ||  NodeUtil.hasExitType(allCatchNodes))  {	  if(allCatchNodes.hasChildren()    ||    NodeUtil.hasCatchHandler(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	154	None	replace
863	[BUG]  [BUGGY]  If(allCatchNodes!=  null  &&  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  If(allCatchNodes!=  null  &&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	If(allCatchNodes!=  null  &&  NodeUtil.hasFinally(allCatchNodes))  {	  if(allCatchNodes!=    null    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    If(allCatchNodes!=    null    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    	non-compiled	[CE]  ';'  expected	103	None	replace
864	[BUG]  [BUGGY]  Node  catchNode  =  allCatchNodes.get(n);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  catchNode  =  allCatchNodes.get(n);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  catchNode  =  allCatchNodes.get(n);	  Node    catchNode    =    allCatchNodes.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
865	[BUG]  [BUGGY]  Preconditions.checkArgument(allCatchNodes.isEmpty());  Node  allCatchNodes  =  AllCatchNodes.isEmpty();  [CE]  illegal  start  of  type  [FE]                RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkArgument(allCatchNodes.isEmpty());  Node  allCatchNodes  =  AllCatchNodes.isEmpty();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkArgument(allCatchNodes.isEmpty());  Node  allCatchNodes  =  AllCatchNodes.isEmpty();	          Preconditions.checkState(allCatchNodes.isEmpty());    Node    allCatchNodes    =    AllCatchNodes.isEmpty();    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
866	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.size()  >  0);  Node  allCatchNodes  =  AllCatchNodes.isEmpty();  [CE]  illegal  start  of  type  [FE]                  RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.size()  >  0);  Node  allCatchNodes  =  AllCatchNodes.isEmpty();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.size()  >  0);  Node  allCatchNodes  =  AllCatchNodes.isEmpty();	          Preconditions.checkState(allCatchNodes.isEmpty());    Node    allCatchNodes    =    AllCatchNodes.isEmpty();    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
867	[BUG]  [BUGGY]  if(allCatchNodes!=  null  &&  NodeUtil.hasCatchBlock(allCatchNodes)||  NodeUtil.hasCatchBlock(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  &&  NodeUtil.hasCatchBlock(allCatchNodes)||  NodeUtil.hasCatchBlock(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=  null  &&  NodeUtil.hasCatchBlock(allCatchNodes)||  NodeUtil.hasCatchBlock(allCatchNodes))  {	  if(allCatchNodes!=    null    &&    NodeUtil.hasCatchBlock(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	205	None	replace
868	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(allCatchNodes)||  NodeUtil.isFinally(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]        RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(NodeUtil.isExpressionNode(allCatchNodes)||  NodeUtil.isFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(NodeUtil.isExpressionNode(allCatchNodes)||  NodeUtil.isFinally(allCatchNodes))  {	  if(NodeUtil.isExpressionNode(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	145	None	replace
869	[BUG]  [BUGGY]  if(NodeUtil.isCatchHandler(allCatchNodes)&&  NodeUtil.isVar(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(NodeUtil.isCatchHandler(allCatchNodes)&&  NodeUtil.isVar(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(NodeUtil.isCatchHandler(allCatchNodes)&&  NodeUtil.isVar(allCatchNodes))  {	  if(NodeUtil.isCatchHandler(allCatchNodes)&&    NodeUtil.isFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	136	None	replace
870	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.getFirstChild()  ==  n);  Node  c  =  allCatchNodes.getLastChild();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.getFirstChild()  ==  n);  Node  c  =  allCatchNodes.getLastChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.getFirstChild()  ==  n);  Node  c  =  allCatchNodes.getLastChild();	          Node    c    =    allCatchNodes.getFirstChild();    Node    c    =    allCatchNodes.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
871	[BUG]  [BUGGY]  Node  finallyBlock  =  allCatchNodes.get(n);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  finallyBlock  =  allCatchNodes.get(n);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  finallyBlock  =  allCatchNodes.get(n);	  Node    finallyBlock    =    allCatchNodes.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
872	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  Preconditions.checkState(allCatchNodes.hasOneChild());  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  Preconditions.checkState(allCatchNodes.hasOneChild());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  elseBlock  =  allCatchNodes.getFirstChild();  Preconditions.checkState(allCatchNodes.hasOneChild());	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    otherBlock    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
873	[BUG]  [BUGGY]  Preconditions.checkNotNull(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkEquals(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [CE]  illegal  start  of  type  [FE]              RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkNotNull(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkEquals(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkNotNull(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkEquals(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());	          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkEquals(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    	non-compiled	[CE]  illegal  start  of  type	217	None	replace
874	[BUG]  [BUGGY]  Preconditions.checkArgument(allCatchNodes.hasChildren());  [CE]  illegal  start  of  type  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkArgument(allCatchNodes.hasChildren());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkArgument(allCatchNodes.hasChildren());	          Preconditions.checkState(allCatchNodes.hasOneChild());    Preconditions.checkNotNull(allCatchNodes.hasOneChild());    	non-compiled	[CE]  illegal  start  of  type	223	None	replace
875	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!allCatchNodes.isEmpty())  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	if(!allCatchNodes.isEmpty())  {	  if(allCatchNodes.hasOneChild()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    if(allCatchNodes.hasOneChild()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	1	2	replace
876	[BUG]  [BUGGY]  if(!allCatchNodes.isEmpty())  {  [FE]  RuntimeException  [FE]        AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!allCatchNodes.isEmpty())  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!allCatchNodes.isEmpty())  {	  if(allCatchNodes.hasOneChild()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    if(allCatchNodes.hasOneChild()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	1	2	replace
877	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes.hasChildren())  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	if(allCatchNodes.hasChildren())  {	  if(allCatchNodes.hasOneChild()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    if(allCatchNodes.hasOneChild()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    	compilable	  [FE]  AssertionFailedError  	1	2	replace
878	[BUG]  [BUGGY]  if(allCatchNodes.hasChildren())  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes.hasChildren())  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes.hasChildren())  {	  if(allCatchNodes.hasOneChild()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    if(allCatchNodes.hasOneChild()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    	compilable	  [FE]  AssertionFailedError  	1	2	replace
879	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes.hasChildren()  ||  allCatchNodes.hasChildren())  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	if(allCatchNodes.hasChildren()  ||  allCatchNodes.hasChildren())  {	  if(allCatchNodes.hasOneChild()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    if(allCatchNodes.hasOneChild()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    	compilable	  [FE]  AssertionFailedError  	1	2	replace
880	[BUG]  [BUGGY]  if(allCatchNodes.hasChildren()  ||  allCatchNodes.hasChildren())  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes.hasChildren()  ||  allCatchNodes.hasChildren())  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes.hasChildren()  ||  allCatchNodes.hasChildren())  {	  if(allCatchNodes.hasOneChild()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    if(allCatchNodes.hasOneChild()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    	compilable	  [FE]  AssertionFailedError  	1	2	replace
881	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!allCatchNodes.hasChildren())  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	if(!allCatchNodes.hasChildren())  {	  if(allCatchNodes.hasOneChild()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    if(allCatchNodes.hasOneChild()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    	compilable	  [FE]  AssertionFailedError  	1	6	replace
882	[BUG]  [BUGGY]  if(!allCatchNodes.hasChildren())  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!allCatchNodes.hasChildren())  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!allCatchNodes.hasChildren())  {	  if(allCatchNodes.hasOneChild()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    if(allCatchNodes.hasOneChild()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    	compilable	  [FE]  AssertionFailedError  	1	6	replace
883	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!allCatchNodes.isEmpty()  ||  allCatchNodes.hasChildren())  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	if(!allCatchNodes.isEmpty()  ||  allCatchNodes.hasChildren())  {	  if(allCatchNodes.hasOneChild()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    if(allCatchNodes.hasOneChild()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	1	2	replace
884	[BUG]  [BUGGY]  if(!allCatchNodes.isEmpty()  ||  allCatchNodes.hasChildren())  {  [FE]  RuntimeException  [FE]                AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!allCatchNodes.isEmpty()  ||  allCatchNodes.hasChildren())  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!allCatchNodes.isEmpty()  ||  allCatchNodes.hasChildren())  {	  if(allCatchNodes.hasOneChild()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    if(allCatchNodes.hasOneChild()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	1	2	replace
885	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  }  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  }	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    elseBlock    =    allCatchNodes.getFirstChild();    if(NodeUtil.hasFinally(allCatchNodes))    {    Preconditions.checkState(allCatchNodes.hasOneChild());    }    	non-compiled	[CE]  illegal  start  of  type	149	None	replace
886	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    elseBlock    =    allCatchNodes.getFirstChild();    if(NodeUtil.hasFinally(allCatchNodes))    {    Preconditions.checkState(allCatchNodes.hasOneChild());    }    	compilable	  [FE]  RuntimeException  	149	6	replace
887	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  [FE]  RuntimeException  [FE]                AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    elseBlock    =    allCatchNodes.getFirstChild();    if(NodeUtil.hasFinally(allCatchNodes))    {    Preconditions.checkState(allCatchNodes.hasOneChild());    }    	compilable	  [FE]  RuntimeException  	149	6	replace
888	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(otherCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(otherCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  }  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(otherCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  }	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    elseBlock    =    allCatchNodes.getFirstChild();    if(NodeUtil.hasFinally(allCatchNodes))    {    Preconditions.checkState(allCatchNodes.hasOneChild());    }    	non-compiled	[CE]  illegal  start  of  type	149	None	replace
889	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.isOneChild());  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.isOneChild());  }  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.isOneChild());  }	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    elseBlock    =    allCatchNodes.getFirstChild();    if(NodeUtil.hasFinally(allCatchNodes))    {    Preconditions.checkState(allCatchNodes.hasOneChild());    }    	non-compiled	[CE]  illegal  start  of  type	149	None	replace
890	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Preconditions.checkArgument(allCatchNodes.isEmpty());  [CE]  illegal  start  of  type  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Preconditions.checkArgument(allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.hasOneChild());  Preconditions.checkArgument(allCatchNodes.isEmpty());	          Preconditions.checkState(allCatchNodes.isEmpty());    Preconditions.checkArgument(allCatchNodes.isEmpty());    	non-compiled	[CE]  illegal  start  of  type	193	None	replace
891	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty());  preconditions.checkArgument(allCatchNodes.isEmpty());  [CE]  illegal  start  of  type  [FE]      RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty());  preconditions.checkArgument(allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.isEmpty());  preconditions.checkArgument(allCatchNodes.isEmpty());	          Preconditions.checkState(allCatchNodes.isEmpty());    Preconditions.checkArgument(allCatchNodes.isEmpty());    	non-compiled	[CE]  illegal  start  of  type	193	None	replace
892	[BUG]  [BUGGY]  if(allCatchNodes.isAll()  ||  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes.isAll()  ||  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes.isAll()  ||  NodeUtil.hasFinally(allCatchNodes))  {	  if(allCatchNodes.hasOneChild()    ||    NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
893	[BUG]  [BUGGY]  if(allCatchNodes.hasOneChild()  ||  NodeUtil.isExpressionNode(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes.hasOneChild()  ||  NodeUtil.isExpressionNode(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes.hasOneChild()  ||  NodeUtil.isExpressionNode(allCatchNodes))  {	  if(allCatchNodes.hasOneChild()    ||    NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
894	[BUG]  [BUGGY]  Node  catchNode  =  allCatchNodes.getfirstChild();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  catchNode  =  allCatchNodes.getfirstChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  catchNode  =  allCatchNodes.getfirstChild();	  Node    catchNode    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
895	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild()  ||  allCatchNodes.isEmpty());  [CE]  illegal  start  of  type  [FE]        RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild()  ||  allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.hasOneChild()  ||  allCatchNodes.isEmpty());	  Preconditions.checkState(allCatchNodes.isEmpty()    &&    allCatchNodes.isEmpty());    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
896	[BUG]  [BUGGY]  Preconditions.checkArgument(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Node  allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [CE]  ';'  expected  [FE]          RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkArgument(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Node  allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkArgument(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Node  allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());	          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Node    allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    	non-compiled	[CE]  ';'  expected	120	None	replace
897	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Node  allCatchNodes.setEmpty()  ||  allCatchNodes.isEmpty());  [CE]  ';'  expected  [FE]            RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Node  allCatchNodes.setEmpty()  ||  allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Node  allCatchNodes.setEmpty()  ||  allCatchNodes.isEmpty());	          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Node    allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    	non-compiled	[CE]  ';'  expected	120	None	replace
898	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty());  Node  allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [CE]  ';'  expected  [FE]              RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty());  Node  allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.isEmpty());  Node  allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());	          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Node    allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    	non-compiled	[CE]  ';'  expected	120	None	replace
899	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  Preconditions.checkState(!NodeUtil.hasCatchHandler(allCatchNodes))  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  Preconditions.checkState(!NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  Preconditions.checkState(!NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(!NodeUtil.hasCatchHandler(allCatchNodes))    {    Node    allCatchNodes    =    NodeUtil.getCatchHandler(allCatchNodes);    Preconditions.checkState(!NodeUtil.hasCatchHandler(allCatchNodes))    {    	non-compiled	[CE]  ';'  expected	189	None	replace
900	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  return;  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  return;  }  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  return;  }	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    elseBlock    =    allCatchNodes.getFirstChild();    if(NodeUtil.hasFinally(allCatchNodes))    {    Preconditions.checkState(allCatchNodes.hasOneChild());    return;    }    	non-compiled	[CE]  illegal  start  of  type	227	None	replace
901	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(otherCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  return;  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(otherCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  return;  }  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(otherCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  return;  }	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    elseBlock    =    allCatchNodes.getFirstChild();    if(NodeUtil.hasFinally(allCatchNodes))    {    Preconditions.checkState(allCatchNodes.hasOneChild());    return;    }    	non-compiled	[CE]  illegal  start  of  type	227	None	replace
902	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.isOneChild());  return;  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.isOneChild());  return;  }  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.isOneChild());  return;  }	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    elseBlock    =    allCatchNodes.getFirstChild();    if(NodeUtil.hasFinally(allCatchNodes))    {    Preconditions.checkState(allCatchNodes.hasOneChild());    return;    }    	non-compiled	[CE]  illegal  start  of  type	227	None	replace
903	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n,  exitType);  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [CE]  illegal  start  of  type  [FE]        RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n,  exitType);  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(n,  exitType);  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());	          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Node    allCatchNodes    =    NodeUtil.getCatchBlock(n);    Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    	non-compiled	[CE]  illegal  start  of  type	212	None	replace
904	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getLastChild();  if(NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.check  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getLastChild();  if(NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.check  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getLastChild();  if(NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.check	          Node    elseBlock    =    allCatchNodes.getLastChild();    Node    elseBlock    =    allCatchNodes.getLastChild();    if(NodeUtil.hasCatchHandler(allCatchNodes))    {    Preconditions.checkState(allCatchNodes.hasOneChild());    	non-compiled	[CE]  ';'  expected	175	None	replace
905	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes.isEmpty())  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	if(allCatchNodes.isEmpty())  {	  if(allCatchNodes!=    null    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    if(allCatchNodes    ==    null    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    	compilable	  [FE]  AssertionFailedError  	102	6	replace
906	[BUG]  [BUGGY]  if(allCatchNodes.isEmpty())  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes.isEmpty())  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes.isEmpty())  {	  if(allCatchNodes!=    null    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    if(allCatchNodes    ==    null    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    	compilable	  [FE]  AssertionFailedError  	102	6	replace
907	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]        RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(NodeUtil.isExpressionNode(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(NodeUtil.isExpressionNode(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.isExpressionNode(allCatchNodes)||    NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	169	None	replace
908	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.getLastChild()!=  n);  Node  elseBlock  =  allCatchNodes.getLastChild();  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.getLastChild()!=  n);  Node  elseBlock  =  allCatchNodes.getLastChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.getLastChild()!=  n);  Node  elseBlock  =  allCatchNodes.getLastChild();	          Node    elseBlock    =    allCatchNodes.getLastChild();    Node    elseBlock    =    allCatchNodes.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
909	[BUG]  [BUGGY]  if(!NodeUtil.isCatchBlock(allCatchNodes)&&!NodeUtil.hasFinally(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!NodeUtil.isCatchBlock(allCatchNodes)&&!NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!NodeUtil.isCatchBlock(allCatchNodes)&&!NodeUtil.hasFinally(allCatchNodes))  {	  if(!NodeUtil.hasFinally(allCatchNodes)||!NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
910	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  ||!NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	if(allCatchNodes!=  null  ||!NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {	  if(allCatchNodes!=    null    ||!NodeUtil.hasFinally(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	144	2	replace
911	[BUG]  [BUGGY]  if(allCatchNodes!=  null  ||!NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  ||!NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=  null  ||!NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {	  if(allCatchNodes!=    null    ||!NodeUtil.hasFinally(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	144	2	replace
912	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  If(NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.  [CE]  ')'  expected  [FE]          RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(NodeUtil.isExpressionNode(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  If(NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(NodeUtil.isExpressionNode(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  If(NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.	  if(NodeUtil.hasCatchHandler(allCatchNodes)&&    NodeUtil.hasFinally(allCatchNodes))    {    If(NodeUtil.hasCatchHandler(allCatchNodes)&&    NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  ')'  expected	55	None	replace
913	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getLastChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  elseBlock  =  allCatchNodes.getLastChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  }  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  elseBlock  =  allCatchNodes.getLastChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  }	          Node    elseBlock    =    allCatchNodes.getLastChild();    Node    elseBlock    =    allCatchNodes.getLastChild();    if(NodeUtil.hasFinally(allCatchNodes))    {    Preconditions.checkState(allCatchNodes.hasOneChild());    }    	non-compiled	[CE]  illegal  start  of  type	177	None	replace
914	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  elseBlock  =  allCatchNodes.getLastChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	Node  elseBlock  =  allCatchNodes.getLastChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());	          Node    elseBlock    =    allCatchNodes.getLastChild();    Node    elseBlock    =    allCatchNodes.getLastChild();    if(NodeUtil.hasFinally(allCatchNodes))    {    Preconditions.checkState(allCatchNodes.hasOneChild());    }    	compilable	  [FE]  RuntimeException  	177	6	replace
915	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getLastChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  [FE]  RuntimeException  [FE]                AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  elseBlock  =  allCatchNodes.getLastChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  elseBlock  =  allCatchNodes.getLastChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());	          Node    elseBlock    =    allCatchNodes.getLastChild();    Node    elseBlock    =    allCatchNodes.getLastChild();    if(NodeUtil.hasFinally(allCatchNodes))    {    Preconditions.checkState(allCatchNodes.hasOneChild());    }    	compilable	  [FE]  RuntimeException  	177	6	replace
916	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.get(0)!=  null,  exitType);  [CE]  illegal  start  of  type  [FE]          RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.get(0)!=  null,  exitType);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.get(0)!=  null,  exitType);	  Preconditions.checkState(allCatchNodes.get(0)!=    null);    	non-compiled	[CE]  illegal  start  of  type	202	None	replace
917	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty());  Node  allCatchNodes.hasOneChild());  [CE]  ';'  expected  [FE]              RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty());  Node  allCatchNodes.hasOneChild());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.isEmpty());  Node  allCatchNodes.hasOneChild());	          Preconditions.checkState(allCatchNodes.hasOneChild());    Node    allCatchNodes.hasOneChild());    	non-compiled	[CE]  ';'  expected	82	None	replace
918	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  node  =  allCatchNodes.getLastChild();  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  node  =  allCatchNodes.getLastChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  elseBlock  =  allCatchNodes.getFirstChild();  node  =  allCatchNodes.getLastChild();	          Node    elseBlock    =    allCatchNodes.getLastChild();    Node    otherBlock    =    allCatchNodes.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
919	[BUG]  [BUGGY]  if(allCatchNodes.isEmpty()  ||!NodeUtil.hasFinally(allCatchNodes))  {  if(AllCatchNodes.isEmpty()  ||!NodeUtil.hasFinally(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes.isEmpty()  ||!NodeUtil.hasFinally(allCatchNodes))  {  if(AllCatchNodes.isEmpty()  ||!NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes.isEmpty()    ||!NodeUtil.hasFinally(allCatchNodes))    {    if(AllCatchNodes.isEmpty()  ||!NodeUtil.hasFinally(allCatchNodes))  {	  	non-compiled	[CE]  illegal  start  of  expression	206	None	add
920	[BUG]  [BUGGY]  if(allCatchNodes!=  null  &&!NodeUtil.isExpressionNode(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  &&!NodeUtil.isExpressionNode(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=  null  &&!NodeUtil.isExpressionNode(allCatchNodes))  {	  if(allCatchNodes!=    null    &&!NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	142	None	replace
921	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  &&!NodeUtil.hasFinally(allCatchNodes)||!NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	if(allCatchNodes!=  null  &&!NodeUtil.hasFinally(allCatchNodes)||!NodeUtil.hasFinally(allCatchNodes))  {	  if(allCatchNodes!=    null    &&!NodeUtil.hasFinally(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	142	6	replace
922	[BUG]  [BUGGY]  if(allCatchNodes!=  null  &&!NodeUtil.hasFinally(allCatchNodes)||!NodeUtil.hasFinally(allCatchNodes))  {  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  &&!NodeUtil.hasFinally(allCatchNodes)||!NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=  null  &&!NodeUtil.hasFinally(allCatchNodes)||!NodeUtil.hasFinally(allCatchNodes))  {	  if(allCatchNodes!=    null    &&!NodeUtil.hasFinally(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	142	6	replace
923	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty(),  tryMinimizeExits,  exitType);  [CE]  illegal  start  of  type  [FE]              RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty(),  tryMinimizeExits,  exitType);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty(),  tryMinimizeExits,  exitType);	  Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty(),    exitType);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
924	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.get(n  -  1);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  elseBlock  =  allCatchNodes.get(n  -  1);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  elseBlock  =  allCatchNodes.get(n  -  1);	  Node    elseBlock    =    allCatchNodes.get(n);    	non-compiled	[CE]  illegal  start  of  type	219	None	replace
925	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.get(n  +  1);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  elseBlock  =  allCatchNodes.get(n  +  1);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  elseBlock  =  allCatchNodes.get(n  +  1);	  Node    elseBlock    =    allCatchNodes.get(n);    	non-compiled	[CE]  illegal  start  of  type	219	None	replace
926	[BUG]  [BUGGY]  if(allCatchNodes!=  null  ||!NodeUtil.hasCatchHandler(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  ||!NodeUtil.hasCatchHandler(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=    null    ||!NodeUtil.hasCatchHandler(allCatchNodes))    {    Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);	  	non-compiled	[CE]  illegal  start  of  expression	162	None	add
927	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n).getFirstChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  [CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n).getFirstChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(n).getFirstChild();  if(NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.hasFinally(allCatchNodes))    {    Node    allCatchNodes    =    NodeUtil.getCatchBlock(allCatchNodes).getFirstChild();    if(NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	185	None	replace
928	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes).getFirstChild();  if(NodeUtil.hasFinally(allCatchNodes)  [CE]  ')'  expected  [FE]            RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes).getFirstChild();  if(NodeUtil.hasFinally(allCatchNodes)  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes).getFirstChild();  if(NodeUtil.hasFinally(allCatchNodes)	  if(NodeUtil.hasFinally(allCatchNodes))    {    Node    allCatchNodes    =    NodeUtil.getCatchBlock(allCatchNodes).getFirstChild();    if(NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  ')'  expected	185	None	replace
929	[BUG]  [BUGGY]  if(allCatchNodes.hasOneChild()  ||!NodeUtil.hasFinally(allCatchNodes))  {  if(AllCatchNodes.hasOneChild()  ||!NodeUtil.hasFinally(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes.hasOneChild()  ||!NodeUtil.hasFinally(allCatchNodes))  {  if(AllCatchNodes.hasOneChild()  ||!NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes.hasOneChild()    ||!NodeUtil.hasFinally(allCatchNodes))    {    if(AllCatchNodes.hasOneChild()  ||!NodeUtil.hasFinally(allCatchNodes))  {	  	non-compiled	[CE]  illegal  start  of  expression	60	None	add
930	[BUG]  [BUGGY]  if(NodeUtil.isCatchHandler(allCatchNodes)&&  tryMinimizeExits(allCatchNodes.getFirstChild(),  exitType,  labelName))  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(NodeUtil.isCatchHandler(allCatchNodes)&&  tryMinimizeExits(allCatchNodes.getFirstChild(),  exitType,  labelName))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(NodeUtil.isCatchHandler(allCatchNodes)&&  tryMinimizeExits(allCatchNodes.getFirstChild(),  exitType,  labelName))  {	  if(!NodeUtil.hasCatchHandler(allCatchNodes)&&    tryMinimizeExits(allCatchNodes.getFirstChild(),    exitType,    labelName))    {    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
931	[BUG]  [BUGGY]  Node  finallyBlock  =  allCatchNodes.getFirstChild(),  tryBlock,  escapeType);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  finallyBlock  =  allCatchNodes.getFirstChild(),  tryBlock,  escapeType);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  finallyBlock  =  allCatchNodes.getFirstChild(),  tryBlock,  escapeType);	  Node    finallyBlock    =    allCatchNodes.getFirstChild(),    tryBlock);    	non-compiled	[CE]  ';'  expected	94	None	replace
932	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty()  &&  allCatchNodes.isEmpty();  [CE]  ')'  expected  [FE]                RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty()  &&  allCatchNodes.isEmpty();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty()  &&  allCatchNodes.isEmpty();	          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty();    	non-compiled	[CE]  ')'  expected	123	None	replace
933	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty(),  allCatchNodes.isEmpty());  [CE]  illegal  start  of  type  [FE]                  RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty(),  allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty(),  allCatchNodes.isEmpty());	          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty();    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
934	[BUG]  [BUGGY]  Node  catchNode  =  allCatchNodes.removeLastChild();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  catchNode  =  allCatchNodes.removeLastChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  catchNode  =  allCatchNodes.removeLastChild();	  Node    catchNode    =    allCatchNodes.removeFirstChild();    	non-compiled	[CE]  illegal  start  of  type	198	None	replace
935	[BUG]  [BUGGY]  if(NodeUtil.isCatchBlock(allCatchNodes)||  NodeUtil.isCatchBlock(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(NodeUtil.isCatchBlock(allCatchNodes)||  NodeUtil.isCatchBlock(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(NodeUtil.isCatchBlock(allCatchNodes)||  NodeUtil.isCatchBlock(allCatchNodes))  {	  if(NodeUtil.isCatchBlock(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	225	None	replace
936	[BUG]  [BUGGY]  if(NodeUtil.isCatchBlock(allCatchNodes)&&  NodeUtil.hasFinally(n))  {  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(NodeUtil.isCatchBlock(allCatchNodes)&&  NodeUtil.hasFinally(n))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(NodeUtil.isCatchBlock(allCatchNodes)&&  NodeUtil.hasFinally(n))  {	  if(NodeUtil.isCatchBlock(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	225	None	replace
937	[BUG]  [BUGGY]  if(allCatchNodes.hasOneChild()  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {  if(AllCatchNodes.hasOneChild()  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes.hasOneChild()  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {  if(AllCatchNodes.hasOneChild()  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes.hasOneChild()    ||    NodeUtil.hasCatchHandler(allCatchNodes))    {    if(AllCatchNodes.hasOneChild()  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {	  	non-compiled	[CE]  illegal  start  of  expression	126	None	add
938	[BUG]  [BUGGY]  if(AllCatchNodes!=  null  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [CE]  cannot  find  symbol  AllCatchNodes  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(AllCatchNodes!=  null  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(AllCatchNodes!=  null  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(allCatchNodes!=    null    ||    NodeUtil.hasCatchHandler(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol  AllCatchNodes	112	None	replace
939	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  &&!allCatchNodes.hasChildren()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	if(allCatchNodes!=  null  &&!allCatchNodes.hasChildren()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(!allCatchNodes.hasChildren()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    	compilable	  [FE]  AssertionFailedError  	209	6	replace
940	[BUG]  [BUGGY]  if(allCatchNodes!=  null  &&!allCatchNodes.hasChildren()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  &&!allCatchNodes.hasChildren()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=  null  &&!allCatchNodes.hasChildren()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(!allCatchNodes.hasChildren()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    	compilable	  [FE]  AssertionFailedError  	209	6	replace
941	[BUG]  [BUGGY]  if(allCatchNodes.isSynthetic()  ||  allCatchNodes.hasChildren()  ||!NodeUtil.hasFinally(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes.isSynthetic()  ||  allCatchNodes.hasChildren()  ||!NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes.isSynthetic()  ||  allCatchNodes.hasChildren()  ||!NodeUtil.hasFinally(allCatchNodes))  {	  if(allCatchNodes.hasOneChild()    ||!NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
942	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes!=  null;  allCatchNodes.isEmpty());  [CE]  ')'  expected  [FE]        RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes!=  null;  allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes!=  null;  allCatchNodes.isEmpty());	  Preconditions.checkState(allCatchNodes!=    null    ||    allCatchNodes.isEmpty());    	non-compiled	[CE]  ')'  expected	75	None	replace
943	[BUG]  [BUGGY]  if(allCatchNodes.hasOneChild()  &&  NodeUtil.hasFinally(allCatchNodes))  {  if(allCatchNodes.hasChild()  &&  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes.hasOneChild()  &&  NodeUtil.hasFinally(allCatchNodes))  {  if(allCatchNodes.hasChild()  &&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes.hasOneChild()    &&    NodeUtil.hasFinally(allCatchNodes))    {    if(allCatchNodes.hasChild()  &&  NodeUtil.hasFinally(allCatchNodes))  {	  	non-compiled	[CE]  illegal  start  of  expression	130	None	add
944	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(allCatchNodes)&&  NodeUtil.isExpressionNode(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(NodeUtil.isExpressionNode(allCatchNodes)&&  NodeUtil.isExpressionNode(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(NodeUtil.isExpressionNode(allCatchNodes)&&  NodeUtil.isExpressionNode(allCatchNodes))  {	  if(NodeUtil.hasFinally(allCatchNodes)||    NodeUtil.isExpressionNode(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
945	[BUG]  [BUGGY]  if(allCatchNodes!=  null  &&  NodeUtil.isCatchHandler(allCatchNodes)||  n.isTree())  {  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  &&  NodeUtil.isCatchHandler(allCatchNodes)||  n.isTree())  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=  null  &&  NodeUtil.isCatchHandler(allCatchNodes)||  n.isTree())  {	  if(allCatchNodes!=    null    &&    NodeUtil.hasCatchHandler(allCatchNodes)||    n.isTree())    {    	non-compiled	[CE]  cannot  find  symbol	204	None	replace
946	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(NodeUtil.hasCatchHandler(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	if(NodeUtil.hasCatchHandler(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.hasCatchHandler(allCatchNodes)||    NodeUtil.hasFinally(allCatchNodes))    {    if(NodeUtil.hasCatchHandler(allCatchNodes)||    NodeUtil.hasFinally(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	124	2	replace
947	[BUG]  [BUGGY]  if(NodeUtil.hasCatchHandler(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [FE]  RuntimeException  [FE]        RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(NodeUtil.hasCatchHandler(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(NodeUtil.hasCatchHandler(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.hasCatchHandler(allCatchNodes)||    NodeUtil.hasFinally(allCatchNodes))    {    if(NodeUtil.hasCatchHandler(allCatchNodes)||    NodeUtil.hasFinally(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	124	2	replace
948	[BUG]  [BUGGY]          Node    elseBlock    =    allCatchNodes.getLastChild();    Node  otherBlock  =  allCatchNodes.getLastChild();  Node  otherBlock  =  allCatchNodes.getLastChild();  Node  otherBlock  =  allCatchNodes.getLastChild();  [CE]  variable  otherBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Node    elseBlock    =    allCatchNodes.getLastChild();    Node  otherBlock  =  allCatchNodes.getLastChild();  Node  otherBlock  =  allCatchNodes.getLastChild();  Node  otherBlock  =  allCatchNodes.getLastChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	                Node        elseBlock        =        allCatchNodes.getLastChild();        Node    otherBlock    =    allCatchNodes.getLastChild();    Node  otherBlock  =  allCatchNodes.getLastChild();  Node  otherBlock  =  allCatchNodes.getLastChild();	  	non-compiled	[CE]  variable  otherBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	30	None	add
949	[BUG]  [BUGGY]          Node    elseBlock    =    allCatchNodes.getLastChild();    Node  otherBlock  =  allCatchNodes.getLastChild();  Node  elseBlock  =  anyCatchNodes.getLastChild();  Node  otherBlock  =  allCatchNodes.getLastChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Node    elseBlock    =    allCatchNodes.getLastChild();    Node  otherBlock  =  allCatchNodes.getLastChild();  Node  elseBlock  =  anyCatchNodes.getLastChild();  Node  otherBlock  =  allCatchNodes.getLastChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	                Node        elseBlock        =        allCatchNodes.getLastChild();        Node    otherBlock    =    allCatchNodes.getLastChild();    Node  elseBlock  =  anyCatchNodes.getLastChild();  Node  otherBlock  =  allCatchNodes.getLastChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	30	None	add
950	[BUG]  [BUGGY]          Node    elseBlock    =    allCatchNodes.getLastChild();    Node  otherBlock  =  allCatchNodes.getLastChild();  Node  elseBlock  =  allCatchNodes.getLastChild();  Node  otherBlock  =  allCatchNodes.getLastChild()  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Node    elseBlock    =    allCatchNodes.getLastChild();    Node  otherBlock  =  allCatchNodes.getLastChild();  Node  elseBlock  =  allCatchNodes.getLastChild();  Node  otherBlock  =  allCatchNodes.getLastChild()  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	                Node        elseBlock        =        allCatchNodes.getLastChild();        Node    otherBlock    =    allCatchNodes.getLastChild();    Node  elseBlock  =  allCatchNodes.getLastChild();  Node  otherBlock  =  allCatchNodes.getLastChild()	  	non-compiled	[CE]  ';'  expected	30	None	add
951	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n).getFirstChild();  if(!NodeUtil.hasFinally(allCatchNodes))  {  [CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n).getFirstChild();  if(!NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(n).getFirstChild();  if(!NodeUtil.hasFinally(allCatchNodes))  {	  if(!NodeUtil.hasFinally(allCatchNodes))    {    Node    allCatchNodes    =    NodeUtil.getCatchBlock(allCatchNodes).getFirstChild();    if(!NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	183	None	replace
952	[BUG]  [BUGGY]  Preconditions.checkArgument(allCatchNodes.isEmpty());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes.isEmpty());  [CE]  illegal  start  of  type  [FE]        RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkArgument(allCatchNodes.isEmpty());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkArgument(allCatchNodes.isEmpty());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes.isEmpty());	          Preconditions.checkState(allCatchNodes.isEmpty());    Node    allCatchNodes    =    NodeUtil.getCatchBlock(allCatchNodes.isEmpty());    	non-compiled	[CE]  illegal  start  of  type	171	None	replace
953	[BUG]  [BUGGY]  if(allCatchNodes.hasChildren()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  if(AllCatchNodes.hasChildren()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes.hasChildren()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  if(AllCatchNodes.hasChildren()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes.hasChildren()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    if(AllCatchNodes.hasChildren()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {	  	non-compiled	[CE]  illegal  start  of  expression	128	None	add
954	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getLastChild();  if(NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  elseBlock  =  allCatchNodes.getLastChild();  if(NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  }  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  elseBlock  =  allCatchNodes.getLastChild();  if(NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  }	          Node    elseBlock    =    allCatchNodes.getLastChild();    Node    elseBlock    =    allCatchNodes.getLastChild();    if(NodeUtil.hasCatchHandler(allCatchNodes))    {    Preconditions.checkState(allCatchNodes.hasOneChild());    }    	non-compiled	[CE]  illegal  start  of  type	178	None	replace
955	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  elseBlock  =  allCatchNodes.getLastChild();  if(NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	Node  elseBlock  =  allCatchNodes.getLastChild();  if(NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());	          Node    elseBlock    =    allCatchNodes.getLastChild();    Node    elseBlock    =    allCatchNodes.getLastChild();    if(NodeUtil.hasCatchHandler(allCatchNodes))    {    Preconditions.checkState(allCatchNodes.hasOneChild());    }    	compilable	  [FE]  AssertionFailedError  	178	2	replace
956	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getLastChild();  if(NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  elseBlock  =  allCatchNodes.getLastChild();  if(NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  elseBlock  =  allCatchNodes.getLastChild();  if(NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());	          Node    elseBlock    =    allCatchNodes.getLastChild();    Node    elseBlock    =    allCatchNodes.getLastChild();    if(NodeUtil.hasCatchHandler(allCatchNodes))    {    Preconditions.checkState(allCatchNodes.hasOneChild());    }    	compilable	  [FE]  AssertionFailedError  	178	2	replace
957	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  }  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  }	          Node    elseBlock    =    allCatchNodes.getLastChild();    Node    elseBlock    =    allCatchNodes.getLastChild();    if(NodeUtil.hasCatchHandler(allCatchNodes))    {    Preconditions.checkState(allCatchNodes.hasOneChild());    }    	non-compiled	[CE]  illegal  start  of  type	178	None	replace
958	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.mayHaveSideEffects(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	if(!NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.mayHaveSideEffects(allCatchNodes))  {	  if(!NodeUtil.hasCatchHandler(allCatchNodes)&&    NodeUtil.isFinally(allCatchNodes))    {    	compilable	  [FE]  AssertionFailedError  	139	6	replace
959	[BUG]  [BUGGY]  if(!NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.mayHaveSideEffects(allCatchNodes))  {  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.mayHaveSideEffects(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.mayHaveSideEffects(allCatchNodes))  {	  if(!NodeUtil.hasCatchHandler(allCatchNodes)&&    NodeUtil.isFinally(allCatchNodes))    {    	compilable	  [FE]  AssertionFailedError  	139	6	replace
960	[BUG]  [BUGGY]  if(!NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.isVar(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.isVar(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.isVar(allCatchNodes))  {	  if(!NodeUtil.hasCatchHandler(allCatchNodes)&&    NodeUtil.isFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	139	None	replace
961	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes.isEmpty()  ||  allCatchNodes.hasChildren())  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	if(allCatchNodes.isEmpty()  ||  allCatchNodes.hasChildren())  {	  if(allCatchNodes.hasOneChild()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    if(allCatchNodes.isOneChild()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    	compilable	  [FE]  AssertionFailedError  	3	2	replace
962	[BUG]  [BUGGY]  if(allCatchNodes.isEmpty()  ||  allCatchNodes.hasChildren())  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes.isEmpty()  ||  allCatchNodes.hasChildren())  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes.isEmpty()  ||  allCatchNodes.hasChildren())  {	  if(allCatchNodes.hasOneChild()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    if(allCatchNodes.isOneChild()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    	compilable	  [FE]  AssertionFailedError  	3	2	replace
963	[BUG]  [BUGGY]          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  thenBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  anyCatchNodes.getFirstChild();  Node  thenBlock  =  allCatchNodes.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  thenBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  anyCatchNodes.getFirstChild();  Node  thenBlock  =  allCatchNodes.getFirstChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	                Node        elseBlock        =        allCatchNodes.getFirstChild();        Node    thenBlock    =    allCatchNodes.getFirstChild();    Node  elseBlock  =  anyCatchNodes.getFirstChild();  Node  thenBlock  =  allCatchNodes.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	99	None	add
964	[BUG]  [BUGGY]          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  thenBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  nodes.getFirstChild();  Node  thenBlock  =  allCatchNodes.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  thenBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  nodes.getFirstChild();  Node  thenBlock  =  allCatchNodes.getFirstChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	                Node        elseBlock        =        allCatchNodes.getFirstChild();        Node    thenBlock    =    allCatchNodes.getFirstChild();    Node  elseBlock  =  nodes.getFirstChild();  Node  thenBlock  =  allCatchNodes.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	99	None	add
965	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkArgument(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	                Preconditions.checkState(allCatchNodes.isEmpty()        ||        allCatchNodes.isEmpty());        Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkArgument(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());	  	compilable	  [FE]  RuntimeException  	118	6	add
966	[BUG]  [BUGGY]          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkArgument(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkArgument(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	                Preconditions.checkState(allCatchNodes.isEmpty()        ||        allCatchNodes.isEmpty());        Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkArgument(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());	  	compilable	  [FE]  RuntimeException  	118	6	add
967	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(n,  exitType);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(n,  exitType);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(n,  exitType);	  Node    allCatchNodes    =    NodeUtil.getAllCatchNodes(n);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
968	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes);  if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes);  if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes);  if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.hasFinally(allCatchNodes))    {    Node    allCatchNodes    =    NodeUtil.getCatchBlock(allCatchNodes);    if(NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	184	None	replace
969	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!allCatchNodes.isEmpty()  ||!NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	if(!allCatchNodes.isEmpty()  ||!NodeUtil.hasFinally(allCatchNodes))  {	  if(allCatchNodes.isEmpty()    ||!NodeUtil.hasFinally(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	207	2	replace
970	[BUG]  [BUGGY]  if(!allCatchNodes.isEmpty()  ||!NodeUtil.hasFinally(allCatchNodes))  {  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!allCatchNodes.isEmpty()  ||!NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!allCatchNodes.isEmpty()  ||!NodeUtil.hasFinally(allCatchNodes))  {	  if(allCatchNodes.isEmpty()    ||!NodeUtil.hasFinally(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	207	2	replace
971	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  &&  allCatchNodes.isEmpty()  ||!NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	if(allCatchNodes!=  null  &&  allCatchNodes.isEmpty()  ||!NodeUtil.hasFinally(allCatchNodes))  {	  if(allCatchNodes.isEmpty()    ||!NodeUtil.hasFinally(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	207	6	replace
972	[BUG]  [BUGGY]  if(allCatchNodes!=  null  &&  allCatchNodes.isEmpty()  ||!NodeUtil.hasFinally(allCatchNodes))  {  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  &&  allCatchNodes.isEmpty()  ||!NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=  null  &&  allCatchNodes.isEmpty()  ||!NodeUtil.hasFinally(allCatchNodes))  {	  if(allCatchNodes.isEmpty()    ||!NodeUtil.hasFinally(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	207	6	replace
973	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes.isEmpty()  ||!NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	if(allCatchNodes.isEmpty()  ||!NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {	  if(allCatchNodes.isEmpty()    ||!NodeUtil.hasFinally(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	207	6	replace
974	[BUG]  [BUGGY]  if(allCatchNodes.isEmpty()  ||!NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes.isEmpty()  ||!NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes.isEmpty()  ||!NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {	  if(allCatchNodes.isEmpty()    ||!NodeUtil.hasFinally(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	207	6	replace
975	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if(!NodeUtil.hasFinally(allCatchNodes))  {  [CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if(!NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if(!NodeUtil.hasFinally(allCatchNodes))  {	  if(!NodeUtil.hasFinally(allCatchNodes))    {    Node    allCatchNodes    =    NodeUtil.getCatchBlock(allCatchNodes);    if(!NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	182	None	replace
976	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes);  if(!NodeUtil.isFinally(allCatchNodes))  {  [CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes);  if(!NodeUtil.isFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes);  if(!NodeUtil.isFinally(allCatchNodes))  {	  if(!NodeUtil.hasFinally(allCatchNodes))    {    Node    allCatchNodes    =    NodeUtil.getCatchBlock(allCatchNodes);    if(!NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	182	None	replace
977	[BUG]  [BUGGY]          Node    elseBlock    =    allCatchNodes.getLastChild();    Node  anotherBlock  =  allCatchNodes.getLastChild();  Node  elseBlock  =  anyCatchNodes.getLastChild();  Node  anotherBlock  =  allCatchNodes.getLastChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Node    elseBlock    =    allCatchNodes.getLastChild();    Node  anotherBlock  =  allCatchNodes.getLastChild();  Node  elseBlock  =  anyCatchNodes.getLastChild();  Node  anotherBlock  =  allCatchNodes.getLastChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	                Node        elseBlock        =        allCatchNodes.getLastChild();        Node    anotherBlock    =    allCatchNodes.getLastChild();    Node  elseBlock  =  anyCatchNodes.getLastChild();  Node  anotherBlock  =  allCatchNodes.getLastChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	34	None	add
978	[BUG]  [BUGGY]          Node    elseBlock    =    allCatchNodes.getLastChild();    Node  anotherBlock  =  allCatchNodes.getLastChild();  Node  elseBlock  =  allCatchNodes.getLastChild();  Node  anotherBlock  =  allCatchNodes.getLastChild()  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Node    elseBlock    =    allCatchNodes.getLastChild();    Node  anotherBlock  =  allCatchNodes.getLastChild();  Node  elseBlock  =  allCatchNodes.getLastChild();  Node  anotherBlock  =  allCatchNodes.getLastChild()  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	                Node        elseBlock        =        allCatchNodes.getLastChild();        Node    anotherBlock    =    allCatchNodes.getLastChild();    Node  elseBlock  =  allCatchNodes.getLastChild();  Node  anotherBlock  =  allCatchNodes.getLastChild()	  	non-compiled	[CE]  ';'  expected	34	None	add
979	[BUG]  [BUGGY]          Node    elseBlock    =    allCatchNodes.getLastChild();    Node  anotherBlock  =  allCatchNodes.getLastChild();  Node  elseBlock  =  otherCatchNodes.getLastChild();  Node  anotherBlock  =  allCatchNodes.getLastChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Node    elseBlock    =    allCatchNodes.getLastChild();    Node  anotherBlock  =  allCatchNodes.getLastChild();  Node  elseBlock  =  otherCatchNodes.getLastChild();  Node  anotherBlock  =  allCatchNodes.getLastChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	                Node        elseBlock        =        allCatchNodes.getLastChild();        Node    anotherBlock    =    allCatchNodes.getLastChild();    Node  elseBlock  =  otherCatchNodes.getLastChild();  Node  anotherBlock  =  allCatchNodes.getLastChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	34	None	add
980	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.hasMoreChild());  [CE]  illegal  start  of  type  [FE]            RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.hasMoreChild());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.hasMoreChild());	  Preconditions.checkState(allCatchNodes.hasFinally());    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
981	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n,  tryBlock);  [CE]  illegal  start  of  type  [FE]              RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n,  tryBlock);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.isEmpty());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n,  tryBlock);	          Preconditions.checkState(allCatchNodes.isEmpty());    Node    allCatchNodes    =    NodeUtil.getCatchBlock(n);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
982	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(otherCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  [CE]  cannot  find  symbol  otherCatchNodes  [FE]        AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(otherCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(otherCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    elseBlock    =    allCatchNodes.getFirstChild();    if(NodeUtil.hasFinally(allCatchNodes))    {    Preconditions.checkState(allCatchNodes.hasOneChild());    	non-compiled	[CE]  cannot  find  symbol  otherCatchNodes	146	None	replace
983	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(n,  labelName);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(n,  labelName);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(n,  labelName);	  Node    allCatchNodes    =    NodeUtil.getAllCatchNodes(labelName);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
984	[BUG]  [BUGGY]  if(allCatchNodes!=  null  &&  NodeUtil.isCatchHandler(allCatchNodes)&&  tryMinimizeExits(allCatchNodes.getFirstChild(),  exitType,  labelName);  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  &&  NodeUtil.isCatchHandler(allCatchNodes)&&  tryMinimizeExits(allCatchNodes.getFirstChild(),  exitType,  labelName);  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=  null  &&  NodeUtil.isCatchHandler(allCatchNodes)&&  tryMinimizeExits(allCatchNodes.getFirstChild(),  exitType,  labelName);	  if(allCatchNodes!=    null    &&    NodeUtil.hasCatchHandler(allCatchNodes)||    tryMinimizeExits(allCatchNodes.getFirstChild(),    exitType,    labelName);    	non-compiled	[CE]  ')'  expected	168	None	replace
985	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Preconditions.checkState(allCatchNodes.isEmpty());    Preconditions.checkState(allCatchNodes.isEmpty());  Preconditions.checkArgument(allCatchNodes.isEmpty());  Preconditions.checkArgument(allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	                Preconditions.checkState(allCatchNodes.isEmpty());        Preconditions.checkState(allCatchNodes.isEmpty());    Preconditions.checkArgument(allCatchNodes.isEmpty());  Preconditions.checkArgument(allCatchNodes.isEmpty());	  	compilable	  [FE]  RuntimeException  	19	6	add
986	[BUG]  [BUGGY]          Preconditions.checkState(allCatchNodes.isEmpty());    Preconditions.checkState(allCatchNodes.isEmpty());  Preconditions.checkArgument(allCatchNodes.isEmpty());  Preconditions.checkArgument(allCatchNodes.isEmpty());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Preconditions.checkState(allCatchNodes.isEmpty());    Preconditions.checkState(allCatchNodes.isEmpty());  Preconditions.checkArgument(allCatchNodes.isEmpty());  Preconditions.checkArgument(allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	                Preconditions.checkState(allCatchNodes.isEmpty());        Preconditions.checkState(allCatchNodes.isEmpty());    Preconditions.checkArgument(allCatchNodes.isEmpty());  Preconditions.checkArgument(allCatchNodes.isEmpty());	  	compilable	  [FE]  RuntimeException  	19	6	add
987	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Preconditions.checkState(allCatchNodes.isEmpty());    Preconditions.checkState(allCatchNodes.isEmpty());  Preconditions.checkState(allCatchNodes.hasOneChild());  Preconditions.checkState(allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	                Preconditions.checkState(allCatchNodes.isEmpty());        Preconditions.checkState(allCatchNodes.isEmpty());    Preconditions.checkState(allCatchNodes.hasOneChild());  Preconditions.checkState(allCatchNodes.isEmpty());	  	compilable	  [FE]  RuntimeException  	19	6	add
988	[BUG]  [BUGGY]          Preconditions.checkState(allCatchNodes.isEmpty());    Preconditions.checkState(allCatchNodes.isEmpty());  Preconditions.checkState(allCatchNodes.hasOneChild());  Preconditions.checkState(allCatchNodes.isEmpty());  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Preconditions.checkState(allCatchNodes.isEmpty());    Preconditions.checkState(allCatchNodes.isEmpty());  Preconditions.checkState(allCatchNodes.hasOneChild());  Preconditions.checkState(allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	                Preconditions.checkState(allCatchNodes.isEmpty());        Preconditions.checkState(allCatchNodes.isEmpty());    Preconditions.checkState(allCatchNodes.hasOneChild());  Preconditions.checkState(allCatchNodes.isEmpty());	  	compilable	  [FE]  RuntimeException  	19	6	add
989	[BUG]  [BUGGY]  if(!NodeUtil.isCatchHandler(allCatchNodes)||!NodeUtil.hasFinally(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!NodeUtil.isCatchHandler(allCatchNodes)||!NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!NodeUtil.isCatchHandler(allCatchNodes)||!NodeUtil.hasFinally(allCatchNodes))  {	  if(!NodeUtil.hasCatchHandler(allCatchNodes)||!NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
990	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty()  &&  tryMinimizeExits(n,  exitType,  labelName));  [CE]  illegal  start  of  type  [FE]          RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty()  &&  tryMinimizeExits(n,  exitType,  labelName));  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty()  &&  tryMinimizeExits(n,  exitType,  labelName));	  Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty()    &&    tryMinimizeExits(tryBlock,    exitType,    labelName));    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
991	[BUG]  [BUGGY]          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkArgument(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkArgument(AllCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkArgument(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [CE]  cannot  find  symbol  AllCatchNodes  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkArgument(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkArgument(AllCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkArgument(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	                Preconditions.checkState(allCatchNodes.isEmpty()        ||        allCatchNodes.isEmpty());        Preconditions.checkArgument(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkArgument(AllCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkArgument(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());	  	non-compiled	[CE]  cannot  find  symbol  AllCatchNodes	213	None	add
992	[BUG]  [BUGGY]          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkArgument(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkArgument(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkArgument(allCatchNodes.isEmpty()  ||  allCatchNodes.  [CE]  <identifier>  expected  [FE]      RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkArgument(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkArgument(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkArgument(allCatchNodes.isEmpty()  ||  allCatchNodes.  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	                Preconditions.checkState(allCatchNodes.isEmpty()        ||        allCatchNodes.isEmpty());        Preconditions.checkArgument(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkArgument(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkArgument(allCatchNodes.isEmpty()  ||  allCatchNodes.	  	non-compiled	[CE]  <identifier>  expected	213	None	add
993	[BUG]  [BUGGY]  if(!NodeUtil.isExpressionNode(allCatchNodes)&&  NodeUtil.hasFinally(n))  {  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!NodeUtil.isExpressionNode(allCatchNodes)&&  NodeUtil.hasFinally(n))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!NodeUtil.isExpressionNode(allCatchNodes)&&  NodeUtil.hasFinally(n))  {	  if(!NodeUtil.isExpressionNode(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
994	[BUG]  [BUGGY]  if(!NodeUtil.isExpressionNode(allCatchNodes)&&  n.getFirstChild().getType()  ==  Token.EXPR_RESULT)  {  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!NodeUtil.isExpressionNode(allCatchNodes)&&  n.getFirstChild().getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!NodeUtil.isExpressionNode(allCatchNodes)&&  n.getFirstChild().getType()  ==  Token.EXPR_RESULT)  {	  if(!NodeUtil.isExpressionNode(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
995	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.isEmpty());	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    elseBlock    =    allCatchNodes.getFirstChild();    if(NodeUtil.hasFinally(allCatchNodes))    {    Preconditions.checkState(allCatchNodes.isEmpty());    	compilable	  [FE]  RuntimeException  	226	6	replace
996	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.isEmpty());  [FE]  RuntimeException  [FE]        AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.isEmpty());	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    elseBlock    =    allCatchNodes.getFirstChild();    if(NodeUtil.hasFinally(allCatchNodes))    {    Preconditions.checkState(allCatchNodes.isEmpty());    	compilable	  [FE]  RuntimeException  	226	6	replace
997	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.isEmpty());  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.isEmpty());  }  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.isEmpty());  }	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    elseBlock    =    allCatchNodes.getFirstChild();    if(NodeUtil.hasFinally(allCatchNodes))    {    Preconditions.checkState(allCatchNodes.isEmpty());    	non-compiled	[CE]  illegal  start  of  type	226	None	replace
998	[BUG]  [BUGGY]  if(NodeUtil.hasCatchHandler(allCatchNodes))  {  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(all  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(NodeUtil.hasCatchHandler(allCatchNodes))  {  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(all  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(NodeUtil.hasCatchHandler(allCatchNodes))  {  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(all	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    elseBlock    =    allCatchNodes.getFirstChild();    if(NodeUtil.hasFinally(allCatchNodes))    {    Preconditions.checkState(allCatchNodes.isEmpty());    	non-compiled	[CE]  ')'  expected	226	None	replace
999	[BUG]  [BUGGY]  if(NodeUtil.hasCatchHandler(allCatchNodes))  {  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(allCatch  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(NodeUtil.hasCatchHandler(allCatchNodes))  {  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(allCatch  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(NodeUtil.hasCatchHandler(allCatchNodes))  {  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(allCatch	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    elseBlock    =    allCatchNodes.getFirstChild();    if(NodeUtil.hasFinally(allCatchNodes))    {    Preconditions.checkState(allCatchNodes.isEmpty());    	non-compiled	[CE]  ')'  expected	226	None	replace
1000	[BUG]  [BUGGY]          Node    elseBlock    =    allCatchNodes.getLastChild();    Node  thenBlock  =  allCatchNodes.getLastChild();  Node  elseBlock  =  allCatchNodes.getLastChild();  Node  thenBlock  =  allCatchNodes.getLastChild()  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Node    elseBlock    =    allCatchNodes.getLastChild();    Node  thenBlock  =  allCatchNodes.getLastChild();  Node  elseBlock  =  allCatchNodes.getLastChild();  Node  thenBlock  =  allCatchNodes.getLastChild()  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	                Node        elseBlock        =        allCatchNodes.getLastChild();        Node    thenBlock    =    allCatchNodes.getLastChild();    Node  elseBlock  =  allCatchNodes.getLastChild();  Node  thenBlock  =  allCatchNodes.getLastChild()	  	non-compiled	[CE]  ';'  expected	32	None	add
1001	[BUG]  [BUGGY]          Node    elseBlock    =    allCatchNodes.getLastChild();    Node  thenBlock  =  allCatchNodes.getLastChild();  Node  elseBlock  =  nodes.getLastChild();  Node  thenBlock  =  allCatchNodes.getLastChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Node    elseBlock    =    allCatchNodes.getLastChild();    Node  thenBlock  =  allCatchNodes.getLastChild();  Node  elseBlock  =  nodes.getLastChild();  Node  thenBlock  =  allCatchNodes.getLastChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	                Node        elseBlock        =        allCatchNodes.getLastChild();        Node    thenBlock    =    allCatchNodes.getLastChild();    Node  elseBlock  =  nodes.getLastChild();  Node  thenBlock  =  allCatchNodes.getLastChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	32	None	add
1002	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(NodeUtil.isStatementBlock(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	if(NodeUtil.isStatementBlock(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.hasFinally(allCatchNodes)&&    NodeUtil.hasFinally(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	9	6	replace
1003	[BUG]  [BUGGY]  if(NodeUtil.isStatementBlock(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(NodeUtil.isStatementBlock(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(NodeUtil.isStatementBlock(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.hasFinally(allCatchNodes)&&    NodeUtil.hasFinally(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	9	6	replace
1004	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty());  Node  allCatchNodes.clear());  [CE]  ';'  expected  [FE]            RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty());  Node  allCatchNodes.clear());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.isEmpty());  Node  allCatchNodes.clear());	          Preconditions.checkState(allCatchNodes.isEmpty());    Node    allCatchNodes.isEmpty());    	non-compiled	[CE]  ';'  expected	22	None	replace
1005	[BUG]  [BUGGY]  Node  allCatchNodes.clear();  [CE]  ';'  expected  [FE]              RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  allCatchNodes.clear();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes.clear();	          Preconditions.checkState(allCatchNodes.isEmpty());    Node    allCatchNodes.isEmpty());    	non-compiled	[CE]  ';'  expected	22	None	replace
1006	[BUG]  [BUGGY]  if(allCatchNodes.hasOneChild()  ||  NodeUtil.hasFinally(allCatchNodes))  {  if(AllCatchNodes.hasOneChild()  ||  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes.hasOneChild()  ||  NodeUtil.hasFinally(allCatchNodes))  {  if(AllCatchNodes.hasOneChild()  ||  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes.hasOneChild()    ||    NodeUtil.hasFinally(allCatchNodes))    {    if(AllCatchNodes.hasOneChild()  ||  NodeUtil.hasFinally(allCatchNodes))  {	  	non-compiled	[CE]  illegal  start  of  expression	14	None	add
1007	[BUG]  [BUGGY]  if(allCatchNodes!=  null  &&  NodeUtil.hasFinally(allCatchNodes)||  n.isTree())  {  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  &&  NodeUtil.hasFinally(allCatchNodes)||  n.isTree())  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=  null  &&  NodeUtil.hasFinally(allCatchNodes)||  n.isTree())  {	  if(allCatchNodes!=    null    &&    NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	114	None	replace
1008	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  &&  NodeUtil.hasFinally(allCatchNodes)||  n.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	if(allCatchNodes!=  null  &&  NodeUtil.hasFinally(allCatchNodes)||  n.getType()  ==  Token.EXPR_RESULT)  {	  if(allCatchNodes!=    null    &&    NodeUtil.hasFinally(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	114	6	replace
1009	[BUG]  [BUGGY]  if(allCatchNodes!=  null  &&  NodeUtil.hasFinally(allCatchNodes)||  n.getType()  ==  Token.EXPR_RESULT)  {  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  &&  NodeUtil.hasFinally(allCatchNodes)||  n.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=  null  &&  NodeUtil.hasFinally(allCatchNodes)||  n.getType()  ==  Token.EXPR_RESULT)  {	  if(allCatchNodes!=    null    &&    NodeUtil.hasFinally(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	114	6	replace
1010	[BUG]  [BUGGY]  if(NodeUtil.isCatchHandler(allCatchNodes)||  NodeUtil.isFinally(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(NodeUtil.isCatchHandler(allCatchNodes)||  NodeUtil.isFinally(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(NodeUtil.isCatchHandler(allCatchNodes)||  NodeUtil.isFinally(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.hasCatchHandler(allCatchNodes)&&    NodeUtil.isFinally(allCatchNodes)||    NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	218	None	replace
1011	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  &&!NodeUtil.hasCatchHandler(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  &&!NodeUtil.hasCatchHandler(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.isEmpty()  &&!NodeUtil.hasCatchHandler(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);	  if(!NodeUtil.hasCatchHandler(allCatchNodes))    {    Node    allCatchNodes    =    NodeUtil.getCatchHandler(allCatchNodes);    	non-compiled	[CE]  ';'  expected	53	None	replace
1012	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  &&!NodeUtil.hasCatchHandler(allCatchNodes));  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  &&!NodeUtil.hasCatchHandler(allCatchNodes));  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.isEmpty()  &&!NodeUtil.hasCatchHandler(allCatchNodes));	  if(!NodeUtil.hasCatchHandler(allCatchNodes))    {    Node    allCatchNodes    =    NodeUtil.getCatchHandler(allCatchNodes);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
1013	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.hasCatchHandler(allCatchNodes));  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(!NodeUtil.hasCatchHandler(allCatchNodes));  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(!NodeUtil.hasCatchHandler(allCatchNodes));  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);	  if(!NodeUtil.hasCatchHandler(allCatchNodes))    {    Node    allCatchNodes    =    NodeUtil.getCatchHandler(allCatchNodes);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
1014	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes.isEmpty()  ||!NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	if(allCatchNodes.isEmpty()  ||!NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(allCatchNodes.hasOneChild()    ||!NodeUtil.hasCatchHandler(allCatchNodes))    {    	compilable	  [FE]  AssertionFailedError  	86	6	replace
1015	[BUG]  [BUGGY]  if(allCatchNodes.isEmpty()  ||!NodeUtil.hasCatchHandler(allCatchNodes))  {  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes.isEmpty()  ||!NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes.isEmpty()  ||!NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(allCatchNodes.hasOneChild()    ||!NodeUtil.hasCatchHandler(allCatchNodes))    {    	compilable	  [FE]  AssertionFailedError  	86	6	replace
1016	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes);  [CE]  illegal  start  of  type  [FE]            RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes);  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes);	  if(NodeUtil.hasCatchHandler(allCatchNodes)&&    NodeUtil.hasFinally(allCatchNodes))    {    Node    allCatchNodes    =    NodeUtil.getCatchHandler(allCatchNodes)&&    NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
1017	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  Preconditions.checkState(anyCatchNodes.hasOneChild());  [CE]  cannot  find  symbol  anyCatchNodes  [FE]                AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  Preconditions.checkState(anyCatchNodes.hasOneChild());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  Preconditions.checkState(anyCatchNodes.hasOneChild());	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    elseBlock    =    allCatchNodes.getFirstChild();    if(NodeUtil.hasFinally(allCatchNodes))    {    Preconditions.checkState(anyCatchNodes.hasOneChild());    	non-compiled	[CE]  cannot  find  symbol  anyCatchNodes	150	None	replace
1018	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  Preconditions.checkState(anyCatchNodes.hasOneChild());  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  Preconditions.checkState(anyCatchNodes.hasOneChild());  }  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  Preconditions.checkState(anyCatchNodes.hasOneChild());  }	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    elseBlock    =    allCatchNodes.getFirstChild();    if(NodeUtil.hasFinally(allCatchNodes))    {    Preconditions.checkState(anyCatchNodes.hasOneChild());    	non-compiled	[CE]  illegal  start  of  type	150	None	replace
1019	[BUG]  [BUGGY]  Node  c  =  allCatchNodes.get(i);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  c  =  allCatchNodes.get(i);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  c  =  allCatchNodes.get(i);	  Node    c    =    allCatchNodes.get(0);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
1020	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(c,  allCatchNodes);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(c,  allCatchNodes);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(c,  allCatchNodes);	  Node    allCatchNodes    =    NodeUtil.getAllCatchNodes(tryBlock,    allCatchNodes);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
1021	[BUG]  [BUGGY]  if(allCatchNodes!=  null  &&!NodeUtil.hasCatchBlock(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  &&!NodeUtil.hasCatchBlock(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=  null  &&!NodeUtil.hasCatchBlock(allCatchNodes))  {	  if(allCatchNodes!=    null    &&!NodeUtil.hasCatchHandler(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	161	None	replace
1022	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty());  preconditions.checkState(allCatchNodes.isEmpty());  [CE]  illegal  start  of  type  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty());  preconditions.checkState(allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.isEmpty());  preconditions.checkState(allCatchNodes.isEmpty());	          Preconditions.checkState(allCatchNodes.isEmpty());    Preconditions.checkState(allCatchNodes.isEmpty());    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
1023	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.get(0).isEmpty());  [CE]  illegal  start  of  type  [FE]      RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.get(0).isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.get(0).isEmpty());	          Preconditions.checkState(allCatchNodes.isEmpty());    Preconditions.checkState(allCatchNodes.isEmpty());    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
1024	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  ||  exitType  ==  exitType);  [CE]  illegal  start  of  type  [FE]        RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  ||  exitType  ==  exitType);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.isEmpty()  ||  exitType  ==  exitType);	  Preconditions.checkState(allCatchNodes.isEmpty(),    exitType);    	non-compiled	[CE]  illegal  start  of  type	179	None	replace
1025	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  ||  exitType!=  exitType);  [CE]  illegal  start  of  type  [FE]          RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  ||  exitType!=  exitType);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.isEmpty()  ||  exitType!=  exitType);	  Preconditions.checkState(allCatchNodes.isEmpty(),    exitType);    	non-compiled	[CE]  illegal  start  of  type	179	None	replace
1026	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  &&!NodeUtil.hasFinally(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  [CE]  ';'  expected  [FE]        RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  &&!NodeUtil.hasFinally(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.isEmpty()  &&!NodeUtil.hasFinally(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);	  if(!NodeUtil.hasFinally(allCatchNodes))    {    Node    allCatchNodes    =    NodeUtil.getCatchBlock(n);    	non-compiled	[CE]  ';'  expected	199	None	replace
1027	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  &&!NodeUtil.hasFinally(allCatchNodes));  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  [CE]  illegal  start  of  type  [FE]          RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  &&!NodeUtil.hasFinally(allCatchNodes));  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.isEmpty()  &&!NodeUtil.hasFinally(allCatchNodes));  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);	  if(!NodeUtil.hasFinally(allCatchNodes))    {    Node    allCatchNodes    =    NodeUtil.getCatchBlock(n);    	non-compiled	[CE]  illegal  start  of  type	199	None	replace
1028	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  &&!NodeUtil.hasFinally(allCatchNodes));  [CE]  illegal  start  of  type  [FE]            RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  &&!NodeUtil.hasFinally(allCatchNodes));  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.isEmpty()  &&!NodeUtil.hasFinally(allCatchNodes));	  if(!NodeUtil.hasFinally(allCatchNodes))    {    Node    allCatchNodes    =    NodeUtil.getCatchBlock(n);    	non-compiled	[CE]  illegal  start  of  type	199	None	replace
1029	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  &&!NodeUtil.hasFinally(allCatchNodes) ")  {  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  [CE]  unclosed  string  literal  [FE]              RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  &&!NodeUtil.hasFinally(allCatchNodes) ")  {  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.isEmpty()  &&!NodeUtil.hasFinally(allCatchNodes) ")  {  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);	  if(!NodeUtil.hasFinally(allCatchNodes))    {    Node    allCatchNodes    =    NodeUtil.getCatchBlock(n);    	non-compiled	[CE]  unclosed  string  literal	199	None	replace
1030	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(falseBlock);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(falseBlock);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(falseBlock);	  Node    allCatchNodes    =    NodeUtil.getAllCatchNodes(tryBlock);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
1031	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Preconditions.checkState(allCatchNodes.hasOneChild());    Preconditions.checkNotNull(allCatchNodes.hasOneChild());  Preconditions.checkArgument(allCatchNodes.hasOneChild());  Preconditions.checkNotNull(allCatchNodes.hasOneChild());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	                Preconditions.checkState(allCatchNodes.hasOneChild());        Preconditions.checkNotNull(allCatchNodes.hasOneChild());    Preconditions.checkArgument(allCatchNodes.hasOneChild());  Preconditions.checkNotNull(allCatchNodes.hasOneChild());	  	compilable	  [FE]  RuntimeException  	222	2	add
1032	[BUG]  [BUGGY]          Preconditions.checkState(allCatchNodes.hasOneChild());    Preconditions.checkNotNull(allCatchNodes.hasOneChild());  Preconditions.checkArgument(allCatchNodes.hasOneChild());  Preconditions.checkNotNull(allCatchNodes.hasOneChild());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Preconditions.checkState(allCatchNodes.hasOneChild());    Preconditions.checkNotNull(allCatchNodes.hasOneChild());  Preconditions.checkArgument(allCatchNodes.hasOneChild());  Preconditions.checkNotNull(allCatchNodes.hasOneChild());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	                Preconditions.checkState(allCatchNodes.hasOneChild());        Preconditions.checkNotNull(allCatchNodes.hasOneChild());    Preconditions.checkArgument(allCatchNodes.hasOneChild());  Preconditions.checkNotNull(allCatchNodes.hasOneChild());	  	compilable	  [FE]  RuntimeException  	222	2	add
1033	[BUG]  [BUGGY]          Preconditions.checkState(allCatchNodes.hasOneChild());    Preconditions.checkNotNull(allCatchNodes.hasOneChild());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  [CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Preconditions.checkState(allCatchNodes.hasOneChild());    Preconditions.checkNotNull(allCatchNodes.hasOneChild());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	                Preconditions.checkState(allCatchNodes.hasOneChild());        Preconditions.checkNotNull(allCatchNodes.hasOneChild());    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);	  	non-compiled	[CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	222	None	add
1034	[BUG]  [BUGGY]  if(!NodeUtil.isCatchHandler(allCatchNodes)&&  allCatchNodes.isTree())  {  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!NodeUtil.isCatchHandler(allCatchNodes)&&  allCatchNodes.isTree())  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!NodeUtil.isCatchHandler(allCatchNodes)&&  allCatchNodes.isTree())  {	  if(!NodeUtil.hasCatchHandler(allCatchNodes)&&    n.isTree())    {    	non-compiled	[CE]  cannot  find  symbol	203	None	replace
1035	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty());  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [CE]  illegal  start  of  type  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty());  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.isEmpty());  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());	          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
1036	[BUG]  [BUGGY]  if(allCatchNodes!=  null  &&  NodeUtil.isCatchHandler(allCatchNodes)&&  tryMinimizeExits(allCatchNodes.getFirstChild(),  exitType,  labelName))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  &&  NodeUtil.isCatchHandler(allCatchNodes)&&  tryMinimizeExits(allCatchNodes.getFirstChild(),  exitType,  labelName))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=  null  &&  NodeUtil.isCatchHandler(allCatchNodes)&&  tryMinimizeExits(allCatchNodes.getFirstChild(),  exitType,  labelName))  {	  if(allCatchNodes!=    null    &&    NodeUtil.hasCatchHandler(allCatchNodes)||    tryMinimizeExits(allCatchNodes.getFirstChild(),    exitType,    labelName))    {    	non-compiled	[CE]  cannot  find  symbol	117	None	replace
1037	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    elseBlock    =    allCatchNodes.getFirstChild();    if(NodeUtil.hasCatchHandler(allCatchNodes))    {    Preconditions.checkState(allCatchNodes.hasOneChild());    	compilable	  [FE]  AssertionFailedError  	147	2	replace
1038	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    elseBlock    =    allCatchNodes.getFirstChild();    if(NodeUtil.hasCatchHandler(allCatchNodes))    {    Preconditions.checkState(allCatchNodes.hasOneChild());    	compilable	  [FE]  AssertionFailedError  	147	2	replace
1039	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatch  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatch  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatch	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    elseBlock    =    allCatchNodes.getFirstChild();    if(NodeUtil.hasCatchHandler(allCatchNodes))    {    Preconditions.checkState(allCatchNodes.hasOneChild());    	non-compiled	[CE]  ')'  expected	147	None	replace
1040	[BUG]  [BUGGY]          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  otherBlock  =  allCatchNodes.getFirstChild();  Node  otherBlock  =  allCatchNodes.getFirstChild();  Node  otherBlock  =  allCatchNodes.getFirstChild();  [CE]  variable  otherBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  otherBlock  =  allCatchNodes.getFirstChild();  Node  otherBlock  =  allCatchNodes.getFirstChild();  Node  otherBlock  =  allCatchNodes.getFirstChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	                Node        elseBlock        =        allCatchNodes.getFirstChild();        Node    otherBlock    =    allCatchNodes.getFirstChild();    Node  otherBlock  =  allCatchNodes.getFirstChild();  Node  otherBlock  =  allCatchNodes.getFirstChild();	  	non-compiled	[CE]  variable  otherBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	97	None	add
1041	[BUG]  [BUGGY]          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  otherBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  anyCatchNodes.getFirstChild();  Node  otherBlock  =  allCatchNodes.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  otherBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  anyCatchNodes.getFirstChild();  Node  otherBlock  =  allCatchNodes.getFirstChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	                Node        elseBlock        =        allCatchNodes.getFirstChild();        Node    otherBlock    =    allCatchNodes.getFirstChild();    Node  elseBlock  =  anyCatchNodes.getFirstChild();  Node  otherBlock  =  allCatchNodes.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	97	None	add
1042	[BUG]  [BUGGY]          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  otherBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  Node  otherBlock  =  allCatchNodes.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  otherBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  Node  otherBlock  =  allCatchNodes.getFirstChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	                Node        elseBlock        =        allCatchNodes.getFirstChild();        Node    otherBlock    =    allCatchNodes.getFirstChild();    Node  elseBlock  =  n.getFirstChild();  Node  otherBlock  =  allCatchNodes.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	97	None	add
1043	[BUG]  [BUGGY]  if(!NodeUtil.isFinally(allCatchNodes)&&!NodeUtil.mayHaveSideEffects(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!NodeUtil.isFinally(allCatchNodes)&&!NodeUtil.mayHaveSideEffects(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!NodeUtil.isFinally(allCatchNodes)&&!NodeUtil.mayHaveSideEffects(allCatchNodes))  {	  if(!NodeUtil.hasFinally(allCatchNodes))    {    if(!NodeUtil.isFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
1044	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  if(AllCatchNodes!=  null  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  if(AllCatchNodes!=  null  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  if(AllCatchNodes!=  null  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(allCatchNodes!=    null    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    Node    allCatchNodes    =    NodeUtil.getCatchHandler(allCatchNodes);    if(allCatchNodes!=    null    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    	non-compiled	[CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	158	None	replace
1045	[BUG]  [BUGGY]  Preconditions.checkArgument(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  AllCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [CE]  not  a  statement  [FE]        RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkArgument(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  AllCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkArgument(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  AllCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());	          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    AllCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    	non-compiled	[CE]  not  a  statement	164	None	replace
1046	[BUG]  [BUGGY]  if(allCatchNodes!=  null  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  }  else  {  tryMinimizeExits  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  }  else  {  tryMinimizeExits  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=  null  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  }  else  {  tryMinimizeExits	  if(allCatchNodes!=    null    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    Node    allCatchNodes    =    NodeUtil.getCatchHandler(allCatchNodes);    	non-compiled	[CE]  ';'  expected	159	None	replace
1047	[BUG]  [BUGGY]  if(allCatchNodes!=  null  &&  NodeUtil.hasCatchBlock(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(allCatchNodes!=  null  &&  NodeUtil.hasCatchBlock(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  }  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=  null  &&  NodeUtil.hasCatchBlock(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  }	  if(allCatchNodes!=    null    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    Node    allCatchNodes    =    NodeUtil.getCatchHandler(allCatchNodes);    	non-compiled	[CE]  illegal  start  of  type	159	None	replace
1048	[BUG]  [BUGGY]  Preconditions.checkArgument(allCatchNodes.isEmpty()  ||  n.isTree());  [CE]  illegal  start  of  type  [FE]            RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkArgument(allCatchNodes.isEmpty()  ||  n.isTree());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkArgument(allCatchNodes.isEmpty()  ||  n.isTree());	  Preconditions.checkArgument(allCatchNodes.isEmpty());    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
1049	[BUG]  [BUGGY]  Node  c  =  allCatchNodes.removeChild(n);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  c  =  allCatchNodes.removeChild(n);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  c  =  allCatchNodes.removeChild(n);	  Node    c    =    allCatchNodes.removeFirstChild();    	non-compiled	[CE]  illegal  start  of  type	200	None	replace
1050	[BUG]  [BUGGY]  Node  c  =  allCatchNodes.getFirstChild();  Preconditions.checkState(c  <  allCatchNodes.hasOneChild());  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  c  =  allCatchNodes.getFirstChild();  Preconditions.checkState(c  <  allCatchNodes.hasOneChild());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  c  =  allCatchNodes.getFirstChild();  Preconditions.checkState(c  <  allCatchNodes.hasOneChild());	          Node    c    =    allCatchNodes.getFirstChild();    Node    c    =    allCatchNodes.getFirstChild();    Preconditions.checkState(allCatchNodes.hasOneChild());    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
1051	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.size()  <=  0);  [CE]  illegal  start  of  type  [FE]        RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.size()  <=  0);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.size()  <=  0);	  Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.size()    >    0);    	non-compiled	[CE]  illegal  start  of  type	167	None	replace
1052	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.get(0)  ==  null,  exitType);  [CE]  illegal  start  of  type  [FE]        RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.get(0)  ==  null,  exitType);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.get(0)  ==  null,  exitType);	  Preconditions.checkState(allCatchNodes.get(0)    ==    null);    	non-compiled	[CE]  illegal  start  of  type	201	None	replace
1053	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkNotNull(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkNotNull(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkNotNull(allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	                Preconditions.checkState(allCatchNodes.isEmpty()        ||        allCatchNodes.isEmpty());        Preconditions.checkNotNull(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkNotNull(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkNotNull(allCatchNodes.isEmpty());	  	compilable	  [FE]  RuntimeException  	215	6	add
1054	[BUG]  [BUGGY]          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkNotNull(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkNotNull(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkNotNull(allCatchNodes.isEmpty());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkNotNull(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkNotNull(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkNotNull(allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	                Preconditions.checkState(allCatchNodes.isEmpty()        ||        allCatchNodes.isEmpty());        Preconditions.checkNotNull(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkNotNull(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkNotNull(allCatchNodes.isEmpty());	  	compilable	  [FE]  RuntimeException  	215	6	add
1055	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkNotNull(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkNotNull(allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	                Preconditions.checkState(allCatchNodes.isEmpty()        ||        allCatchNodes.isEmpty());        Preconditions.checkNotNull(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkNotNull(allCatchNodes.isEmpty());	  	compilable	  [FE]  RuntimeException  	215	6	add
1056	[BUG]  [BUGGY]          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkNotNull(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkNotNull(allCatchNodes.isEmpty());  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkNotNull(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkNotNull(allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	                Preconditions.checkState(allCatchNodes.isEmpty()        ||        allCatchNodes.isEmpty());        Preconditions.checkNotNull(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkNotNull(allCatchNodes.isEmpty());	  	compilable	  [FE]  RuntimeException  	215	6	add
1057	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkNotNull(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkNotNull(allCatchNodes.isEmpty());  Preconditions.checkNotNull(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	                Preconditions.checkState(allCatchNodes.isEmpty()        ||        allCatchNodes.isEmpty());        Preconditions.checkNotNull(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkNotNull(allCatchNodes.isEmpty());  Preconditions.checkNotNull(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());	  	compilable	  [FE]  RuntimeException  	215	6	add
1058	[BUG]  [BUGGY]          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkNotNull(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkNotNull(allCatchNodes.isEmpty());  Preconditions.checkNotNull(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]          Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkNotNull(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkNotNull(allCatchNodes.isEmpty());  Preconditions.checkNotNull(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	                Preconditions.checkState(allCatchNodes.isEmpty()        ||        allCatchNodes.isEmpty());        Preconditions.checkNotNull(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkNotNull(allCatchNodes.isEmpty());  Preconditions.checkNotNull(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());	  	compilable	  [FE]  RuntimeException  	215	6	add
1059	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getLastChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  Preconditions.checkState(allCatch  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getLastChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  Preconditions.checkState(allCatch  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getLastChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  Preconditions.checkState(allCatch	          Node    elseBlock    =    allCatchNodes.getLastChild();    Node    elseBlock    =    allCatchNodes.getLastChild();    if(NodeUtil.hasFinally(allCatchNodes))    {    Preconditions.checkState(allCatchNodes.hasOneChild());    	non-compiled	[CE]  ')'  expected	174	None	replace
1060	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!allCatchNodes.isEmpty()  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	if(!allCatchNodes.isEmpty()  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(allCatchNodes.isEmpty()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	133	2	replace
1061	[BUG]  [BUGGY]  if(!allCatchNodes.isEmpty()  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(!allCatchNodes.isEmpty()  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!allCatchNodes.isEmpty()  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(allCatchNodes.isEmpty()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	133	2	replace
1062	[BUG]  [BUGGY]  if(AllCatchNodes.isEmpty()  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {  [CE]  cannot  find  symbol  AllCatchNodes  [FE]      AssertionFailedError    [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  if(AllCatchNodes.isEmpty()  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(AllCatchNodes.isEmpty()  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(allCatchNodes.isEmpty()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol  AllCatchNodes	133	None	replace
1063	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty());  Node  allCatchNodes.hasOneChild();  [CE]  ';'  expected  [FE]        RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty());  Node  allCatchNodes.hasOneChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.isEmpty());  Node  allCatchNodes.hasOneChild();	          Preconditions.checkState(allCatchNodes.hasOneChild());    Node    allCatchNodes.hasOneChild();    	non-compiled	[CE]  ';'  expected	165	None	replace
1064	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  allCatchNodes.removeChild();  [CE]  ';'  expected  [FE]          RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  allCatchNodes.removeChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.hasOneChild());  Node  allCatchNodes.removeChild();	          Preconditions.checkState(allCatchNodes.hasOneChild());    Node    allCatchNodes.hasOneChild();    	non-compiled	[CE]  ';'  expected	165	None	replace
1065	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.hasChildren());  Node  allCatchNodes.removeChild();  [CE]  ';'  expected  [FE]            RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.hasChildren());  Node  allCatchNodes.removeChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.hasChildren());  Node  allCatchNodes.removeChild();	          Preconditions.checkState(allCatchNodes.hasOneChild());    Node    allCatchNodes.hasOneChild();    	non-compiled	[CE]  ';'  expected	165	None	replace
1066	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  allCatchNodes.addChildToFront(allCatchNodes);  [CE]  ';'  expected  [FE]              RuntimeException      [CONTEXT]      tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);      [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  allCatchNodes.addChildToFront(allCatchNodes);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.hasOneChild());  Node  allCatchNodes.addChildToFront(allCatchNodes);	          Preconditions.checkState(allCatchNodes.hasOneChild());    Node    allCatchNodes.hasOneChild();    	non-compiled	[CE]  ';'  expected	165	None	replace
