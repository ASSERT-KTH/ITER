bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  [BUGGY]    Node  elseBlock  =  finallyBlock.getNext();  [BUGGY]  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	add	    Node  elseBlock  =  finallyBlock.getNext();		compilable	  [FE]  AssertionFailedError  	4	2	add
2	[BUG]  [BUGGY]    Node  elseBlock  =  finallyBlock.getNext();  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  [BUGGY]    Node  elseBlock  =  finallyBlock.getNext();  [BUGGY]  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	    Node  elseBlock  =  finallyBlock.getNext();		compilable	  [FE]  AssertionFailedError  	4	2	add
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  [BUGGY]    Node  elseBlock  =  finallyBlock.getFirstChild();  [BUGGY]  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	add	    Node  elseBlock  =  finallyBlock.getFirstChild();		compilable	  [FE]  AssertionFailedError  	4	2	add
4	[BUG]  [BUGGY]    Node  elseBlock  =  finallyBlock.getFirstChild();  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  [BUGGY]    Node  elseBlock  =  finallyBlock.getFirstChild();  [BUGGY]  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	    Node  elseBlock  =  finallyBlock.getFirstChild();		compilable	  [FE]  AssertionFailedError  	4	2	add
5	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  [BUGGY]    Node  elseBlock  =  allCatchNodes.getFirstChild();  [BUGGY]  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	add	    Node  elseBlock  =  allCatchNodes.getFirstChild();		compilable	  [FE]  AssertionFailedError  	4	2	add
6	[BUG]  [BUGGY]    Node  elseBlock  =  allCatchNodes.getFirstChild();  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  [BUGGY]    Node  elseBlock  =  allCatchNodes.getFirstChild();  [BUGGY]  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	    Node  elseBlock  =  allCatchNodes.getFirstChild();		compilable	  [FE]  AssertionFailedError  	4	2	add
7	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError  [CONTEXT]  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  [BUGGY]    Node  elseBlock  =  finallyBlock.getLastChild();  [BUGGY]  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	add	    Node  elseBlock  =  finallyBlock.getLastChild();		compilable	  [FE]  AssertionFailedError  	4	2	add
8	[BUG]  [BUGGY]    Node  elseBlock  =  finallyBlock.getLastChild();  [FE]  AssertionFailedError  [FE]          AssertionFailedError  [CONTEXT]  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  [BUGGY]    Node  elseBlock  =  finallyBlock.getLastChild();  [BUGGY]  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	    Node  elseBlock  =  finallyBlock.getLastChild();		compilable	  [FE]  AssertionFailedError  	4	2	add
9	[BUG]  [BUGGY]    Node  finallyBlock  =  finallyBlock.getNext();  [CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]            AssertionFailedError  [CONTEXT]  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  [BUGGY]    Node  finallyBlock  =  finallyBlock.getNext();  [BUGGY]  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	    Node  finallyBlock  =  finallyBlock.getNext();		non-compiled	[CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	4	None	add
10	[BUG]  [BUGGY]    Node  labelName  =  finallyBlock.getString();  [CE]  variable  labelName  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]              AssertionFailedError  [CONTEXT]  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  [BUGGY]    Node  labelName  =  finallyBlock.getString();  [BUGGY]  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	    Node  labelName  =  finallyBlock.getString();		non-compiled	[CE]  variable  labelName  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	4	None	add
11	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    AssertionFailedError  [CONTEXT]  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  [BUGGY]  tryMinimizeExits(n,  exitType,  labelName);  [BUGGY]  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	add	tryMinimizeExits(n,  exitType,  labelName);	tryMinimizeExits(finallyBlock,  exitType,  labelName);  	compilable	  [FE]  StackOverflowError  	3	2	replace
12	[BUG]  [BUGGY]  tryMinimizeExits(n,  exitType,  labelName);  [FE]  StackOverflowError  [FE]    AssertionFailedError  [CONTEXT]  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  [BUGGY]  tryMinimizeExits(n,  exitType,  labelName);  [BUGGY]  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(n,  exitType,  labelName);	tryMinimizeExits(finallyBlock,  exitType,  labelName);  	compilable	  [FE]  StackOverflowError  	3	2	replace
13	[BUG]  [BUGGY]  tryMinimizeExits(finallyBlock,  labelName,  exitType);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError  [CONTEXT]  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  [BUGGY]  tryMinimizeExits(finallyBlock,  labelName,  exitType);  [BUGGY]  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(finallyBlock,  labelName,  exitType);	tryMinimizeExits(finallyBlock,  exitType,  labelName);  	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	3	None	replace
14	[BUG]  [BUGGY]  tryMinimizeExits(n,  finallyBlock,  labelName);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError  [CONTEXT]  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  [BUGGY]  tryMinimizeExits(n,  finallyBlock,  labelName);  [BUGGY]  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(n,  finallyBlock,  labelName);	tryMinimizeExits(finallyBlock,  exitType,  labelName);  	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	3	None	replace
15	[BUG]  [BUGGY]  tryMinimizeExits(labelName,  exitType,  exitType);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError  [CONTEXT]  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  [BUGGY]  tryMinimizeExits(labelName,  exitType,  exitType);  [BUGGY]  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(labelName,  exitType,  exitType);	tryMinimizeExits(finallyBlock,  exitType,  labelName);  	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	3	None	replace
16	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  [BUGGY]    Node  elseBlock  =  n.getFirstChild();  [BUGGY]  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	add	    Node  elseBlock  =  n.getFirstChild();		compilable	  [FE]  AssertionFailedError  	4	2	add
17	[BUG]  [BUGGY]    Node  elseBlock  =  n.getFirstChild();  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  [BUGGY]    Node  elseBlock  =  n.getFirstChild();  [BUGGY]  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	    Node  elseBlock  =  n.getFirstChild();		compilable	  [FE]  AssertionFailedError  	4	2	add
18	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  [BUGGY]    if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  [BUGGY]  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	add	    if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }		compilable	  [FE]  AssertionFailedError  	4	2	add
19	[BUG]  [BUGGY]    if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  [BUGGY]    if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  [BUGGY]  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	    if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }		compilable	  [FE]  AssertionFailedError  	4	2	add
20	[BUG]  [BUGGY]    if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  labelName);  }  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError  [CONTEXT]  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  [BUGGY]    if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  labelName);  }  [BUGGY]  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	    if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  labelName);  }		non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	4	None	add
21	[BUG]  [BUGGY]  tryMinimizeExits(finallyBlock,  labelName);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError  [CONTEXT]  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  [BUGGY]  tryMinimizeExits(finallyBlock,  labelName);  [BUGGY]  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(finallyBlock,  labelName);	tryMinimizeExits(finallyBlock,  exitType,  labelName);  	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	3	None	replace
22	[BUG]  [BUGGY]  tryMinimizeExits(falseBlock,  exitType,  labelName);  [CE]  cannot  find  symbol  falseBlock  [FE]      AssertionFailedError  [CONTEXT]  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  [BUGGY]  tryMinimizeExits(falseBlock,  exitType,  labelName);  [BUGGY]  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(falseBlock,  exitType,  labelName);	tryMinimizeExits(finallyBlock,  exitType,  labelName);  	non-compiled	[CE]  cannot  find  symbol  falseBlock	3	None	replace
23	[BUG]  [BUGGY]  tryMinimizeExits(finallyBlock,  escapeType,  labelName);  [CE]  cannot  find  symbol  escapeType  [FE]        AssertionFailedError  [CONTEXT]  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  [BUGGY]  tryMinimizeExits(finallyBlock,  escapeType,  labelName);  [BUGGY]  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(finallyBlock,  escapeType,  labelName);	tryMinimizeExits(finallyBlock,  exitType,  labelName);  	non-compiled	[CE]  cannot  find  symbol  escapeType	3	None	replace
24	[BUG]  [BUGGY]  tryMinimizeExits(lastBlock,  exitType,  labelName);  [CE]  cannot  find  symbol  lastBlock  [FE]    AssertionFailedError  [CONTEXT]  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  [BUGGY]  tryMinimizeExits(lastBlock,  exitType,  labelName);  [BUGGY]  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(lastBlock,  exitType,  labelName);	tryMinimizeExits(finallyBlock,  exitType,  labelName);  	non-compiled	[CE]  cannot  find  symbol  lastBlock	3	None	replace
25	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  [BUGGY]    if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  [BUGGY]  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	add	    if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }		compilable	  [FE]  AssertionFailedError  	4	2	add
26	[BUG]  [BUGGY]    if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  [BUGGY]    if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  [BUGGY]  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	    if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }		compilable	  [FE]  AssertionFailedError  	4	2	add
27	[BUG]  [BUGGY]    Node  elseBlock  =  allCatchNodes.getFirstChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  [CE]  cannot  find  symbol  catchCodeBlock  [FE]      AssertionFailedError  [CONTEXT]  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  [BUGGY]    Node  elseBlock  =  allCatchNodes.getFirstChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  [BUGGY]  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	    Node  elseBlock  =  allCatchNodes.getFirstChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);		non-compiled	[CE]  cannot  find  symbol  catchCodeBlock	4	None	add
