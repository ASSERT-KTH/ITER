bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Node  elseBlock  =  node.getFirstChild();  [CE]  cannot  find  symbol  node  [FE]        AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  elseBlock  =  node.getFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  elseBlock  =  node.getFirstChild();	          Node    elseBlock    =    n.getFirstChild();    Node    elseBlock    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  node	48	None	replace
2	[BUG]  [BUGGY]  Node  elseBlock  =  finallyBlock!=  null?  finallyBlock.getFirstChild()  :  finalBlock.getFirstChild();  [CE]  cannot  find  symbol  finalBlock  [FE]        AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  elseBlock  =  finallyBlock!=  null?  finallyBlock.getFirstChild()  :  finalBlock.getFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  elseBlock  =  finallyBlock!=  null?  finallyBlock.getFirstChild()  :  finalBlock.getFirstChild();	          Node    elseBlock    =    finallyBlock.getFirstChild();    Node    elseBlock    =    finallyBlock.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  finalBlock	27	None	replace
3	[BUG]  [BUGGY]  tryMaximizeExits(labelName,  exitType,  finallyBlock);  [CE]  cannot  find  symbol  [FE]        StackOverflowError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMaximizeExits(labelName,  exitType,  finallyBlock);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMaximizeExits(labelName,  exitType,  finallyBlock);	  tryMaximizeExits(finallyBlock,    exitType,    labelName);    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
4	[BUG]  [BUGGY]  tryMaximizeExits(n,  exitType,  labelName);  [CE]  cannot  find  symbol  [FE]          StackOverflowError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMaximizeExits(n,  exitType,  labelName);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMaximizeExits(n,  exitType,  labelName);	  tryMaximizeExits(finallyBlock,    exitType,    labelName);    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
5	[BUG]  [BUGGY]  tryMaximizeExits(n,  finallyBlock,  labelName);  [CE]  cannot  find  symbol  [FE]            StackOverflowError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMaximizeExits(n,  finallyBlock,  labelName);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMaximizeExits(n,  finallyBlock,  labelName);	  tryMaximizeExits(finallyBlock,    exitType,    labelName);    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
6	[BUG]  [BUGGY]  Node  elseBlock  =  finallyBlock.getFirstChild();  Node  thenBlock  =  thenBlock.getFirstChild();  [CE]  variable  thenBlock  might  not  have  been  initialized  [FE]      AssertionFailedError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  elseBlock  =  finallyBlock.getFirstChild();  Node  thenBlock  =  thenBlock.getFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  elseBlock  =  finallyBlock.getFirstChild();  Node  thenBlock  =  thenBlock.getFirstChild();	          Node    elseBlock    =    n.getFirstChild();    Node    thenBlock    =    n.getFirstChild();    	non-compiled	[CE]  variable  thenBlock  might  not  have  been  initialized	73	None	replace
7	[BUG]  [BUGGY]  Node  elseBlock  =  node.getFirstChild();  Node  thenBlock  =  node.getFirstChild();  [CE]  cannot  find  symbol  node  [FE]          AssertionFailedError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  elseBlock  =  node.getFirstChild();  Node  thenBlock  =  node.getFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  elseBlock  =  node.getFirstChild();  Node  thenBlock  =  node.getFirstChild();	          Node    elseBlock    =    n.getFirstChild();    Node    thenBlock    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  node	73	None	replace
8	[BUG]  [BUGGY]  n.handleMissingName(labelName);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  n.handleMissingName(labelName);  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	n.handleMissingName(labelName);	  aughtExceptionHandler.handleMissingName(labelName);    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
9	[BUG]  [BUGGY]  JSErrorHandler.handleMissingName(labelName);  [CE]  cannot  find  symbol  JSErrorHandler  [FE]            AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  JSErrorHandler.handleMissingName(labelName);  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	JSErrorHandler.handleMissingName(labelName);	  aughtExceptionHandler.handleMissingName(labelName);    	non-compiled	[CE]  cannot  find  symbol  JSErrorHandler	109	None	replace
10	[BUG]  [BUGGY]  c.handleMissingName(labelName);  [CE]  cannot  find  symbol  c  [FE]              AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  c.handleMissingName(labelName);  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	c.handleMissingName(labelName);	  aughtExceptionHandler.handleMissingName(labelName);    	non-compiled	[CE]  cannot  find  symbol  c	109	None	replace
11	[BUG]  [BUGGY]  handleMissingName(labelName);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  handleMissingName(labelName);  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	handleMissingName(labelName);	  aughtExceptionHandler.handleMissingName(labelName);    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
12	[BUG]  [BUGGY]  parent.replaceChild(n,  tryMinimizeExits(labelName,  exitType,  finallyBlock));  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  parent.replaceChild(n,  tryMinimizeExits(labelName,  exitType,  finallyBlock));  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	parent.replaceChild(n,  tryMinimizeExits(labelName,  exitType,  finallyBlock));	  parent.replaceChild(n,    tryMinimizeExits(finallyBlock,    exitType,    labelName));    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	110	None	replace
13	[BUG]  [BUGGY]  parent.replaceChild(n,  tryMinimizeExits(catchNode,  exitType,  labelName));  [CE]  cannot  find  symbol  catchNode  [FE]          AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  parent.replaceChild(n,  tryMinimizeExits(catchNode,  exitType,  labelName));  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	parent.replaceChild(n,  tryMinimizeExits(catchNode,  exitType,  labelName));	  parent.replaceChild(n,    tryMinimizeExits(finallyBlock,    exitType,    labelName));    	non-compiled	[CE]  cannot  find  symbol  catchNode	110	None	replace
14	[BUG]  [BUGGY]  parent.replaceChild(n,  tryMinimizeExits(labelName,  exitType,  exitType));  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  parent.replaceChild(n,  tryMinimizeExits(labelName,  exitType,  exitType));  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	parent.replaceChild(n,  tryMinimizeExits(labelName,  exitType,  exitType));	  parent.replaceChild(n,    tryMinimizeExits(finallyBlock,    exitType,    labelName));    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	110	None	replace
15	[BUG]  [BUGGY]  parent.replaceChild(n,  tryMinimizeExits(labelName,  exitType,  endBlock));  [CE]  cannot  find  symbol  endBlock  [FE]              AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  parent.replaceChild(n,  tryMinimizeExits(labelName,  exitType,  endBlock));  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	parent.replaceChild(n,  tryMinimizeExits(labelName,  exitType,  endBlock));	  parent.replaceChild(n,    tryMinimizeExits(finallyBlock,    exitType,    labelName));    	non-compiled	[CE]  cannot  find  symbol  endBlock	110	None	replace
16	[BUG]  [BUGGY]  parent.replaceChild(n,  tryMinimizeExits(catchCodeBlock,  exitType,  labelName));  [CE]  cannot  find  symbol  catchCodeBlock  [FE]                AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  parent.replaceChild(n,  tryMinimizeExits(catchCodeBlock,  exitType,  labelName));  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	parent.replaceChild(n,  tryMinimizeExits(catchCodeBlock,  exitType,  labelName));	  parent.replaceChild(n,    tryMinimizeExits(finallyBlock,    exitType,    labelName));    	non-compiled	[CE]  cannot  find  symbol  catchCodeBlock	110	None	replace
17	[BUG]  [BUGGY]  Node  elseBlock  =  thenBlock.getNext();  [CE]  cannot  find  symbol  thenBlock  [FE]              AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  elseBlock  =  thenBlock.getNext();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  elseBlock  =  thenBlock.getNext();	          Node    elseBlock    =    finallyBlock.getNext();    Node    elseBlock    =    thenBlock.getNext();    	non-compiled	[CE]  cannot  find  symbol  thenBlock	58	None	replace
18	[BUG]  [BUGGY]  Node  elseBlock  =  finallyBlock.getNext(),  thenBlock.getNext();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  elseBlock  =  finallyBlock.getNext(),  thenBlock.getNext();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  elseBlock  =  finallyBlock.getNext(),  thenBlock.getNext();	          Node    elseBlock    =    finallyBlock.getNext();    Node    elseBlock    =    thenBlock.getNext();    	non-compiled	[CE]  ';'  expected	58	None	replace
19	[BUG]  [BUGGY]  Node  elseBlock  =  finallyBlock!=  null?  trueBlock  :  finallyBlock.getNext();  [CE]  cannot  find  symbol  trueBlock  [FE]          AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  elseBlock  =  finallyBlock!=  null?  trueBlock  :  finallyBlock.getNext();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  elseBlock  =  finallyBlock!=  null?  trueBlock  :  finallyBlock.getNext();	  Node    elseBlock    =    finallyBlock!=    null?    falseBlock    :    finallyBlock.getNext();    	non-compiled	[CE]  cannot  find  symbol  trueBlock	86	None	replace
20	[BUG]  [BUGGY]  Node  elseBlock  =  finallyBlock!=  null?  catchNode  :  finallyBlock.getNext();  [CE]  cannot  find  symbol  catchNode  [FE]              AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  elseBlock  =  finallyBlock!=  null?  catchNode  :  finallyBlock.getNext();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  elseBlock  =  finallyBlock!=  null?  catchNode  :  finallyBlock.getNext();	  Node    elseBlock    =    finallyBlock!=    null?    falseBlock    :    finallyBlock.getNext();    	non-compiled	[CE]  cannot  find  symbol  catchNode	86	None	replace
21	[BUG]  [BUGGY]  Node  elseBlock  =  n.getfirstChild();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  elseBlock  =  n.getfirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  elseBlock  =  n.getfirstChild();	          Node    elseBlock    =    n.getFirstChild();    Node    elseBlock    =    n.getfirstChild();    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
22	[BUG]  [BUGGY]  Node  elseBlock  =  eventuallyBlock.getLastChild();  [CE]  cannot  find  symbol  eventuallyBlock  [FE]              AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  elseBlock  =  eventuallyBlock.getLastChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  elseBlock  =  eventuallyBlock.getLastChild();	          Node    elseBlock    =    finallyBlock.getLastChild();    Node    elseBlock    =    eventuallyBlock.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  eventuallyBlock	8	None	replace
23	[BUG]  [BUGGY]  While(finallyBlock!=  null  &&  finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  labelName);  }  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  While(finallyBlock!=  null  &&  finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  labelName);  }  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	While(finallyBlock!=  null  &&  finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  labelName);  }	  While(finallyBlock!=    null    &&    finallyBlock.isLabel())    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    	non-compiled	[CE]  ';'  expected	21	None	replace
24	[BUG]  [BUGGY]  while(finallyBlock!=  null  &&  finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  labelName);  }  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  while(finallyBlock!=  null  &&  finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  labelName);  }  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	while(finallyBlock!=  null  &&  finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  labelName);  }	  While(finallyBlock!=    null    &&    finallyBlock.isLabel())    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	21	None	replace
25	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]          if(finallyBlock.isLabel())    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	add	                if(finallyBlock.isLabel())        {        tryMinimizeExits(finallyBlock,        exitType,        labelName);        }        if(finallyBlock.isLabel())    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }	  	compilable	  [FE]  AssertionFailedError  	65	2	add
26	[BUG]  [BUGGY]          if(finallyBlock.isLabel())    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]          if(finallyBlock.isLabel())    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	                if(finallyBlock.isLabel())        {        tryMinimizeExits(finallyBlock,        exitType,        labelName);        }        if(finallyBlock.isLabel())    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }	  	compilable	  [FE]  AssertionFailedError  	65	2	add
27	[BUG]  [BUGGY]          if(finallyBlock.isLabel())    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]          if(finallyBlock.isLabel())    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	                if(finallyBlock.isLabel())        {        tryMinimizeExits(finallyBlock,        exitType,        labelName);        }        if(finallyBlock.isLabel())    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName	  	non-compiled	[CE]  ')'  expected	65	None	add
28	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]          if(finallyBlock.isLabel())    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	add	                if(finallyBlock.isLabel())        {        tryMinimizeExits(finallyBlock,        exitType,        labelName);        }        if(finallyBlock.isLabel())    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }	  	compilable	  [FE]  AssertionFailedError  	65	2	add
29	[BUG]  [BUGGY]          if(finallyBlock.isLabel())    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]          if(finallyBlock.isLabel())    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	                if(finallyBlock.isLabel())        {        tryMinimizeExits(finallyBlock,        exitType,        labelName);        }        if(finallyBlock.isLabel())    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }	  	compilable	  [FE]  AssertionFailedError  	65	2	add
30	[BUG]  [BUGGY]          if(finallyBlock.isLabel())    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  label  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]          if(finallyBlock.isLabel())    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  label  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	                if(finallyBlock.isLabel())        {        tryMinimizeExits(finallyBlock,        exitType,        labelName);        }        if(finallyBlock.isLabel())    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  label	  	non-compiled	[CE]  ')'  expected	65	None	add
31	[BUG]  [BUGGY]          if(finallyBlock.isLabel())    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  If(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]          if(finallyBlock.isLabel())    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  If(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	                if(finallyBlock.isLabel())        {        tryMinimizeExits(finallyBlock,        exitType,        labelName);        }        if(finallyBlock.isLabel())    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    If(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }	  	non-compiled	[CE]  ';'  expected	65	None	add
32	[BUG]  [BUGGY]  Node  elseBlock  =  finalBlock.getLastChild();  [CE]  cannot  find  symbol  finalBlock  [FE]              AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  elseBlock  =  finalBlock.getLastChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  elseBlock  =  finalBlock.getLastChild();	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    elseBlock    =    finallyBlock.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  finalBlock	63	None	replace
33	[BUG]  [BUGGY]  tryMinimizeExits(labelName,  finallyBlock,  exitType,  labelName);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMinimizeExits(labelName,  finallyBlock,  exitType,  labelName);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(labelName,  finallyBlock,  exitType,  labelName);	  tryMinimizeExits(n,    finallyBlock,    exitType,    labelName);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	70	None	replace
34	[BUG]  [BUGGY]  tryMinimizeExits(finallyBlock,  n,  exitType,  labelName);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMinimizeExits(finallyBlock,  n,  exitType,  labelName);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(finallyBlock,  n,  exitType,  labelName);	  tryMinimizeExits(n,    finallyBlock,    exitType,    labelName);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	70	None	replace
35	[BUG]  [BUGGY]  tryMinimizeExits(n,  finallyBlock,  exitType,  labelName,  catchNode);  [CE]  cannot  find  symbol  catchNode  [FE]                      AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMinimizeExits(n,  finallyBlock,  exitType,  labelName,  catchNode);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(n,  finallyBlock,  exitType,  labelName,  catchNode);	  tryMinimizeExits(n,    finallyBlock,    exitType,    labelName);    	non-compiled	[CE]  cannot  find  symbol  catchNode	70	None	replace
36	[BUG]  [BUGGY]  parent  ==  null)  {  tryMinimizeExits(parent,  exitType,  labelName);  }  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  parent  ==  null)  {  tryMinimizeExits(parent,  exitType,  labelName);  }  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	parent  ==  null)  {  tryMinimizeExits(parent,  exitType,  labelName);  }	  parent    ==    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    	non-compiled	[CE]  not  a  statement	93	None	replace
37	[BUG]  [BUGGY]  parent  ==  null)  {  tryMinimizeExits(n,  exitType,  labelName);  }  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  parent  ==  null)  {  tryMinimizeExits(n,  exitType,  labelName);  }  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	parent  ==  null)  {  tryMinimizeExits(n,  exitType,  labelName);  }	  parent    ==    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    	non-compiled	[CE]  not  a  statement	93	None	replace
38	[BUG]  [BUGGY]  tryMinimizeExit(n,  exitType,  labelName);  [CE]  cannot  find  symbol  [FE]        StackOverflowError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMinimizeExit(n,  exitType,  labelName);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExit(n,  exitType,  labelName);	  tryMinimizeExit(finallyBlock,    exitType,    labelName);    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
39	[BUG]  [BUGGY]  tryMinimizeExit(labelName,  exitType,  finallyBlock);  [CE]  cannot  find  symbol  [FE]          StackOverflowError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMinimizeExit(labelName,  exitType,  finallyBlock);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExit(labelName,  exitType,  finallyBlock);	  tryMinimizeExit(finallyBlock,    exitType,    labelName);    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
40	[BUG]  [BUGGY]  tryMinimizeExit(n,  finallyBlock,  labelName);  [CE]  cannot  find  symbol  [FE]            StackOverflowError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMinimizeExit(n,  finallyBlock,  labelName);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExit(n,  finallyBlock,  labelName);	  tryMinimizeExit(finallyBlock,    exitType,    labelName);    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
41	[BUG]  [BUGGY]  tryMinimizeExits(finalBlock,  labelName,  catchNode);  [CE]  cannot  find  symbol  finalBlock  [FE]                      AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMinimizeExits(finalBlock,  labelName,  catchNode);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(finalBlock,  labelName,  catchNode);	  tryMinimizeExits(finalBlock,    labelName,    null);    	non-compiled	[CE]  cannot  find  symbol  finalBlock	84	None	replace
42	[BUG]  [BUGGY]  tryMinimizeExits(finalBlock,  exitType,  labelName,  null);  [CE]  cannot  find  symbol  finalBlock  [FE]                        AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMinimizeExits(finalBlock,  exitType,  labelName,  null);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(finalBlock,  exitType,  labelName,  null);	  tryMinimizeExits(finalBlock,    labelName,    null);    	non-compiled	[CE]  cannot  find  symbol  finalBlock	84	None	replace
43	[BUG]  [BUGGY]  tryMinimizeExits(finalBlock,  labelName,  escapeType);  [CE]  cannot  find  symbol  finalBlock  [FE]                          AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMinimizeExits(finalBlock,  labelName,  escapeType);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(finalBlock,  labelName,  escapeType);	  tryMinimizeExits(finalBlock,    labelName,    null);    	non-compiled	[CE]  cannot  find  symbol  finalBlock	84	None	replace
44	[BUG]  [BUGGY]  tryMinimizeExits(finallyBlock,  exitType,  LabelName);  [CE]  cannot  find  symbol  LabelName  [FE]            AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMinimizeExits(finallyBlock,  exitType,  LabelName);  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(finallyBlock,  exitType,  LabelName);	          if(finallyBlock.isLabel())    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock.isLabel())    {    tryMinimizeExits(finallyBlock,    exitType,    LabelName);    }    	non-compiled	[CE]  cannot  find  symbol  LabelName	68	None	replace
45	[BUG]  [BUGGY]  Node  labelName  =  finallyBlock.getLastChild();  [CE]  variable  labelName  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                            AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  labelName  =  finallyBlock.getLastChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  labelName  =  finallyBlock.getLastChild();	  Node    labelName    =    finallyBlock.getFirstChild();    	non-compiled	[CE]  variable  labelName  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	20	None	replace
46	[BUG]  [BUGGY]  Node  labelName  =  finallyBlock.getNext();  [CE]  variable  labelName  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                              AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  labelName  =  finallyBlock.getNext();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  labelName  =  finallyBlock.getNext();	  Node    labelName    =    finallyBlock.getFirstChild();    	non-compiled	[CE]  variable  labelName  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	20	None	replace
47	[BUG]  [BUGGY]  tryMinimizeExits(catchNode,  exitType,  labelName);  [CE]  cannot  find  symbol  catchNode  [FE]                  AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMinimizeExits(catchNode,  exitType,  labelName);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(catchNode,  exitType,  labelName);	  tryMinimizeExits(catchNode,    finallyBlock,    labelName,    exitType);    	non-compiled	[CE]  cannot  find  symbol  catchNode	41	None	replace
48	[BUG]  [BUGGY]  tryMinimizeExits(peekNode,  finallyBlock,  labelName,  exitType);  [CE]  cannot  find  symbol  peekNode  [FE]                    AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMinimizeExits(peekNode,  finallyBlock,  labelName,  exitType);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(peekNode,  finallyBlock,  labelName,  exitType);	  tryMinimizeExits(catchNode,    finallyBlock,    labelName,    exitType);    	non-compiled	[CE]  cannot  find  symbol  peekNode	41	None	replace
49	[BUG]  [BUGGY]  tryMinimizeExits(labelName,  exitType,  labelName,  finallyBlock);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMinimizeExits(labelName,  exitType,  labelName,  finallyBlock);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(labelName,  exitType,  labelName,  finallyBlock);	  tryMinimizeExits(labelName,    exitType,    finallyBlock);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	1	None	replace
50	[BUG]  [BUGGY]  tryMinimizeExits(labelName,  exitType,  finallyBlock,  labelName);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMinimizeExits(labelName,  exitType,  finallyBlock,  labelName);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(labelName,  exitType,  finallyBlock,  labelName);	  tryMinimizeExits(labelName,    exitType,    finallyBlock);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	1	None	replace
51	[BUG]  [BUGGY]  tryMinimizeExits(labelName,  endType,  finallyBlock,  labelName);  [CE]  cannot  find  symbol  endType  [FE]                      AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMinimizeExits(labelName,  endType,  finallyBlock,  labelName);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(labelName,  endType,  finallyBlock,  labelName);	  tryMinimizeExits(labelName,    exitType,    finallyBlock);    	non-compiled	[CE]  cannot  find  symbol  endType	1	None	replace
52	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        StackOverflowError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMinimizeExits(n,  finallyBlock.getType(),  labelName);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	add	tryMinimizeExits(n,  finallyBlock.getType(),  labelName);	  tryMinimizeExits(n,    exitType,    labelName);    tryMinimizeExits(n,    escapeType,    labelName);    	compilable	  [FE]  RuntimeException  	101	2	replace
53	[BUG]  [BUGGY]  tryMinimizeExits(n,  finallyBlock.getType(),  labelName);  [FE]  RuntimeException  [FE]        StackOverflowError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMinimizeExits(n,  finallyBlock.getType(),  labelName);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(n,  finallyBlock.getType(),  labelName);	  tryMinimizeExits(n,    exitType,    labelName);    tryMinimizeExits(n,    escapeType,    labelName);    	compilable	  [FE]  RuntimeException  	101	2	replace
54	[BUG]  [BUGGY]  Node  elseBlock  =  finallyBlock!=  null?  finallyBlock.getFirstChild()  :  finalBlock.getLastChild();  [CE]  cannot  find  symbol  finalBlock  [FE]          AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  elseBlock  =  finallyBlock!=  null?  finallyBlock.getFirstChild()  :  finalBlock.getLastChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  elseBlock  =  finallyBlock!=  null?  finallyBlock.getFirstChild()  :  finalBlock.getLastChild();	          Node    elseBlock    =    finallyBlock.getFirstChild();    Node    elseBlock    =    finallyBlock.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  finalBlock	28	None	replace
55	[BUG]  [BUGGY]  Node  elseBlock  =  finallyBlock!=  null?  finallyBlock.getLastChild()  :  finalBlock.getFirstChild();  [CE]  cannot  find  symbol  finalBlock  [FE]            AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  elseBlock  =  finallyBlock!=  null?  finallyBlock.getLastChild()  :  finalBlock.getFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  elseBlock  =  finallyBlock!=  null?  finallyBlock.getLastChild()  :  finalBlock.getFirstChild();	          Node    elseBlock    =    finallyBlock.getFirstChild();    Node    elseBlock    =    finallyBlock.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  finalBlock	28	None	replace
56	[BUG]  [BUGGY]  Node  finallyBlock  =  finallyBlock.getLastChild()  -  1;  [CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                          AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  finallyBlock  =  finallyBlock.getLastChild()  -  1;  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  finallyBlock  =  finallyBlock.getLastChild()  -  1;	  Node    finallyBlock    =    finallyBlock.getNext()    -    1;    	non-compiled	[CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	36	None	replace
57	[BUG]  [BUGGY]  Node  finallyBlock  =  finallyBlock.getParent()  -  1;  [CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                            AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  finallyBlock  =  finallyBlock.getParent()  -  1;  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  finallyBlock  =  finallyBlock.getParent()  -  1;	  Node    finallyBlock    =    finallyBlock.getNext()    -    1;    	non-compiled	[CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	36	None	replace
58	[BUG]  [BUGGY]  Node  finallyBlock  =  finallyBlock.getFirstChild()  -  1;  [CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                              AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  finallyBlock  =  finallyBlock.getFirstChild()  -  1;  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  finallyBlock  =  finallyBlock.getFirstChild()  -  1;	  Node    finallyBlock    =    finallyBlock.getNext()    -    1;    	non-compiled	[CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	36	None	replace
59	[BUG]  [BUGGY]  tryMinimizeExits(n,  exitType,  labelName,  finallyBlock);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMinimizeExits(n,  exitType,  labelName,  finallyBlock);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(n,  exitType,  labelName,  finallyBlock);	  tryMinimizeExits(n,    finallyBlock,    labelName,    exitType);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	40	None	replace
60	[BUG]  [BUGGY]  tryMinimizeExits(labelName,  finallyBlock,  catchNode);  [CE]  cannot  find  symbol  catchNode  [FE]            AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMinimizeExits(labelName,  finallyBlock,  catchNode);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(labelName,  finallyBlock,  catchNode);	  tryMinimizeExits(labelName,    finallyBlock);    	non-compiled	[CE]  cannot  find  symbol  catchNode	9	None	replace
61	[BUG]  [BUGGY]  tryMinimizeExits(labelName,  endType,  finallyBlock);  [CE]  cannot  find  symbol  endType  [FE]              AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMinimizeExits(labelName,  endType,  finallyBlock);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(labelName,  endType,  finallyBlock);	  tryMinimizeExits(labelName,    finallyBlock);    	non-compiled	[CE]  cannot  find  symbol  endType	9	None	replace
62	[BUG]  [BUGGY]  Node  finallyBlock  =  finallyBlock.cloneTree(),  labelName);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  finallyBlock  =  finallyBlock.cloneTree(),  labelName);  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  finallyBlock  =  finallyBlock.cloneTree(),  labelName);	  Node    finallyBlock    =    finallyBlock.cloneTree();    	non-compiled	[CE]  ';'  expected	80	None	replace
63	[BUG]  [BUGGY]  Node  finallyBlock  =  finallyBlock.clone();  [CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                          AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  finallyBlock  =  finallyBlock.clone();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  finallyBlock  =  finallyBlock.clone();	  Node    finallyBlock    =    finallyBlock.cloneTree();    	non-compiled	[CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	80	None	replace
64	[BUG]  [BUGGY]  Node  finallyBlock  =  finallyBlock.cloneChildren();  [CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                            AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  finallyBlock  =  finallyBlock.cloneChildren();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  finallyBlock  =  finallyBlock.cloneChildren();	  Node    finallyBlock    =    finallyBlock.cloneTree();    	non-compiled	[CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	80	None	replace
65	[BUG]  [BUGGY]  Node  elseBlock  =  finallyBlock.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  [CE]  cannot  find  symbol  catchCodeBlock  [FE]              AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  elseBlock  =  finallyBlock.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  elseBlock  =  finallyBlock.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);	  Node    elseBlock    =    finallyBlock.getFirstChild();    tryMinimizeExits(catchCodeBlock,    exitType,    labelName);    	non-compiled	[CE]  cannot  find  symbol  catchCodeBlock	24	None	replace
66	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]          if(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	add	                if(finallyBlock!=        null)        {        tryMinimizeExits(finallyBlock,        exitType,        labelName);        }        if(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }	  	compilable	  [FE]  AssertionFailedError  	10	2	add
67	[BUG]  [BUGGY]          if(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]          if(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	                if(finallyBlock!=        null)        {        tryMinimizeExits(finallyBlock,        exitType,        labelName);        }        if(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }	  	compilable	  [FE]  AssertionFailedError  	10	2	add
68	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]          if(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock  ==  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	add	                if(finallyBlock!=        null)        {        tryMinimizeExits(finallyBlock,        exitType,        labelName);        }        if(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock  ==  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }	  	compilable	  [FE]  AssertionFailedError  	10	2	add
69	[BUG]  [BUGGY]          if(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock  ==  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]          if(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock  ==  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	                if(finallyBlock!=        null)        {        tryMinimizeExits(finallyBlock,        exitType,        labelName);        }        if(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock  ==  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }	  	compilable	  [FE]  AssertionFailedError  	10	2	add
70	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]          if(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock  ==  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	add	                if(finallyBlock!=        null)        {        tryMinimizeExits(finallyBlock,        exitType,        labelName);        }        if(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock  ==  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }	  	compilable	  [FE]  AssertionFailedError  	10	2	add
71	[BUG]  [BUGGY]          if(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock  ==  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]          if(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock  ==  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	                if(finallyBlock!=        null)        {        tryMinimizeExits(finallyBlock,        exitType,        labelName);        }        if(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock  ==  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }	  	compilable	  [FE]  AssertionFailedError  	10	2	add
72	[BUG]  [BUGGY]          if(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock  >=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]          AssertionFailedError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]          if(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock  >=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	                if(finallyBlock!=        null)        {        tryMinimizeExits(finallyBlock,        exitType,        labelName);        }        if(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock  >=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	10	None	add
73	[BUG]  [BUGGY]          if(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  If(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]          if(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  If(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	                if(finallyBlock!=        null)        {        tryMinimizeExits(finallyBlock,        exitType,        labelName);        }        if(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    If(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }	  	non-compiled	[CE]  ';'  expected	10	None	add
74	[BUG]  [BUGGY]  Node  elseBlock  =  finallyBlock.getNextChild();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  elseBlock  =  finallyBlock.getNextChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  elseBlock  =  finallyBlock.getNextChild();	          Node    elseBlock    =    finallyBlock.getFirstChild();    Node    elseBlock    =    finallyBlock.getNextChild();    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
75	[BUG]  [BUGGY]  Node  elseBlock  =  finallyBlock!=  null?  finallyBlock.getNextChild()  :  null;  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  elseBlock  =  finallyBlock!=  null?  finallyBlock.getNextChild()  :  null;  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  elseBlock  =  finallyBlock!=  null?  finallyBlock.getNextChild()  :  null;	          Node    elseBlock    =    finallyBlock.getFirstChild();    Node    elseBlock    =    finallyBlock.getNextChild();    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
76	[BUG]  [BUGGY]  Node  elseBlock  =  finallyBlock  ==  null?  finallyBlock.getNextChild()  :  null;  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  elseBlock  =  finallyBlock  ==  null?  finallyBlock.getNextChild()  :  null;  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  elseBlock  =  finallyBlock  ==  null?  finallyBlock.getNextChild()  :  null;	          Node    elseBlock    =    finallyBlock.getFirstChild();    Node    elseBlock    =    finallyBlock.getNextChild();    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
77	[BUG]  [BUGGY]  tryMinimizeExits(n,  labelName);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMinimizeExits(n,  labelName);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(n,  labelName);	  tryMinimizeExits(finalBlock,    labelName);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	83	None	replace
78	[BUG]  [BUGGY]  tryMinimizeExits(finalBlock,  exitType);  [CE]  cannot  find  symbol  finalBlock  [FE]                      AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMinimizeExits(finalBlock,  exitType);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(finalBlock,  exitType);	  tryMinimizeExits(finalBlock,    labelName);    	non-compiled	[CE]  cannot  find  symbol  finalBlock	83	None	replace
79	[BUG]  [BUGGY]  Node  labelName  =  finallyBlock.getString(),  labelName);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  labelName  =  finallyBlock.getString(),  labelName);  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  labelName  =  finallyBlock.getString(),  labelName);	  Node    labelName    =    finallyBlock.getString(),    exitType);    	non-compiled	[CE]  ';'  expected	17	None	replace
80	[BUG]  [BUGGY]  Node  labelName  =  finallyBlock.getString(),  exitType,  labelName);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  labelName  =  finallyBlock.getString(),  exitType,  labelName);  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  labelName  =  finallyBlock.getString(),  exitType,  labelName);	  Node    labelName    =    finallyBlock.getString(),    exitType);    	non-compiled	[CE]  ';'  expected	17	None	replace
81	[BUG]  [BUGGY]  Node  labelName  =  finallyBlock.getString(),  labelName;  [CE]  variable  labelName  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                          AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  labelName  =  finallyBlock.getString(),  labelName;  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  labelName  =  finallyBlock.getString(),  labelName;	  Node    labelName    =    finallyBlock.getString(),    exitType);    	non-compiled	[CE]  variable  labelName  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	17	None	replace
82	[BUG]  [BUGGY]  Node  labelName  =  finallyBlock.getString(),  LabelName);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  labelName  =  finallyBlock.getString(),  LabelName);  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  labelName  =  finallyBlock.getString(),  LabelName);	  Node    labelName    =    finallyBlock.getString(),    exitType);    	non-compiled	[CE]  ';'  expected	17	None	replace
83	[BUG]  [BUGGY]  Node  elseBlock  =  finallyBlock.removeFirstChild();  Node  elseBlock  =  finallyBlock.removeFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  elseBlock  =  finallyBlock.removeFirstChild();  Node  elseBlock  =  finallyBlock.removeFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node    elseBlock    =    finallyBlock.removeFirstChild();    Node  elseBlock  =  finallyBlock.removeFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	96	None	add
84	[BUG]  [BUGGY]  Node  elseBlock  =  finallyBlock.removeFirstChild();  Node  elseBlock  =  finallyBlock.removeLastChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      AssertionFailedError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  elseBlock  =  finallyBlock.removeFirstChild();  Node  elseBlock  =  finallyBlock.removeLastChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node    elseBlock    =    finallyBlock.removeFirstChild();    Node  elseBlock  =  finallyBlock.removeLastChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	96	None	add
85	[BUG]  [BUGGY]  Node  elseBlock  =  finallyBlock.removeFirstChild();  Node  elseBlock  =  finalementBlock.removeFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        AssertionFailedError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  elseBlock  =  finallyBlock.removeFirstChild();  Node  elseBlock  =  finalementBlock.removeFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node    elseBlock    =    finallyBlock.removeFirstChild();    Node  elseBlock  =  finalementBlock.removeFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	96	None	add
86	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  elseBlock  =  finallyBlock.removeFirstChild();  Node  thenBlock  =  finallyBlock.removeFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	add	Node    elseBlock    =    finallyBlock.removeFirstChild();    Node  thenBlock  =  finallyBlock.removeFirstChild();	  	compilable	  [FE]  AssertionFailedError  	96	2	add
87	[BUG]  [BUGGY]  Node  elseBlock  =  finallyBlock.removeFirstChild();  Node  thenBlock  =  finallyBlock.removeFirstChild();  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  elseBlock  =  finallyBlock.removeFirstChild();  Node  thenBlock  =  finallyBlock.removeFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node    elseBlock    =    finallyBlock.removeFirstChild();    Node  thenBlock  =  finallyBlock.removeFirstChild();	  	compilable	  [FE]  AssertionFailedError  	96	2	add
88	[BUG]  [BUGGY]  Node  elseBlock  =  finallyBlock.removeFirstChild();  Node  elseBlock  =  thenBlock.removeFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]            AssertionFailedError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  elseBlock  =  finallyBlock.removeFirstChild();  Node  elseBlock  =  thenBlock.removeFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node    elseBlock    =    finallyBlock.removeFirstChild();    Node  elseBlock  =  thenBlock.removeFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	96	None	add
89	[BUG]  [BUGGY]  Node  elseBlock  =  finallyBlock.getNext(),  labelName,  exitType);  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  elseBlock  =  finallyBlock.getNext(),  labelName,  exitType);  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  elseBlock  =  finallyBlock.getNext(),  labelName,  exitType);	  Node    elseBlock    =    finallyBlock.getNext(),    labelName);    	non-compiled	[CE]  ';'  expected	59	None	replace
90	[BUG]  [BUGGY]  Node  elseBlock  =  finallyBlock.getNext(),  labelName,  catchNode);  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  elseBlock  =  finallyBlock.getNext(),  labelName,  catchNode);  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  elseBlock  =  finallyBlock.getNext(),  labelName,  catchNode);	  Node    elseBlock    =    finallyBlock.getNext(),    labelName);    	non-compiled	[CE]  ';'  expected	59	None	replace
91	[BUG]  [BUGGY]  Node  elseBlock  =  finallyBlock.getNext(),  labelName,  escapeType);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  elseBlock  =  finallyBlock.getNext(),  labelName,  escapeType);  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  elseBlock  =  finallyBlock.getNext(),  labelName,  escapeType);	  Node    elseBlock    =    finallyBlock.getNext(),    labelName);    	non-compiled	[CE]  ';'  expected	59	None	replace
92	[BUG]  [BUGGY]  Node  elseBlock  =  finallyBlock.getNext(),  labelName,  catchCodeBlock);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  elseBlock  =  finallyBlock.getNext(),  labelName,  catchCodeBlock);  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  elseBlock  =  finallyBlock.getNext(),  labelName,  catchCodeBlock);	  Node    elseBlock    =    finallyBlock.getNext(),    labelName);    	non-compiled	[CE]  ';'  expected	59	None	replace
93	[BUG]  [BUGGY]  TryMinimizeExits(n,  exitType,  labelName);  [CE]  cannot  find  symbol  [FE]          StackOverflowError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  TryMinimizeExits(n,  exitType,  labelName);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	TryMinimizeExits(n,  exitType,  labelName);	  tryMinimizeExits(n,    exitType,    labelName);    TryMinimizeExits(n,    exitType,    labelName);    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
94	[BUG]  [BUGGY]  TryMinimizeExits(n,  finallyBlock,  labelName);  [CE]  cannot  find  symbol  [FE]            StackOverflowError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  TryMinimizeExits(n,  finallyBlock,  labelName);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	TryMinimizeExits(n,  finallyBlock,  labelName);	  tryMinimizeExits(n,    exitType,    labelName);    TryMinimizeExits(n,    exitType,    labelName);    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
95	[BUG]  [BUGGY]  tryMinimizeExits(finalBlock,  labelName,  exitType,  exitType);  [CE]  cannot  find  symbol  finalBlock  [FE]                        AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMinimizeExits(finalBlock,  labelName,  exitType,  exitType);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(finalBlock,  labelName,  exitType,  exitType);	  tryMinimizeExits(n,    labelName,    exitType,    exitType);    	non-compiled	[CE]  cannot  find  symbol  finalBlock	4	None	replace
96	[BUG]  [BUGGY]  tryMinimizeExits(finallyBlock,  labelName,  exitType,  exitType);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMinimizeExits(finallyBlock,  labelName,  exitType,  exitType);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(finallyBlock,  labelName,  exitType,  exitType);	  tryMinimizeExits(n,    labelName,    exitType,    exitType);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	4	None	replace
97	[BUG]  [BUGGY]  Node  labelName  =  finallyBlock  ==  null?  finallyBlock.getString()  : "null ";  [CE]  variable  labelName  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                      AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  labelName  =  finallyBlock  ==  null?  finallyBlock.getString()  : "null ";  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  labelName  =  finallyBlock  ==  null?  finallyBlock.getString()  : "null ";	  Node    labelName    =    finallyBlock!=    null?    finallyBlock.getString()    :   "   ";    	non-compiled	[CE]  variable  labelName  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	102	None	replace
98	[BUG]  [BUGGY]  Node  labelName  =  finallyBlock!=  null?  finallyBlock.getString()  : "n ";  [CE]  variable  labelName  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                        AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  labelName  =  finallyBlock!=  null?  finallyBlock.getString()  : "n ";  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  labelName  =  finallyBlock!=  null?  finallyBlock.getString()  : "n ";	  Node    labelName    =    finallyBlock!=    null?    finallyBlock.getString()    :   "   ";    	non-compiled	[CE]  variable  labelName  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	102	None	replace
99	[BUG]  [BUGGY]  Node  labelName  =  finallyBlock!=  null?  finallyBlock.getString()  : ", ";  [CE]  variable  labelName  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                          AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  labelName  =  finallyBlock!=  null?  finallyBlock.getString()  : ", ";  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  labelName  =  finallyBlock!=  null?  finallyBlock.getString()  : ", ";	  Node    labelName    =    finallyBlock!=    null?    finallyBlock.getString()    :   "   ";    	non-compiled	[CE]  variable  labelName  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	102	None	replace
100	[BUG]  [BUGGY]  TryMinimizeExits(labelName,  exitType,  finallyBlock);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  TryMinimizeExits(labelName,  exitType,  finallyBlock);  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	TryMinimizeExits(labelName,  exitType,  finallyBlock);	  TryMinimizeExits(finallyBlock,    exitType,    labelName);    	non-compiled	[CE]  cannot  find  symbol	118	None	replace
101	[BUG]  [BUGGY]  TryMinimizeExits(labelName,  exitType,  exitType);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  TryMinimizeExits(labelName,  exitType,  exitType);  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	TryMinimizeExits(labelName,  exitType,  exitType);	  TryMinimizeExits(finallyBlock,    exitType,    labelName);    	non-compiled	[CE]  cannot  find  symbol	118	None	replace
102	[BUG]  [BUGGY]  TryMinimizeExits(finallyBlock,  labelName,  exitType);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  TryMinimizeExits(finallyBlock,  labelName,  exitType);  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	TryMinimizeExits(finallyBlock,  labelName,  exitType);	  TryMinimizeExits(finallyBlock,    exitType,    labelName);    	non-compiled	[CE]  cannot  find  symbol	118	None	replace
103	[BUG]  [BUGGY]  TryMinimizeExits(labelName,  exitType,  exitBlock);  [CE]  cannot  find  symbol  exitBlock  [FE]                        AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  TryMinimizeExits(labelName,  exitType,  exitBlock);  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	TryMinimizeExits(labelName,  exitType,  exitBlock);	  TryMinimizeExits(finallyBlock,    exitType,    labelName);    	non-compiled	[CE]  cannot  find  symbol  exitBlock	118	None	replace
104	[BUG]  [BUGGY]          Node    elseBlock    =    finallyBlock.getNext();    Node  thenBlock  =  finallyBlock.getNext();  Node  elseBlock  =  finallyBlock.getNext();  Node  thenBlock  =  finallyBlock.getNext();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]          Node    elseBlock    =    finallyBlock.getNext();    Node  thenBlock  =  finallyBlock.getNext();  Node  elseBlock  =  finallyBlock.getNext();  Node  thenBlock  =  finallyBlock.getNext();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	                Node        elseBlock        =        finallyBlock.getNext();        Node    thenBlock    =    finallyBlock.getNext();    Node  elseBlock  =  finallyBlock.getNext();  Node  thenBlock  =  finallyBlock.getNext();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	56	None	add
105	[BUG]  [BUGGY]          Node    elseBlock    =    finallyBlock.getNext();    Node  thenBlock  =  finallyBlock.getNext();  Node  elseBlock  =  thenBlock.getNext();  Node  thenBlock  =  finallyBlock.getNext();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      AssertionFailedError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]          Node    elseBlock    =    finallyBlock.getNext();    Node  thenBlock  =  finallyBlock.getNext();  Node  elseBlock  =  thenBlock.getNext();  Node  thenBlock  =  finallyBlock.getNext();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	                Node        elseBlock        =        finallyBlock.getNext();        Node    thenBlock    =    finallyBlock.getNext();    Node  elseBlock  =  thenBlock.getNext();  Node  thenBlock  =  finallyBlock.getNext();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	56	None	add
106	[BUG]  [BUGGY]          Node    elseBlock    =    finallyBlock.getNext();    Node  thenBlock  =  finallyBlock.getNext();  Node  elseBlock  =  finalBlock.getNext();  Node  thenBlock  =  finallyBlock.getNext();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        AssertionFailedError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]          Node    elseBlock    =    finallyBlock.getNext();    Node  thenBlock  =  finallyBlock.getNext();  Node  elseBlock  =  finalBlock.getNext();  Node  thenBlock  =  finallyBlock.getNext();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	                Node        elseBlock        =        finallyBlock.getNext();        Node    thenBlock    =    finallyBlock.getNext();    Node  elseBlock  =  finalBlock.getNext();  Node  thenBlock  =  finallyBlock.getNext();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	56	None	add
107	[BUG]  [BUGGY]          Node    elseBlock    =    finallyBlock.getNext();    Node  thenBlock  =  finallyBlock.getNext();  Node  elseBlock  =  finalementBlock.getNext();  Node  thenBlock  =  finallyBlock.getNext();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          AssertionFailedError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]          Node    elseBlock    =    finallyBlock.getNext();    Node  thenBlock  =  finallyBlock.getNext();  Node  elseBlock  =  finalementBlock.getNext();  Node  thenBlock  =  finallyBlock.getNext();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	                Node        elseBlock        =        finallyBlock.getNext();        Node    thenBlock    =    finallyBlock.getNext();    Node  elseBlock  =  finalementBlock.getNext();  Node  thenBlock  =  finallyBlock.getNext();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	56	None	add
108	[BUG]  [BUGGY]          Node    elseBlock    =    finallyBlock.getNext();    Node  thenBlock  =  finallyBlock.getNext();  Node  elseBlock  =  finallyBlock.getNext();  Node  thenBlock  =  eventuallyBlock.getNext();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]            AssertionFailedError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]          Node    elseBlock    =    finallyBlock.getNext();    Node  thenBlock  =  finallyBlock.getNext();  Node  elseBlock  =  finallyBlock.getNext();  Node  thenBlock  =  eventuallyBlock.getNext();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	                Node        elseBlock        =        finallyBlock.getNext();        Node    thenBlock    =    finallyBlock.getNext();    Node  elseBlock  =  finallyBlock.getNext();  Node  thenBlock  =  eventuallyBlock.getNext();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	56	None	add
109	[BUG]  [BUGGY]  parent.replaceChild(n,  tryMinimizeExits(labelName,  exitType));  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  parent.replaceChild(n,  tryMinimizeExits(labelName,  exitType));  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	parent.replaceChild(n,  tryMinimizeExits(labelName,  exitType));	  parent.replaceChild(n,    tryMinimizeExits(n,    exitType,    labelName));    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	111	None	replace
110	[BUG]  [BUGGY]  tryMinimizeExits(n,  labelName,  exitType,  labelName);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMinimizeExits(n,  labelName,  exitType,  labelName);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(n,  labelName,  exitType,  labelName);	  tryMinimizeExits(finallyBlock,    labelName,    escapeType,    labelName);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	75	None	replace
111	[BUG]  [BUGGY]  Node  finallyBlock  =  finallyBlock  ==  null?  finallyBlock.getNext()  :  null;  [CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                    AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  finallyBlock  =  finallyBlock  ==  null?  finallyBlock.getNext()  :  null;  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  finallyBlock  =  finallyBlock  ==  null?  finallyBlock.getNext()  :  null;	  Node    finallyBlock    =    finallyBlock!=    null?    finallyBlock.getNext()    :    null;    	non-compiled	[CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	78	None	replace
112	[BUG]  [BUGGY]  Node  finallyBlock  =  finallyBlock!=  null?  finallyBlock.getNext()  :  node;  [CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                      AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  finallyBlock  =  finallyBlock!=  null?  finallyBlock.getNext()  :  node;  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  finallyBlock  =  finallyBlock!=  null?  finallyBlock.getNext()  :  node;	  Node    finallyBlock    =    finallyBlock!=    null?    finallyBlock.getNext()    :    null;    	non-compiled	[CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	78	None	replace
113	[BUG]  [BUGGY]  Node  elseBlock  =  thenBlock.getFirstChild();  [CE]  cannot  find  symbol  thenBlock  [FE]              AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  elseBlock  =  thenBlock.getFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  elseBlock  =  thenBlock.getFirstChild();	          Node    elseBlock    =    finallyBlock.getFirstChild();    Node    elseBlock    =    thenBlock.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  thenBlock	30	None	replace
114	[BUG]  [BUGGY]  Node  elseBlock  =  thenBlock.getLastChild();  [CE]  cannot  find  symbol  thenBlock  [FE]            AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  elseBlock  =  thenBlock.getLastChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  elseBlock  =  thenBlock.getLastChild();	          Node    elseBlock    =    finallyBlock.getLastChild();    Node    elseBlock    =    thenBlock.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  thenBlock	7	None	replace
115	[BUG]  [BUGGY]  parent  ==  null)  {  tryMinimizeExits(parent,  labelName);  }  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  parent  ==  null)  {  tryMinimizeExits(parent,  labelName);  }  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	parent  ==  null)  {  tryMinimizeExits(parent,  labelName);  }	  parent    ==    null)    {    tryMinimizeExits(finallyBlock,    labelName);    }    	non-compiled	[CE]  not  a  statement	94	None	replace
116	[BUG]  [BUGGY]  parent  ==  null)  {  tryMinimizeExits(n,  labelName);  }  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  parent  ==  null)  {  tryMinimizeExits(n,  labelName);  }  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	parent  ==  null)  {  tryMinimizeExits(n,  labelName);  }	  parent    ==    null)    {    tryMinimizeExits(finallyBlock,    labelName);    }    	non-compiled	[CE]  not  a  statement	94	None	replace
117	[BUG]  [BUGGY]  parent!=  null)  {  tryMinimizeExits(finallyBlock,  labelName);  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  parent!=  null)  {  tryMinimizeExits(finallyBlock,  labelName);  }  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	parent!=  null)  {  tryMinimizeExits(finallyBlock,  labelName);  }	  parent    ==    null)    {    tryMinimizeExits(finallyBlock,    labelName);    }    	non-compiled	[CE]  not  a  statement	94	None	replace
118	[BUG]  [BUGGY]  while(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  labelName);  }  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  while(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  labelName);  }  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	while(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  labelName);  }	  While(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	22	None	replace
119	[BUG]  [BUGGY]  tryMinimizeExits(labelName,  finallyBlock,  labelName,  exitType);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMinimizeExits(labelName,  finallyBlock,  labelName,  exitType);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(labelName,  finallyBlock,  labelName,  exitType);	  tryMinimizeExits(labelName,    finallyBlock,    labelName);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	69	None	replace
120	[BUG]  [BUGGY]  tryMinimizeExits(labelName,  finallyBlock,  escapeType,  labelName);  [CE]  cannot  find  symbol  escapeType  [FE]                  AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMinimizeExits(labelName,  finallyBlock,  escapeType,  labelName);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(labelName,  finallyBlock,  escapeType,  labelName);	  tryMinimizeExits(labelName,    finallyBlock,    labelName);    	non-compiled	[CE]  cannot  find  symbol  escapeType	69	None	replace
121	[BUG]  [BUGGY]  tryMinimizeExits(labelName,  finallyBlock,  labelName,  falseBlock);  [CE]  cannot  find  symbol  falseBlock  [FE]                    AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMinimizeExits(labelName,  finallyBlock,  labelName,  falseBlock);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(labelName,  finallyBlock,  labelName,  falseBlock);	  tryMinimizeExits(labelName,    finallyBlock,    labelName);    	non-compiled	[CE]  cannot  find  symbol  falseBlock	69	None	replace
122	[BUG]  [BUGGY]  tryMinimizeExits(labelName,  finallyBlock,  labelName,  escapeType);  [CE]  cannot  find  symbol  escapeType  [FE]                      AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMinimizeExits(labelName,  finallyBlock,  labelName,  escapeType);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(labelName,  finallyBlock,  labelName,  escapeType);	  tryMinimizeExits(labelName,    finallyBlock,    labelName);    	non-compiled	[CE]  cannot  find  symbol  escapeType	69	None	replace
123	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]          if(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock  ==  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock  ==  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	add	                if(finallyBlock!=        null)        {        tryMinimizeExits(finallyBlock,        exitType,        labelName);        }        if(finallyBlock    ==    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock  ==  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }	  	compilable	  [FE]  AssertionFailedError  	12	2	add
124	[BUG]  [BUGGY]          if(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock  ==  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock  ==  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]          if(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock  ==  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock  ==  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	                if(finallyBlock!=        null)        {        tryMinimizeExits(finallyBlock,        exitType,        labelName);        }        if(finallyBlock    ==    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock  ==  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }	  	compilable	  [FE]  AssertionFailedError  	12	2	add
125	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]          if(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock  ==  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock  ==  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock  ==  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	add	                if(finallyBlock!=        null)        {        tryMinimizeExits(finallyBlock,        exitType,        labelName);        }        if(finallyBlock    ==    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock  ==  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock  ==  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }	  	compilable	  [FE]  AssertionFailedError  	12	2	add
126	[BUG]  [BUGGY]          if(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock  ==  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock  ==  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock  ==  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]          if(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock  ==  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock  ==  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock  ==  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	                if(finallyBlock!=        null)        {        tryMinimizeExits(finallyBlock,        exitType,        labelName);        }        if(finallyBlock    ==    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock  ==  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock  ==  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }	  	compilable	  [FE]  AssertionFailedError  	12	2	add
127	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]          if(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock  ==  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	add	                if(finallyBlock!=        null)        {        tryMinimizeExits(finallyBlock,        exitType,        labelName);        }        if(finallyBlock    ==    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }	  	compilable	  [FE]  AssertionFailedError  	12	2	add
128	[BUG]  [BUGGY]          if(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock  ==  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]          if(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock  ==  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	                if(finallyBlock!=        null)        {        tryMinimizeExits(finallyBlock,        exitType,        labelName);        }        if(finallyBlock    ==    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }	  	compilable	  [FE]  AssertionFailedError  	12	2	add
129	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]          if(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock  ==  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock  ==  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	add	                if(finallyBlock!=        null)        {        tryMinimizeExits(finallyBlock,        exitType,        labelName);        }        if(finallyBlock    ==    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock  ==  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }	  	compilable	  [FE]  AssertionFailedError  	12	2	add
130	[BUG]  [BUGGY]          if(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock  ==  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock  ==  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]          if(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock  ==  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock  ==  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	                if(finallyBlock!=        null)        {        tryMinimizeExits(finallyBlock,        exitType,        labelName);        }        if(finallyBlock    ==    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock  ==  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }	  	compilable	  [FE]  AssertionFailedError  	12	2	add
131	[BUG]  [BUGGY]          if(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock  ==  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  If(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock  ==  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]          if(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock  ==  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  If(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock  ==  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	                if(finallyBlock!=        null)        {        tryMinimizeExits(finallyBlock,        exitType,        labelName);        }        if(finallyBlock    ==    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    If(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock  ==  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }	  	non-compiled	[CE]  ';'  expected	12	None	add
132	[BUG]  [BUGGY]  Node  elseBlock  =  finallyBlock!=  null?  trueBlock  :  finallyBlock.getFirstChild();  [CE]  cannot  find  symbol  trueBlock  [FE]          AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  elseBlock  =  finallyBlock!=  null?  trueBlock  :  finallyBlock.getFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  elseBlock  =  finallyBlock!=  null?  trueBlock  :  finallyBlock.getFirstChild();	  Node    elseBlock    =    finallyBlock!=    null?    falseBlock    :    finallyBlock.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  trueBlock	88	None	replace
133	[BUG]  [BUGGY]  Node  elseBlock  =  finallyBlock!=  null?  catchNode  :  finallyBlock.getFirstChild();  [CE]  cannot  find  symbol  catchNode  [FE]              AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  elseBlock  =  finallyBlock!=  null?  catchNode  :  finallyBlock.getFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  elseBlock  =  finallyBlock!=  null?  catchNode  :  finallyBlock.getFirstChild();	  Node    elseBlock    =    finallyBlock!=    null?    falseBlock    :    finallyBlock.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  catchNode	88	None	replace
134	[BUG]  [BUGGY]  tryMinimizeExits(n,  labelName,  exitType);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMinimizeExits(n,  labelName,  exitType);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(n,  labelName,  exitType);	  tryMinimizeExits(lastBlock,    labelName,    exitType);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	119	None	replace
135	[BUG]  [BUGGY]  tryMinimizeExits(enfinBlock,  labelName,  exitType);  [CE]  cannot  find  symbol  enfinBlock  [FE]                AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMinimizeExits(enfinBlock,  labelName,  exitType);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(enfinBlock,  labelName,  exitType);	  tryMinimizeExits(lastBlock,    labelName,    exitType);    	non-compiled	[CE]  cannot  find  symbol  enfinBlock	119	None	replace
136	[BUG]  [BUGGY]  Node  elseBlock  =  finallyBlock.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  elseBlock  =  finallyBlock.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  elseBlock  =  finallyBlock.getFirstChild();  Node  elseBlock  =  n.getFirstChild();	          Node    elseBlock    =    n.getFirstChild();    Node    elseBlock    =    n.getFirstChild();    }    	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	53	None	replace
137	[BUG]  [BUGGY]  Node  elseBlock  =  n.getFirstChild();  Node  elseBlock  =  elseBlock.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                  AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  elseBlock  =  n.getFirstChild();  Node  elseBlock  =  elseBlock.getFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  elseBlock  =  n.getFirstChild();  Node  elseBlock  =  elseBlock.getFirstChild();	          Node    elseBlock    =    n.getFirstChild();    Node    elseBlock    =    n.getFirstChild();    }    	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	53	None	replace
138	[BUG]  [BUGGY]  triesMinimizeExits(labelName,  exitType,  exitType);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  triesMinimizeExits(labelName,  exitType,  exitType);  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	triesMinimizeExits(labelName,  exitType,  exitType);	  triesMinimizeExits(finallyBlock,    exitType,    labelName);    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
139	[BUG]  [BUGGY]  triesMinimizeExits(labelName,  exitType,  exitBlock);  [CE]  cannot  find  symbol  exitBlock  [FE]          AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  triesMinimizeExits(labelName,  exitType,  exitBlock);  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	triesMinimizeExits(labelName,  exitType,  exitBlock);	  triesMinimizeExits(finallyBlock,    exitType,    labelName);    	non-compiled	[CE]  cannot  find  symbol  exitBlock	108	None	replace
140	[BUG]  [BUGGY]  triesMinimizeExits(n,  finallyBlock,  labelName);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  triesMinimizeExits(n,  finallyBlock,  labelName);  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	triesMinimizeExits(n,  finallyBlock,  labelName);	  triesMinimizeExits(finallyBlock,    exitType,    labelName);    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
141	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMinimizeExits(n,    exitType,    labelName);    tryMinimizeExits(n,  exitType,  labelName);  tryMinimizeExits(n,  exitType,  labelName);  tryMinimizeExits(n,  exitType,  labelName);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	add	tryMinimizeExits(n,        exitType,        labelName);        tryMinimizeExits(n,    exitType,    labelName);    tryMinimizeExits(n,  exitType,  labelName);  tryMinimizeExits(n,  exitType,  labelName);	  	compilable	  [FE]  StackOverflowError  	42	2	add
142	[BUG]  [BUGGY]  tryMinimizeExits(n,    exitType,    labelName);    tryMinimizeExits(n,  exitType,  labelName);  tryMinimizeExits(n,  exitType,  labelName);  tryMinimizeExits(n,  exitType,  labelName);  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMinimizeExits(n,    exitType,    labelName);    tryMinimizeExits(n,  exitType,  labelName);  tryMinimizeExits(n,  exitType,  labelName);  tryMinimizeExits(n,  exitType,  labelName);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(n,        exitType,        labelName);        tryMinimizeExits(n,    exitType,    labelName);    tryMinimizeExits(n,  exitType,  labelName);  tryMinimizeExits(n,  exitType,  labelName);	  	compilable	  [FE]  StackOverflowError  	42	2	add
143	[BUG]  [BUGGY]  tryMinimizeExits(n,    exitType,    labelName);    tryMinimizeExits(n,  exitType,  labelName);  tryMinimizeExits(n,  exitType,  labelName);  tryMinimizeExits(n,  endType,  labelName);  [CE]  cannot  find  symbol  endType  [FE]      StackOverflowError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMinimizeExits(n,    exitType,    labelName);    tryMinimizeExits(n,  exitType,  labelName);  tryMinimizeExits(n,  exitType,  labelName);  tryMinimizeExits(n,  endType,  labelName);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(n,        exitType,        labelName);        tryMinimizeExits(n,    exitType,    labelName);    tryMinimizeExits(n,  exitType,  labelName);  tryMinimizeExits(n,  endType,  labelName);	  	non-compiled	[CE]  cannot  find  symbol  endType	42	None	add
144	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMinimizeExits(n,    exitType,    labelName);    tryMinimizeExits(n,  exitType,  labelName);  tryMinimizeExits(n,  exitType,  labelName);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	add	tryMinimizeExits(n,        exitType,        labelName);        tryMinimizeExits(n,    exitType,    labelName);    tryMinimizeExits(n,  exitType,  labelName);	  	compilable	  [FE]  StackOverflowError  	42	2	add
145	[BUG]  [BUGGY]  tryMinimizeExits(n,    exitType,    labelName);    tryMinimizeExits(n,  exitType,  labelName);  tryMinimizeExits(n,  exitType,  labelName);  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMinimizeExits(n,    exitType,    labelName);    tryMinimizeExits(n,  exitType,  labelName);  tryMinimizeExits(n,  exitType,  labelName);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(n,        exitType,        labelName);        tryMinimizeExits(n,    exitType,    labelName);    tryMinimizeExits(n,  exitType,  labelName);	  	compilable	  [FE]  StackOverflowError  	42	2	add
146	[BUG]  [BUGGY]  tryMinimizeExits(n,    exitType,    labelName);    tryMinimizeExits(n,  exitType,  labelName);  TryMinimizeExits(n,  exitType,  labelName);  tryMinimizeExits(n,  exitType,  labelName);  [CE]  cannot  find  symbol  [FE]          StackOverflowError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMinimizeExits(n,    exitType,    labelName);    tryMinimizeExits(n,  exitType,  labelName);  TryMinimizeExits(n,  exitType,  labelName);  tryMinimizeExits(n,  exitType,  labelName);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(n,        exitType,        labelName);        tryMinimizeExits(n,    exitType,    labelName);    TryMinimizeExits(n,  exitType,  labelName);  tryMinimizeExits(n,  exitType,  labelName);	  	non-compiled	[CE]  cannot  find  symbol	42	None	add
147	[BUG]  [BUGGY]  tryMinimizeExits(n,    exitType,    labelName);    tryMinimizeExits(n,  exitType,  labelName);  tryMinimizeExits(n,  exitType,  labelName);  tryMinimizeExits(n,  exitType,  labelName);  }  [CE]  illegal  start  of  type  [FE]            StackOverflowError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMinimizeExits(n,    exitType,    labelName);    tryMinimizeExits(n,  exitType,  labelName);  tryMinimizeExits(n,  exitType,  labelName);  tryMinimizeExits(n,  exitType,  labelName);  }  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(n,        exitType,        labelName);        tryMinimizeExits(n,    exitType,    labelName);    tryMinimizeExits(n,  exitType,  labelName);  tryMinimizeExits(n,  exitType,  labelName);  }	  	non-compiled	[CE]  illegal  start  of  type	42	None	add
148	[BUG]  [BUGGY]  tryMinimizeExits(n,    exitType,    labelName);    tryMinimizeExits(n,  exitType,  labelName);  tryMinimizeExits(n,  exitType,  labelName);  tryMaximizeExits(n,  exitType,  labelName);  [CE]  cannot  find  symbol  [FE]              StackOverflowError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMinimizeExits(n,    exitType,    labelName);    tryMinimizeExits(n,  exitType,  labelName);  tryMinimizeExits(n,  exitType,  labelName);  tryMaximizeExits(n,  exitType,  labelName);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(n,        exitType,        labelName);        tryMinimizeExits(n,    exitType,    labelName);    tryMinimizeExits(n,  exitType,  labelName);  tryMaximizeExits(n,  exitType,  labelName);	  	non-compiled	[CE]  cannot  find  symbol	42	None	add
149	[BUG]  [BUGGY]  tryMinimizeExits(labelName,  n,  finallyBlock);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMinimizeExits(labelName,  n,  finallyBlock);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(labelName,  n,  finallyBlock);	  tryMinimizeExits(finallyBlock,    n,    labelName);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	71	None	replace
150	[BUG]  [BUGGY]  tryMinimizeExits(finallyBlock,  labelName,  n);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMinimizeExits(finallyBlock,  labelName,  n);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(finallyBlock,  labelName,  n);	  tryMinimizeExits(finallyBlock,    n,    labelName);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	71	None	replace
151	[BUG]  [BUGGY]  tryMinimizeFinally(labelName,  exitType,  finallyBlock);  [CE]  cannot  find  symbol  [FE]        StackOverflowError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMinimizeFinally(labelName,  exitType,  finallyBlock);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeFinally(labelName,  exitType,  finallyBlock);	  tryMinimizeFinally(finallyBlock,    exitType,    labelName);    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
152	[BUG]  [BUGGY]  tryMinimizeFinally(falseBlock,  exitType,  labelName);  [CE]  cannot  find  symbol  falseBlock  [FE]          StackOverflowError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMinimizeFinally(falseBlock,  exitType,  labelName);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeFinally(falseBlock,  exitType,  labelName);	  tryMinimizeFinally(finallyBlock,    exitType,    labelName);    	non-compiled	[CE]  cannot  find  symbol  falseBlock	90	None	replace
153	[BUG]  [BUGGY]  tryMinimizeFinally(n,  finallyBlock,  labelName);  [CE]  cannot  find  symbol  [FE]            StackOverflowError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMinimizeFinally(n,  finallyBlock,  labelName);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeFinally(n,  finallyBlock,  labelName);	  tryMinimizeFinally(finallyBlock,    exitType,    labelName);    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
154	[BUG]  [BUGGY]  tryMinimizeFinally(n,  exitType,  labelName);  [CE]  cannot  find  symbol  [FE]              StackOverflowError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMinimizeFinally(n,  exitType,  labelName);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeFinally(n,  exitType,  labelName);	  tryMinimizeFinally(finallyBlock,    exitType,    labelName);    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
155	[BUG]  [BUGGY]  If(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  If(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	If(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }	  if(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    escapeType,    labelName);    }    	non-compiled	[CE]  ';'  expected	117	None	replace
156	[BUG]  [BUGGY]  If(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  labelName);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  If(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  labelName);  }  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	If(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  labelName);  }	  if(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    escapeType,    labelName);    }    	non-compiled	[CE]  ';'  expected	117	None	replace
157	[BUG]  [BUGGY]  Node  elseBlock  =  finallyBlock!=  null?  finallyBlock.getNext()  :  finalBlock.getNext();  [CE]  cannot  find  symbol  finalBlock  [FE]        AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  elseBlock  =  finallyBlock!=  null?  finallyBlock.getNext()  :  finalBlock.getNext();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  elseBlock  =  finallyBlock!=  null?  finallyBlock.getNext()  :  finalBlock.getNext();	          Node    elseBlock    =    finallyBlock.getNext();    Node    elseBlock    =    finallyBlock.getNext();    	non-compiled	[CE]  cannot  find  symbol  finalBlock	54	None	replace
158	[BUG]  [BUGGY]  tryMinimizeExits(finalBlock,  labelName,  exitType,  labelName);  [CE]  cannot  find  symbol  finalBlock  [FE]                AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMinimizeExits(finalBlock,  labelName,  exitType,  labelName);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(finalBlock,  labelName,  exitType,  labelName);	  tryMinimizeExits(finalBlock,    labelName,    exitType);    	non-compiled	[CE]  cannot  find  symbol  finalBlock	81	None	replace
159	[BUG]  [BUGGY]  Node  finallyBlock  =  n.getLastChild();  [CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                        AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  finallyBlock  =  n.getLastChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  finallyBlock  =  n.getLastChild();	  Node    finallyBlock    =    finallyBlock.getLastChild();    	non-compiled	[CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	35	None	replace
160	[BUG]  [BUGGY]  Node  finallyBlock  =  n.getFirstChild();  [CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                          AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  finallyBlock  =  n.getFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  finallyBlock  =  n.getFirstChild();	  Node    finallyBlock    =    finallyBlock.getLastChild();    	non-compiled	[CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	35	None	replace
161	[BUG]  [BUGGY]  Node  elseBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  [CE]  cannot  find  symbol  catchNode  [FE]              AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  elseBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  elseBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);	  Node    elseBlock    =    catchNode.getFirstChild();    tryMinimizeExits(catchCodeBlock,    exitType,    labelName);    	non-compiled	[CE]  cannot  find  symbol  catchNode	99	None	replace
162	[BUG]  [BUGGY]  Node  elseBlock  =  finalementBlock.getLastChild();  [CE]  cannot  find  symbol  finalementBlock  [FE]          AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  elseBlock  =  finalementBlock.getLastChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  elseBlock  =  finalementBlock.getLastChild();	          Node    elseBlock    =    finallyBlock.getLastChild();    Node    elseBlock    =    finalementBlock.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  finalementBlock	6	None	replace
163	[BUG]  [BUGGY]  Node  elseBlock  =  finalementBlock.getFirstChild();  [CE]  cannot  find  symbol  finalementBlock  [FE]            AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  elseBlock  =  finalementBlock.getFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  elseBlock  =  finalementBlock.getFirstChild();	          Node    elseBlock    =    finallyBlock.getLastChild();    Node    elseBlock    =    finalementBlock.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  finalementBlock	6	None	replace
164	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  if(finallyBlock!=  null)  {  tryMinimizeExits(n,  exitType,  labelName);  }  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	add	if(finallyBlock!=  null)  {  tryMinimizeExits(n,  exitType,  labelName);  }	  tryMinimizeExits(n,    exitType,    labelName);    tryMinimizeExits(n,    exitType,    labelName);    	compilable	  [FE]  StackOverflowError  	43	2	replace
165	[BUG]  [BUGGY]  if(finallyBlock!=  null)  {  tryMinimizeExits(n,  exitType,  labelName);  }  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  if(finallyBlock!=  null)  {  tryMinimizeExits(n,  exitType,  labelName);  }  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	if(finallyBlock!=  null)  {  tryMinimizeExits(n,  exitType,  labelName);  }	  tryMinimizeExits(n,    exitType,    labelName);    tryMinimizeExits(n,    exitType,    labelName);    	compilable	  [FE]  StackOverflowError  	43	2	replace
166	[BUG]  [BUGGY]  parent.replaceChild(n,  tryMinimizeExits(labelName,  exitType,  exitType);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  parent.replaceChild(n,  tryMinimizeExits(labelName,  exitType,  exitType);  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	parent.replaceChild(n,  tryMinimizeExits(labelName,  exitType,  exitType);	  parent.replaceChild(n,    tryMinimizeExits(finallyBlock,    exitType,    labelName);    	non-compiled	[CE]  ')'  expected	112	None	replace
167	[BUG]  [BUGGY]  parent.replaceChild(n,  tryMinimizeExits(labelName,  exitType,  finallyBlock);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  parent.replaceChild(n,  tryMinimizeExits(labelName,  exitType,  finallyBlock);  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	parent.replaceChild(n,  tryMinimizeExits(labelName,  exitType,  finallyBlock);	  parent.replaceChild(n,    tryMinimizeExits(finallyBlock,    exitType,    labelName);    	non-compiled	[CE]  ')'  expected	112	None	replace
168	[BUG]  [BUGGY]  parent.replaceChild(n,  tryMinimizeExits(catchNode,  exitType,  labelName);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  parent.replaceChild(n,  tryMinimizeExits(catchNode,  exitType,  labelName);  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	parent.replaceChild(n,  tryMinimizeExits(catchNode,  exitType,  labelName);	  parent.replaceChild(n,    tryMinimizeExits(finallyBlock,    exitType,    labelName);    	non-compiled	[CE]  ')'  expected	112	None	replace
169	[BUG]  [BUGGY]  parent.replaceChild(n,  tryMinimizeExits(labelName,  exitType,  endBlock);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  parent.replaceChild(n,  tryMinimizeExits(labelName,  exitType,  endBlock);  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	parent.replaceChild(n,  tryMinimizeExits(labelName,  exitType,  endBlock);	  parent.replaceChild(n,    tryMinimizeExits(finallyBlock,    exitType,    labelName);    	non-compiled	[CE]  ')'  expected	112	None	replace
170	[BUG]  [BUGGY]  parent.replaceChild(n,  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  parent.replaceChild(n,  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	parent.replaceChild(n,  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);	  parent.replaceChild(n,    tryMinimizeExits(finallyBlock,    exitType,    labelName);    	non-compiled	[CE]  ')'  expected	112	None	replace
171	[BUG]  [BUGGY]  Node  finallyBlock  =  finallyBlock.getNext(),  labelName,  exitType);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  finallyBlock  =  finallyBlock.getNext(),  labelName,  exitType);  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  finallyBlock  =  finallyBlock.getNext(),  labelName,  exitType);	  Node    finallyBlock    =    finallyBlock.getNext(),    labelName);    	non-compiled	[CE]  ';'  expected	33	None	replace
172	[BUG]  [BUGGY]  Node  finallyBlock  =  finallyBlock.getNext(),  labelName,  escapeType);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  finallyBlock  =  finallyBlock.getNext(),  labelName,  escapeType);  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  finallyBlock  =  finallyBlock.getNext(),  labelName,  escapeType);	  Node    finallyBlock    =    finallyBlock.getNext(),    labelName);    	non-compiled	[CE]  ';'  expected	33	None	replace
173	[BUG]  [BUGGY]  Node  finallyBlock  =  finallyBlock.getNext(),  labelName  +  1);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  finallyBlock  =  finallyBlock.getNext(),  labelName  +  1);  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  finallyBlock  =  finallyBlock.getNext(),  labelName  +  1);	  Node    finallyBlock    =    finallyBlock.getNext(),    labelName);    	non-compiled	[CE]  ';'  expected	33	None	replace
174	[BUG]  [BUGGY]  Node  finallyBlock  =  finallyBlock.getNext(),  labelName,  catchNode);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  finallyBlock  =  finallyBlock.getNext(),  labelName,  catchNode);  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  finallyBlock  =  finallyBlock.getNext(),  labelName,  catchNode);	  Node    finallyBlock    =    finallyBlock.getNext(),    labelName);    	non-compiled	[CE]  ';'  expected	33	None	replace
175	[BUG]  [BUGGY]  Node  elseBlock  =  finallyBlock  ==  null?  trueBlock  :  finallyBlock.getNext();  [CE]  cannot  find  symbol  trueBlock  [FE]        AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  elseBlock  =  finallyBlock  ==  null?  trueBlock  :  finallyBlock.getNext();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  elseBlock  =  finallyBlock  ==  null?  trueBlock  :  finallyBlock.getNext();	  Node    elseBlock    =    finallyBlock    ==    null?    falseBlock    :    finallyBlock.getNext();    	non-compiled	[CE]  cannot  find  symbol  trueBlock	85	None	replace
176	[BUG]  [BUGGY]  Node  elseBlock  =  finallyBlock  ==  null?  catchNode  :  finallyBlock.getNext();  [CE]  cannot  find  symbol  catchNode  [FE]          AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  elseBlock  =  finallyBlock  ==  null?  catchNode  :  finallyBlock.getNext();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  elseBlock  =  finallyBlock  ==  null?  catchNode  :  finallyBlock.getNext();	  Node    elseBlock    =    finallyBlock    ==    null?    falseBlock    :    finallyBlock.getNext();    	non-compiled	[CE]  cannot  find  symbol  catchNode	85	None	replace
177	[BUG]  [BUGGY]  parent.replaceChild(n,  finallyBlock);  [CE]  cannot  find  symbol  parent  [FE]        AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  parent.replaceChild(n,  finallyBlock);  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	parent.replaceChild(n,  finallyBlock);	          if(finallyBlock.isLabel())    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock.isLabel())    {    tryMinimizeExits(finallyBlock,    escapeType,    labelName);    }    	non-compiled	[CE]  cannot  find  symbol  parent	76	None	replace
178	[BUG]  [BUGGY]  tryMinimizeExits(finallyBlock,  labelName,  lastBlock);  [CE]  cannot  find  symbol  lastBlock  [FE]                AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMinimizeExits(finallyBlock,  labelName,  lastBlock);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(finallyBlock,  labelName,  lastBlock);	  tryMinimizeExits(lastBlock,    labelName,    finallyBlock);    	non-compiled	[CE]  cannot  find  symbol  lastBlock	113	None	replace
179	[BUG]  [BUGGY]  tryMinimizeExits(n,  labelName,  finallyBlock);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMinimizeExits(n,  labelName,  finallyBlock);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(n,  labelName,  finallyBlock);	  tryMinimizeExits(lastBlock,    labelName,    finallyBlock);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	113	None	replace
180	[BUG]  [BUGGY]  tryMinimizeExits(finalBlock,  labelName,  finallyBlock);  [CE]  cannot  find  symbol  finalBlock  [FE]                    AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMinimizeExits(finalBlock,  labelName,  finallyBlock);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(finalBlock,  labelName,  finallyBlock);	  tryMinimizeExits(lastBlock,    labelName,    finallyBlock);    	non-compiled	[CE]  cannot  find  symbol  finalBlock	113	None	replace
181	[BUG]  [BUGGY]          Node    elseBlock    =    finallyBlock.getLastChild();    Node  thenBlock  =  finallyBlock.getLastChild();  Node  elseBlock  =  finallyBlock.getLastChild();  Node  thenBlock  =  finallyBlock.getLastChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]          Node    elseBlock    =    finallyBlock.getLastChild();    Node  thenBlock  =  finallyBlock.getLastChild();  Node  elseBlock  =  finallyBlock.getLastChild();  Node  thenBlock  =  finallyBlock.getLastChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	                Node        elseBlock        =        finallyBlock.getLastChild();        Node    thenBlock    =    finallyBlock.getLastChild();    Node  elseBlock  =  finallyBlock.getLastChild();  Node  thenBlock  =  finallyBlock.getLastChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	91	None	add
182	[BUG]  [BUGGY]          Node    elseBlock    =    finallyBlock.getLastChild();    Node  thenBlock  =  finallyBlock.getLastChild();  Node  elseBlock  =  thenBlock.getLastChild();  Node  thenBlock  =  finallyBlock.getLastChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      AssertionFailedError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]          Node    elseBlock    =    finallyBlock.getLastChild();    Node  thenBlock  =  finallyBlock.getLastChild();  Node  elseBlock  =  thenBlock.getLastChild();  Node  thenBlock  =  finallyBlock.getLastChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	                Node        elseBlock        =        finallyBlock.getLastChild();        Node    thenBlock    =    finallyBlock.getLastChild();    Node  elseBlock  =  thenBlock.getLastChild();  Node  thenBlock  =  finallyBlock.getLastChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	91	None	add
183	[BUG]  [BUGGY]          Node    elseBlock    =    finallyBlock.getLastChild();    Node  thenBlock  =  finallyBlock.getLastChild();  Node  elseBlock  =  finallyBlock.getLastChild();  Node  thenBlock  =  thenBlock.getLastChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        AssertionFailedError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]          Node    elseBlock    =    finallyBlock.getLastChild();    Node  thenBlock  =  finallyBlock.getLastChild();  Node  elseBlock  =  finallyBlock.getLastChild();  Node  thenBlock  =  thenBlock.getLastChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	                Node        elseBlock        =        finallyBlock.getLastChild();        Node    thenBlock    =    finallyBlock.getLastChild();    Node  elseBlock  =  finallyBlock.getLastChild();  Node  thenBlock  =  thenBlock.getLastChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	91	None	add
184	[BUG]  [BUGGY]          Node    elseBlock    =    finallyBlock.getLastChild();    Node  thenBlock  =  finallyBlock.getLastChild();  Node  elseBlock  =  finallyBlock.getFirstChild();  Node  thenBlock  =  finallyBlock.getLastChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          AssertionFailedError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]          Node    elseBlock    =    finallyBlock.getLastChild();    Node  thenBlock  =  finallyBlock.getLastChild();  Node  elseBlock  =  finallyBlock.getFirstChild();  Node  thenBlock  =  finallyBlock.getLastChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	                Node        elseBlock        =        finallyBlock.getLastChild();        Node    thenBlock    =    finallyBlock.getLastChild();    Node  elseBlock  =  finallyBlock.getFirstChild();  Node  thenBlock  =  finallyBlock.getLastChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	91	None	add
185	[BUG]  [BUGGY]          Node    elseBlock    =    finallyBlock.getLastChild();    Node  thenBlock  =  finallyBlock.getLastChild();  Node  elseBlock  =  finalBlock.getLastChild();  Node  thenBlock  =  finallyBlock.getLastChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]            AssertionFailedError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]          Node    elseBlock    =    finallyBlock.getLastChild();    Node  thenBlock  =  finallyBlock.getLastChild();  Node  elseBlock  =  finalBlock.getLastChild();  Node  thenBlock  =  finallyBlock.getLastChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	                Node        elseBlock        =        finallyBlock.getLastChild();        Node    thenBlock    =    finallyBlock.getLastChild();    Node  elseBlock  =  finalBlock.getLastChild();  Node  thenBlock  =  finallyBlock.getLastChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	91	None	add
186	[BUG]  [BUGGY]          Node    elseBlock    =    finallyBlock.getLastChild();    Node  thenBlock  =  finallyBlock.getLastChild();  Node  elseBlock  =  finallyBlock.getLastChild();  Node  thenBlock  =  apoiBlock.getLastChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]              AssertionFailedError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]          Node    elseBlock    =    finallyBlock.getLastChild();    Node  thenBlock  =  finallyBlock.getLastChild();  Node  elseBlock  =  finallyBlock.getLastChild();  Node  thenBlock  =  apoiBlock.getLastChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	                Node        elseBlock        =        finallyBlock.getLastChild();        Node    thenBlock    =    finallyBlock.getLastChild();    Node  elseBlock  =  finallyBlock.getLastChild();  Node  thenBlock  =  apoiBlock.getLastChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	91	None	add
187	[BUG]  [BUGGY]  tryMinimizeExits(finallyBlock,  labelName,  exitType,  labelName,  catchNode);  [CE]  cannot  find  symbol  catchNode  [FE]              AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMinimizeExits(finallyBlock,  labelName,  exitType,  labelName,  catchNode);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(finallyBlock,  labelName,  exitType,  labelName,  catchNode);	  tryMinimizeExits(finallyBlock,    labelName,    exitType,    labelName);    	non-compiled	[CE]  cannot  find  symbol  catchNode	39	None	replace
188	[BUG]  [BUGGY]  tryMinimizeExits(n,  finallyBlock,  labelName,  exitType,  labelName);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMinimizeExits(n,  finallyBlock,  labelName,  exitType,  labelName);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(n,  finallyBlock,  labelName,  exitType,  labelName);	  tryMinimizeExits(finallyBlock,    labelName,    exitType,    labelName);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	39	None	replace
189	[BUG]  [BUGGY]  tryMinimizeExits(finallyBlock,  labelName,  exitType,  labelName,  falseBlock);  [CE]  cannot  find  symbol  falseBlock  [FE]                  AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMinimizeExits(finallyBlock,  labelName,  exitType,  labelName,  falseBlock);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(finallyBlock,  labelName,  exitType,  labelName,  falseBlock);	  tryMinimizeExits(finallyBlock,    labelName,    exitType,    labelName);    	non-compiled	[CE]  cannot  find  symbol  falseBlock	39	None	replace
190	[BUG]  [BUGGY]  timeout  [FE]            AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  while(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	add	while(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }	  While(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    labelName);    }    	compilable	timeout	23	1	replace
191	[BUG]  [BUGGY]  while(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  timeout  [FE]            AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  while(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	while(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }	  While(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    labelName);    }    	compilable	timeout	23	1	replace
192	[BUG]  [BUGGY]  tryMinimizeExits(labelName,  finalBlock,  exitType,  labelName);  [CE]  cannot  find  symbol  finalBlock  [FE]                  AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMinimizeExits(labelName,  finalBlock,  exitType,  labelName);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(labelName,  finalBlock,  exitType,  labelName);	  tryMinimizeExits(labelName,    finallyBlock,    exitType,    exitType);    	non-compiled	[CE]  cannot  find  symbol  finalBlock	98	None	replace
193	[BUG]  [BUGGY]  tryMinimizeExits(labelName,  endType,  exitType);  [CE]  cannot  find  symbol  endType  [FE]                    AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMinimizeExits(labelName,  endType,  exitType);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(labelName,  endType,  exitType);	  tryMinimizeExits(labelName,    finallyBlock,    exitType,    exitType);    	non-compiled	[CE]  cannot  find  symbol  endType	98	None	replace
194	[BUG]  [BUGGY]  tryMinimizeExits(labelName,  n,  exitType,  exitType);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMinimizeExits(labelName,  n,  exitType,  exitType);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(labelName,  n,  exitType,  exitType);	  tryMinimizeExits(labelName,    finallyBlock,    exitType,    exitType);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	98	None	replace
195	[BUG]  [BUGGY]  Node  labelName  =  finallyBlock!=  null?  null  :  finallyBlock.getLabelName();  [CE]  variable  labelName  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                          AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  labelName  =  finallyBlock!=  null?  null  :  finallyBlock.getLabelName();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  labelName  =  finallyBlock!=  null?  null  :  finallyBlock.getLabelName();	  Node    labelName    =    finallyBlock.getLabelName();    	non-compiled	[CE]  variable  labelName  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	19	None	replace
196	[BUG]  [BUGGY]  Node  labelName  =  finallyBlock.getLabelName()  +  1;  [CE]  variable  labelName  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                            AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  labelName  =  finallyBlock.getLabelName()  +  1;  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  labelName  =  finallyBlock.getLabelName()  +  1;	  Node    labelName    =    finallyBlock.getLabelName();    	non-compiled	[CE]  variable  labelName  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	19	None	replace
197	[BUG]  [BUGGY]  Node  labelName  =  finallyBlock.getLabel();  [CE]  variable  labelName  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                              AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  labelName  =  finallyBlock.getLabel();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  labelName  =  finallyBlock.getLabel();	  Node    labelName    =    finallyBlock.getLabelName();    	non-compiled	[CE]  variable  labelName  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	19	None	replace
198	[BUG]  [BUGGY]  Node  labelName  =  finallyBlock.getLabelName(),  exitType);  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  labelName  =  finallyBlock.getLabelName(),  exitType);  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  labelName  =  finallyBlock.getLabelName(),  exitType);	  Node    labelName    =    finallyBlock.getLabelName();    	non-compiled	[CE]  ';'  expected	19	None	replace
199	[BUG]  [BUGGY]  Node  elseBlock  =  finalementBlock.getNext();  [CE]  cannot  find  symbol  finalementBlock  [FE]          AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  elseBlock  =  finalementBlock.getNext();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  elseBlock  =  finalementBlock.getNext();	          Node    elseBlock    =    finallyBlock.getNext();    Node    elseBlock    =    finalementBlock.getNext();    	non-compiled	[CE]  cannot  find  symbol  finalementBlock	55	None	replace
200	[BUG]  [BUGGY]  tryMinimizeExits(labelName,  exitType,  exitBlock);  [CE]  cannot  find  symbol  exitBlock  [FE]            AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMinimizeExits(labelName,  exitType,  exitBlock);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(labelName,  exitType,  exitBlock);	  tryMinimizeExits(extendBlock,    exitType,    labelName);    	non-compiled	[CE]  cannot  find  symbol  exitBlock	104	None	replace
201	[BUG]  [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  otherBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  Node  otherBlock  =  n.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  otherBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  Node  otherBlock  =  n.getFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	                Node        elseBlock        =        n.getFirstChild();        Node    otherBlock    =    n.getFirstChild();    Node  elseBlock  =  n.getFirstChild();  Node  otherBlock  =  n.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	51	None	add
202	[BUG]  [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  otherBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getLastChild();  Node  otherBlock  =  n.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      AssertionFailedError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  otherBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getLastChild();  Node  otherBlock  =  n.getFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	                Node        elseBlock        =        n.getFirstChild();        Node    otherBlock    =    n.getFirstChild();    Node  elseBlock  =  n.getLastChild();  Node  otherBlock  =  n.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	51	None	add
203	[BUG]  [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  otherBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  Node  otherBlock  =  n.getLastChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        AssertionFailedError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  otherBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  Node  otherBlock  =  n.getLastChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	                Node        elseBlock        =        n.getFirstChild();        Node    otherBlock    =    n.getFirstChild();    Node  elseBlock  =  n.getFirstChild();  Node  otherBlock  =  n.getLastChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	51	None	add
204	[BUG]  [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  otherBlock  =  n.getFirstChild();  Node  elseBlock  =  finallyBlock.getFirstChild();  Node  otherBlock  =  n.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          AssertionFailedError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  otherBlock  =  n.getFirstChild();  Node  elseBlock  =  finallyBlock.getFirstChild();  Node  otherBlock  =  n.getFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	                Node        elseBlock        =        n.getFirstChild();        Node    otherBlock    =    n.getFirstChild();    Node  elseBlock  =  finallyBlock.getFirstChild();  Node  otherBlock  =  n.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	51	None	add
205	[BUG]  [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  otherBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getfirstChild();  Node  otherBlock  =  n.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]            AssertionFailedError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  otherBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getfirstChild();  Node  otherBlock  =  n.getFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	                Node        elseBlock        =        n.getFirstChild();        Node    otherBlock    =    n.getFirstChild();    Node  elseBlock  =  n.getfirstChild();  Node  otherBlock  =  n.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	51	None	add
206	[BUG]  [BUGGY]  Node  elseBlock  =  node.getLastChild();  [CE]  cannot  find  symbol  node  [FE]          AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  elseBlock  =  node.getLastChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  elseBlock  =  node.getLastChild();	          Node    elseBlock    =    n.getFirstChild();    Node    elseBlock    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  node	49	None	replace
207	[BUG]  [BUGGY]  Node  labelName  =  finallyBlock.getString(),  falseBlock);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  labelName  =  finallyBlock.getString(),  falseBlock);  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  labelName  =  finallyBlock.getString(),  falseBlock);	  Node    labelName    =    finallyBlock.getString()    +    1;    	non-compiled	[CE]  ';'  expected	18	None	replace
208	[BUG]  [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  thenBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  Node  thenBlock  =  n.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  thenBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  Node  thenBlock  =  n.getFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	                Node        elseBlock        =        n.getFirstChild();        Node    thenBlock    =    n.getFirstChild();    Node  elseBlock  =  n.getFirstChild();  Node  thenBlock  =  n.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	72	None	add
209	[BUG]  [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  thenBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getLastChild();  Node  thenBlock  =  n.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      AssertionFailedError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  thenBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getLastChild();  Node  thenBlock  =  n.getFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	                Node        elseBlock        =        n.getFirstChild();        Node    thenBlock    =    n.getFirstChild();    Node  elseBlock  =  n.getLastChild();  Node  thenBlock  =  n.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	72	None	add
210	[BUG]  [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  thenBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  Node  thenBlock  =  n.getLastChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        AssertionFailedError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  thenBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  Node  thenBlock  =  n.getLastChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	                Node        elseBlock        =        n.getFirstChild();        Node    thenBlock    =    n.getFirstChild();    Node  elseBlock  =  n.getFirstChild();  Node  thenBlock  =  n.getLastChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	72	None	add
211	[BUG]  [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  thenBlock  =  n.getFirstChild();  Node  elseBlock  =  finallyBlock.getFirstChild();  Node  thenBlock  =  n.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          AssertionFailedError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  thenBlock  =  n.getFirstChild();  Node  elseBlock  =  finallyBlock.getFirstChild();  Node  thenBlock  =  n.getFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	                Node        elseBlock        =        n.getFirstChild();        Node    thenBlock    =    n.getFirstChild();    Node  elseBlock  =  finallyBlock.getFirstChild();  Node  thenBlock  =  n.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	72	None	add
212	[BUG]  [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  thenBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getfirstChild();  Node  thenBlock  =  n.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]            AssertionFailedError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  thenBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getfirstChild();  Node  thenBlock  =  n.getFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	                Node        elseBlock        =        n.getFirstChild();        Node    thenBlock    =    n.getFirstChild();    Node  elseBlock  =  n.getfirstChild();  Node  thenBlock  =  n.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	72	None	add
213	[BUG]  [BUGGY]  Node  labelName  =  finallyBlock  ==  null?  null  :  finallyBlock.getString();  [CE]  variable  labelName  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                      AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  labelName  =  finallyBlock  ==  null?  null  :  finallyBlock.getString();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  labelName  =  finallyBlock  ==  null?  null  :  finallyBlock.getString();	  Node    labelName    =    finallyBlock!=    null?    null    :    finallyBlock.getString();    	non-compiled	[CE]  variable  labelName  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	87	None	replace
214	[BUG]  [BUGGY]  Node  labelName  =  finallyBlock!=  null  ||  finallyBlock.getString().equals( " "))?  null  :  finallyBlock.getString();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  labelName  =  finallyBlock!=  null  ||  finallyBlock.getString().equals( " "))?  null  :  finallyBlock.getString();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  labelName  =  finallyBlock!=  null  ||  finallyBlock.getString().equals( " "))?  null  :  finallyBlock.getString();	  Node    labelName    =    finallyBlock!=    null?    null    :    finallyBlock.getString();    	non-compiled	[CE]  	87	None	replace
215	[BUG]  [BUGGY]  tryMinimizeExits(finallyBlock,  labelName,  falseBlock);  [CE]  cannot  find  symbol  falseBlock  [FE]                AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMinimizeExits(finallyBlock,  labelName,  falseBlock);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(finallyBlock,  labelName,  falseBlock);	  tryMinimizeExits(finallyBlock,    labelName,    escapeType);    	non-compiled	[CE]  cannot  find  symbol  falseBlock	74	None	replace
216	[BUG]  [BUGGY]  tryMinimizeExits(finallyBlock,  labelName,  null);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMinimizeExits(finallyBlock,  labelName,  null);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(finallyBlock,  labelName,  null);	  tryMinimizeExits(finallyBlock,    labelName,    escapeType);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	74	None	replace
217	[BUG]  [BUGGY]  tryMinimizeExits(finallyBlock,  labelName,  trueBlock);  [CE]  cannot  find  symbol  trueBlock  [FE]                    AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMinimizeExits(finallyBlock,  labelName,  trueBlock);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(finallyBlock,  labelName,  trueBlock);	  tryMinimizeExits(finallyBlock,    labelName,    escapeType);    	non-compiled	[CE]  cannot  find  symbol  trueBlock	74	None	replace
218	[BUG]  [BUGGY]  Faces.checkState(finallyBlock!=  null);  [CE]  cannot  find  symbol  Faces  [FE]              AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Faces.checkState(finallyBlock!=  null);  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Faces.checkState(finallyBlock!=  null);	          if(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    If(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    	non-compiled	[CE]  cannot  find  symbol  Faces	15	None	replace
219	[BUG]  [BUGGY]  tryMinimizeExit(finallyBlock,  labelName,  exitType);  [CE]  cannot  find  symbol  [FE]        StackOverflowError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMinimizeExit(finallyBlock,  labelName,  exitType);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExit(finallyBlock,  labelName,  exitType);	  tryMinimizeExit(finallyBlock,    exitType,    labelName);    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
220	[BUG]  [BUGGY]  tryMinimizeExit(finallyBlock,  escapeType,  labelName);  [CE]  cannot  find  symbol  escapeType  [FE]          StackOverflowError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMinimizeExit(finallyBlock,  escapeType,  labelName);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExit(finallyBlock,  escapeType,  labelName);	  tryMinimizeExit(finallyBlock,    exitType,    labelName);    	non-compiled	[CE]  cannot  find  symbol  escapeType	37	None	replace
221	[BUG]  [BUGGY]  Node  elseBlock  =  n.getFirstChild();  Node  elseBlock  =  finallyBlock.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  elseBlock  =  n.getFirstChild();  Node  elseBlock  =  finallyBlock.getFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  elseBlock  =  n.getFirstChild();  Node  elseBlock  =  finallyBlock.getFirstChild();	          Node    elseBlock    =    n.getFirstChild();    Node    elseBlock    =    n.getFirstChild();    }    	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	53	None	replace
222	[BUG]  [BUGGY]  Node  labelName  =  finallyBlock  ==  null?  null  :  finallyBlock.getFirstChild();  [CE]  variable  labelName  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                            AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  labelName  =  finallyBlock  ==  null?  null  :  finallyBlock.getFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  labelName  =  finallyBlock  ==  null?  null  :  finallyBlock.getFirstChild();	  Node    labelName    =    finallyBlock.getFirstChild();    	non-compiled	[CE]  variable  labelName  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	20	None	replace
223	[BUG]  [BUGGY]  Node  elseBlock  =  finallyBlock!=  null?  catchCodeBlock  :  finallyBlock.getNext();  [CE]  cannot  find  symbol  catchCodeBlock  [FE]          AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  elseBlock  =  finallyBlock!=  null?  catchCodeBlock  :  finallyBlock.getNext();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  elseBlock  =  finallyBlock!=  null?  catchCodeBlock  :  finallyBlock.getNext();	  Node    elseBlock    =    finallyBlock!=    null?    falseBlock    :    finallyBlock.getNext();    	non-compiled	[CE]  cannot  find  symbol  catchCodeBlock	86	None	replace
224	[BUG]  [BUGGY]  Node  elseBlock  =  finallyBlock.getFirstChild();  Node  elseBlock  =  allCatchNodes.getLastChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  elseBlock  =  finallyBlock.getFirstChild();  Node  elseBlock  =  allCatchNodes.getLastChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  elseBlock  =  finallyBlock.getFirstChild();  Node  elseBlock  =  allCatchNodes.getLastChild();	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    elseBlock    =    allCatchNodes.getLastChild();    	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	64	None	replace
225	[BUG]  [BUGGY]  Node  labelName  =  finallyBlock  ==  null  ||  finallyBlock!=  null?  null  :  finallyBlock.getString();  [CE]  variable  labelName  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                      AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  labelName  =  finallyBlock  ==  null  ||  finallyBlock!=  null?  null  :  finallyBlock.getString();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  labelName  =  finallyBlock  ==  null  ||  finallyBlock!=  null?  null  :  finallyBlock.getString();	  Node    labelName    =    finallyBlock!=    null?    null    :    finallyBlock.getString();    	non-compiled	[CE]  variable  labelName  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	87	None	replace
226	[BUG]  [BUGGY]          Node    elseBlock    =    finallyBlock.getNext();    Node  thenBlock  =  finallyBlock.getNext();  Node  elseBlock  =  firstBlock.getNext();  Node  thenBlock  =  finallyBlock.getNext();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]          Node    elseBlock    =    finallyBlock.getNext();    Node  thenBlock  =  finallyBlock.getNext();  Node  elseBlock  =  firstBlock.getNext();  Node  thenBlock  =  finallyBlock.getNext();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	                Node        elseBlock        =        finallyBlock.getNext();        Node    thenBlock    =    finallyBlock.getNext();    Node  elseBlock  =  firstBlock.getNext();  Node  thenBlock  =  finallyBlock.getNext();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	56	None	add
227	[BUG]  [BUGGY]  tryMinimizeExits(finalBlock,  escapeType,  labelName);  [CE]  cannot  find  symbol  finalBlock  [FE]                  AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMinimizeExits(finalBlock,  escapeType,  labelName);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(finalBlock,  escapeType,  labelName);	  tryMinimizeExits(finalBlock,    exitType,    labelName);    	non-compiled	[CE]  cannot  find  symbol  finalBlock	82	None	replace
228	[BUG]  [BUGGY]  tryMaximizeExits(finallyBlock,  labelName,  exitType);  [CE]  cannot  find  symbol  [FE]        StackOverflowError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMaximizeExits(finallyBlock,  labelName,  exitType);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMaximizeExits(finallyBlock,  labelName,  exitType);	  tryMaximizeExits(finallyBlock,    exitType,    labelName);    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
229	[BUG]  [BUGGY]  tryMaximizeExits(finallyBlock,  escapeType,  labelName);  [CE]  cannot  find  symbol  escapeType  [FE]          StackOverflowError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMaximizeExits(finallyBlock,  escapeType,  labelName);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMaximizeExits(finallyBlock,  escapeType,  labelName);	  tryMaximizeExits(finallyBlock,    exitType,    labelName);    	non-compiled	[CE]  cannot  find  symbol  escapeType	105	None	replace
230	[BUG]  [BUGGY]  tryMaximizeExits(lastBlock,  exitType,  labelName);  [CE]  cannot  find  symbol  lastBlock  [FE]            StackOverflowError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMaximizeExits(lastBlock,  exitType,  labelName);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMaximizeExits(lastBlock,  exitType,  labelName);	  tryMaximizeExits(finallyBlock,    exitType,    labelName);    	non-compiled	[CE]  cannot  find  symbol  lastBlock	105	None	replace
231	[BUG]  [BUGGY]  Node  elseBlock  =  finallyBlock!=  null?  finallyBlock.getFirstChild()  :  finallyBlock.getNextChild();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  elseBlock  =  finallyBlock!=  null?  finallyBlock.getFirstChild()  :  finallyBlock.getNextChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  elseBlock  =  finallyBlock!=  null?  finallyBlock.getFirstChild()  :  finallyBlock.getNextChild();	          Node    elseBlock    =    finallyBlock.getFirstChild();    Node    elseBlock    =    finallyBlock.getNextChild();    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
232	[BUG]  [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  otherBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  Node  otherBlock  =  n.getfirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  otherBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  Node  otherBlock  =  n.getfirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	                Node        elseBlock        =        n.getFirstChild();        Node    otherBlock    =    n.getFirstChild();    Node  elseBlock  =  n.getFirstChild();  Node  otherBlock  =  n.getfirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	51	None	add
233	[BUG]  [BUGGY]  Node  elseBlock  =  finallyBlock!=  null?  finallyBlock.getFirstChild()  :  thenBlock.getFirstChild();  [CE]  cannot  find  symbol  thenBlock  [FE]              AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  elseBlock  =  finallyBlock!=  null?  finallyBlock.getFirstChild()  :  thenBlock.getFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  elseBlock  =  finallyBlock!=  null?  finallyBlock.getFirstChild()  :  thenBlock.getFirstChild();	          Node    elseBlock    =    finallyBlock.getFirstChild();    Node    elseBlock    =    thenBlock.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  thenBlock	30	None	replace
234	[BUG]  [BUGGY]  Node  elseBlock  =  finallyBlock!=  null?  finallyBlock.getFirstChild()  :  firstBlock.getFirstChild();  [CE]  cannot  find  symbol  firstBlock  [FE]                AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  elseBlock  =  finallyBlock!=  null?  finallyBlock.getFirstChild()  :  firstBlock.getFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  elseBlock  =  finallyBlock!=  null?  finallyBlock.getFirstChild()  :  firstBlock.getFirstChild();	          Node    elseBlock    =    finallyBlock.getFirstChild();    Node    elseBlock    =    thenBlock.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  firstBlock	30	None	replace
235	[BUG]  [BUGGY]  tryMinimizeExits(finallyBlock,  labelName,  exitType,  falseBlock);  [CE]  cannot  find  symbol  falseBlock  [FE]              AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMinimizeExits(finallyBlock,  labelName,  exitType,  falseBlock);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(finallyBlock,  labelName,  exitType,  falseBlock);	  tryMinimizeExits(finallyBlock,    labelName,    exitType,    labelName);    	non-compiled	[CE]  cannot  find  symbol  falseBlock	39	None	replace
236	[BUG]  [BUGGY]  tryMinimizeExits(finallyBlock,  labelName,  exitType,  catchCodeBlock);  [CE]  cannot  find  symbol  catchCodeBlock  [FE]                AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMinimizeExits(finallyBlock,  labelName,  exitType,  catchCodeBlock);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(finallyBlock,  labelName,  exitType,  catchCodeBlock);	  tryMinimizeExits(finallyBlock,    labelName,    exitType,    labelName);    	non-compiled	[CE]  cannot  find  symbol  catchCodeBlock	39	None	replace
237	[BUG]  [BUGGY]  Node  elseBlock  =  finallyBlock.getNext(),  labelName  +  1;  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  elseBlock  =  finallyBlock.getNext(),  labelName  +  1;  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  elseBlock  =  finallyBlock.getNext(),  labelName  +  1;	  Node    elseBlock    =    finallyBlock.getNext(),    labelName);    	non-compiled	[CE]  ';'  expected	59	None	replace
238	[BUG]  [BUGGY]  Node  elseBlock  =  finallyBlock.getNext(),  labelName  +  1);  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  elseBlock  =  finallyBlock.getNext(),  labelName  +  1);  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  elseBlock  =  finallyBlock.getNext(),  labelName  +  1);	  Node    elseBlock    =    finallyBlock.getNext(),    labelName);    	non-compiled	[CE]  ';'  expected	59	None	replace
239	[BUG]  [BUGGY]  Node  finallyBlock  =  finallyBlock!=  null?  finallyBlock.getParent()  :  null;  [CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                      AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  finallyBlock  =  finallyBlock!=  null?  finallyBlock.getParent()  :  null;  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  finallyBlock  =  finallyBlock!=  null?  finallyBlock.getParent()  :  null;	  Node    finallyBlock    =    finallyBlock.getParent();    	non-compiled	[CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	79	None	replace
240	[BUG]  [BUGGY]  Node  elseBlock  =  thenBlock.getNext();  Node  thenBlock  =  finallyBlock.getNext();  [CE]  cannot  find  symbol  thenBlock  [FE]    AssertionFailedError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  elseBlock  =  thenBlock.getNext();  Node  thenBlock  =  finallyBlock.getNext();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  elseBlock  =  thenBlock.getNext();  Node  thenBlock  =  finallyBlock.getNext();	          Node    elseBlock    =    finallyBlock.getNext();    Node    thenBlock    =    finallyBlock.getNext();    	non-compiled	[CE]  cannot  find  symbol  thenBlock	57	None	replace
241	[BUG]  [BUGGY]  Node  elseBlock  =  finallyBlock.getNext();  Node  thenBlock  =  thenBlock.getNext();  [CE]  variable  thenBlock  might  not  have  been  initialized  [FE]      AssertionFailedError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  elseBlock  =  finallyBlock.getNext();  Node  thenBlock  =  thenBlock.getNext();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  elseBlock  =  finallyBlock.getNext();  Node  thenBlock  =  thenBlock.getNext();	          Node    elseBlock    =    finallyBlock.getNext();    Node    thenBlock    =    finallyBlock.getNext();    	non-compiled	[CE]  variable  thenBlock  might  not  have  been  initialized	57	None	replace
242	[BUG]  [BUGGY]  Node  elseBlock  =  node.getFirstChild();  Node  otherBlock  =  node.getFirstChild();  [CE]  cannot  find  symbol  node  [FE]    AssertionFailedError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  elseBlock  =  node.getFirstChild();  Node  otherBlock  =  node.getFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  elseBlock  =  node.getFirstChild();  Node  otherBlock  =  node.getFirstChild();	          Node    elseBlock    =    n.getFirstChild();    Node    otherBlock    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  node	52	None	replace
243	[BUG]  [BUGGY]  triesMinimizeExits(finallyBlock,  labelName,  exitType);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  triesMinimizeExits(finallyBlock,  labelName,  exitType);  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	triesMinimizeExits(finallyBlock,  labelName,  exitType);	  triesMinimizeExits(finallyBlock,    exitType,    labelName);    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
244	[BUG]  [BUGGY]  triesMinimizeExits(labelName,  exitType,  finallyBlock);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  triesMinimizeExits(labelName,  exitType,  finallyBlock);  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	triesMinimizeExits(labelName,  exitType,  finallyBlock);	  triesMinimizeExits(finallyBlock,    exitType,    labelName);    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
245	[BUG]  [BUGGY]  triesMinimizeExits(n,  exitType,  labelName);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  triesMinimizeExits(n,  exitType,  labelName);  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	triesMinimizeExits(n,  exitType,  labelName);	  triesMinimizeExits(finallyBlock,    exitType,    labelName);    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
246	[BUG]  [BUGGY]  if(finallyBlock!=  null)  {  tryMinimizeExits(n,  exitType,  labelName);  }  else  {  tryMinimizeExits(n,  finallyBlock,  labelName);  }  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]    StackOverflowError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  if(finallyBlock!=  null)  {  tryMinimizeExits(n,  exitType,  labelName);  }  else  {  tryMinimizeExits(n,  finallyBlock,  labelName);  }  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	if(finallyBlock!=  null)  {  tryMinimizeExits(n,  exitType,  labelName);  }  else  {  tryMinimizeExits(n,  finallyBlock,  labelName);  }	  tryMinimizeExits(n,    exitType,    labelName);    tryMinimizeExits(n,    exitType,    labelName);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	43	None	replace
247	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  if(finallyBlock!=  null)  {  tryMinimizeExits(n,  exitType,  labelName);  }  else  {  tryMinimizeExits(n,  exitType,  labelName);  }  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	add	if(finallyBlock!=  null)  {  tryMinimizeExits(n,  exitType,  labelName);  }  else  {  tryMinimizeExits(n,  exitType,  labelName);  }	  tryMinimizeExits(n,    exitType,    labelName);    tryMinimizeExits(n,    exitType,    labelName);    	compilable	  [FE]  StackOverflowError  	43	2	replace
248	[BUG]  [BUGGY]  if(finallyBlock!=  null)  {  tryMinimizeExits(n,  exitType,  labelName);  }  else  {  tryMinimizeExits(n,  exitType,  labelName);  }  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  if(finallyBlock!=  null)  {  tryMinimizeExits(n,  exitType,  labelName);  }  else  {  tryMinimizeExits(n,  exitType,  labelName);  }  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	if(finallyBlock!=  null)  {  tryMinimizeExits(n,  exitType,  labelName);  }  else  {  tryMinimizeExits(n,  exitType,  labelName);  }	  tryMinimizeExits(n,    exitType,    labelName);    tryMinimizeExits(n,    exitType,    labelName);    	compilable	  [FE]  StackOverflowError  	43	2	replace
249	[BUG]  [BUGGY]  tryMinimizeFinally(finallyBlock,  labelName,  exitType);  [CE]  cannot  find  symbol  [FE]        StackOverflowError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMinimizeFinally(finallyBlock,  labelName,  exitType);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeFinally(finallyBlock,  labelName,  exitType);	  tryMinimizeFinally(finallyBlock,    exitType,    labelName);    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
250	[BUG]  [BUGGY]  tryMinimizeFinally(finallyBlock,  escapeType,  labelName);  [CE]  cannot  find  symbol  escapeType  [FE]          StackOverflowError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMinimizeFinally(finallyBlock,  escapeType,  labelName);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeFinally(finallyBlock,  escapeType,  labelName);	  tryMinimizeFinally(finallyBlock,    exitType,    labelName);    	non-compiled	[CE]  cannot  find  symbol  escapeType	90	None	replace
251	[BUG]  [BUGGY]  parent.replaceChild(n,  tryMinimizeExits(lastBlock,  exitType,  labelName));  [CE]  cannot  find  symbol  lastBlock  [FE]          AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  parent.replaceChild(n,  tryMinimizeExits(lastBlock,  exitType,  labelName));  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	parent.replaceChild(n,  tryMinimizeExits(lastBlock,  exitType,  labelName));	  parent.replaceChild(n,    tryMinimizeExits(n,    exitType,    labelName));    	non-compiled	[CE]  cannot  find  symbol  lastBlock	111	None	replace
252	[BUG]  [BUGGY]  if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  labelName,  exitType,  labelName);  }  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  labelName,  exitType,  labelName);  }  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  labelName,  exitType,  labelName);  }	  if(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    labelName,    exitType);    }    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	89	None	replace
253	[BUG]  [BUGGY]  if(finallyBlock!=  null)  {  tryMinimizeExits(labelName,  finallyBlock,  exitType);  }  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  if(finallyBlock!=  null)  {  tryMinimizeExits(labelName,  finallyBlock,  exitType);  }  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	if(finallyBlock!=  null)  {  tryMinimizeExits(labelName,  finallyBlock,  exitType);  }	  if(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    labelName,    exitType);    }    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	89	None	replace
254	[BUG]  [BUGGY]  Node  elseBlock  =  finallyBlock.getfirstChild();  Node  thenBlock  =  finallyBlock.getLastChild();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  elseBlock  =  finallyBlock.getfirstChild();  Node  thenBlock  =  finallyBlock.getLastChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  elseBlock  =  finallyBlock.getfirstChild();  Node  thenBlock  =  finallyBlock.getLastChild();	          Node    elseBlock    =    finallyBlock.getLastChild();    Node    thenBlock    =    finallyBlock.getLastChild();    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
255	[BUG]  [BUGGY]  tryMinimizeExits(finalBlock,  labelName,  falseBlock);  [CE]  cannot  find  symbol  finalBlock  [FE]                      AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMinimizeExits(finalBlock,  labelName,  falseBlock);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(finalBlock,  labelName,  falseBlock);	  tryMinimizeExits(finalBlock,    labelName,    null);    	non-compiled	[CE]  cannot  find  symbol  finalBlock	84	None	replace
256	[BUG]  [BUGGY]  tryMinimizeExits(n,  finallyBlock.getFirstChild(),  labelName);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]        StackOverflowError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMinimizeExits(n,  finallyBlock.getFirstChild(),  labelName);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(n,  finallyBlock.getFirstChild(),  labelName);	  tryMinimizeExits(n,    exitType,    labelName);    tryMinimizeExits(n,    escapeType,    labelName);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	101	None	replace
257	[BUG]  [BUGGY]          if(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock  ==  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock  ==  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]          if(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock  ==  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock  ==  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	                if(finallyBlock!=        null)        {        tryMinimizeExits(finallyBlock,        exitType,        labelName);        }        if(finallyBlock    ==    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock  ==  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName	  	non-compiled	[CE]  ')'  expected	12	None	add
258	[BUG]  [BUGGY]          if(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock  ==  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock  >=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]      AssertionFailedError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]          if(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock  ==  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock  >=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	                if(finallyBlock!=        null)        {        tryMinimizeExits(finallyBlock,        exitType,        labelName);        }        if(finallyBlock    ==    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock  >=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	12	None	add
259	[BUG]  [BUGGY]          if(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock  ==  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock  ==  null)  {  tryMinimizeExits(finallyBlock,  exitType  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]          if(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock  ==  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock  ==  null)  {  tryMinimizeExits(finallyBlock,  exitType  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	                if(finallyBlock!=        null)        {        tryMinimizeExits(finallyBlock,        exitType,        labelName);        }        if(finallyBlock    ==    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock  ==  null)  {  tryMinimizeExits(finallyBlock,  exitType	  	non-compiled	[CE]  ')'  expected	12	None	add
260	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  elseBlock.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]            AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  elseBlock.getFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  elseBlock.getFirstChild();	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    elseBlock    =    n.getFirstChild();    	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	62	None	replace
261	[BUG]  [BUGGY]  Node  labelName  =  finallyBlock!=  null?  finallyBlock.getString()  : "/ ";  [CE]  variable  labelName  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                      AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  labelName  =  finallyBlock!=  null?  finallyBlock.getString()  : "/ ";  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  labelName  =  finallyBlock!=  null?  finallyBlock.getString()  : "/ ";	  Node    labelName    =    finallyBlock!=    null?    finallyBlock.getString()    :   "   ";    	non-compiled	[CE]  variable  labelName  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	102	None	replace
262	[BUG]  [BUGGY]  Node  elseBlock  =  n.getFirstChild();  Node  elseBlock  =  finallyBlock.getLastChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]              AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  elseBlock  =  n.getFirstChild();  Node  elseBlock  =  finallyBlock.getLastChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  elseBlock  =  n.getFirstChild();  Node  elseBlock  =  finallyBlock.getLastChild();	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    elseBlock    =    finallyBlock.getLastChild();    	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	63	None	replace
263	[BUG]  [BUGGY]          if(finallyBlock.isLabel())    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]          if(finallyBlock.isLabel())    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	                if(finallyBlock.isLabel())        {        tryMinimizeExits(finallyBlock,        exitType,        labelName);        }        if(finallyBlock.isLabel())    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType	  	non-compiled	[CE]  ')'  expected	65	None	add
264	[BUG]  [BUGGY]          if(finallyBlock.isLabel())    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]          if(finallyBlock.isLabel())    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	                if(finallyBlock.isLabel())        {        tryMinimizeExits(finallyBlock,        exitType,        labelName);        }        if(finallyBlock.isLabel())    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock	  	non-compiled	[CE]  ')'  expected	65	None	add
265	[BUG]  [BUGGY]  parent.replaceChild(n,  tryMinimizeExits(labelName,  exitType,  finalBlock));  [CE]  cannot  find  symbol  finalBlock  [FE]        AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  parent.replaceChild(n,  tryMinimizeExits(labelName,  exitType,  finalBlock));  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	parent.replaceChild(n,  tryMinimizeExits(labelName,  exitType,  finalBlock));	  parent.replaceChild(n,    tryMinimizeExits(finallyBlock,    exitType,    labelName));    	non-compiled	[CE]  cannot  find  symbol  finalBlock	110	None	replace
266	[BUG]  [BUGGY]  parent.replaceChild(n,  tryMinimizeExits(finallyBlock,  labelName,  exitType);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  parent.replaceChild(n,  tryMinimizeExits(finallyBlock,  labelName,  exitType);  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	parent.replaceChild(n,  tryMinimizeExits(finallyBlock,  labelName,  exitType);	  parent.replaceChild(n,    tryMinimizeExits(finallyBlock,    exitType,    labelName);    	non-compiled	[CE]  ')'  expected	112	None	replace
267	[BUG]  [BUGGY]  Node  elseBlock  =  n.getFirstChild();  Node  thenBlock  =  node.getFirstChild();  [CE]  cannot  find  symbol  node  [FE]      AssertionFailedError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  elseBlock  =  n.getFirstChild();  Node  thenBlock  =  node.getFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  elseBlock  =  n.getFirstChild();  Node  thenBlock  =  node.getFirstChild();	          Node    elseBlock    =    n.getFirstChild();    Node    thenBlock    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  node	73	None	replace
268	[BUG]  [BUGGY]  tryMinimizeExits(labelName,  finallyBlock,  escapeType);  [CE]  cannot  find  symbol  escapeType  [FE]            AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMinimizeExits(labelName,  finallyBlock,  escapeType);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(labelName,  finallyBlock,  escapeType);	  tryMinimizeExits(labelName,    finallyBlock);    	non-compiled	[CE]  cannot  find  symbol  escapeType	9	None	replace
269	[BUG]  [BUGGY]  tryMinimizeExits(extendBlock,  labelName,  exitType);  [CE]  cannot  find  symbol  extendBlock  [FE]              AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMinimizeExits(extendBlock,  labelName,  exitType);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(extendBlock,  labelName,  exitType);	  tryMinimizeExits(lastBlock,    labelName,    exitType);    	non-compiled	[CE]  cannot  find  symbol  extendBlock	119	None	replace
270	[BUG]  [BUGGY]  Node  elseBlock  =  finallyBlock!=  null?  catchCodeBlock  :  finallyBlock.getFirstChild();  [CE]  cannot  find  symbol  catchCodeBlock  [FE]          AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  elseBlock  =  finallyBlock!=  null?  catchCodeBlock  :  finallyBlock.getFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  elseBlock  =  finallyBlock!=  null?  catchCodeBlock  :  finallyBlock.getFirstChild();	  Node    elseBlock    =    finallyBlock!=    null?    falseBlock    :    finallyBlock.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  catchCodeBlock	88	None	replace
271	[BUG]  [BUGGY]  Node  elseBlock  =  finallyBlock!=  null?  catchNodeBlock  :  finallyBlock.getFirstChild();  [CE]  cannot  find  symbol  catchNodeBlock  [FE]            AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  elseBlock  =  finallyBlock!=  null?  catchNodeBlock  :  finallyBlock.getFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  elseBlock  =  finallyBlock!=  null?  catchNodeBlock  :  finallyBlock.getFirstChild();	  Node    elseBlock    =    finallyBlock!=    null?    falseBlock    :    finallyBlock.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  catchNodeBlock	88	None	replace
272	[BUG]  [BUGGY]  tryMinimizeExits(labelName,  entryType,  exitType,  finallyBlock);  [CE]  cannot  find  symbol  entryType  [FE]                  AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMinimizeExits(labelName,  entryType,  exitType,  finallyBlock);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(labelName,  entryType,  exitType,  finallyBlock);	  tryMinimizeExits(labelName,    finallyBlock,    exitType,    exitType);    	non-compiled	[CE]  cannot  find  symbol  entryType	98	None	replace
273	[BUG]  [BUGGY]  tryMinimizeExits(labelName,  n,  exitType,  finallyBlock);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMinimizeExits(labelName,  n,  exitType,  finallyBlock);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(labelName,  n,  exitType,  finallyBlock);	  tryMinimizeExits(labelName,    finallyBlock,    exitType,    exitType);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	98	None	replace
274	[BUG]  [BUGGY]  Node  finallyBlock  =  finallyBlock.getNext(),  exitType);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  finallyBlock  =  finallyBlock.getNext(),  exitType);  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  finallyBlock  =  finallyBlock.getNext(),  exitType);	  Node    finallyBlock    =    finallyBlock.getNext(),    labelName);    	non-compiled	[CE]  ';'  expected	33	None	replace
275	[BUG]  [BUGGY]  Node  finallyBlock  =  finallyBlock.getNext(),  labelName  +  1;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  finallyBlock  =  finallyBlock.getNext(),  labelName  +  1;  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  finallyBlock  =  finallyBlock.getNext(),  labelName  +  1;	  Node    finallyBlock    =    finallyBlock.getNext(),    labelName);    	non-compiled	[CE]  ';'  expected	33	None	replace
276	[BUG]  [BUGGY]  tryMinimizeExits(catchNode,  exitType,  labelName,  finallyBlock);  [CE]  cannot  find  symbol  catchNode  [FE]                  AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMinimizeExits(catchNode,  exitType,  labelName,  finallyBlock);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(catchNode,  exitType,  labelName,  finallyBlock);	  tryMinimizeExits(catchNode,    finallyBlock,    labelName,    exitType);    	non-compiled	[CE]  cannot  find  symbol  catchNode	41	None	replace
277	[BUG]  [BUGGY]  Node  elseBlock  =  finallyBlock!=  null?  finallyBlock.getNext()  :  firstBlock.getNext();  [CE]  cannot  find  symbol  firstBlock  [FE]              AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  elseBlock  =  finallyBlock!=  null?  finallyBlock.getNext()  :  firstBlock.getNext();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  elseBlock  =  finallyBlock!=  null?  finallyBlock.getNext()  :  firstBlock.getNext();	          Node    elseBlock    =    finallyBlock.getNext();    Node    elseBlock    =    thenBlock.getNext();    	non-compiled	[CE]  cannot  find  symbol  firstBlock	58	None	replace
278	[BUG]  [BUGGY]  Node  elseBlock  =  finallyBlock!=  null?  finallyBlock.getNext()  :  nextBlock.getNext();  [CE]  cannot  find  symbol  nextBlock  [FE]                AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  elseBlock  =  finallyBlock!=  null?  finallyBlock.getNext()  :  nextBlock.getNext();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  elseBlock  =  finallyBlock!=  null?  finallyBlock.getNext()  :  nextBlock.getNext();	          Node    elseBlock    =    finallyBlock.getNext();    Node    elseBlock    =    thenBlock.getNext();    	non-compiled	[CE]  cannot  find  symbol  nextBlock	58	None	replace
279	[BUG]  [BUGGY]  Node  labelName  =  finalementBlock.getString();  [CE]  variable  labelName  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                        AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  labelName  =  finalementBlock.getString();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  labelName  =  finalementBlock.getString();	  Node    labelName    =    finallyBlock.getString()    +    1;    	non-compiled	[CE]  variable  labelName  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	18	None	replace
280	[BUG]  [BUGGY]  Node  labelName  =  finallyBlock.getString(),  exitType  +  1);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  labelName  =  finallyBlock.getString(),  exitType  +  1);  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  labelName  =  finallyBlock.getString(),  exitType  +  1);	  Node    labelName    =    finallyBlock.getString(),    exitType);    	non-compiled	[CE]  ';'  expected	17	None	replace
281	[BUG]  [BUGGY]  Node  labelName  =  finallyBlock.getString(),  escapeType);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  labelName  =  finallyBlock.getString(),  escapeType);  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  labelName  =  finallyBlock.getString(),  escapeType);	  Node    labelName    =    finallyBlock.getString(),    exitType);    	non-compiled	[CE]  ';'  expected	17	None	replace
282	[BUG]  [BUGGY]  tryMinimizeExits(finalBlock,  labelName,  lastBlock);  [CE]  cannot  find  symbol  finalBlock  [FE]                AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMinimizeExits(finalBlock,  labelName,  lastBlock);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(finalBlock,  labelName,  lastBlock);	  tryMinimizeExits(lastBlock,    labelName,    finallyBlock);    	non-compiled	[CE]  cannot  find  symbol  finalBlock	113	None	replace
283	[BUG]  [BUGGY]  tryMinimizeExits(finalBlock,  labelName,  catchCodeBlock);  [CE]  cannot  find  symbol  finalBlock  [FE]                  AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMinimizeExits(finalBlock,  labelName,  catchCodeBlock);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(finalBlock,  labelName,  catchCodeBlock);	  tryMinimizeExits(lastBlock,    labelName,    finallyBlock);    	non-compiled	[CE]  cannot  find  symbol  finalBlock	113	None	replace
284	[BUG]  [BUGGY]  Node  finallyBlock  =  finallyBlock!=  null?  finallyBlock.cloneTree()  :  null;  [CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                        AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  finallyBlock  =  finallyBlock!=  null?  finallyBlock.cloneTree()  :  null;  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  finallyBlock  =  finallyBlock!=  null?  finallyBlock.cloneTree()  :  null;	  Node    finallyBlock    =    finallyBlock.cloneTree();    	non-compiled	[CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	80	None	replace
285	[BUG]  [BUGGY]  Node  finallyBlock  =  finallyBlock.cloneTree(n);  [CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                          AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  finallyBlock  =  finallyBlock.cloneTree(n);  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  finallyBlock  =  finallyBlock.cloneTree(n);	  Node    finallyBlock    =    finallyBlock.cloneTree();    	non-compiled	[CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	80	None	replace
286	[BUG]  [BUGGY]  Node  elseBlock  =  finallyBlock  ==  null?  catchCodeBlock  :  finallyBlock.getNext();  [CE]  cannot  find  symbol  catchCodeBlock  [FE]        AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  elseBlock  =  finallyBlock  ==  null?  catchCodeBlock  :  finallyBlock.getNext();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  elseBlock  =  finallyBlock  ==  null?  catchCodeBlock  :  finallyBlock.getNext();	  Node    elseBlock    =    finallyBlock    ==    null?    falseBlock    :    finallyBlock.getNext();    	non-compiled	[CE]  cannot  find  symbol  catchCodeBlock	85	None	replace
287	[BUG]  [BUGGY]  tryMinimizeExits(n,  finallyBlock,  labelName,  exitType,  exitType);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMinimizeExits(n,  finallyBlock,  labelName,  exitType,  exitType);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(n,  finallyBlock,  labelName,  exitType,  exitType);	  tryMinimizeExits(n,    labelName,    exitType,    exitType);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	4	None	replace
288	[BUG]  [BUGGY]  tryMinimizeExits(finallyBlock,  labelName,  entryType,  labelName);  [CE]  cannot  find  symbol  entryType  [FE]              AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMinimizeExits(finallyBlock,  labelName,  entryType,  labelName);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(finallyBlock,  labelName,  entryType,  labelName);	  tryMinimizeExits(finallyBlock,    labelName,    escapeType,    labelName);    	non-compiled	[CE]  cannot  find  symbol  entryType	75	None	replace
289	[BUG]  [BUGGY]  tryMinimizeExits(finallyBlock,  labelName,  endType,  labelName);  [CE]  cannot  find  symbol  endType  [FE]                AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMinimizeExits(finallyBlock,  labelName,  endType,  labelName);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(finallyBlock,  labelName,  endType,  labelName);	  tryMinimizeExits(finallyBlock,    labelName,    escapeType,    labelName);    	non-compiled	[CE]  cannot  find  symbol  endType	75	None	replace
290	[BUG]  [BUGGY]  tryMinimizeExits(enfinBlock,  labelName);  [CE]  cannot  find  symbol  enfinBlock  [FE]                    AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMinimizeExits(enfinBlock,  labelName);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(enfinBlock,  labelName);	  tryMinimizeExits(finalBlock,    labelName);    	non-compiled	[CE]  cannot  find  symbol  enfinBlock	83	None	replace
291	[BUG]  [BUGGY]  Node  finallyBlock  =  finallyBlock!=  null?  finallyBlock.getLastChild()  :  finallyBlock.getFirstChild();  [CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                      AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  finallyBlock  =  finallyBlock!=  null?  finallyBlock.getLastChild()  :  finallyBlock.getFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  finallyBlock  =  finallyBlock!=  null?  finallyBlock.getLastChild()  :  finallyBlock.getFirstChild();	  Node    finallyBlock    =    finallyBlock.getFirstChild();    	non-compiled	[CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	34	None	replace
292	[BUG]  [BUGGY]  Node  labelName  =  finallyBlock  ==  null?  null  :  finallyBlock.getLabelName();  [CE]  variable  labelName  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                          AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  labelName  =  finallyBlock  ==  null?  null  :  finallyBlock.getLabelName();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  labelName  =  finallyBlock  ==  null?  null  :  finallyBlock.getLabelName();	  Node    labelName    =    finallyBlock.getLabelName();    	non-compiled	[CE]  variable  labelName  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	19	None	replace
293	[BUG]  [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  thenBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  Node  thenBlock  =  n.getfirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  thenBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  Node  thenBlock  =  n.getfirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	                Node        elseBlock        =        n.getFirstChild();        Node    thenBlock    =    n.getFirstChild();    Node  elseBlock  =  n.getFirstChild();  Node  thenBlock  =  n.getfirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	72	None	add
294	[BUG]  [BUGGY]          if(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]          if(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	                if(finallyBlock!=        null)        {        tryMinimizeExits(finallyBlock,        exitType,        labelName);        }        if(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName	  	non-compiled	[CE]  ')'  expected	10	None	add
295	[BUG]  [BUGGY]          if(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]          if(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	                if(finallyBlock!=        null)        {        tryMinimizeExits(finallyBlock,        exitType,        labelName);        }        if(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType	  	non-compiled	[CE]  ')'  expected	10	None	add
296	[BUG]  [BUGGY]  safelyBlock.setLabelName(finallyBlock.getLabelName());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  safelyBlock.setLabelName(finallyBlock.getLabelName());  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	safelyBlock.setLabelName(finallyBlock.getLabelName());	          if(finallyBlock.isLabel())    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock.isLabel())    {    tryMinimizeExits(finallyBlock,    escapeType,    labelName);    }    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
297	[BUG]  [BUGGY]  tryMinimizeExits(labelName,  exitType,  finallyBlock,  catchNode);  [CE]  cannot  find  symbol  catchNode  [FE]                  AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMinimizeExits(labelName,  exitType,  finallyBlock,  catchNode);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(labelName,  exitType,  finallyBlock,  catchNode);	  tryMinimizeExits(labelName,    exitType,    finallyBlock);    	non-compiled	[CE]  cannot  find  symbol  catchNode	1	None	replace
298	[BUG]  [BUGGY]  Node  elseBlock  =  n.getFirstChild();  tryMinimizeExits(catchNode,  exitType,  labelName);  [CE]  cannot  find  symbol  catchNode  [FE]                  AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  elseBlock  =  n.getFirstChild();  tryMinimizeExits(catchNode,  exitType,  labelName);  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  elseBlock  =  n.getFirstChild();  tryMinimizeExits(catchNode,  exitType,  labelName);	  Node    elseBlock    =    n.getFirstChild();    tryMinimizeExits(catchCodeBlock,    exitType,    labelName);    	non-compiled	[CE]  cannot  find  symbol  catchNode	26	None	replace
299	[BUG]  [BUGGY]  tryMinimizeExits(n,    exitType,    labelName);    tryMinimizeExits(n,  exitType,  labelName);  tryMinimizeExits(n,  exitType,  labelName);  tryMinimizeExits(n,  finallyBlock,  labelName);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]    StackOverflowError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMinimizeExits(n,    exitType,    labelName);    tryMinimizeExits(n,  exitType,  labelName);  tryMinimizeExits(n,  exitType,  labelName);  tryMinimizeExits(n,  finallyBlock,  labelName);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(n,        exitType,        labelName);        tryMinimizeExits(n,    exitType,    labelName);    tryMinimizeExits(n,  exitType,  labelName);  tryMinimizeExits(n,  finallyBlock,  labelName);	  	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	42	None	add
300	[BUG]  [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  thenBlock  =  n.getFirstChild();  Node  elseBlock  =  firstBlock.getFirstChild();  Node  thenBlock  =  n.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  thenBlock  =  n.getFirstChild();  Node  elseBlock  =  firstBlock.getFirstChild();  Node  thenBlock  =  n.getFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	                Node        elseBlock        =        n.getFirstChild();        Node    thenBlock    =    n.getFirstChild();    Node  elseBlock  =  firstBlock.getFirstChild();  Node  thenBlock  =  n.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	72	None	add
301	[BUG]  [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  thenBlock  =  n.getFirstChild();  Node  elseBlock  =  node.getFirstChild();  Node  thenBlock  =  n.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      AssertionFailedError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  thenBlock  =  n.getFirstChild();  Node  elseBlock  =  node.getFirstChild();  Node  thenBlock  =  n.getFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	                Node        elseBlock        =        n.getFirstChild();        Node    thenBlock    =    n.getFirstChild();    Node  elseBlock  =  node.getFirstChild();  Node  thenBlock  =  n.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	72	None	add
302	[BUG]  [BUGGY]  Node  finallyBlock  =  finallyBlock.getNext(),  escapeType);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  finallyBlock  =  finallyBlock.getNext(),  escapeType);  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  finallyBlock  =  finallyBlock.getNext(),  escapeType);	  Node    finallyBlock    =    finallyBlock.getNext(),    labelName);    	non-compiled	[CE]  ';'  expected	33	None	replace
303	[BUG]  [BUGGY]  tryMinimizeExits(n,  endType,  labelName);  [CE]  cannot  find  symbol  endType  [FE]              StackOverflowError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMinimizeExits(n,  endType,  labelName);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(n,  endType,  labelName);	  tryMinimizeExits(n,    exitType,    labelName);    attemptMinimizeExits(n,    exitType,    labelName);    	non-compiled	[CE]  cannot  find  symbol  endType	46	None	replace
304	[BUG]  [BUGGY]  tryMinimizeExits(labelName,  finallyBlock,  catchCodeBlock);  [CE]  cannot  find  symbol  catchCodeBlock  [FE]                AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMinimizeExits(labelName,  finallyBlock,  catchCodeBlock);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(labelName,  finallyBlock,  catchCodeBlock);	  tryMinimizeExits(labelName,    finallyBlock,    labelName);    	non-compiled	[CE]  cannot  find  symbol  catchCodeBlock	69	None	replace
305	[BUG]  [BUGGY]  Node  labelName  =  exitType.getString(),  finallyBlock);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  labelName  =  exitType.getString(),  finallyBlock);  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  labelName  =  exitType.getString(),  finallyBlock);	  Node    labelName    =    finallyBlock.getString(),    exitType);    	non-compiled	[CE]  ';'  expected	17	None	replace
306	[BUG]  [BUGGY]  Node  elseBlock  =  finallyBlock  ==  null?  finallyBlock.getFirstChild()  :  finalBlock.getFirstChild();  [CE]  cannot  find  symbol  finalBlock  [FE]        AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  elseBlock  =  finallyBlock  ==  null?  finallyBlock.getFirstChild()  :  finalBlock.getFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  elseBlock  =  finallyBlock  ==  null?  finallyBlock.getFirstChild()  :  finalBlock.getFirstChild();	          Node    elseBlock    =    finallyBlock.getFirstChild();    Node    elseBlock    =    finallyBlock.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  finalBlock	27	None	replace
307	[BUG]  [BUGGY]  tryMinimizeExits(lastBlock,  labelName,  null);  [CE]  cannot  find  symbol  lastBlock  [FE]                      AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMinimizeExits(lastBlock,  labelName,  null);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(lastBlock,  labelName,  null);	  tryMinimizeExits(finalBlock,    labelName,    null);    	non-compiled	[CE]  cannot  find  symbol  lastBlock	84	None	replace
308	[BUG]  [BUGGY]  tryMinimizeExits(finallyBlock,  labelName,  endType);  [CE]  cannot  find  symbol  endType  [FE]                AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMinimizeExits(finallyBlock,  labelName,  endType);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(finallyBlock,  labelName,  endType);	  tryMinimizeExits(finallyBlock,    labelName,    escapeType);    	non-compiled	[CE]  cannot  find  symbol  endType	74	None	replace
309	[BUG]  [BUGGY]  tryMinimizeExits(finallyBlock,  labelName,  exitType,  labelName,  finallyBlock);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMinimizeExits(finallyBlock,  labelName,  exitType,  labelName,  finallyBlock);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(finallyBlock,  labelName,  exitType,  labelName,  finallyBlock);	  tryMinimizeExits(finallyBlock,    labelName,    exitType,    labelName);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	39	None	replace
310	[BUG]  [BUGGY]  Iterator  <  Node>  it  =  finallyBlock.iterator();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Iterator  <  Node>  it  =  finallyBlock.iterator();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Iterator  <  Node>  it  =  finallyBlock.iterator();	          if(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock    >=    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
311	[BUG]  [BUGGY]  Node  elseBlock  =  otherCatchNodes.getFirstChild();  [CE]  cannot  find  symbol  otherCatchNodes  [FE]    AssertionFailedError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  elseBlock  =  otherCatchNodes.getFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  elseBlock  =  otherCatchNodes.getFirstChild();	          Node    elseBlock    =    n.getFirstChild();    Node    otherBlock    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  otherCatchNodes	52	None	replace
312	[BUG]  [BUGGY]  Node  elseBlock  =  firstChild.getFirstChild();  [CE]  cannot  find  symbol  firstChild  [FE]            AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  elseBlock  =  firstChild.getFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  elseBlock  =  firstChild.getFirstChild();	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    elseBlock    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  firstChild	62	None	replace
313	[BUG]  [BUGGY]  Node  elseBlock  =  finallyBlock!=  null?  getCatchNodes().getFirstChild()  :  finallyBlock.getFirstChild();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  elseBlock  =  finallyBlock!=  null?  getCatchNodes().getFirstChild()  :  finallyBlock.getFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  elseBlock  =  finallyBlock!=  null?  getCatchNodes().getFirstChild()  :  finallyBlock.getFirstChild();	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    elseBlock    =    finallyBlock.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
314	[BUG]  [BUGGY]  Node  elseBlock  =  finallyBlock!=  null?  getCatchNodes().getFirstChild()  :  finalBlock.getFirstChild();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  elseBlock  =  finallyBlock!=  null?  getCatchNodes().getFirstChild()  :  finalBlock.getFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  elseBlock  =  finallyBlock!=  null?  getCatchNodes().getFirstChild()  :  finalBlock.getFirstChild();	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    elseBlock    =    finallyBlock.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
315	[BUG]  [BUGGY]  tryMinimizeExits(lastBlock,  labelName,  exitType,  labelName);  [CE]  cannot  find  symbol  lastBlock  [FE]              AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMinimizeExits(lastBlock,  labelName,  exitType,  labelName);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(lastBlock,  labelName,  exitType,  labelName);	  tryMinimizeExits(finallyBlock,    labelName,    escapeType,    labelName);    	non-compiled	[CE]  cannot  find  symbol  lastBlock	75	None	replace
316	[BUG]  [BUGGY]  tryMinimizeFinally(lastBlock,  exitType,  labelName);  [CE]  cannot  find  symbol  lastBlock  [FE]        StackOverflowError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMinimizeFinally(lastBlock,  exitType,  labelName);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeFinally(lastBlock,  exitType,  labelName);	  tryMinimizeFinally(finallyBlock,    exitType,    labelName);    	non-compiled	[CE]  cannot  find  symbol  lastBlock	90	None	replace
317	[BUG]  [BUGGY]  tryMinimizeFinally(finallyBlock,  exitType,  labelName,  catchNode);  [CE]  cannot  find  symbol  catchNode  [FE]          StackOverflowError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMinimizeFinally(finallyBlock,  exitType,  labelName,  catchNode);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeFinally(finallyBlock,  exitType,  labelName,  catchNode);	  tryMinimizeFinally(finallyBlock,    exitType,    labelName);    	non-compiled	[CE]  cannot  find  symbol  catchNode	90	None	replace
318	[BUG]  [BUGGY]          if(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock  ==  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock  ==  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock  ==  null)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]          if(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock  ==  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock  ==  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock  ==  null)  {  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	                if(finallyBlock!=        null)        {        tryMinimizeExits(finallyBlock,        exitType,        labelName);        }        if(finallyBlock    ==    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock  ==  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	12	None	add
319	[BUG]  [BUGGY]          if(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock  ==  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock  ==  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock  ==  nu  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]          if(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock  ==  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock  ==  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock  ==  nu  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	                if(finallyBlock!=        null)        {        tryMinimizeExits(finallyBlock,        exitType,        labelName);        }        if(finallyBlock    ==    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock  ==  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock  ==  nu	  	non-compiled	[CE]  ')'  expected	12	None	add
320	[BUG]  [BUGGY]          if(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock  ==  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock  ==  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock  ==  null)  {  tryMin  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]          if(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock  ==  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock  ==  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock  ==  null)  {  tryMin  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	                if(finallyBlock!=        null)        {        tryMinimizeExits(finallyBlock,        exitType,        labelName);        }        if(finallyBlock    ==    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock  ==  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock  ==  null)  {  tryMin	  	non-compiled	[CE]  ';'  expected	12	None	add
321	[BUG]  [BUGGY]          if(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock  ==  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock  ==  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock  ==  null)  {  try  [CE]  '{'  expected  [FE]          AssertionFailedError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]          if(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock  ==  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock  ==  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock  ==  null)  {  try  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	                if(finallyBlock!=        null)        {        tryMinimizeExits(finallyBlock,        exitType,        labelName);        }        if(finallyBlock    ==    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock  ==  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock  ==  null)  {  try	  	non-compiled	[CE]  '{'  expected	12	None	add
322	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]          if(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock  ==  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock  ==  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock  ==  null)  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	add	                if(finallyBlock!=        null)        {        tryMinimizeExits(finallyBlock,        exitType,        labelName);        }        if(finallyBlock    ==    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock  ==  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock  ==  null)	  	compilable	  [FE]  AssertionFailedError  	12	2	add
323	[BUG]  [BUGGY]          if(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock  ==  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock  ==  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock  ==  null)  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]          if(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock  ==  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock  ==  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock  ==  null)  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	                if(finallyBlock!=        null)        {        tryMinimizeExits(finallyBlock,        exitType,        labelName);        }        if(finallyBlock    ==    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock  ==  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock  ==  null)	  	compilable	  [FE]  AssertionFailedError  	12	2	add
324	[BUG]  [BUGGY]  Node  labelName  =  finallyBlock  ==  null?  finallyBlock.getString()  : "   ";  [CE]  variable  labelName  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                      AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  labelName  =  finallyBlock  ==  null?  finallyBlock.getString()  : "   ";  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  labelName  =  finallyBlock  ==  null?  finallyBlock.getString()  : "   ";	  Node    labelName    =    finallyBlock!=    null?    finallyBlock.getString()    :   "   ";    	non-compiled	[CE]  variable  labelName  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	102	None	replace
325	[BUG]  [BUGGY]  Node  labelName  =  finallyBlock!=  null?  finallyBlock.getString()  : "# ";  [CE]  variable  labelName  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                        AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  labelName  =  finallyBlock!=  null?  finallyBlock.getString()  : "# ";  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  labelName  =  finallyBlock!=  null?  finallyBlock.getString()  : "# ";	  Node    labelName    =    finallyBlock!=    null?    finallyBlock.getString()    :   "   ";    	non-compiled	[CE]  variable  labelName  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	102	None	replace
326	[BUG]  [BUGGY]  parent.replaceChild(n,  tryMinimizeExit(n,  exitType,  labelName));  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  parent.replaceChild(n,  tryMinimizeExit(n,  exitType,  labelName));  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	parent.replaceChild(n,  tryMinimizeExit(n,  exitType,  labelName));	          if(finallyBlock.isLabel())    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    If(finallyBlock.isLabel())    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
327	[BUG]  [BUGGY]  enableExceptionHandler(labelName);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  enableExceptionHandler(labelName);  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	enableExceptionHandler(labelName);	  aughtExceptionHandler.handleMissingName(labelName);    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
328	[BUG]  [BUGGY]  Node  elseBlock  =  finallyBlock!=  null?  finalBlock.getFirstChild()  :  allCatchNodes.getFirstChild();  [CE]  cannot  find  symbol  finalBlock  [FE]        AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  elseBlock  =  finallyBlock!=  null?  finalBlock.getFirstChild()  :  allCatchNodes.getFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  elseBlock  =  finallyBlock!=  null?  finalBlock.getFirstChild()  :  allCatchNodes.getFirstChild();	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    elseBlock    =    finalBlock.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  finalBlock	114	None	replace
329	[BUG]  [BUGGY]  Node  elseBlock  =  finallyBlock!=  null?  finalBlock.getFirstChild()  :  AllCatchNodes.getFirstChild();  [CE]  cannot  find  symbol  finalBlock  [FE]          AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  elseBlock  =  finallyBlock!=  null?  finalBlock.getFirstChild()  :  AllCatchNodes.getFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  elseBlock  =  finallyBlock!=  null?  finalBlock.getFirstChild()  :  AllCatchNodes.getFirstChild();	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    elseBlock    =    finalBlock.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  finalBlock	114	None	replace
330	[BUG]  [BUGGY]  Node  elseBlock  =  finallyBlock!=  null?  finalBlock.getFirstChild()  :  ALLCatchNodes.getFirstChild();  [CE]  cannot  find  symbol  finalBlock  [FE]            AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  elseBlock  =  finallyBlock!=  null?  finalBlock.getFirstChild()  :  ALLCatchNodes.getFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  elseBlock  =  finallyBlock!=  null?  finalBlock.getFirstChild()  :  ALLCatchNodes.getFirstChild();	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    elseBlock    =    finalBlock.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  finalBlock	114	None	replace
331	[BUG]  [BUGGY]          if(finallyBlock.isLabel())    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock.  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]          if(finallyBlock.isLabel())    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock.  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	                if(finallyBlock.isLabel())        {        tryMinimizeExits(finallyBlock,        exitType,        labelName);        }        if(finallyBlock.isLabel())    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock.	  	non-compiled	[CE]  ')'  expected	65	None	add
332	[BUG]  [BUGGY]          if(finallyBlock.isLabel())    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]          if(finallyBlock.isLabel())    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	                if(finallyBlock.isLabel())        {        tryMinimizeExits(finallyBlock,        exitType,        labelName);        }        if(finallyBlock.isLabel())    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock	  	non-compiled	[CE]  ')'  expected	65	None	add
333	[BUG]  [BUGGY]          if(finallyBlock.isLabel())    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if  [CE]  '('  expected  [FE]        AssertionFailedError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]          if(finallyBlock.isLabel())    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	                if(finallyBlock.isLabel())        {        tryMinimizeExits(finallyBlock,        exitType,        labelName);        }        if(finallyBlock.isLabel())    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if	  	non-compiled	[CE]  '('  expected	65	None	add
334	[BUG]  [BUGGY]          if(finallyBlock.isLabel())    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finally  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]          if(finallyBlock.isLabel())    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finally  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	                if(finallyBlock.isLabel())        {        tryMinimizeExits(finallyBlock,        exitType,        labelName);        }        if(finallyBlock.isLabel())    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finally	  	non-compiled	[CE]  illegal  start  of  expression	65	None	add
335	[BUG]  [BUGGY]  Node  elseBlock  =  finallyBlock.removeFirstChild();  Node  elseBlock  =  finalBlock.removeFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  elseBlock  =  finallyBlock.removeFirstChild();  Node  elseBlock  =  finalBlock.removeFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node    elseBlock    =    finallyBlock.removeFirstChild();    Node  elseBlock  =  finalBlock.removeFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	96	None	add
336	[BUG]  [BUGGY]  tryMinimizeExits(lastBlock,  labelName,  exitType,  exitType);  [CE]  cannot  find  symbol  lastBlock  [FE]                        AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMinimizeExits(lastBlock,  labelName,  exitType,  exitType);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(lastBlock,  labelName,  exitType,  exitType);	  tryMinimizeExits(n,    labelName,    exitType,    exitType);    	non-compiled	[CE]  cannot  find  symbol  lastBlock	4	None	replace
337	[BUG]  [BUGGY]  tryMinimizeExits(lastBlock,  labelName);  [CE]  cannot  find  symbol  lastBlock  [FE]                    AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMinimizeExits(lastBlock,  labelName);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(lastBlock,  labelName);	  tryMinimizeExits(finalBlock,    labelName);    	non-compiled	[CE]  cannot  find  symbol  lastBlock	83	None	replace
338	[BUG]  [BUGGY]  parent  ==  null)  {  tryMinimizeExits(n,  finallyBlock,  labelName);  }  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  parent  ==  null)  {  tryMinimizeExits(n,  finallyBlock,  labelName);  }  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	parent  ==  null)  {  tryMinimizeExits(n,  finallyBlock,  labelName);  }	  parent    ==    null)    {    tryMinimizeExits(finallyBlock,    labelName);    }    	non-compiled	[CE]  not  a  statement	94	None	replace
339	[BUG]  [BUGGY]  Node  parent  ==  null)  {  tryMinimizeExits(parent,  exitType,  labelName);  }  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  parent  ==  null)  {  tryMinimizeExits(parent,  exitType,  labelName);  }  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  parent  ==  null)  {  tryMinimizeExits(parent,  exitType,  labelName);  }	  parent    ==    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    	non-compiled	[CE]  ';'  expected	93	None	replace
340	[BUG]  [BUGGY]  tryMinimizeExits(lastNode,  labelName,  finallyBlock);  [CE]  cannot  find  symbol  lastNode  [FE]            AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMinimizeExits(lastNode,  labelName,  finallyBlock);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(lastNode,  labelName,  finallyBlock);	  tryMinimizeExits(labelName,    finallyBlock);    	non-compiled	[CE]  cannot  find  symbol  lastNode	9	None	replace
341	[BUG]  [BUGGY]  Node  elseBlock  =  finallyBlock!=  null?  finallyBlock.getNext()  :  endBlock.getNext();  [CE]  cannot  find  symbol  endBlock  [FE]        AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  elseBlock  =  finallyBlock!=  null?  finallyBlock.getNext()  :  endBlock.getNext();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  elseBlock  =  finallyBlock!=  null?  finallyBlock.getNext()  :  endBlock.getNext();	          Node    elseBlock    =    finallyBlock.getNext();    Node    elseBlock    =    finallyBlock.getNext();    	non-compiled	[CE]  cannot  find  symbol  endBlock	54	None	replace
342	[BUG]  [BUGGY]  parentNode  ==  null  ||  finallyBlock  ==  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  parentNode  ==  null  ||  finallyBlock  ==  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	parentNode  ==  null  ||  finallyBlock  ==  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }	          if(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock    ==    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    	non-compiled	[CE]  not  a  statement	13	None	replace
343	[BUG]  [BUGGY]  parentNode  ==  null  ||  finallyBlock  ==  null)  {  tryMinimizeExits(n,  exitType,  labelName);  }  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  parentNode  ==  null  ||  finallyBlock  ==  null)  {  tryMinimizeExits(n,  exitType,  labelName);  }  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	parentNode  ==  null  ||  finallyBlock  ==  null)  {  tryMinimizeExits(n,  exitType,  labelName);  }	          if(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock    ==    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    	non-compiled	[CE]  not  a  statement	13	None	replace
344	[BUG]  [BUGGY]  parentNode  ==  null  ||  finallyBlock  ==  null)  {  tryMinimizeExits(parentNode,  exitType,  labelName);  }  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  parentNode  ==  null  ||  finallyBlock  ==  null)  {  tryMinimizeExits(parentNode,  exitType,  labelName);  }  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	parentNode  ==  null  ||  finallyBlock  ==  null)  {  tryMinimizeExits(parentNode,  exitType,  labelName);  }	          if(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock    ==    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    	non-compiled	[CE]  not  a  statement	13	None	replace
345	[BUG]  [BUGGY]  Node  elseBlock  =  finallyBlock!=  null?  finallyBlock.getNextChild()  :  endType;  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  elseBlock  =  finallyBlock!=  null?  finallyBlock.getNextChild()  :  endType;  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  elseBlock  =  finallyBlock!=  null?  finallyBlock.getNextChild()  :  endType;	          Node    elseBlock    =    finallyBlock.getFirstChild();    Node    elseBlock    =    finallyBlock.getNextChild();    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
346	[BUG]  [BUGGY]  Node  elseBlock  =  finallyBlock!=  null?  finallyBlock.getNextChild()  :  node;  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  elseBlock  =  finallyBlock!=  null?  finallyBlock.getNextChild()  :  node;  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  elseBlock  =  finallyBlock!=  null?  finallyBlock.getNextChild()  :  node;	          Node    elseBlock    =    finallyBlock.getFirstChild();    Node    elseBlock    =    finallyBlock.getNextChild();    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
347	[BUG]  [BUGGY]  Node  finallyBlock  =  finallyBlock  ==  null?  finallyBlock.cloneTree()  :  null;  [CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                        AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  finallyBlock  =  finallyBlock  ==  null?  finallyBlock.cloneTree()  :  null;  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  finallyBlock  =  finallyBlock  ==  null?  finallyBlock.cloneTree()  :  null;	  Node    finallyBlock    =    finallyBlock.cloneTree();    	non-compiled	[CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	80	None	replace
348	[BUG]  [BUGGY]  Node  finallyBlock  =  finallyBlock.cloneTree(),  exitType);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  finallyBlock  =  finallyBlock.cloneTree(),  exitType);  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  finallyBlock  =  finallyBlock.cloneTree(),  exitType);	  Node    finallyBlock    =    finallyBlock.cloneTree();    	non-compiled	[CE]  ';'  expected	80	None	replace
349	[BUG]  [BUGGY]  Node  elseBlock  =  finallyBlock!=  null?  finallyBlock.getLastChild()  :  finalBlock.getLastChild();  [CE]  cannot  find  symbol  finalBlock  [FE]          AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  elseBlock  =  finallyBlock!=  null?  finallyBlock.getLastChild()  :  finalBlock.getLastChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  elseBlock  =  finallyBlock!=  null?  finallyBlock.getLastChild()  :  finalBlock.getLastChild();	          Node    elseBlock    =    finallyBlock.getLastChild();    Node    elseBlock    =    finalementBlock.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  finalBlock	6	None	replace
350	[BUG]  [BUGGY]  Node  elseBlock  =  finallyBlock.getFirstChild();  Node  thenBlock  =  thenBlock.getLastChild();  [CE]  variable  thenBlock  might  not  have  been  initialized  [FE]    AssertionFailedError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  elseBlock  =  finallyBlock.getFirstChild();  Node  thenBlock  =  thenBlock.getLastChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  elseBlock  =  finallyBlock.getFirstChild();  Node  thenBlock  =  thenBlock.getLastChild();	          Node    elseBlock    =    finallyBlock.getLastChild();    Node    thenBlock    =    finallyBlock.getLastChild();    	non-compiled	[CE]  variable  thenBlock  might  not  have  been  initialized	92	None	replace
351	[BUG]  [BUGGY]  Node  elseBlock  =  thenBlock.getFirstChild();  Node  thenBlock  =  finallyBlock.getLastChild();  [CE]  cannot  find  symbol  thenBlock  [FE]      AssertionFailedError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  elseBlock  =  thenBlock.getFirstChild();  Node  thenBlock  =  finallyBlock.getLastChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  elseBlock  =  thenBlock.getFirstChild();  Node  thenBlock  =  finallyBlock.getLastChild();	          Node    elseBlock    =    finallyBlock.getLastChild();    Node    thenBlock    =    finallyBlock.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  thenBlock	92	None	replace
352	[BUG]  [BUGGY]  Node  elseBlock  =  finallyBlock.getFirstChild();  node  thenBlock  =  finallyBlock.getLastChild();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  elseBlock  =  finallyBlock.getFirstChild();  node  thenBlock  =  finallyBlock.getLastChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  elseBlock  =  finallyBlock.getFirstChild();  node  thenBlock  =  finallyBlock.getLastChild();	          Node    elseBlock    =    finallyBlock.getLastChild();    Node    thenBlock    =    finallyBlock.getLastChild();    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
353	[BUG]  [BUGGY]  Node  elseBlock  =  finallyBlock.getNext(),  exitType);  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  elseBlock  =  finallyBlock.getNext(),  exitType);  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  elseBlock  =  finallyBlock.getNext(),  exitType);	  Node    elseBlock    =    finallyBlock.getNext(),    labelName);    	non-compiled	[CE]  ';'  expected	59	None	replace
354	[BUG]  [BUGGY]  Node  elseBlock  =  finallyBlock.getNext(),  escapeType);  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  elseBlock  =  finallyBlock.getNext(),  escapeType);  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  elseBlock  =  finallyBlock.getNext(),  escapeType);	  Node    elseBlock    =    finallyBlock.getNext(),    labelName);    	non-compiled	[CE]  ';'  expected	59	None	replace
355	[BUG]  [BUGGY]  tryMinimizeExit(lastBlock,  exitType,  labelName);  [CE]  cannot  find  symbol  lastBlock  [FE]        StackOverflowError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMinimizeExit(lastBlock,  exitType,  labelName);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExit(lastBlock,  exitType,  labelName);	  tryMinimizeExit(finallyBlock,    exitType,    labelName);    	non-compiled	[CE]  cannot  find  symbol  lastBlock	37	None	replace
356	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  if(finallyBlock!=  null)  {  tryMinimizeExits(n,  exitType,  labelName);  }  else  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	add	if(finallyBlock!=  null)  {  tryMinimizeExits(n,  exitType,  labelName);  }  else  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }	  tryMinimizeExits(n,    exitType,    labelName);    tryMinimizeExits(n,    exitType,    labelName);    	compilable	  [FE]  StackOverflowError  	43	2	replace
357	[BUG]  [BUGGY]  if(finallyBlock!=  null)  {  tryMinimizeExits(n,  exitType,  labelName);  }  else  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  if(finallyBlock!=  null)  {  tryMinimizeExits(n,  exitType,  labelName);  }  else  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	if(finallyBlock!=  null)  {  tryMinimizeExits(n,  exitType,  labelName);  }  else  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }	  tryMinimizeExits(n,    exitType,    labelName);    tryMinimizeExits(n,    exitType,    labelName);    	compilable	  [FE]  StackOverflowError  	43	2	replace
358	[BUG]  [BUGGY]  Node  finallyBlock  =  n.getFirstChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  [CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                  AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  finallyBlock  =  n.getFirstChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  finallyBlock  =  n.getFirstChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);	  Node    elseBlock    =    n.getFirstChild();    tryMinimizeExits(catchCodeBlock,    exitType,    labelName);    	non-compiled	[CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	26	None	replace
359	[BUG]  [BUGGY]  Node  labelName  =  finallyBlock!=  null?  finallyBlock.getFirstChild()  :  name;  [CE]  variable  labelName  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                            AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  labelName  =  finallyBlock!=  null?  finallyBlock.getFirstChild()  :  name;  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  labelName  =  finallyBlock!=  null?  finallyBlock.getFirstChild()  :  name;	  Node    labelName    =    finallyBlock.getFirstChild();    	non-compiled	[CE]  variable  labelName  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	20	None	replace
360	[BUG]  [BUGGY]  Node  labelName  =  finallyBlock!=  null?  finallyBlock.getFirstChild()  :  null;  [CE]  variable  labelName  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                              AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  labelName  =  finallyBlock!=  null?  finallyBlock.getFirstChild()  :  null;  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  labelName  =  finallyBlock!=  null?  finallyBlock.getFirstChild()  :  null;	  Node    labelName    =    finallyBlock.getFirstChild();    	non-compiled	[CE]  variable  labelName  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	20	None	replace
361	[BUG]  [BUGGY]  Node  labelName  =  finallyBlock!=  null?  finallyBlock.getLabelName()  :  null;  [CE]  variable  labelName  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                          AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  labelName  =  finallyBlock!=  null?  finallyBlock.getLabelName()  :  null;  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  labelName  =  finallyBlock!=  null?  finallyBlock.getLabelName()  :  null;	  Node    labelName    =    finallyBlock.getLabelName();    	non-compiled	[CE]  variable  labelName  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	19	None	replace
362	[BUG]  [BUGGY]  tryMaximizeExits(exitType,  finallyBlock,  labelName);  [CE]  cannot  find  symbol  [FE]        StackOverflowError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMaximizeExits(exitType,  finallyBlock,  labelName);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMaximizeExits(exitType,  finallyBlock,  labelName);	  tryMaximizeExits(finallyBlock,    exitType,    labelName);    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
363	[BUG]  [BUGGY]  parent.replaceChild(n,  tryMinimizeExits(n,  exitType,  labelName);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  parent.replaceChild(n,  tryMinimizeExits(n,  exitType,  labelName);  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	parent.replaceChild(n,  tryMinimizeExits(n,  exitType,  labelName);	  parent.replaceChild(n,    tryMinimizeExits(finallyBlock,    exitType,    labelName);    	non-compiled	[CE]  ')'  expected	112	None	replace
364	[BUG]  [BUGGY]  parent.replaceChild(n,  tryMinimizeExits(lastBlock,  exitType,  labelName);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  parent.replaceChild(n,  tryMinimizeExits(lastBlock,  exitType,  labelName);  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	parent.replaceChild(n,  tryMinimizeExits(lastBlock,  exitType,  labelName);	  parent.replaceChild(n,    tryMinimizeExits(finallyBlock,    exitType,    labelName);    	non-compiled	[CE]  ')'  expected	112	None	replace
365	[BUG]  [BUGGY]  While(finallyBlock!=  null  &&  finallyBlock.isLabel())  {  tryMinimizeExits(n,  exitType,  labelName);  }  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  While(finallyBlock!=  null  &&  finallyBlock.isLabel())  {  tryMinimizeExits(n,  exitType,  labelName);  }  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	While(finallyBlock!=  null  &&  finallyBlock.isLabel())  {  tryMinimizeExits(n,  exitType,  labelName);  }	  While(finallyBlock!=    null    &&    finallyBlock.isLabel())    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    	non-compiled	[CE]  ';'  expected	21	None	replace
366	[BUG]  [BUGGY]  While(finallyBlock!=  null  &&  finallyBlock.isFinally())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  While(finallyBlock!=  null  &&  finallyBlock.isFinally())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	While(finallyBlock!=  null  &&  finallyBlock.isFinally())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }	  While(finallyBlock!=    null    &&    finallyBlock.isLabel())    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    	non-compiled	[CE]  ';'  expected	21	None	replace
367	[BUG]  [BUGGY]  While(finallyBlock  ==  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  While(finallyBlock  ==  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	While(finallyBlock  ==  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }	  While(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    	non-compiled	[CE]  ';'  expected	22	None	replace
368	[BUG]  [BUGGY]          if(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  nu  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]          if(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  nu  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	                if(finallyBlock!=        null)        {        tryMinimizeExits(finallyBlock,        exitType,        labelName);        }        if(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  nu	  	non-compiled	[CE]  ')'  expected	10	None	add
369	[BUG]  [BUGGY]          if(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]          if(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	                if(finallyBlock!=        null)        {        tryMinimizeExits(finallyBlock,        exitType,        labelName);        }        if(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=	  	non-compiled	[CE]  ')'  expected	10	None	add
370	[BUG]  [BUGGY]          if(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  null)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]          if(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  null)  {  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	                if(finallyBlock!=        null)        {        tryMinimizeExits(finallyBlock,        exitType,        labelName);        }        if(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
371	[BUG]  [BUGGY]          if(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  null)  {  try  [CE]  '{'  expected  [FE]          AssertionFailedError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]          if(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  null)  {  try  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	                if(finallyBlock!=        null)        {        tryMinimizeExits(finallyBlock,        exitType,        labelName);        }        if(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  null)  {  try	  	non-compiled	[CE]  '{'  expected	10	None	add
372	[BUG]  [BUGGY]          if(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  null)  {  tryMin  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]          if(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  null)  {  tryMin  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	                if(finallyBlock!=        null)        {        tryMinimizeExits(finallyBlock,        exitType,        labelName);        }        if(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  null)  {  tryMin	  	non-compiled	[CE]  ';'  expected	10	None	add
373	[BUG]  [BUGGY]  tryMinimizeExits(finallyBlock,  catchNode,  labelName,  exitType);  [CE]  cannot  find  symbol  catchNode  [FE]                  AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMinimizeExits(finallyBlock,  catchNode,  labelName,  exitType);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(finallyBlock,  catchNode,  labelName,  exitType);	  tryMinimizeExits(catchNode,    finallyBlock,    labelName,    exitType);    	non-compiled	[CE]  cannot  find  symbol  catchNode	41	None	replace
374	[BUG]  [BUGGY]  tryMinimizeExits(finallyBlock,  labelName,  finallyBlock);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMinimizeExits(finallyBlock,  labelName,  finallyBlock);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(finallyBlock,  labelName,  finallyBlock);	  tryMinimizeExits(lastBlock,    labelName,    finallyBlock);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	113	None	replace
375	[BUG]  [BUGGY]  tryMinimizeExits(finallyBlock,  labelName,  catchNode);  [CE]  cannot  find  symbol  catchNode  [FE]                  AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMinimizeExits(finallyBlock,  labelName,  catchNode);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(finallyBlock,  labelName,  catchNode);	  tryMinimizeExits(lastBlock,    labelName,    finallyBlock);    	non-compiled	[CE]  cannot  find  symbol  catchNode	113	None	replace
376	[BUG]  [BUGGY]  tryMinimizeExits(finallyBlock,  labelName,  buffer);  [CE]  cannot  find  symbol  buffer  [FE]                    AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMinimizeExits(finallyBlock,  labelName,  buffer);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(finallyBlock,  labelName,  buffer);	  tryMinimizeExits(lastBlock,    labelName,    finallyBlock);    	non-compiled	[CE]  cannot  find  symbol  buffer	113	None	replace
377	[BUG]  [BUGGY]  parentNode  =  parentNode.getParent();  [CE]  cannot  find  symbol  parentNode  [FE]    AssertionFailedError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  parentNode  =  parentNode.getParent();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	parentNode  =  parentNode.getParent();	          if(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    	non-compiled	[CE]  cannot  find  symbol  parentNode	11	None	replace
378	[BUG]  [BUGGY]  Node  elseBlock  =  finallyBlock!=  null?  finallyBlock.getFirstChild()  :  secondBlock.getFirstChild();  [CE]  cannot  find  symbol  secondBlock  [FE]              AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  elseBlock  =  finallyBlock!=  null?  finallyBlock.getFirstChild()  :  secondBlock.getFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  elseBlock  =  finallyBlock!=  null?  finallyBlock.getFirstChild()  :  secondBlock.getFirstChild();	          Node    elseBlock    =    finallyBlock.getFirstChild();    Node    elseBlock    =    thenBlock.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  secondBlock	30	None	replace
379	[BUG]  [BUGGY]  Node  elseBlock  =  finallyBlock!=  null?  finallyBlock.getFirstChild()  :  nextBlock.getFirstChild();  [CE]  cannot  find  symbol  nextBlock  [FE]                AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  elseBlock  =  finallyBlock!=  null?  finallyBlock.getFirstChild()  :  nextBlock.getFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  elseBlock  =  finallyBlock!=  null?  finallyBlock.getFirstChild()  :  nextBlock.getFirstChild();	          Node    elseBlock    =    finallyBlock.getFirstChild();    Node    elseBlock    =    thenBlock.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  nextBlock	30	None	replace
380	[BUG]  [BUGGY]  TryMaximizeExits(n,  exitType,  labelName);  [CE]  cannot  find  symbol  [FE]        StackOverflowError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  TryMaximizeExits(n,  exitType,  labelName);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	TryMaximizeExits(n,  exitType,  labelName);	  tryMinimizeExits(n,    exitType,    labelName);    tryMaximizeExits(n,    exitType,    labelName);    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
381	[BUG]  [BUGGY]  Node  labelName  =  finallyBlock!=  null?  null  :  finallyBlock.toString();  [CE]  variable  labelName  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                      AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  labelName  =  finallyBlock!=  null?  null  :  finallyBlock.toString();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  labelName  =  finallyBlock!=  null?  null  :  finallyBlock.toString();	  Node    labelName    =    finallyBlock!=    null?    null    :    finallyBlock.getString();    	non-compiled	[CE]  variable  labelName  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	87	None	replace
382	[BUG]  [BUGGY]  Node  finallyBlock  =  finallyBlock.nextChild();  [CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                    AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  finallyBlock  =  finallyBlock.nextChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  finallyBlock  =  finallyBlock.nextChild();	  Node    finallyBlock    =    finallyBlock.removeFirstChild();    	non-compiled	[CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	100	None	replace
383	[BUG]  [BUGGY]  tryMinimizeExits(labelName,  exitType,  finallyBlock,  catchCodeBlock);  [CE]  cannot  find  symbol  catchCodeBlock  [FE]                  AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMinimizeExits(labelName,  exitType,  finallyBlock,  catchCodeBlock);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(labelName,  exitType,  finallyBlock,  catchCodeBlock);	  tryMinimizeExits(labelName,    exitType,    finallyBlock);    	non-compiled	[CE]  cannot  find  symbol  catchCodeBlock	1	None	replace
384	[BUG]  [BUGGY]  Node  elseBlock  =  firstBlock.getFirstChild();  [CE]  cannot  find  symbol  firstBlock  [FE]          AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  elseBlock  =  firstBlock.getFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  elseBlock  =  firstBlock.getFirstChild();	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    elseBlock    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  firstBlock	61	None	replace
385	[BUG]  [BUGGY]  Node  elseBlock  =  finallyBlock.removeLastChild();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  elseBlock  =  finallyBlock.removeLastChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  elseBlock  =  finallyBlock.removeLastChild();	  Node    elseBlock    =    finallyBlock.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
386	[BUG]  [BUGGY]  Node  elseBlock  =  n.getFirstChild();  Node  thenBlock  =  thenBlock.getFirstChild();  [CE]  variable  thenBlock  might  not  have  been  initialized  [FE]    AssertionFailedError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  elseBlock  =  n.getFirstChild();  Node  thenBlock  =  thenBlock.getFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  elseBlock  =  n.getFirstChild();  Node  thenBlock  =  thenBlock.getFirstChild();	          Node    elseBlock    =    n.getFirstChild();    Node    thenBlock    =    n.getFirstChild();    	non-compiled	[CE]  variable  thenBlock  might  not  have  been  initialized	73	None	replace
387	[BUG]  [BUGGY]  Node  elseBlock  =  firstBlock.getFirstChild();  Node  thenBlock  =  thenBlock.getFirstChild();  [CE]  cannot  find  symbol  firstBlock  [FE]      AssertionFailedError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  elseBlock  =  firstBlock.getFirstChild();  Node  thenBlock  =  thenBlock.getFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  elseBlock  =  firstBlock.getFirstChild();  Node  thenBlock  =  thenBlock.getFirstChild();	          Node    elseBlock    =    n.getFirstChild();    Node    thenBlock    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  firstBlock	73	None	replace
388	[BUG]  [BUGGY]  Node  elseBlock  =  finallyBlock!=  null?  finallyBlock.getLastChild()  :  endBlock.getLastChild();  [CE]  cannot  find  symbol  endBlock  [FE]              AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  elseBlock  =  finallyBlock!=  null?  finallyBlock.getLastChild()  :  endBlock.getLastChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  elseBlock  =  finallyBlock!=  null?  finallyBlock.getLastChild()  :  endBlock.getLastChild();	          Node    elseBlock    =    finallyBlock.getLastChild();    Node    elseBlock    =    eventuallyBlock.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  endBlock	8	None	replace
389	[BUG]  [BUGGY]  Node  elseBlock  =  finallyBlock!=  null?  finallyBlock.getLastChild()  :  nextBlock.getLastChild();  [CE]  cannot  find  symbol  nextBlock  [FE]                AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  elseBlock  =  finallyBlock!=  null?  finallyBlock.getLastChild()  :  nextBlock.getLastChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  elseBlock  =  finallyBlock!=  null?  finallyBlock.getLastChild()  :  nextBlock.getLastChild();	          Node    elseBlock    =    finallyBlock.getLastChild();    Node    elseBlock    =    eventuallyBlock.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  nextBlock	8	None	replace
390	[BUG]  [BUGGY]  tryMinimizeExits(lastNode,  labelName,  finallyBlock,  exitType);  [CE]  cannot  find  symbol  lastNode  [FE]                    AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMinimizeExits(lastNode,  labelName,  finallyBlock,  exitType);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(lastNode,  labelName,  finallyBlock,  exitType);	  tryMinimizeExits(labelName,    finallyBlock,    exitType);    	non-compiled	[CE]  cannot  find  symbol  lastNode	2	None	replace
391	[BUG]  [BUGGY]  tryMinimizeExits(n,  labelName,  finallyBlock,  exitType);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMinimizeExits(n,  labelName,  finallyBlock,  exitType);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(n,  labelName,  finallyBlock,  exitType);	  tryMinimizeExits(labelName,    finallyBlock,    exitType);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	2	None	replace
392	[BUG]  [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  otherBlock  =  n.getFirstChild();  Node  elseBlock  =  node.getFirstChild();  Node  otherBlock  =  n.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  otherBlock  =  n.getFirstChild();  Node  elseBlock  =  node.getFirstChild();  Node  otherBlock  =  n.getFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	                Node        elseBlock        =        n.getFirstChild();        Node    otherBlock    =    n.getFirstChild();    Node  elseBlock  =  node.getFirstChild();  Node  otherBlock  =  n.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	51	None	add
393	[BUG]  [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  otherBlock  =  n.getFirstChild();  Node  elseBlock  =  firstBlock.getFirstChild();  Node  otherBlock  =  n.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      AssertionFailedError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  otherBlock  =  n.getFirstChild();  Node  elseBlock  =  firstBlock.getFirstChild();  Node  otherBlock  =  n.getFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	                Node        elseBlock        =        n.getFirstChild();        Node    otherBlock    =    n.getFirstChild();    Node  elseBlock  =  firstBlock.getFirstChild();  Node  otherBlock  =  n.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	51	None	add
394	[BUG]  [BUGGY]  Node  elseBlock  =  finallyBlock!=  null?  finallyBlock.getFirstChild()  :  finalBlock;  [CE]  cannot  find  symbol  finalBlock  [FE]        AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  elseBlock  =  finallyBlock!=  null?  finallyBlock.getFirstChild()  :  finalBlock;  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  elseBlock  =  finallyBlock!=  null?  finallyBlock.getFirstChild()  :  finalBlock;	          Node    elseBlock    =    finallyBlock.getLastChild();    Node    elseBlock    =    finallyBlock.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  finalBlock	116	None	replace
395	[BUG]  [BUGGY]          Node    elseBlock    =    finallyBlock.getLastChild();    Node  thenBlock  =  finallyBlock.getLastChild();  Node  elseBlock  =  finallyBlock.getFirstChild();  Node  thenBlock  =  thenBlock.getLastChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]          Node    elseBlock    =    finallyBlock.getLastChild();    Node  thenBlock  =  finallyBlock.getLastChild();  Node  elseBlock  =  finallyBlock.getFirstChild();  Node  thenBlock  =  thenBlock.getLastChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	                Node        elseBlock        =        finallyBlock.getLastChild();        Node    thenBlock    =    finallyBlock.getLastChild();    Node  elseBlock  =  finallyBlock.getFirstChild();  Node  thenBlock  =  thenBlock.getLastChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	91	None	add
396	[BUG]  [BUGGY]  While(finallyBlock  ==  null)  {  tryMinimizeExits(finallyBlock,  labelName);  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  While(finallyBlock  ==  null)  {  tryMinimizeExits(finallyBlock,  labelName);  }  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	While(finallyBlock  ==  null)  {  tryMinimizeExits(finallyBlock,  labelName);  }	  While(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    labelName);    }    	non-compiled	[CE]  ';'  expected	23	None	replace
397	[BUG]  [BUGGY]  tryMinimizeExits(lastNode,  labelName,  finallyBlock,  exitType,  labelName);  [CE]  cannot  find  symbol  lastNode  [FE]                  AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMinimizeExits(lastNode,  labelName,  finallyBlock,  exitType,  labelName);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(lastNode,  labelName,  finallyBlock,  exitType,  labelName);	  tryMinimizeExits(labelName,    finallyBlock,    exitType,    exitType);    	non-compiled	[CE]  cannot  find  symbol  lastNode	98	None	replace
398	[BUG]  [BUGGY]  tryMinimizeExits(n,  labelName,  finallyBlock,  exitType,  exitType);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  tryMinimizeExits(n,  labelName,  finallyBlock,  exitType,  exitType);  [BUGGY]      }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(n,  labelName,  finallyBlock,  exitType,  exitType);	  tryMinimizeExits(labelName,    finallyBlock,    exitType,    exitType);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	98	None	replace
399	[BUG]  [BUGGY]  Node  finallyBlock  =  finallyBlock.removeFirstChild()  -  1;  [CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                          AssertionFailedError      [CONTEXT]      Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();      [BUGGY]  Node  finallyBlock  =  finallyBlock.removeFirstChild()  -  1;  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  finallyBlock  =  finallyBlock.removeFirstChild()  -  1;	  Node    finallyBlock    =    finallyBlock.getNext()    -    1;    	non-compiled	[CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	36	None	replace
