bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  tryMinimizeExits(labelName,  exitType,  finallyBlock);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]  tryMinimizeExits(labelName,  exitType,  finallyBlock);  [BUGGY]    }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(labelName,  exitType,  finallyBlock);	  tryMinimizeExits(labelName,    exitType,    exitType);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	15	None	replace
2	[BUG]  [BUGGY]  tryMinimizeExits(labelName,  finallyBlock,  exitType);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]  tryMinimizeExits(labelName,  finallyBlock,  exitType);  [BUGGY]    }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(labelName,  finallyBlock,  exitType);	  tryMinimizeExits(labelName,    exitType,    exitType);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	15	None	replace
3	[BUG]  [BUGGY]  tryMinimizeExits(labelName,  exitType,  labelName);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]  tryMinimizeExits(labelName,  exitType,  labelName);  [BUGGY]    }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(labelName,  exitType,  labelName);	  tryMinimizeExits(labelName,    exitType,    exitType);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	15	None	replace
4	[BUG]  [BUGGY]  tryMinimizeExits(n,  labelName,  exitType,  exitType);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]  tryMinimizeExits(n,  labelName,  exitType,  exitType);  [BUGGY]    }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(n,  labelName,  exitType,  exitType);	  tryMinimizeExits(labelName,    exitType,    exitType);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	15	None	replace
5	[BUG]  [BUGGY]      Node  elseBlock  =  finallyBlock.getLastChild();  Node  elseBlock  =  finallyBlock.getLastChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]      Node  elseBlock  =  finallyBlock.getLastChild();  Node  elseBlock  =  finallyBlock.getLastChild();  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	        Node    elseBlock    =    finallyBlock.getLastChild();    Node  elseBlock  =  finallyBlock.getLastChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	7	None	add
6	[BUG]  [BUGGY]      Node  elseBlock  =  finallyBlock.getLastChild();  Node  elseBlock  =  finalementBlock.getLastChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]      Node  elseBlock  =  finallyBlock.getLastChild();  Node  elseBlock  =  finalementBlock.getLastChild();  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	        Node    elseBlock    =    finallyBlock.getLastChild();    Node  elseBlock  =  finalementBlock.getLastChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	7	None	add
7	[BUG]  [BUGGY]      Node  elseBlock  =  finallyBlock.getLastChild();  Node  elseBlock  =  thenBlock.getLastChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]      Node  elseBlock  =  finallyBlock.getLastChild();  Node  elseBlock  =  thenBlock.getLastChild();  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	        Node    elseBlock    =    finallyBlock.getLastChild();    Node  elseBlock  =  thenBlock.getLastChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	7	None	add
8	[BUG]  [BUGGY]      Node  elseBlock  =  finallyBlock.getLastChild();  Node  elseBlock  =  eventuallyBlock.getLastChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]      Node  elseBlock  =  finallyBlock.getLastChild();  Node  elseBlock  =  eventuallyBlock.getLastChild();  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	        Node    elseBlock    =    finallyBlock.getLastChild();    Node  elseBlock  =  eventuallyBlock.getLastChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	7	None	add
9	[BUG]  [BUGGY]  tryMinimizeExits(labelName,  finallyBlock);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]  tryMinimizeExits(labelName,  finallyBlock);  [BUGGY]    }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(labelName,  finallyBlock);	  tryMinimizeExits(finallyBlock,    labelName);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	21	None	replace
10	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]      if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	add	        if(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }	  	compilable	  [FE]  AssertionFailedError  	18	2	add
11	[BUG]  [BUGGY]      if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]      if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	        if(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }	  	compilable	  [FE]  AssertionFailedError  	18	2	add
12	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]      if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock  ==  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	add	        if(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock  ==  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }	  	compilable	  [FE]  AssertionFailedError  	18	2	add
13	[BUG]  [BUGGY]      if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock  ==  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]      if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock  ==  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	        if(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock  ==  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }	  	compilable	  [FE]  AssertionFailedError  	18	2	add
14	[BUG]  [BUGGY]      if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock  >=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]        AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]      if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock  >=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	        if(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock  >=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	18	None	add
15	[BUG]  [BUGGY]      if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  If(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]      if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  If(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	        if(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    If(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }	  	non-compiled	[CE]  ';'  expected	18	None	add
16	[BUG]  [BUGGY]      if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock  >>  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]            AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]      if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock  >>  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	        if(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock  >>  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	18	None	add
17	[BUG]  [BUGGY]  Node  labelName  =  finallyBlock.getString(),  exitType);  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]  Node  labelName  =  finallyBlock.getString(),  exitType);  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  labelName  =  finallyBlock.getString(),  exitType);	      Node    labelName    =    finallyBlock.getString();    	non-compiled	[CE]  ';'  expected	10	None	replace
18	[BUG]  [BUGGY]  Node  labelName  =  finallyBlock.getString()  +  1;  [CE]  variable  labelName  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                    AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]  Node  labelName  =  finallyBlock.getString()  +  1;  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  labelName  =  finallyBlock.getString()  +  1;	      Node    labelName    =    finallyBlock.getString();    	non-compiled	[CE]  variable  labelName  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	10	None	replace
19	[BUG]  [BUGGY]  Node  labelName  =  finallyBlock.getLabelName();  [CE]  variable  labelName  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                      AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]  Node  labelName  =  finallyBlock.getLabelName();  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  labelName  =  finallyBlock.getLabelName();	      Node    labelName    =    finallyBlock.getString();    	non-compiled	[CE]  variable  labelName  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	10	None	replace
20	[BUG]  [BUGGY]  Node  labelName  =  finallyBlock.getFirstChild();  [CE]  variable  labelName  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                        AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]  Node  labelName  =  finallyBlock.getFirstChild();  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  labelName  =  finallyBlock.getFirstChild();	      Node    labelName    =    finallyBlock.getString();    	non-compiled	[CE]  variable  labelName  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	10	None	replace
21	[BUG]  [BUGGY]  While(finallyBlock!=  null  &&  finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]  While(finallyBlock!=  null  &&  finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	While(finallyBlock!=  null  &&  finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }	      if(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    	non-compiled	[CE]  ';'  expected	19	None	replace
22	[BUG]  [BUGGY]  While(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]  While(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	While(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }	      if(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    	non-compiled	[CE]  ';'  expected	19	None	replace
23	[BUG]  [BUGGY]  While(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  labelName);  }  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]  While(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  labelName);  }  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	While(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  labelName);  }	      if(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    	non-compiled	[CE]  ';'  expected	19	None	replace
24	[BUG]  [BUGGY]  Node  elseBlock  =  finallyBlock.getFirstChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  [CE]  cannot  find  symbol  catchCodeBlock  [FE]          AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]  Node  elseBlock  =  finallyBlock.getFirstChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  elseBlock  =  finallyBlock.getFirstChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);	      Node    elseBlock    =    allCatchNodes.getFirstChild();    tryMinimizeExits(catchCodeBlock,    exitType,    labelName);    	non-compiled	[CE]  cannot  find  symbol  catchCodeBlock	27	None	replace
25	[BUG]  [BUGGY]  Node  elseBlock  =  catchNodes.getFirstChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  [CE]  cannot  find  symbol  catchNodes  [FE]            AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]  Node  elseBlock  =  catchNodes.getFirstChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  elseBlock  =  catchNodes.getFirstChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);	      Node    elseBlock    =    allCatchNodes.getFirstChild();    tryMinimizeExits(catchCodeBlock,    exitType,    labelName);    	non-compiled	[CE]  cannot  find  symbol  catchNodes	27	None	replace
26	[BUG]  [BUGGY]  Node  elseBlock  =  n.getFirstChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  [CE]  cannot  find  symbol  catchCodeBlock  [FE]              AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]  Node  elseBlock  =  n.getFirstChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  elseBlock  =  n.getFirstChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);	      Node    elseBlock    =    allCatchNodes.getFirstChild();    tryMinimizeExits(catchCodeBlock,    exitType,    labelName);    	non-compiled	[CE]  cannot  find  symbol  catchCodeBlock	27	None	replace
27	[BUG]  [BUGGY]      Node  elseBlock  =  finallyBlock.getFirstChild();  Node  elseBlock  =  finallyBlock.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]      Node  elseBlock  =  finallyBlock.getFirstChild();  Node  elseBlock  =  finallyBlock.getFirstChild();  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	        Node    elseBlock    =    finallyBlock.getFirstChild();    Node  elseBlock  =  finallyBlock.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	3	None	add
28	[BUG]  [BUGGY]      Node  elseBlock  =  finallyBlock.getFirstChild();  Node  elseBlock  =  finallyBlock.getLastChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]      Node  elseBlock  =  finallyBlock.getFirstChild();  Node  elseBlock  =  finallyBlock.getLastChild();  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	        Node    elseBlock    =    finallyBlock.getFirstChild();    Node  elseBlock  =  finallyBlock.getLastChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	3	None	add
29	[BUG]  [BUGGY]      Node  elseBlock  =  finallyBlock.getFirstChild();  Node  elseBlock  =  finallyBlock.getNextChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]      Node  elseBlock  =  finallyBlock.getFirstChild();  Node  elseBlock  =  finallyBlock.getNextChild();  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	        Node    elseBlock    =    finallyBlock.getFirstChild();    Node  elseBlock  =  finallyBlock.getNextChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	3	None	add
30	[BUG]  [BUGGY]      Node  elseBlock  =  finallyBlock.getFirstChild();  Node  elseBlock  =  thenBlock.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]      Node  elseBlock  =  finallyBlock.getFirstChild();  Node  elseBlock  =  thenBlock.getFirstChild();  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	        Node    elseBlock    =    finallyBlock.getFirstChild();    Node  elseBlock  =  thenBlock.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	3	None	add
31	[BUG]  [BUGGY]      Node  elseBlock  =  finallyBlock.getFirstChild();  Node  elseBlock  =  finalementBlock.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]            AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]      Node  elseBlock  =  finallyBlock.getFirstChild();  Node  elseBlock  =  finalementBlock.getFirstChild();  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	        Node    elseBlock    =    finallyBlock.getFirstChild();    Node  elseBlock  =  finalementBlock.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	3	None	add
32	[BUG]  [BUGGY]  tryMinimizeExits(enfinBlock,  exitType,  labelName);  [CE]  cannot  find  symbol  enfinBlock  [FE]        AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]  tryMinimizeExits(enfinBlock,  exitType,  labelName);  [BUGGY]    }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(enfinBlock,  exitType,  labelName);	  tryMinimizeExits(lastBlock,    exitType,    labelName);    	non-compiled	[CE]  cannot  find  symbol  enfinBlock	24	None	replace
33	[BUG]  [BUGGY]  Node  finallyBlock  =  finallyBlock.getNext(),  labelName);  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]  Node  finallyBlock  =  finallyBlock.getNext(),  labelName);  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  finallyBlock  =  finallyBlock.getNext(),  labelName);	      Node    finallyBlock    =    finallyBlock.getNext();    	non-compiled	[CE]  ';'  expected	9	None	replace
34	[BUG]  [BUGGY]  Node  finallyBlock  =  finallyBlock.getFirstChild();  [CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                  AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]  Node  finallyBlock  =  finallyBlock.getFirstChild();  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  finallyBlock  =  finallyBlock.getFirstChild();	      Node    finallyBlock    =    finallyBlock.getNext();    	non-compiled	[CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	9	None	replace
35	[BUG]  [BUGGY]  Node  finallyBlock  =  finallyBlock.getLastChild();  [CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                    AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]  Node  finallyBlock  =  finallyBlock.getLastChild();  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  finallyBlock  =  finallyBlock.getLastChild();	      Node    finallyBlock    =    finallyBlock.getNext();    	non-compiled	[CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	9	None	replace
36	[BUG]  [BUGGY]  Node  finallyBlock  =  finallyBlock.getNext()  -  1;  [CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                      AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]  Node  finallyBlock  =  finallyBlock.getNext()  -  1;  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  finallyBlock  =  finallyBlock.getNext()  -  1;	      Node    finallyBlock    =    finallyBlock.getNext();    	non-compiled	[CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	9	None	replace
37	[BUG]  [BUGGY]  tryMinimizeExit(finallyBlock,  exitType,  labelName);  [CE]  cannot  find  symbol  [FE]    StackOverflowError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]  tryMinimizeExit(finallyBlock,  exitType,  labelName);  [BUGGY]    }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExit(finallyBlock,  exitType,  labelName);	  tryMinimizeExits(n,    exitType,    labelName);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
38	[BUG]  [BUGGY]  tryMinimizeExits(peekNode,  exitType,  labelName);  [CE]  cannot  find  symbol  peekNode  [FE]      StackOverflowError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]  tryMinimizeExits(peekNode,  exitType,  labelName);  [BUGGY]    }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(peekNode,  exitType,  labelName);	  tryMinimizeExits(n,    exitType,    labelName);    	non-compiled	[CE]  cannot  find  symbol  peekNode	12	None	replace
39	[BUG]  [BUGGY]  tryMinimizeExits(finallyBlock,  labelName,  exitType,  labelName);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]  tryMinimizeExits(finallyBlock,  labelName,  exitType,  labelName);  [BUGGY]    }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(finallyBlock,  labelName,  exitType,  labelName);	  tryMinimizeExits(finallyBlock,    labelName,    exitType);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	13	None	replace
40	[BUG]  [BUGGY]  tryMinimizeExits(n,  finallyBlock,  labelName,  exitType);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]  tryMinimizeExits(n,  finallyBlock,  labelName,  exitType);  [BUGGY]    }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(n,  finallyBlock,  labelName,  exitType);	  tryMinimizeExits(finallyBlock,    labelName,    exitType);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	13	None	replace
41	[BUG]  [BUGGY]  tryMinimizeExits(catchNode,  finallyBlock,  labelName,  exitType);  [CE]  cannot  find  symbol  catchNode  [FE]              AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]  tryMinimizeExits(catchNode,  finallyBlock,  labelName,  exitType);  [BUGGY]    }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(catchNode,  finallyBlock,  labelName,  exitType);	  tryMinimizeExits(finallyBlock,    labelName,    exitType);    	non-compiled	[CE]  cannot  find  symbol  catchNode	13	None	replace
42	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]  tryMinimizeExits(n,  exitType,  labelName);  tryMinimizeExits(n,  exitType,  labelName);  [BUGGY]    }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	add	tryMinimizeExits(n,    exitType,    labelName);    tryMinimizeExits(n,  exitType,  labelName);	  	compilable	  [FE]  StackOverflowError  	11	2	add
43	[BUG]  [BUGGY]  tryMinimizeExits(n,  exitType,  labelName);  tryMinimizeExits(n,  exitType,  labelName);  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]  tryMinimizeExits(n,  exitType,  labelName);  tryMinimizeExits(n,  exitType,  labelName);  [BUGGY]    }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(n,    exitType,    labelName);    tryMinimizeExits(n,  exitType,  labelName);	  	compilable	  [FE]  StackOverflowError  	11	2	add
44	[BUG]  [BUGGY]  tryMinimizeExits(n,  exitType,  labelName);  TryMinimizeExits(n,  exitType,  labelName);  [CE]  cannot  find  symbol  [FE]      StackOverflowError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]  tryMinimizeExits(n,  exitType,  labelName);  TryMinimizeExits(n,  exitType,  labelName);  [BUGGY]    }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(n,    exitType,    labelName);    TryMinimizeExits(n,  exitType,  labelName);	  	non-compiled	[CE]  cannot  find  symbol	11	None	add
45	[BUG]  [BUGGY]  tryMinimizeExits(n,  exitType,  labelName);  tryMinimizeExits(n,  exitType,  labelName);  }  [CE]  illegal  start  of  type  [FE]        StackOverflowError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]  tryMinimizeExits(n,  exitType,  labelName);  tryMinimizeExits(n,  exitType,  labelName);  }  [BUGGY]    }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(n,    exitType,    labelName);    tryMinimizeExits(n,  exitType,  labelName);  }	  	non-compiled	[CE]  illegal  start  of  type	11	None	add
46	[BUG]  [BUGGY]  tryMinimizeExits(n,  exitType,  labelName);  attemptMinimizeExits(n,  exitType,  labelName);  [CE]  cannot  find  symbol  [FE]          StackOverflowError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]  tryMinimizeExits(n,  exitType,  labelName);  attemptMinimizeExits(n,  exitType,  labelName);  [BUGGY]    }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(n,    exitType,    labelName);    attemptMinimizeExits(n,  exitType,  labelName);	  	non-compiled	[CE]  cannot  find  symbol	11	None	add
47	[BUG]  [BUGGY]  Node  elseBlock  =  catchNode.getFirstChild();  [CE]  cannot  find  symbol  catchNode  [FE]    AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]  Node  elseBlock  =  catchNode.getFirstChild();  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  elseBlock  =  catchNode.getFirstChild();	      Node    elseBlock    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  catchNode	17	None	replace
48	[BUG]  [BUGGY]      Node  elseBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]      Node  elseBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	        Node    elseBlock    =    n.getFirstChild();    Node  elseBlock  =  n.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	16	None	add
49	[BUG]  [BUGGY]      Node  elseBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getLastChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]      Node  elseBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getLastChild();  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	        Node    elseBlock    =    n.getFirstChild();    Node  elseBlock  =  n.getLastChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	16	None	add
50	[BUG]  [BUGGY]      Node  elseBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getfirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]      Node  elseBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getfirstChild();  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	        Node    elseBlock    =    n.getFirstChild();    Node  elseBlock  =  n.getfirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	16	None	add
51	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]      Node  elseBlock  =  n.getFirstChild();  Node  otherBlock  =  n.getFirstChild();  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	add	        Node    elseBlock    =    n.getFirstChild();    Node  otherBlock  =  n.getFirstChild();	  	compilable	  [FE]  AssertionFailedError  	16	2	add
52	[BUG]  [BUGGY]      Node  elseBlock  =  n.getFirstChild();  Node  otherBlock  =  n.getFirstChild();  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]      Node  elseBlock  =  n.getFirstChild();  Node  otherBlock  =  n.getFirstChild();  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	        Node    elseBlock    =    n.getFirstChild();    Node  otherBlock  =  n.getFirstChild();	  	compilable	  [FE]  AssertionFailedError  	16	2	add
53	[BUG]  [BUGGY]      Node  elseBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]      Node  elseBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  }  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	        Node    elseBlock    =    n.getFirstChild();    Node  elseBlock  =  n.getFirstChild();  }	  	non-compiled	[CE]  illegal  start  of  type	16	None	add
54	[BUG]  [BUGGY]      Node  elseBlock  =  finallyBlock.getNext();  Node  elseBlock  =  finallyBlock.getNext();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]      Node  elseBlock  =  finallyBlock.getNext();  Node  elseBlock  =  finallyBlock.getNext();  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	        Node    elseBlock    =    finallyBlock.getNext();    Node  elseBlock  =  finallyBlock.getNext();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	1	None	add
55	[BUG]  [BUGGY]      Node  elseBlock  =  finallyBlock.getNext();  Node  elseBlock  =  finalementBlock.getNext();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]      Node  elseBlock  =  finallyBlock.getNext();  Node  elseBlock  =  finalementBlock.getNext();  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	        Node    elseBlock    =    finallyBlock.getNext();    Node  elseBlock  =  finalementBlock.getNext();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	1	None	add
56	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]      Node  elseBlock  =  finallyBlock.getNext();  Node  thenBlock  =  finallyBlock.getNext();  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	add	        Node    elseBlock    =    finallyBlock.getNext();    Node  thenBlock  =  finallyBlock.getNext();	  	compilable	  [FE]  AssertionFailedError  	1	2	add
57	[BUG]  [BUGGY]      Node  elseBlock  =  finallyBlock.getNext();  Node  thenBlock  =  finallyBlock.getNext();  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]      Node  elseBlock  =  finallyBlock.getNext();  Node  thenBlock  =  finallyBlock.getNext();  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	        Node    elseBlock    =    finallyBlock.getNext();    Node  thenBlock  =  finallyBlock.getNext();	  	compilable	  [FE]  AssertionFailedError  	1	2	add
58	[BUG]  [BUGGY]      Node  elseBlock  =  finallyBlock.getNext();  Node  elseBlock  =  thenBlock.getNext();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]      Node  elseBlock  =  finallyBlock.getNext();  Node  elseBlock  =  thenBlock.getNext();  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	        Node    elseBlock    =    finallyBlock.getNext();    Node  elseBlock  =  thenBlock.getNext();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	1	None	add
59	[BUG]  [BUGGY]  Node  elseBlock  =  finallyBlock.getNext(),  labelName);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]  Node  elseBlock  =  finallyBlock.getNext(),  labelName);  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  elseBlock  =  finallyBlock.getNext(),  labelName);	      Node    elseBlock    =    finallyBlock.getNext();    	non-compiled	[CE]  ';'  expected	2	None	replace
60	[BUG]  [BUGGY]      Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  finallyBlock.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]      Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  finallyBlock.getFirstChild();  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	        Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  elseBlock  =  finallyBlock.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	5	None	add
61	[BUG]  [BUGGY]      Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]      Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	        Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  elseBlock  =  allCatchNodes.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	5	None	add
62	[BUG]  [BUGGY]      Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]      Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	        Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  elseBlock  =  n.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	5	None	add
63	[BUG]  [BUGGY]      Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  finallyBlock.getLastChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]      Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  finallyBlock.getLastChild();  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	        Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  elseBlock  =  finallyBlock.getLastChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	5	None	add
64	[BUG]  [BUGGY]      Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getLastChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]            AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]      Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getLastChild();  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	        Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  elseBlock  =  allCatchNodes.getLastChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	5	None	add
65	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]      if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	add	        if(finallyBlock.isLabel())    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }	  	compilable	  [FE]  AssertionFailedError  	25	2	add
66	[BUG]  [BUGGY]      if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]      if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	        if(finallyBlock.isLabel())    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }	  	compilable	  [FE]  AssertionFailedError  	25	2	add
67	[BUG]  [BUGGY]      if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  If(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]      if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  If(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	        if(finallyBlock.isLabel())    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    If(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }	  	non-compiled	[CE]  ';'  expected	25	None	add
68	[BUG]  [BUGGY]      if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  LabelName);  }  [CE]  cannot  find  symbol  LabelName  [FE]        AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]      if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  LabelName);  }  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	        if(finallyBlock.isLabel())    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  LabelName);  }	  	non-compiled	[CE]  cannot  find  symbol  LabelName	25	None	add
69	[BUG]  [BUGGY]  tryMinimizeExits(labelName,  finallyBlock,  labelName);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]  tryMinimizeExits(labelName,  finallyBlock,  labelName);  [BUGGY]    }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(labelName,  finallyBlock,  labelName);	  tryMinimizeExits(n,    finallyBlock,    labelName);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	14	None	replace
70	[BUG]  [BUGGY]  tryMinimizeExits(n,  finallyBlock,  exitType,  labelName);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]  tryMinimizeExits(n,  finallyBlock,  exitType,  labelName);  [BUGGY]    }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(n,  finallyBlock,  exitType,  labelName);	  tryMinimizeExits(n,    finallyBlock,    labelName);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	14	None	replace
71	[BUG]  [BUGGY]  tryMinimizeExits(finallyBlock,  n,  labelName);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]  tryMinimizeExits(finallyBlock,  n,  labelName);  [BUGGY]    }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(finallyBlock,  n,  labelName);	  tryMinimizeExits(n,    finallyBlock,    labelName);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	14	None	replace
72	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]      Node  elseBlock  =  n.getFirstChild();  Node  thenBlock  =  n.getFirstChild();  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	add	        Node    elseBlock    =    n.getFirstChild();    Node  thenBlock  =  n.getFirstChild();	  	compilable	  [FE]  AssertionFailedError  	16	2	add
73	[BUG]  [BUGGY]      Node  elseBlock  =  n.getFirstChild();  Node  thenBlock  =  n.getFirstChild();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]      Node  elseBlock  =  n.getFirstChild();  Node  thenBlock  =  n.getFirstChild();  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	        Node    elseBlock    =    n.getFirstChild();    Node  thenBlock  =  n.getFirstChild();	  	compilable	  [FE]  AssertionFailedError  	16	2	add
74	[BUG]  [BUGGY]  tryMinimizeExits(finallyBlock,  labelName,  escapeType);  [CE]  cannot  find  symbol  escapeType  [FE]            AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]  tryMinimizeExits(finallyBlock,  labelName,  escapeType);  [BUGGY]    }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(finallyBlock,  labelName,  escapeType);	  tryMinimizeExits(finallyBlock,    escapeType,    labelName);    	non-compiled	[CE]  cannot  find  symbol  escapeType	23	None	replace
75	[BUG]  [BUGGY]  tryMinimizeExits(finallyBlock,  labelName,  escapeType,  labelName);  [CE]  cannot  find  symbol  escapeType  [FE]          AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]  tryMinimizeExits(finallyBlock,  labelName,  escapeType,  labelName);  [BUGGY]    }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(finallyBlock,  labelName,  escapeType,  labelName);	  tryMinimizeExits(finallyBlock,    labelName,    exitType);    	non-compiled	[CE]  cannot  find  symbol  escapeType	13	None	replace
76	[BUG]  [BUGGY]      if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  escapeType,  labelName);  }  [CE]  cannot  find  symbol  escapeType  [FE]    AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]      if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  escapeType,  labelName);  }  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	        if(finallyBlock.isLabel())    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    if(finallyBlock.isLabel())  {  tryMinimizeExits(finallyBlock,  escapeType,  labelName);  }	  	non-compiled	[CE]  cannot  find  symbol  escapeType	25	None	add
77	[BUG]  [BUGGY]  tryMinimizeExits(n,  exitType,  labelName);  tryMaximizeExits(n,  exitType,  labelName);  [CE]  cannot  find  symbol  [FE]    StackOverflowError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]  tryMinimizeExits(n,  exitType,  labelName);  tryMaximizeExits(n,  exitType,  labelName);  [BUGGY]    }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(n,    exitType,    labelName);    tryMaximizeExits(n,  exitType,  labelName);	  	non-compiled	[CE]  cannot  find  symbol	11	None	add
78	[BUG]  [BUGGY]  Node  finallyBlock  =  finallyBlock!=  null?  finallyBlock.getNext()  :  null;  [CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]  Node  finallyBlock  =  finallyBlock!=  null?  finallyBlock.getNext()  :  null;  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  finallyBlock  =  finallyBlock!=  null?  finallyBlock.getNext()  :  null;	      Node    finallyBlock    =    finallyBlock.getNext();    	non-compiled	[CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	9	None	replace
79	[BUG]  [BUGGY]  Node  finallyBlock  =  finallyBlock.getParent();  [CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                  AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]  Node  finallyBlock  =  finallyBlock.getParent();  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  finallyBlock  =  finallyBlock.getParent();	      Node    finallyBlock    =    finallyBlock.getNext();    	non-compiled	[CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	9	None	replace
80	[BUG]  [BUGGY]  Node  finallyBlock  =  finallyBlock.cloneTree();  [CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                    AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]  Node  finallyBlock  =  finallyBlock.cloneTree();  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  finallyBlock  =  finallyBlock.cloneTree();	      Node    finallyBlock    =    finallyBlock.getNext();    	non-compiled	[CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	9	None	replace
81	[BUG]  [BUGGY]  tryMinimizeExits(finalBlock,  labelName,  exitType);  [CE]  cannot  find  symbol  finalBlock  [FE]            AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]  tryMinimizeExits(finalBlock,  labelName,  exitType);  [BUGGY]    }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(finalBlock,  labelName,  exitType);	  tryMinimizeExits(n,    finallyBlock,    labelName);    	non-compiled	[CE]  cannot  find  symbol  finalBlock	14	None	replace
82	[BUG]  [BUGGY]  tryMinimizeExits(finalBlock,  exitType,  labelName);  [CE]  cannot  find  symbol  finalBlock  [FE]              AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]  tryMinimizeExits(finalBlock,  exitType,  labelName);  [BUGGY]    }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(finalBlock,  exitType,  labelName);	  tryMinimizeExits(n,    finallyBlock,    labelName);    	non-compiled	[CE]  cannot  find  symbol  finalBlock	14	None	replace
83	[BUG]  [BUGGY]  tryMinimizeExits(finalBlock,  labelName);  [CE]  cannot  find  symbol  finalBlock  [FE]                AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]  tryMinimizeExits(finalBlock,  labelName);  [BUGGY]    }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(finalBlock,  labelName);	  tryMinimizeExits(n,    finallyBlock,    labelName);    	non-compiled	[CE]  cannot  find  symbol  finalBlock	14	None	replace
84	[BUG]  [BUGGY]  tryMinimizeExits(finalBlock,  labelName,  null);  [CE]  cannot  find  symbol  finalBlock  [FE]                  AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]  tryMinimizeExits(finalBlock,  labelName,  null);  [BUGGY]    }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(finalBlock,  labelName,  null);	  tryMinimizeExits(n,    finallyBlock,    labelName);    	non-compiled	[CE]  cannot  find  symbol  finalBlock	14	None	replace
85	[BUG]  [BUGGY]  Node  elseBlock  =  finallyBlock  ==  null?  falseBlock  :  finallyBlock.getNext();  [CE]  cannot  find  symbol  falseBlock  [FE]    AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]  Node  elseBlock  =  finallyBlock  ==  null?  falseBlock  :  finallyBlock.getNext();  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  elseBlock  =  finallyBlock  ==  null?  falseBlock  :  finallyBlock.getNext();	      Node    elseBlock    =    finallyBlock.getNext();    	non-compiled	[CE]  cannot  find  symbol  falseBlock	2	None	replace
86	[BUG]  [BUGGY]  Node  elseBlock  =  finallyBlock!=  null?  falseBlock  :  finallyBlock.getNext();  [CE]  cannot  find  symbol  falseBlock  [FE]      AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]  Node  elseBlock  =  finallyBlock!=  null?  falseBlock  :  finallyBlock.getNext();  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  elseBlock  =  finallyBlock!=  null?  falseBlock  :  finallyBlock.getNext();	      Node    elseBlock    =    finallyBlock.getNext();    	non-compiled	[CE]  cannot  find  symbol  falseBlock	2	None	replace
87	[BUG]  [BUGGY]  Node  labelName  =  finallyBlock!=  null?  null  :  finallyBlock.getString();  [CE]  variable  labelName  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                  AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]  Node  labelName  =  finallyBlock!=  null?  null  :  finallyBlock.getString();  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  labelName  =  finallyBlock!=  null?  null  :  finallyBlock.getString();	      Node    labelName    =    finallyBlock.getString();    	non-compiled	[CE]  variable  labelName  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	10	None	replace
88	[BUG]  [BUGGY]  Node  elseBlock  =  finallyBlock!=  null?  falseBlock  :  finallyBlock.getFirstChild();  [CE]  cannot  find  symbol  falseBlock  [FE]      AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]  Node  elseBlock  =  finallyBlock!=  null?  falseBlock  :  finallyBlock.getFirstChild();  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  elseBlock  =  finallyBlock!=  null?  falseBlock  :  finallyBlock.getFirstChild();	      Node    elseBlock    =    finallyBlock.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  falseBlock	4	None	replace
89	[BUG]  [BUGGY]  if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  labelName,  exitType);  }  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]  if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  labelName,  exitType);  }  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  labelName,  exitType);  }	      if(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    labelName);    }    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	20	None	replace
90	[BUG]  [BUGGY]  tryMinimizeFinally(finallyBlock,  exitType,  labelName);  [CE]  cannot  find  symbol  [FE]    StackOverflowError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]  tryMinimizeFinally(finallyBlock,  exitType,  labelName);  [BUGGY]    }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeFinally(finallyBlock,  exitType,  labelName);	  tryMinimizeExits(n,    exitType,    labelName);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
91	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]      Node  elseBlock  =  finallyBlock.getLastChild();  Node  thenBlock  =  finallyBlock.getLastChild();  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	add	        Node    elseBlock    =    finallyBlock.getLastChild();    Node  thenBlock  =  finallyBlock.getLastChild();	  	compilable	  [FE]  AssertionFailedError  	7	2	add
92	[BUG]  [BUGGY]      Node  elseBlock  =  finallyBlock.getLastChild();  Node  thenBlock  =  finallyBlock.getLastChild();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]      Node  elseBlock  =  finallyBlock.getLastChild();  Node  thenBlock  =  finallyBlock.getLastChild();  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	        Node    elseBlock    =    finallyBlock.getLastChild();    Node  thenBlock  =  finallyBlock.getLastChild();	  	compilable	  [FE]  AssertionFailedError  	7	2	add
93	[BUG]  [BUGGY]  parent  ==  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]  parent  ==  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	parent  ==  null)  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }	      if(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    	non-compiled	[CE]  not  a  statement	19	None	replace
94	[BUG]  [BUGGY]  parent  ==  null)  {  tryMinimizeExits(finallyBlock,  labelName);  }  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]  parent  ==  null)  {  tryMinimizeExits(finallyBlock,  labelName);  }  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	parent  ==  null)  {  tryMinimizeExits(finallyBlock,  labelName);  }	      if(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    	non-compiled	[CE]  not  a  statement	19	None	replace
95	[BUG]  [BUGGY]      Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  n.getLastChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]      Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  n.getLastChild();  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	        Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  elseBlock  =  n.getLastChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	5	None	add
96	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]  Node  elseBlock  =  finallyBlock.removeFirstChild();  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	add	Node  elseBlock  =  finallyBlock.removeFirstChild();	      Node    elseBlock    =    finallyBlock.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	4	2	replace
97	[BUG]  [BUGGY]  Node  elseBlock  =  finallyBlock.removeFirstChild();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]  Node  elseBlock  =  finallyBlock.removeFirstChild();  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  elseBlock  =  finallyBlock.removeFirstChild();	      Node    elseBlock    =    finallyBlock.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	4	2	replace
98	[BUG]  [BUGGY]  tryMinimizeExits(labelName,  finallyBlock,  exitType,  exitType);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]  tryMinimizeExits(labelName,  finallyBlock,  exitType,  exitType);  [BUGGY]    }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(labelName,  finallyBlock,  exitType,  exitType);	  tryMinimizeExits(labelName,    exitType,    exitType);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	15	None	replace
99	[BUG]  [BUGGY]  Node  elseBlock  =  catchNode.getFirstChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  [CE]  cannot  find  symbol  catchNode  [FE]          AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]  Node  elseBlock  =  catchNode.getFirstChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  elseBlock  =  catchNode.getFirstChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);	      Node    elseBlock    =    allCatchNodes.getFirstChild();    tryMinimizeExits(catchCodeBlock,    exitType,    labelName);    	non-compiled	[CE]  cannot  find  symbol  catchNode	27	None	replace
100	[BUG]  [BUGGY]  Node  finallyBlock  =  finallyBlock.removeFirstChild();  [CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]  Node  finallyBlock  =  finallyBlock.removeFirstChild();  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  finallyBlock  =  finallyBlock.removeFirstChild();	      Node    finallyBlock    =    finallyBlock.getNext();    	non-compiled	[CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	9	None	replace
101	[BUG]  [BUGGY]  tryMinimizeExits(n,  exitType,  labelName);  tryMinimizeExits(n,  escapeType,  labelName);  [CE]  cannot  find  symbol  escapeType  [FE]    StackOverflowError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]  tryMinimizeExits(n,  exitType,  labelName);  tryMinimizeExits(n,  escapeType,  labelName);  [BUGGY]    }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(n,    exitType,    labelName);    tryMinimizeExits(n,  escapeType,  labelName);	  	non-compiled	[CE]  cannot  find  symbol  escapeType	11	None	add
102	[BUG]  [BUGGY]  Node  labelName  =  finallyBlock!=  null?  finallyBlock.getString()  : " ";  [CE]  variable  labelName  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                  AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]  Node  labelName  =  finallyBlock!=  null?  finallyBlock.getString()  : " ";  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  labelName  =  finallyBlock!=  null?  finallyBlock.getString()  : " ";	      Node    labelName    =    finallyBlock.getString();    	non-compiled	[CE]  variable  labelName  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	10	None	replace
103	[BUG]  [BUGGY]  Node  labelName  =  finallyBlock!=  null?  finallyBlock.getString()  : "null ";  [CE]  variable  labelName  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                    AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]  Node  labelName  =  finallyBlock!=  null?  finallyBlock.getString()  : "null ";  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  labelName  =  finallyBlock!=  null?  finallyBlock.getString()  : "null ";	      Node    labelName    =    finallyBlock.getString();    	non-compiled	[CE]  variable  labelName  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	10	None	replace
104	[BUG]  [BUGGY]  tryMinimizeExits(extendBlock,  exitType,  labelName);  [CE]  cannot  find  symbol  extendBlock  [FE]        AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]  tryMinimizeExits(extendBlock,  exitType,  labelName);  [BUGGY]    }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(extendBlock,  exitType,  labelName);	  tryMinimizeExits(lastBlock,    exitType,    labelName);    	non-compiled	[CE]  cannot  find  symbol  extendBlock	24	None	replace
105	[BUG]  [BUGGY]  tryMaximizeExits(finallyBlock,  exitType,  labelName);  [CE]  cannot  find  symbol  [FE]    StackOverflowError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]  tryMaximizeExits(finallyBlock,  exitType,  labelName);  [BUGGY]    }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMaximizeExits(finallyBlock,  exitType,  labelName);	  tryMinimizeExits(n,    exitType,    labelName);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
106	[BUG]  [BUGGY]  Node  elseBlock  =  finalBlock.getFirstChild();  [CE]  cannot  find  symbol  finalBlock  [FE]    AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]  Node  elseBlock  =  finalBlock.getFirstChild();  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  elseBlock  =  finalBlock.getFirstChild();	      Node    elseBlock    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  finalBlock	17	None	replace
107	[BUG]  [BUGGY]  Node  elseBlock  =  endType.getFirstChild();  [CE]  cannot  find  symbol  endType  [FE]      AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]  Node  elseBlock  =  endType.getFirstChild();  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	Node  elseBlock  =  endType.getFirstChild();	      Node    elseBlock    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  endType	17	None	replace
108	[BUG]  [BUGGY]  triesMinimizeExits(finallyBlock,  exitType,  labelName);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]  triesMinimizeExits(finallyBlock,  exitType,  labelName);  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	triesMinimizeExits(finallyBlock,  exitType,  labelName);	      if(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
109	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(labelName);  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]      AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]  aughtExceptionHandler.handleMissingName(labelName);  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	aughtExceptionHandler.handleMissingName(labelName);	      if(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	19	None	replace
110	[BUG]  [BUGGY]  parent.replaceChild(n,  tryMinimizeExits(finallyBlock,  exitType,  labelName));  [CE]  'void'  type  not  allowed  here  [FE]    AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]  parent.replaceChild(n,  tryMinimizeExits(finallyBlock,  exitType,  labelName));  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	parent.replaceChild(n,  tryMinimizeExits(finallyBlock,  exitType,  labelName));	      if(finallyBlock.isLabel())    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    	non-compiled	[CE]  'void'  type  not  allowed  here	26	None	replace
111	[BUG]  [BUGGY]  parent.replaceChild(n,  tryMinimizeExits(n,  exitType,  labelName));  [CE]  'void'  type  not  allowed  here  [FE]      AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]  parent.replaceChild(n,  tryMinimizeExits(n,  exitType,  labelName));  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	parent.replaceChild(n,  tryMinimizeExits(n,  exitType,  labelName));	      if(finallyBlock.isLabel())    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    	non-compiled	[CE]  'void'  type  not  allowed  here	26	None	replace
112	[BUG]  [BUGGY]  parent.replaceChild(n,  tryMinimizeExits(finallyBlock,  exitType,  labelName);  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]  parent.replaceChild(n,  tryMinimizeExits(finallyBlock,  exitType,  labelName);  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	parent.replaceChild(n,  tryMinimizeExits(finallyBlock,  exitType,  labelName);	      if(finallyBlock.isLabel())    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    }    	non-compiled	[CE]  ')'  expected	26	None	replace
113	[BUG]  [BUGGY]  tryMinimizeExits(lastBlock,  labelName,  finallyBlock);  [CE]  cannot  find  symbol  lastBlock  [FE]            AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]  tryMinimizeExits(lastBlock,  labelName,  finallyBlock);  [BUGGY]    }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(lastBlock,  labelName,  finallyBlock);	  tryMinimizeExits(n,    finallyBlock,    labelName);    	non-compiled	[CE]  cannot  find  symbol  lastBlock	14	None	replace
114	[BUG]  [BUGGY]      Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  finalBlock.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]      Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  finalBlock.getFirstChild();  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	        Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  elseBlock  =  finalBlock.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	5	None	add
115	[BUG]  [BUGGY]      Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  endType.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]      Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  endType.getFirstChild();  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	        Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  elseBlock  =  endType.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	5	None	add
116	[BUG]  [BUGGY]      Node  elseBlock  =  finallyBlock.getLastChild();  Node  elseBlock  =  finallyBlock.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]      Node  elseBlock  =  finallyBlock.getLastChild();  Node  elseBlock  =  finallyBlock.getFirstChild();  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	        Node    elseBlock    =    finallyBlock.getLastChild();    Node  elseBlock  =  finallyBlock.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	7	None	add
117	[BUG]  [BUGGY]  if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  escapeType,  labelName);  }  [CE]  cannot  find  symbol  escapeType  [FE]            AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]  if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  escapeType,  labelName);  }  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	if(finallyBlock!=  null)  {  tryMinimizeExits(finallyBlock,  escapeType,  labelName);  }	      if(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    labelName);    }    	non-compiled	[CE]  cannot  find  symbol  escapeType	20	None	replace
118	[BUG]  [BUGGY]  TryMinimizeExits(finallyBlock,  exitType,  labelName);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]  TryMinimizeExits(finallyBlock,  exitType,  labelName);  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	TryMinimizeExits(finallyBlock,  exitType,  labelName);	      if(finallyBlock!=    null)    {    tryMinimizeExits(finallyBlock,    labelName);    }    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
119	[BUG]  [BUGGY]  tryMinimizeExits(lastBlock,  labelName,  exitType);  [CE]  cannot  find  symbol  lastBlock  [FE]          AssertionFailedError    [CONTEXT]    Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();    [BUGGY]  tryMinimizeExits(lastBlock,  labelName,  exitType);  [BUGGY]    }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	tryMinimizeExits(lastBlock,  labelName,  exitType);	  tryMinimizeExits(finallyBlock,    labelName,    exitType);    	non-compiled	[CE]  cannot  find  symbol  lastBlock	13	None	replace
