bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:  [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);  [BUGGY]  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	add	tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);	tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  	compilable	  [FE]  AssertionFailedError  	5	3	replace
2	[BUG]  [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:  [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);  [BUGGY]  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);	tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  	compilable	  [FE]  AssertionFailedError  	5	3	replace
3	[BUG]  [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  parent);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError  [CONTEXT]  Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:  [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  parent);  [BUGGY]  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getLastChild(),  Token.RETURN,  parent);	tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	5	None	replace
4	[BUG]  [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  cond);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError  [CONTEXT]  Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:  [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  cond);  [BUGGY]  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getLastChild(),  Token.RETURN,  cond);	tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	5	None	replace
5	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError  [CONTEXT]  Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:  [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  [BUGGY]  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	add	tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);	tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  	compilable	  [FE]  AssertionFailedError  	5	3	replace
6	[BUG]  [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  [FE]  AssertionFailedError  [FE]          AssertionFailedError  [CONTEXT]  Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:  [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  [BUGGY]  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);	tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  	compilable	  [FE]  AssertionFailedError  	5	3	replace
7	[BUG]  [BUGGY]  tryMinimizeFunctionExits(n.getLastChild(),  Token.RETURN,  null);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError  [CONTEXT]  Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:  [BUGGY]  tryMinimizeFunctionExits(n.getLastChild(),  Token.RETURN,  null);  [BUGGY]  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunctionExits(n.getLastChild(),  Token.RETURN,  null);	tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  	non-compiled	[CE]  cannot  find  symbol	5	None	replace
8	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError  [CONTEXT]  Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:  [BUGGY]    [BUGGY]  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	add	  	tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  	compilable	  [FE]  AssertionFailedError  	5	3	replace
9	[BUG]  [BUGGY]    [FE]  AssertionFailedError  [FE]              AssertionFailedError  [CONTEXT]  Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:  [BUGGY]    [BUGGY]  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	  	tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  	compilable	  [FE]  AssertionFailedError  	5	3	replace
10	[BUG]  [BUGGY]    Node  n  =  parent.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]    AssertionFailedError  [CONTEXT]  Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:  [BUGGY]    Node  n  =  parent.getFirstChild();  [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	    Node  n  =  parent.getFirstChild();		non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	6	None	add
11	[BUG]  [BUGGY]    Node  n  =  n.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]      AssertionFailedError  [CONTEXT]  Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:  [BUGGY]    Node  n  =  n.getFirstChild();  [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	    Node  n  =  n.getFirstChild();		non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	6	None	add
12	[BUG]  [BUGGY]    Node  n  =  parent.getParent();  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]        AssertionFailedError  [CONTEXT]  Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:  [BUGGY]    Node  n  =  parent.getParent();  [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	    Node  n  =  parent.getParent();		non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	6	None	add
13	[BUG]  [BUGGY]    Node  n  =  node.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]          AssertionFailedError  [CONTEXT]  Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:  [BUGGY]    Node  n  =  node.getFirstChild();  [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	    Node  n  =  node.getFirstChild();		non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	6	None	add
14	[BUG]  [BUGGY]    Node  n  =  NodeUtil.getFunctionDeclaration(n);  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]            AssertionFailedError  [CONTEXT]  Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:  [BUGGY]    Node  n  =  NodeUtil.getFunctionDeclaration(n);  [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	    Node  n  =  NodeUtil.getFunctionDeclaration(n);		non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	6	None	add
15	[BUG]  [BUGGY]    Node  n  =  NodeUtil.getFunctionExpression(parent);  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]              AssertionFailedError  [CONTEXT]  Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:  [BUGGY]    Node  n  =  NodeUtil.getFunctionExpression(parent);  [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	    Node  n  =  NodeUtil.getFunctionExpression(parent);		non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	6	None	add
16	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:  [BUGGY]    tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	add	    tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);		compilable	  [FE]  AssertionFailedError  	6	2	add
17	[BUG]  [BUGGY]    tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:  [BUGGY]    tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	    tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);		compilable	  [FE]  AssertionFailedError  	6	2	add
18	[BUG]  [BUGGY]    tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  break;  [CE]  unreachable  statement  [FE]      AssertionFailedError  [CONTEXT]  Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:  [BUGGY]    tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  break;  [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	    tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  break;		non-compiled	[CE]  unreachable  statement	6	None	add
19	[BUG]  [BUGGY]    Node  n  =  n.getFirstChild();  tryMinimizeExits(n,  Token.FUNCTION,  null);  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]        AssertionFailedError  [CONTEXT]  Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:  [BUGGY]    Node  n  =  n.getFirstChild();  tryMinimizeExits(n,  Token.FUNCTION,  null);  [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	    Node  n  =  n.getFirstChild();  tryMinimizeExits(n,  Token.FUNCTION,  null);		non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	6	None	add
20	[BUG]  [BUGGY]    Node  n  =  n.getLastChild();  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]          AssertionFailedError  [CONTEXT]  Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:  [BUGGY]    Node  n  =  n.getLastChild();  [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	    Node  n  =  n.getLastChild();		non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	6	None	add
21	[BUG]  [BUGGY]  tryMinimizeFunctionExit(n.getLastChild(),  Token.RETURN,  null);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError  [CONTEXT]  Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:  [BUGGY]  tryMinimizeFunctionExit(n.getLastChild(),  Token.RETURN,  null);  [BUGGY]  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunctionExit(n.getLastChild(),  Token.RETURN,  null);	tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  	non-compiled	[CE]  cannot  find  symbol	5	None	replace
22	[BUG]  [BUGGY]  tryMinimizeFunction(n.getLastChild(),  Token.RETURN,  null);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError  [CONTEXT]  Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:  [BUGGY]  tryMinimizeFunction(n.getLastChild(),  Token.RETURN,  null);  [BUGGY]  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunction(n.getLastChild(),  Token.RETURN,  null);	tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  	non-compiled	[CE]  cannot  find  symbol	5	None	replace
