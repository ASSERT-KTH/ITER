bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  false);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  false);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  false);	          tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	12	None	replace
2	[BUG]  [BUGGY]  tryMinimizeExits(t.getFirstChild(),  Token.FUNCTION);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(t.getFirstChild(),  Token.FUNCTION);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(t.getFirstChild(),  Token.FUNCTION);	          tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
3	[BUG]  [BUGGY]  tryMinimizeFunctionExit(n,  n.getLastChild(),  Token.RETURN,  parent);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeFunctionExit(n,  n.getLastChild(),  Token.RETURN,  parent);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunctionExit(n,  n.getLastChild(),  Token.RETURN,  parent);	  tryMinimizeFunctionExit(n,    n.getLastChild(),    Token.RETURN,    null);    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
4	[BUG]  [BUGGY]  tryMinimizeFunctionExit(n,  parent.getLastChild(),  Token.RETURN,  null);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeFunctionExit(n,  parent.getLastChild(),  Token.RETURN,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunctionExit(n,  parent.getLastChild(),  Token.RETURN,  null);	  tryMinimizeFunctionExit(n,    n.getLastChild(),    Token.RETURN,    null);    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
5	[BUG]  [BUGGY]  tryMinimizeFunctionExit(n,  n.getFirstChild(),  Token.RETURN,  null);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeFunctionExit(n,  n.getFirstChild(),  Token.RETURN,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunctionExit(n,  n.getFirstChild(),  Token.RETURN,  null);	  tryMinimizeFunctionExit(n,    n.getLastChild(),    Token.RETURN,    null);    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
6	[BUG]  [BUGGY]  tryMinimizeFunctionExit(n,  cond.getLastChild(),  Token.RETURN,  null);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeFunctionExit(n,  cond.getLastChild(),  Token.RETURN,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunctionExit(n,  cond.getLastChild(),  Token.RETURN,  null);	  tryMinimizeFunctionExit(n,    n.getLastChild(),    Token.RETURN,    null);    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
7	[BUG]  [BUGGY]  Node  n  =  NodeUtil.getFunctionExpression(cond,  t);  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                          AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  Node  n  =  NodeUtil.getFunctionExpression(cond,  t);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Node  n  =  NodeUtil.getFunctionExpression(cond,  t);	  Node    n    =    NodeUtil.getFunctionExpression(parent,    t);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	56	None	replace
8	[BUG]  [BUGGY]  Node  n  =  NodeUtil.getFunctionExpression(n,  t);  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                            AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  Node  n  =  NodeUtil.getFunctionExpression(n,  t);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Node  n  =  NodeUtil.getFunctionExpression(n,  t);	  Node    n    =    NodeUtil.getFunctionExpression(parent,    t);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	56	None	replace
9	[BUG]  [BUGGY]  Node  n  =  NodeUtil.getFunctionExpression(n,  parent);  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                              AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  Node  n  =  NodeUtil.getFunctionExpression(n,  parent);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Node  n  =  NodeUtil.getFunctionExpression(n,  parent);	  Node    n    =    NodeUtil.getFunctionExpression(parent,    t);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	56	None	replace
10	[BUG]  [BUGGY]  Node  n  =  NodeUtil.getFunctionExpression(parent,  t,  null);  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                                AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  Node  n  =  NodeUtil.getFunctionExpression(parent,  t,  null);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Node  n  =  NodeUtil.getFunctionExpression(parent,  t,  null);	  Node    n    =    NodeUtil.getFunctionExpression(parent,    t);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	56	None	replace
11	[BUG]  [BUGGY]  Node  n  =  NodeUtil.getFunctionExpression(parent,  t,  false);  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                                  AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  Node  n  =  NodeUtil.getFunctionExpression(parent,  t,  false);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Node  n  =  NodeUtil.getFunctionExpression(parent,  t,  false);	  Node    n    =    NodeUtil.getFunctionExpression(parent,    t);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	56	None	replace
12	[BUG]  [BUGGY]  Node  n  =  NodeUtil.getFunctionExpression(cond,  false);  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                            AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  Node  n  =  NodeUtil.getFunctionExpression(cond,  false);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Node  n  =  NodeUtil.getFunctionExpression(cond,  false);	  Node    n    =    NodeUtil.getFunctionExpression(parent,    false);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	57	None	replace
13	[BUG]  [BUGGY]  Node  n  =  NodeUtil.getFunctionExpression(parent,  true);  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                              AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  Node  n  =  NodeUtil.getFunctionExpression(parent,  true);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Node  n  =  NodeUtil.getFunctionExpression(parent,  true);	  Node    n    =    NodeUtil.getFunctionExpression(parent,    false);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	57	None	replace
14	[BUG]  [BUGGY]  Node  n  =  NodeUtil.getFunctionExpression(n,  false);  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                                AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  Node  n  =  NodeUtil.getFunctionExpression(n,  false);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Node  n  =  NodeUtil.getFunctionExpression(n,  false);	  Node    n    =    NodeUtil.getFunctionExpression(parent,    false);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	57	None	replace
15	[BUG]  [BUGGY]  Node  n  =  NodeUtil.getFunctionExpression(cfg,  false);  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                                  AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  Node  n  =  NodeUtil.getFunctionExpression(cfg,  false);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Node  n  =  NodeUtil.getFunctionExpression(cfg,  false);	  Node    n    =    NodeUtil.getFunctionExpression(parent,    false);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	57	None	replace
16	[BUG]  [BUGGY]  TryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  TryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	TryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);	          tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getLastChild(),    Token.FUNCTION,    null);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
17	[BUG]  [BUGGY]  TryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  tryMaximizeExits(n.getLastChild(),  Token.FUNCTION,  null);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  TryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  tryMaximizeExits(n.getLastChild(),  Token.FUNCTION,  null);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	TryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  tryMaximizeExits(n.getLastChild(),  Token.FUNCTION,  null);	          tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getLastChild(),    Token.FUNCTION,    null);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
18	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(parent.getFirstChild(),  Token.RETURN,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	add	tryMinimizeExits(parent.getFirstChild(),  Token.RETURN,  null);	  tryMinimizeExits(n.getFirstChild(),    Token.RETURN,    null);    tryMinimizeExits(n.getfirstChild(),    Token.RETURN,    null);    	compilable	  [FE]  AssertionFailedError  	26	3	replace
19	[BUG]  [BUGGY]  tryMinimizeExits(parent.getFirstChild(),  Token.RETURN,  null);  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(parent.getFirstChild(),  Token.RETURN,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(parent.getFirstChild(),  Token.RETURN,  null);	  tryMinimizeExits(n.getFirstChild(),    Token.RETURN,    null);    tryMinimizeExits(n.getfirstChild(),    Token.RETURN,    null);    	compilable	  [FE]  AssertionFailedError  	26	3	replace
20	[BUG]  [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  cond);  TryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  cond);  TryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  cond);  TryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);	  tryMinimizeExits(n.getFirstChild(),    Token.RETURN,    null);    TryMinimizeExits(n.getFirstChild(),    Token.RETURN,    null);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	23	None	replace
21	[BUG]  [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  TryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  TryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  TryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);	  tryMinimizeExits(n.getFirstChild(),    Token.RETURN,    null);    TryMinimizeExits(n.getFirstChild(),    Token.RETURN,    null);    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
22	[BUG]  [BUGGY]  tryMinimizeExits(parent.getFirstChild(),  Token.RETURN,  null);  TryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(parent.getFirstChild(),  Token.RETURN,  null);  TryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(parent.getFirstChild(),  Token.RETURN,  null);  TryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);	  tryMinimizeExits(n.getFirstChild(),    Token.RETURN,    null);    TryMinimizeExits(n.getFirstChild(),    Token.RETURN,    null);    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
23	[BUG]  [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  parent);  TryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  parent);  TryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  parent);  TryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);	  tryMinimizeExits(n.getFirstChild(),    Token.RETURN,    null);    TryMinimizeExits(n.getFirstChild(),    Token.RETURN,    null);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	23	None	replace
24	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]          tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	add	                tryMinimizeExits(n.getFirstChild(),    Token.BREAK,    null);    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);	  	compilable	  [FE]  AssertionFailedError  	6	2	add
25	[BUG]  [BUGGY]          tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]          tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	                tryMinimizeExits(n.getFirstChild(),    Token.BREAK,    null);    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);	  	compilable	  [FE]  AssertionFailedError  	6	2	add
26	[BUG]  [BUGGY]          tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  TryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]          tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  TryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	                tryMinimizeExits(n.getFirstChild(),    Token.BREAK,    null);    TryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);	  	non-compiled	[CE]  cannot  find  symbol	6	None	add
27	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]          tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  tryMinimizeExits(n.getLastChild(),  Token.BREAK,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	add	                tryMinimizeExits(n.getFirstChild(),    Token.BREAK,    null);    tryMinimizeExits(n.getLastChild(),  Token.BREAK,  null);	  	compilable	  [FE]  AssertionFailedError  	6	2	add
28	[BUG]  [BUGGY]          tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  tryMinimizeExits(n.getLastChild(),  Token.BREAK,  null);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]          tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  tryMinimizeExits(n.getLastChild(),  Token.BREAK,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	                tryMinimizeExits(n.getFirstChild(),    Token.BREAK,    null);    tryMinimizeExits(n.getLastChild(),  Token.BREAK,  null);	  	compilable	  [FE]  AssertionFailedError  	6	2	add
29	[BUG]  [BUGGY]          tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  tryMaximizeExits(n.getFirstChild(),  Token.BREAK,  null);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]          tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  tryMaximizeExits(n.getFirstChild(),  Token.BREAK,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	                tryMinimizeExits(n.getFirstChild(),    Token.BREAK,    null);    tryMaximizeExits(n.getFirstChild(),  Token.BREAK,  null);	  	non-compiled	[CE]  cannot  find  symbol	6	None	add
30	[BUG]  [BUGGY]  tryMinimizeFunction(n,  n.getLastChild(),  Token.RETURN,  parent);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeFunction(n,  n.getLastChild(),  Token.RETURN,  parent);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunction(n,  n.getLastChild(),  Token.RETURN,  parent);	  tryMinimizeFunction(n,    n.getLastChild(),    Token.RETURN,    null);    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
31	[BUG]  [BUGGY]  tryMinimizeFunction(n,  parent.getLastChild(),  Token.RETURN,  null);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeFunction(n,  parent.getLastChild(),  Token.RETURN,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunction(n,  parent.getLastChild(),  Token.RETURN,  null);	  tryMinimizeFunction(n,    n.getLastChild(),    Token.RETURN,    null);    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
32	[BUG]  [BUGGY]  tryMinimizeFunction(n,  n.getFirstChild(),  Token.RETURN,  null);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeFunction(n,  n.getFirstChild(),  Token.RETURN,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunction(n,  n.getFirstChild(),  Token.RETURN,  null);	  tryMinimizeFunction(n,    n.getLastChild(),    Token.RETURN,    null);    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
33	[BUG]  [BUGGY]  tryMinimizeFunction(n,  cond.getLastChild(),  Token.RETURN,  null);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeFunction(n,  cond.getLastChild(),  Token.RETURN,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunction(n,  cond.getLastChild(),  Token.RETURN,  null);	  tryMinimizeFunction(n,    n.getLastChild(),    Token.RETURN,    null);    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
34	[BUG]  [BUGGY]  Node  n  =  cond.getFirstChild();  tryMinimizeExits(parent,  Token.FUNCTION,  null);  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  Node  n  =  cond.getFirstChild();  tryMinimizeExits(parent,  Token.FUNCTION,  null);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Node  n  =  cond.getFirstChild();  tryMinimizeExits(parent,  Token.FUNCTION,  null);	  Node    n    =    parent.getFirstChild();    tryMinimizeExits(parent,    Token.FUNCTION,    null);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	90	None	replace
35	[BUG]  [BUGGY]  Node  n  =  parent.getLastChild();  tryMinimizeExits(n,  Token.FUNCTION,  null);  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  Node  n  =  parent.getLastChild();  tryMinimizeExits(n,  Token.FUNCTION,  null);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Node  n  =  parent.getLastChild();  tryMinimizeExits(n,  Token.FUNCTION,  null);	  Node    n    =    parent.getFirstChild();    tryMinimizeExits(parent,    Token.FUNCTION,    null);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	90	None	replace
36	[BUG]  [BUGGY]  Node  n  =  parent.getFirstChild();  tryMinimizeExits(cond,  Token.FUNCTION,  null);  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                    AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  Node  n  =  parent.getFirstChild();  tryMinimizeExits(cond,  Token.FUNCTION,  null);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Node  n  =  parent.getFirstChild();  tryMinimizeExits(cond,  Token.FUNCTION,  null);	  Node    n    =    parent.getFirstChild();    tryMinimizeExits(parent,    Token.FUNCTION,    null);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	90	None	replace
37	[BUG]  [BUGGY]  Node  n  =  parent.getFirstChild();  tryMinimizeExits(t,  Token.FUNCTION,  null);  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                      AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  Node  n  =  parent.getFirstChild();  tryMinimizeExits(t,  Token.FUNCTION,  null);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Node  n  =  parent.getFirstChild();  tryMinimizeExits(t,  Token.FUNCTION,  null);	  Node    n    =    parent.getFirstChild();    tryMinimizeExits(parent,    Token.FUNCTION,    null);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	90	None	replace
38	[BUG]  [BUGGY]  tryMinimizeFunction(n.getFirstChild(),  Token.RETURN,  parent);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeFunction(n.getFirstChild(),  Token.RETURN,  parent);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunction(n.getFirstChild(),  Token.RETURN,  parent);	  tryMinimizeFunction(n.getFirstChild(),    Token.RETURN,    null);    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
39	[BUG]  [BUGGY]  tryMinimizeFunction(n.getFirstChild(),  Token.RETURN,  cond);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeFunction(n.getFirstChild(),  Token.RETURN,  cond);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunction(n.getFirstChild(),  Token.RETURN,  cond);	  tryMinimizeFunction(n.getFirstChild(),    Token.RETURN,    null);    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
40	[BUG]  [BUGGY]  tryMinimizeFunction(n,  cond.getFirstChild(),  Token.RETURN,  null);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeFunction(n,  cond.getFirstChild(),  Token.RETURN,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunction(n,  cond.getFirstChild(),  Token.RETURN,  null);	  tryMinimizeFunction(n.getFirstChild(),    Token.RETURN,    null);    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
41	[BUG]  [BUGGY]  tryMinimizeFunction(cond.getFirstChild(),  Token.RETURN,  null);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeFunction(cond.getFirstChild(),  Token.RETURN,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunction(cond.getFirstChild(),  Token.RETURN,  null);	  tryMinimizeFunction(n.getFirstChild(),    Token.RETURN,    null);    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
42	[BUG]  [BUGGY]  Node  n  =  NodeUtil.getFunctionDeclaration(parent.getParent());  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                      AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  Node  n  =  NodeUtil.getFunctionDeclaration(parent.getParent());  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Node  n  =  NodeUtil.getFunctionDeclaration(parent.getParent());	  Node    n    =    NodeUtil.getFunctionDeclaration(n.getParent());    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	93	None	replace
43	[BUG]  [BUGGY]  Node  n  =  NodeUtil.getFunctionDeclaration(n.getParent(),  parent);  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                        AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  Node  n  =  NodeUtil.getFunctionDeclaration(n.getParent(),  parent);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Node  n  =  NodeUtil.getFunctionDeclaration(n.getParent(),  parent);	  Node    n    =    NodeUtil.getFunctionDeclaration(n.getParent());    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	93	None	replace
44	[BUG]  [BUGGY]  Node  n  =  NodeUtil.getFunctionDeclaration(n.getLastChild());  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                          AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  Node  n  =  NodeUtil.getFunctionDeclaration(n.getLastChild());  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Node  n  =  NodeUtil.getFunctionDeclaration(n.getLastChild());	  Node    n    =    NodeUtil.getFunctionDeclaration(n.getParent());    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	93	None	replace
45	[BUG]  [BUGGY]  Node  n  =  NodeUtil.getFunctionDeclaration(n.getNext());  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                            AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  Node  n  =  NodeUtil.getFunctionDeclaration(n.getNext());  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Node  n  =  NodeUtil.getFunctionDeclaration(n.getNext());	  Node    n    =    NodeUtil.getFunctionDeclaration(n.getParent());    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	93	None	replace
46	[BUG]  [BUGGY]  tryMinimizeFunctionExits(n.getLastChild(),  Token.RETURN,  parent,  null);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeFunctionExits(n.getLastChild(),  Token.RETURN,  parent,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunctionExits(n.getLastChild(),  Token.RETURN,  parent,  null);	  tryMinimizeFunctionExits(n.getLastChild(),    Token.RETURN,    parent);    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
47	[BUG]  [BUGGY]  tryMinimizeFunctionExits(t.getLastChild(),  Token.RETURN,  parent);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeFunctionExits(t.getLastChild(),  Token.RETURN,  parent);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunctionExits(t.getLastChild(),  Token.RETURN,  parent);	  tryMinimizeFunctionExits(n.getLastChild(),    Token.RETURN,    parent);    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
48	[BUG]  [BUGGY]  tryMinimizeFunctionExits(n,  n.getLastChild(),  Token.RETURN,  parent);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeFunctionExits(n,  n.getLastChild(),  Token.RETURN,  parent);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunctionExits(n,  n.getLastChild(),  Token.RETURN,  parent);	  tryMinimizeFunctionExits(n.getLastChild(),    Token.RETURN,    parent);    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
49	[BUG]  [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  cond,  parent);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  cond,  parent);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  cond,  parent);	  tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    parent);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	72	None	replace
50	[BUG]  [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  parent,  null);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  parent,  null);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  parent,  null);	  tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    parent);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	72	None	replace
51	[BUG]  [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null,  parent);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null,  parent);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null,  parent);	  tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    parent);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	72	None	replace
52	[BUG]  [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  cond,  null,  TernaryValue.FUNCTION);  [CE]  cannot  find  symbol  FUNCTION  [FE]                AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  cond,  null,  TernaryValue.FUNCTION);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getLastChild(),  Token.RETURN,  cond,  null,  TernaryValue.FUNCTION);	  tryMinimizeExits(n.getLastChild(),    Token.RETURN,    cond,    null);    	non-compiled	[CE]  cannot  find  symbol  FUNCTION	1	None	replace
53	[BUG]  [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  cond,  TernaryValue.FUNCTION,  null);  [CE]  cannot  find  symbol  FUNCTION  [FE]                  AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  cond,  TernaryValue.FUNCTION,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getLastChild(),  Token.RETURN,  cond,  TernaryValue.FUNCTION,  null);	  tryMinimizeExits(n.getLastChild(),    Token.RETURN,    cond,    null);    	non-compiled	[CE]  cannot  find  symbol  FUNCTION	1	None	replace
54	[BUG]  [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  cond,  null,  TernaryValue.FALSE);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  cond,  null,  TernaryValue.FALSE);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getLastChild(),  Token.RETURN,  cond,  null,  TernaryValue.FALSE);	  tryMinimizeExits(n.getLastChild(),    Token.RETURN,    cond,    null);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	1	None	replace
55	[BUG]  [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  cond,  parent,  null);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  cond,  parent,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getLastChild(),  Token.RETURN,  cond,  parent,  null);	  tryMinimizeExits(n.getLastChild(),    Token.RETURN,    cond,    null);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	1	None	replace
56	[BUG]  [BUGGY]  NodeUtil.copyFunctionExit(parent,  n);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  NodeUtil.copyFunctionExit(parent,  n);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	NodeUtil.copyFunctionExit(parent,  n);	          NodeUtil.copyFunctionExit(n,    parent);    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
57	[BUG]  [BUGGY]  NodeUtil.copyFunctionExit(cond,  parent);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  NodeUtil.copyFunctionExit(cond,  parent);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	NodeUtil.copyFunctionExit(cond,  parent);	          NodeUtil.copyFunctionExit(n,    parent);    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
58	[BUG]  [BUGGY]  NodeUtil.copyFunctionExit(n,  cond);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  NodeUtil.copyFunctionExit(n,  cond);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	NodeUtil.copyFunctionExit(n,  cond);	          NodeUtil.copyFunctionExit(n,    parent);    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
59	[BUG]  [BUGGY]  NodeUtil.copyFunctionExit(n,  parent,  cond);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  NodeUtil.copyFunctionExit(n,  parent,  cond);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	NodeUtil.copyFunctionExit(n,  parent,  cond);	          NodeUtil.copyFunctionExit(n,    parent);    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
60	[BUG]  [BUGGY]  NodeUtil.copyFunctionExit(n,  parent,  t);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  NodeUtil.copyFunctionExit(n,  parent,  t);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	NodeUtil.copyFunctionExit(n,  parent,  t);	          NodeUtil.copyFunctionExit(n,    parent);    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
61	[BUG]  [BUGGY]  Node  n  =  CondUtil.getLastChild();  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                    AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  Node  n  =  CondUtil.getLastChild();  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Node  n  =  CondUtil.getLastChild();	  Node    n    =    cond.getLastChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	14	None	replace
62	[BUG]  [BUGGY]  Node  n  =  cond.getLastChild();  tryMinimizeExits(n,  Token.FUNCTION,  null);  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  Node  n  =  cond.getLastChild();  tryMinimizeExits(n,  Token.FUNCTION,  null);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Node  n  =  cond.getLastChild();  tryMinimizeExits(n,  Token.FUNCTION,  null);	  Node    n    =    cond.getFirstChild();    tryMinimizeExits(n,    Token.FUNCTION,    null);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	66	None	replace
63	[BUG]  [BUGGY]  Node  n  =  cond.getFirstChild();  tryMinimizeExits(n,  Token.FUNCTION,  parent);  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                    AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  Node  n  =  cond.getFirstChild();  tryMinimizeExits(n,  Token.FUNCTION,  parent);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Node  n  =  cond.getFirstChild();  tryMinimizeExits(n,  Token.FUNCTION,  parent);	  Node    n    =    cond.getFirstChild();    tryMinimizeExits(n,    Token.FUNCTION,    null);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	66	None	replace
64	[BUG]  [BUGGY]  Node  n  =  cond.getFirstChild();  tryMinimizeExits(t,  Token.FUNCTION,  null);  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                      AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  Node  n  =  cond.getFirstChild();  tryMinimizeExits(t,  Token.FUNCTION,  null);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Node  n  =  cond.getFirstChild();  tryMinimizeExits(t,  Token.FUNCTION,  null);	  Node    n    =    cond.getFirstChild();    tryMinimizeExits(n,    Token.FUNCTION,    null);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	66	None	replace
65	[BUG]  [BUGGY]  Node  n  =  NodeUtil.getFunctionDeclaration(cond,  parent);  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                    AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  Node  n  =  NodeUtil.getFunctionDeclaration(cond,  parent);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Node  n  =  NodeUtil.getFunctionDeclaration(cond,  parent);	  Node    n    =    NodeUtil.getFunctionDeclaration(parent,    n);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	76	None	replace
66	[BUG]  [BUGGY]  Node  n  =  NodeUtil.getFunctionDeclaration(parent,  n,  null);  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                      AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  Node  n  =  NodeUtil.getFunctionDeclaration(parent,  n,  null);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Node  n  =  NodeUtil.getFunctionDeclaration(parent,  n,  null);	  Node    n    =    NodeUtil.getFunctionDeclaration(parent,    n);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	76	None	replace
67	[BUG]  [BUGGY]  Node  n  =  NodeUtil.getFunctionDeclaration(parent,  t);  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                        AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  Node  n  =  NodeUtil.getFunctionDeclaration(parent,  t);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Node  n  =  NodeUtil.getFunctionDeclaration(parent,  t);	  Node    n    =    NodeUtil.getFunctionDeclaration(parent,    n);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	76	None	replace
68	[BUG]  [BUGGY]  Node  n  =  NodeUtil.getFunctionDeclaration(parent,  cond);  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                          AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  Node  n  =  NodeUtil.getFunctionDeclaration(parent,  cond);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Node  n  =  NodeUtil.getFunctionDeclaration(parent,  cond);	  Node    n    =    NodeUtil.getFunctionDeclaration(parent,    n);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	76	None	replace
69	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]          tryMinimizeExits(n.getFirstChild(),  Token.BLOCK,  null);  tryMinimizeExits(n.getFirstChild(),  Token.BLOCK,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	add	                tryMinimizeExits(n.getFirstChild(),    Token.BLOCK,    null);    tryMinimizeExits(n.getFirstChild(),  Token.BLOCK,  null);	  	compilable	  [FE]  AssertionFailedError  	9	2	add
70	[BUG]  [BUGGY]          tryMinimizeExits(n.getFirstChild(),  Token.BLOCK,  null);  tryMinimizeExits(n.getFirstChild(),  Token.BLOCK,  null);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]          tryMinimizeExits(n.getFirstChild(),  Token.BLOCK,  null);  tryMinimizeExits(n.getFirstChild(),  Token.BLOCK,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	                tryMinimizeExits(n.getFirstChild(),    Token.BLOCK,    null);    tryMinimizeExits(n.getFirstChild(),  Token.BLOCK,  null);	  	compilable	  [FE]  AssertionFailedError  	9	2	add
71	[BUG]  [BUGGY]          tryMinimizeExits(n.getFirstChild(),  Token.BLOCK,  null);  TryMinimizeExits(n.getFirstChild(),  Token.BLOCK,  null);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]          tryMinimizeExits(n.getFirstChild(),  Token.BLOCK,  null);  TryMinimizeExits(n.getFirstChild(),  Token.BLOCK,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	                tryMinimizeExits(n.getFirstChild(),    Token.BLOCK,    null);    TryMinimizeExits(n.getFirstChild(),  Token.BLOCK,  null);	  	non-compiled	[CE]  cannot  find  symbol	9	None	add
72	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]          tryMinimizeExits(n.getFirstChild(),  Token.BLOCK,  null);  tryMinimizeExits(n.getLastChild(),  Token.BLOCK,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	add	                tryMinimizeExits(n.getFirstChild(),    Token.BLOCK,    null);    tryMinimizeExits(n.getLastChild(),  Token.BLOCK,  null);	  	compilable	  [FE]  AssertionFailedError  	9	2	add
73	[BUG]  [BUGGY]          tryMinimizeExits(n.getFirstChild(),  Token.BLOCK,  null);  tryMinimizeExits(n.getLastChild(),  Token.BLOCK,  null);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]          tryMinimizeExits(n.getFirstChild(),  Token.BLOCK,  null);  tryMinimizeExits(n.getLastChild(),  Token.BLOCK,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	                tryMinimizeExits(n.getFirstChild(),    Token.BLOCK,    null);    tryMinimizeExits(n.getLastChild(),  Token.BLOCK,  null);	  	compilable	  [FE]  AssertionFailedError  	9	2	add
74	[BUG]  [BUGGY]          tryMinimizeExits(n.getFirstChild(),  Token.BLOCK,  null);  tryMaximizeExits(n.getFirstChild(),  Token.BLOCK,  null);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]          tryMinimizeExits(n.getFirstChild(),  Token.BLOCK,  null);  tryMaximizeExits(n.getFirstChild(),  Token.BLOCK,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	                tryMinimizeExits(n.getFirstChild(),    Token.BLOCK,    null);    tryMaximizeExits(n.getFirstChild(),  Token.BLOCK,  null);	  	non-compiled	[CE]  cannot  find  symbol	9	None	add
75	[BUG]  [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  Cond.FUNCTION,  cond);  [CE]  cannot  find  symbol  Cond  [FE]                  AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  Cond.FUNCTION,  cond);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getLastChild(),  Token.RETURN,  Cond.FUNCTION,  cond);	  tryMinimizeExits(n.getLastChild(),    Token.RETURN,    Cond.FUNCTION,    parent);    	non-compiled	[CE]  cannot  find  symbol  Cond	43	None	replace
76	[BUG]  [BUGGY]  tryMinimizeExits(cond.getLastChild(),  Token.RETURN,  Cond.FUNCTION,  parent);  [CE]  cannot  find  symbol  Cond  [FE]                    AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(cond.getLastChild(),  Token.RETURN,  Cond.FUNCTION,  parent);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(cond.getLastChild(),  Token.RETURN,  Cond.FUNCTION,  parent);	  tryMinimizeExits(n.getLastChild(),    Token.RETURN,    Cond.FUNCTION,    parent);    	non-compiled	[CE]  cannot  find  symbol  Cond	43	None	replace
77	[BUG]  [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  Cond.FUNCTION,  parent);  [CE]  cannot  find  symbol  Cond  [FE]                      AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  Cond.FUNCTION,  parent);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  Cond.FUNCTION,  parent);	  tryMinimizeExits(n.getLastChild(),    Token.RETURN,    Cond.FUNCTION,    parent);    	non-compiled	[CE]  cannot  find  symbol  Cond	43	None	replace
78	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(parent.getLastChild(),  Token.FUNCTION,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	add	tryMinimizeExits(parent.getLastChild(),  Token.FUNCTION,  null);	  tryMinimizeExits(n.getLastChild(),    Token.FUNCTION,    null);    attemptMinimizeExits(n.getLastChild(),    Token.FUNCTION,    null);    	compilable	  [FE]  AssertionFailedError  	52	3	replace
79	[BUG]  [BUGGY]  tryMinimizeExits(parent.getLastChild(),  Token.FUNCTION,  null);  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(parent.getLastChild(),  Token.FUNCTION,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(parent.getLastChild(),  Token.FUNCTION,  null);	  tryMinimizeExits(n.getLastChild(),    Token.FUNCTION,    null);    attemptMinimizeExits(n.getLastChild(),    Token.FUNCTION,    null);    	compilable	  [FE]  AssertionFailedError  	52	3	replace
80	[BUG]  [BUGGY]  tryMinimizeFunctionExit(n.getFirstChild(),  Token.RETURN,  parent);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeFunctionExit(n.getFirstChild(),  Token.RETURN,  parent);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunctionExit(n.getFirstChild(),  Token.RETURN,  parent);	  tryMinimizeFunctionExit(n.getFirstChild(),    Token.RETURN,    null);    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
81	[BUG]  [BUGGY]  tryMinimizeFunctionExit(n.getFirstChild(),  Token.RETURN,  cond);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeFunctionExit(n.getFirstChild(),  Token.RETURN,  cond);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunctionExit(n.getFirstChild(),  Token.RETURN,  cond);	  tryMinimizeFunctionExit(n.getFirstChild(),    Token.RETURN,    null);    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
82	[BUG]  [BUGGY]  tryMinimizeFunctionExit(n,  parent.getFirstChild(),  Token.RETURN,  null);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeFunctionExit(n,  parent.getFirstChild(),  Token.RETURN,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunctionExit(n,  parent.getFirstChild(),  Token.RETURN,  null);	  tryMinimizeFunctionExit(n.getFirstChild(),    Token.RETURN,    null);    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
83	[BUG]  [BUGGY]  tryMinimizeFunctionExit(n,  t.getFirstChild(),  Token.RETURN,  null);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeFunctionExit(n,  t.getFirstChild(),  Token.RETURN,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunctionExit(n,  t.getFirstChild(),  Token.RETURN,  null);	  tryMinimizeFunctionExit(n.getFirstChild(),    Token.RETURN,    null);    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
84	[BUG]  [BUGGY]  tryMinimizeFunctionExit(n.getLastChild(),  Token.RETURN,  cond,  null);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeFunctionExit(n.getLastChild(),  Token.RETURN,  cond,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunctionExit(n.getLastChild(),  Token.RETURN,  cond,  null);	  tryMinimizeFunctionExit(n.getLastChild(),    Token.RETURN,    cond);    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
85	[BUG]  [BUGGY]  tryMinimizeFunctionExit(cond.getLastChild(),  Token.RETURN,  n);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeFunctionExit(cond.getLastChild(),  Token.RETURN,  n);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunctionExit(cond.getLastChild(),  Token.RETURN,  n);	  tryMinimizeFunctionExit(n.getLastChild(),    Token.RETURN,    cond);    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
86	[BUG]  [BUGGY]  tryMinimizeFunctionExit(n.getLastChild(),  Token.RETURN,  cond,  TernaryValue.FUNCTION);  [CE]  cannot  find  symbol  FUNCTION  [FE]                  AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeFunctionExit(n.getLastChild(),  Token.RETURN,  cond,  TernaryValue.FUNCTION);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunctionExit(n.getLastChild(),  Token.RETURN,  cond,  TernaryValue.FUNCTION);	  tryMinimizeFunctionExit(n.getLastChild(),    Token.RETURN,    cond);    	non-compiled	[CE]  cannot  find  symbol  FUNCTION	59	None	replace
87	[BUG]  [BUGGY]  tryMinimizeFunctionExit(n,  n.getLastChild(),  Token.RETURN,  cond);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeFunctionExit(n,  n.getLastChild(),  Token.RETURN,  cond);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunctionExit(n,  n.getLastChild(),  Token.RETURN,  cond);	  tryMinimizeFunctionExit(n.getLastChild(),    Token.RETURN,    cond);    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
88	[BUG]  [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  cond,  null,  parent);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  cond,  null,  parent);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getLastChild(),  Token.RETURN,  cond,  null,  parent);	  tryMinimizeExits(n.getLastChild(),    Token.RETURN,    null,    parent);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	86	None	replace
89	[BUG]  [BUGGY]  tryMinimizeExits(t.getLastChild(),  Token.RETURN,  null,  parent);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(t.getLastChild(),  Token.RETURN,  null,  parent);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(t.getLastChild(),  Token.RETURN,  null,  parent);	  tryMinimizeExits(n.getLastChild(),    Token.RETURN,    null,    parent);    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
90	[BUG]  [BUGGY]  Node  n  =  node.getNext();  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  Node  n  =  node.getNext();  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Node  n  =  node.getNext();	  Node    n    =    parent.getNext();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	63	None	replace
91	[BUG]  [BUGGY]  Node  n  =  NodeUtil.getFunctionExpr(parent);  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                        AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  Node  n  =  NodeUtil.getFunctionExpr(parent);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Node  n  =  NodeUtil.getFunctionExpr(parent);	  Node    n    =    NodeUtil.getFunctionExpression(n);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	55	None	replace
92	[BUG]  [BUGGY]  tryMinimizeFunction(n.getLastChild(),  Token.RETURN,  parent,  null);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeFunction(n.getLastChild(),  Token.RETURN,  parent,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunction(n.getLastChild(),  Token.RETURN,  parent,  null);	  tryMinimizeFunction(n.getLastChild(),    Token.RETURN,    parent);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
93	[BUG]  [BUGGY]  tryMinimizeFunction(t.getLastChild(),  Token.RETURN,  parent);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeFunction(t.getLastChild(),  Token.RETURN,  parent);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunction(t.getLastChild(),  Token.RETURN,  parent);	  tryMinimizeFunction(n.getLastChild(),    Token.RETURN,    parent);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
94	[BUG]  [BUGGY]  tryMinimizeFunction(cond.getLastChild(),  Token.RETURN,  parent);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeFunction(cond.getLastChild(),  Token.RETURN,  parent);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunction(cond.getLastChild(),  Token.RETURN,  parent);	  tryMinimizeFunction(n.getLastChild(),    Token.RETURN,    parent);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
95	[BUG]  [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  cond,  true);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  cond,  true);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getLastChild(),  Token.RETURN,  cond,  true);	  tryMinimizeExits(n.getLastChild(),    Token.RETURN,    cond,    false);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	5	None	replace
96	[BUG]  [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  cond,  false,  parent);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  cond,  false,  parent);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getLastChild(),  Token.RETURN,  cond,  false,  parent);	  tryMinimizeExits(n.getLastChild(),    Token.RETURN,    cond,    false);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	5	None	replace
97	[BUG]  [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  cond,  null,  false);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  cond,  null,  false);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getLastChild(),  Token.RETURN,  cond,  null,  false);	  tryMinimizeExits(n.getLastChild(),    Token.RETURN,    cond,    false);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	5	None	replace
98	[BUG]  [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  cond,  false,  null);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]                              AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  cond,  false,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getLastChild(),  Token.RETURN,  cond,  false,  null);	  tryMinimizeExits(n.getLastChild(),    Token.RETURN,    cond,    false);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	5	None	replace
99	[BUG]  [BUGGY]  tryMinimizeFunction(n.getFirstChild(),  Token.FUNCTION,  parent);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeFunction(n.getFirstChild(),  Token.FUNCTION,  parent);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunction(n.getFirstChild(),  Token.FUNCTION,  parent);	  tryMinimizeFunction(n.getFirstChild(),    Token.FUNCTION,    null);    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
100	[BUG]  [BUGGY]  tryMinimizeFunction(n,  n.getFirstChild(),  Token.FUNCTION,  null);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeFunction(n,  n.getFirstChild(),  Token.FUNCTION,  null);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunction(n,  n.getFirstChild(),  Token.FUNCTION,  null);	  tryMinimizeFunction(n.getFirstChild(),    Token.FUNCTION,    null);    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
101	[BUG]  [BUGGY]  tryMinimizeFunction(n.getFirstChild(),  Token.FUNCTION,  cond,  null);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeFunction(n.getFirstChild(),  Token.FUNCTION,  cond,  null);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunction(n.getFirstChild(),  Token.FUNCTION,  cond,  null);	  tryMinimizeFunction(n.getFirstChild(),    Token.FUNCTION,    null);    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
102	[BUG]  [BUGGY]  tryMinimizeFunction(n.getFirstChild(),  Token.FUNCTION,  cond);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeFunction(n.getFirstChild(),  Token.FUNCTION,  cond);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunction(n.getFirstChild(),  Token.FUNCTION,  cond);	  tryMinimizeFunction(n.getFirstChild(),    Token.FUNCTION,    null);    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
103	[BUG]  [BUGGY]  tryMinimizeExits(t.getLastChild(),  Token.RETURN,  cond,  parent);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(t.getLastChild(),  Token.RETURN,  cond,  parent);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(t.getLastChild(),  Token.RETURN,  cond,  parent);	  tryMinimizeExits(n.getLastChild(),    Token.RETURN,    cond,    parent);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
104	[BUG]  [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  cond,  token);  [CE]  cannot  find  symbol  token  [FE]                      AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  cond,  token);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getLastChild(),  Token.RETURN,  cond,  token);	  tryMinimizeExits(n.getLastChild(),    Token.RETURN,    cond,    parent);    	non-compiled	[CE]  cannot  find  symbol  token	3	None	replace
105	[BUG]  [BUGGY]  tryMinimizeFunctionExit(n.getLastChild(),  Token.RETURN,  parent,  null);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeFunctionExit(n.getLastChild(),  Token.RETURN,  parent,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunctionExit(n.getLastChild(),  Token.RETURN,  parent,  null);	  tryMinimizeFunctionExit(n.getLastChild(),    Token.RETURN,    parent);    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
106	[BUG]  [BUGGY]  tryMinimizeFunctionExit(t.getLastChild(),  Token.RETURN,  parent);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeFunctionExit(t.getLastChild(),  Token.RETURN,  parent);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunctionExit(t.getLastChild(),  Token.RETURN,  parent);	  tryMinimizeFunctionExit(n.getLastChild(),    Token.RETURN,    parent);    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
107	[BUG]  [BUGGY]  Node  n  =  Cond.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                        AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  Node  n  =  Cond.getFirstChild();  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Node  n  =  Cond.getFirstChild();	  Node    n    =    cond.getFirstChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	16	None	replace
108	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  null);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,<null>)  [FE]            AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	NodeTraversal.traverse(compiler,  n,  parent,  null);	          NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,<null>)	85	None	replace
109	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  cond);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,Node)  [FE]              AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  cond);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	NodeTraversal.traverse(compiler,  n,  parent,  cond);	          NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,Node)	85	None	replace
110	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  false);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,boolean)  [FE]                AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  false);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	NodeTraversal.traverse(compiler,  n,  parent,  false);	          NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,boolean)	85	None	replace
111	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,MinimizeExitPoints)  [FE]                  AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	NodeTraversal.traverse(compiler,  n,  parent,  this);	          NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,MinimizeExitPoints)	85	None	replace
112	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  node);  [CE]  cannot  find  symbol  node  [FE]                    AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  node);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	NodeTraversal.traverse(compiler,  n,  parent,  node);	          NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  node	85	None	replace
113	[BUG]  [BUGGY]  tryMinimizeExits(t.getLastChild(),  Token.RETURN,  cond);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(t.getLastChild(),  Token.RETURN,  cond);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(t.getLastChild(),  Token.RETURN,  cond);	  tryMinimizeExits(t.getLastChild(),    Token.RETURN,    parent);    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
114	[BUG]  [BUGGY]  tryMinimizeExits(parent.getLastChild(),  Token.RETURN,  t);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(parent.getLastChild(),  Token.RETURN,  t);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(parent.getLastChild(),  Token.RETURN,  t);	  tryMinimizeExits(t.getLastChild(),    Token.RETURN,    parent);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	42	None	replace
115	[BUG]  [BUGGY]  tryMinimizeExits(t,  n.getLastChild(),  Token.RETURN,  parent);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(t,  n.getLastChild(),  Token.RETURN,  parent);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(t,  n.getLastChild(),  Token.RETURN,  parent);	  tryMinimizeExits(t.getLastChild(),    Token.RETURN,    parent);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	42	None	replace
116	[BUG]  [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  cond,  FALSE);  [CE]  cannot  find  symbol  FALSE  [FE]                AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  cond,  FALSE);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getLastChild(),  Token.RETURN,  cond,  FALSE);	  tryMinimizeExits(n.getLastChild(),    Token.RETURN,    cond,    type);    	non-compiled	[CE]  cannot  find  symbol  FALSE	88	None	replace
117	[BUG]  [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  cond,  FUNctionType.FUNCTION);  [CE]  cannot  find  symbol  FUNctionType  [FE]                  AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  cond,  FUNctionType.FUNCTION);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getLastChild(),  Token.RETURN,  cond,  FUNctionType.FUNCTION);	  tryMinimizeExits(n.getLastChild(),    Token.RETURN,    cond,    type);    	non-compiled	[CE]  cannot  find  symbol  FUNctionType	88	None	replace
118	[BUG]  [BUGGY]  Node  n  =  Cond.getFirstChild();  tryMinimizeExits(n,  Token.FUNCTION,  null);  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  Node  n  =  Cond.getFirstChild();  tryMinimizeExits(n,  Token.FUNCTION,  null);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Node  n  =  Cond.getFirstChild();  tryMinimizeExits(n,  Token.FUNCTION,  null);	  Node    n    =    parent.getFirstChild();    tryMinimizeExits(n,    Token.FUNCTION,    null);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	65	None	replace
119	[BUG]  [BUGGY]  Node  n  =  parent.getFirstChild();  tryMinimizeExits(n,  Token.FUNCTION,  token.RETURN,  null);  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  Node  n  =  parent.getFirstChild();  tryMinimizeExits(n,  Token.FUNCTION,  token.RETURN,  null);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Node  n  =  parent.getFirstChild();  tryMinimizeExits(n,  Token.FUNCTION,  token.RETURN,  null);	  Node    n    =    parent.getFirstChild();    tryMinimizeExits(n,    Token.FUNCTION,    null);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	65	None	replace
120	[BUG]  [BUGGY]  Context.report(n.getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  Context  [FE]              AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  Context.report(n.getType()  ==  Token.FUNCTION);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Context.report(n.getType()  ==  Token.FUNCTION);	          Context.reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol  Context	11	None	replace
121	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  NON_GLOBAL_MESSAGE));  [CE]  cannot  find  symbol  NON_GLOBAL_MESSAGE  [FE]                AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  Context.report(JSError.make(t,  n,  NON_GLOBAL_MESSAGE));  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Context.report(JSError.make(t,  n,  NON_GLOBAL_MESSAGE));	          Context.reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol  NON_GLOBAL_MESSAGE	11	None	replace
122	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  NON_GLOBAL_ID,  cond));  [CE]  cannot  find  symbol  NON_GLOBAL_ID  [FE]                  AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  Context.report(JSError.make(t,  n,  NON_GLOBAL_ID,  cond));  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Context.report(JSError.make(t,  n,  NON_GLOBAL_ID,  cond));	          Context.reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol  NON_GLOBAL_ID	11	None	replace
123	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  NON_GLOBAL_EXIT_POLICY));  [CE]  cannot  find  symbol  NON_GLOBAL_EXIT_POLICY  [FE]                    AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  Context.report(JSError.make(t,  n,  NON_GLOBAL_EXIT_POLICY));  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Context.report(JSError.make(t,  n,  NON_GLOBAL_EXIT_POLICY));	          Context.reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol  NON_GLOBAL_EXIT_POLICY	11	None	replace
124	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getFirstChild(),    Token.RETURN,    null);    tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);  tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);  tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	add	tryMinimizeExits(n.getFirstChild(),        Token.RETURN,        null);        tryMinimizeExits(n.getFirstChild(),    Token.RETURN,    null);    tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);  tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);	  	compilable	  [FE]  AssertionFailedError  	21	2	add
125	[BUG]  [BUGGY]  tryMinimizeExits(n.getFirstChild(),    Token.RETURN,    null);    tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);  tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);  tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getFirstChild(),    Token.RETURN,    null);    tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);  tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);  tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getFirstChild(),        Token.RETURN,        null);        tryMinimizeExits(n.getFirstChild(),    Token.RETURN,    null);    tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);  tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);	  	compilable	  [FE]  AssertionFailedError  	21	2	add
126	[BUG]  [BUGGY]  tryMinimizeExits(n.getFirstChild(),    Token.RETURN,    null);    tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);  TryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);  tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getFirstChild(),    Token.RETURN,    null);    tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);  TryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);  tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getFirstChild(),        Token.RETURN,        null);        tryMinimizeExits(n.getFirstChild(),    Token.RETURN,    null);    TryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);  tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);	  	non-compiled	[CE]  cannot  find  symbol	21	None	add
127	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getFirstChild(),    Token.RETURN,    null);    tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);  tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	add	tryMinimizeExits(n.getFirstChild(),        Token.RETURN,        null);        tryMinimizeExits(n.getFirstChild(),    Token.RETURN,    null);    tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);	  	compilable	  [FE]  AssertionFailedError  	21	2	add
128	[BUG]  [BUGGY]  tryMinimizeExits(n.getFirstChild(),    Token.RETURN,    null);    tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);  tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getFirstChild(),    Token.RETURN,    null);    tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);  tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getFirstChild(),        Token.RETURN,        null);        tryMinimizeExits(n.getFirstChild(),    Token.RETURN,    null);    tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);	  	compilable	  [FE]  AssertionFailedError  	21	2	add
129	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getFirstChild(),    Token.RETURN,    null);    tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	add	tryMinimizeExits(n.getFirstChild(),        Token.RETURN,        null);        tryMinimizeExits(n.getFirstChild(),    Token.RETURN,    null);    tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);	  	compilable	  [FE]  AssertionFailedError  	21	2	add
130	[BUG]  [BUGGY]  tryMinimizeExits(n.getFirstChild(),    Token.RETURN,    null);    tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getFirstChild(),    Token.RETURN,    null);    tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getFirstChild(),        Token.RETURN,        null);        tryMinimizeExits(n.getFirstChild(),    Token.RETURN,    null);    tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);	  	compilable	  [FE]  AssertionFailedError  	21	2	add
131	[BUG]  [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  cond,  null,  null);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  cond,  null,  null);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  cond,  null,  null);	  tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    cond,    null);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	74	None	replace
132	[BUG]  [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  cond,  null,  TernaryValue.FALSE);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  cond,  null,  TernaryValue.FALSE);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  cond,  null,  TernaryValue.FALSE);	  tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    cond,    null);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	74	None	replace
133	[BUG]  [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  cond,  null,  parent);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  cond,  null,  parent);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  cond,  null,  parent);	  tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    cond,    null);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	74	None	replace
134	[BUG]  [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  cond,  null,  false);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  cond,  null,  false);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  cond,  null,  false);	  tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    cond,    null);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	74	None	replace
135	[BUG]  [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  cond,  null,  TernaryValue.NULL);  [CE]  cannot  find  symbol  NULL  [FE]                    AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  cond,  null,  TernaryValue.NULL);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  cond,  null,  TernaryValue.NULL);	  tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    cond,    null);    	non-compiled	[CE]  cannot  find  symbol  NULL	74	None	replace
136	[BUG]  [BUGGY]  Node  n  =  NodeUtil.getFunctionExpression(cond)+  1;  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                      AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  Node  n  =  NodeUtil.getFunctionExpression(cond)+  1;  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Node  n  =  NodeUtil.getFunctionExpression(cond)+  1;	  Node    n    =    NodeUtil.getFunctionExpression(parent)+    1;    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	89	None	replace
137	[BUG]  [BUGGY]  Node  n  =  NodeUtil.getFunctionExpression(n)+  1;  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                        AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  Node  n  =  NodeUtil.getFunctionExpression(n)+  1;  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Node  n  =  NodeUtil.getFunctionExpression(n)+  1;	  Node    n    =    NodeUtil.getFunctionExpression(parent)+    1;    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	89	None	replace
138	[BUG]  [BUGGY]  Node  n  =  NodeUtil.getFunctionExpression(parent)/  1;  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                          AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  Node  n  =  NodeUtil.getFunctionExpression(parent)/  1;  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Node  n  =  NodeUtil.getFunctionExpression(parent)/  1;	  Node    n    =    NodeUtil.getFunctionExpression(parent)+    1;    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	89	None	replace
139	[BUG]  [BUGGY]  Node  n  =  NodeUtil.getFunctionExpression(parent)+  2;  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                            AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  Node  n  =  NodeUtil.getFunctionExpression(parent)+  2;  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Node  n  =  NodeUtil.getFunctionExpression(parent)+  2;	  Node    n    =    NodeUtil.getFunctionExpression(parent)+    1;    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	89	None	replace
140	[BUG]  [BUGGY]  tryMinimizeFunctionExits(cond.getLastChild(),  Token.RETURN,  n);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeFunctionExits(cond.getLastChild(),  Token.RETURN,  n);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunctionExits(cond.getLastChild(),  Token.RETURN,  n);	  tryMinimizeFunctionExits(n.getLastChild(),    Token.RETURN,    cond);    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
141	[BUG]  [BUGGY]  tryMinimizeFunctionExits(n.getLastChild(),  Token.RETURN,  cond,  null);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeFunctionExits(n.getLastChild(),  Token.RETURN,  cond,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunctionExits(n.getLastChild(),  Token.RETURN,  cond,  null);	  tryMinimizeFunctionExits(n.getLastChild(),    Token.RETURN,    cond);    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
142	[BUG]  [BUGGY]  tryMinimizeFunctionExits(n.getLastChild(),  Token.RETURN,  cond,  TernaryValue.FUNCTION);  [CE]  cannot  find  symbol  FUNCTION  [FE]                          AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeFunctionExits(n.getLastChild(),  Token.RETURN,  cond,  TernaryValue.FUNCTION);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunctionExits(n.getLastChild(),  Token.RETURN,  cond,  TernaryValue.FUNCTION);	  tryMinimizeFunctionExits(n.getLastChild(),    Token.RETURN,    cond);    	non-compiled	[CE]  cannot  find  symbol  FUNCTION	34	None	replace
143	[BUG]  [BUGGY]  tryMinimizeFunctionExits(n.getLastChild(),  Token.RETURN,  cond,  parent);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeFunctionExits(n.getLastChild(),  Token.RETURN,  cond,  parent);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunctionExits(n.getLastChild(),  Token.RETURN,  cond,  parent);	  tryMinimizeFunctionExits(n.getLastChild(),    Token.RETURN,    cond);    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
144	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.BLOCK,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	add	tryMinimizeExits(n.getLastChild(),  Token.BLOCK,  null);	          tryMinimizeExits(n.getFirstChild(),    Token.BLOCK,    null);    	compilable	  [FE]  AssertionFailedError  	10	3	replace
145	[BUG]  [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.BLOCK,  null);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.BLOCK,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getLastChild(),  Token.BLOCK,  null);	          tryMinimizeExits(n.getFirstChild(),    Token.BLOCK,    null);    	compilable	  [FE]  AssertionFailedError  	10	3	replace
146	[BUG]  [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Token.BLOCK,  cond);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Token.BLOCK,  cond);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getFirstChild(),  Token.BLOCK,  cond);	          tryMinimizeExits(n.getFirstChild(),    Token.BLOCK,    null);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	10	None	replace
147	[BUG]  [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Token.BLOCK,  cond,  null);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Token.BLOCK,  cond,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getFirstChild(),  Token.BLOCK,  cond,  null);	          tryMinimizeExits(n.getFirstChild(),    Token.BLOCK,    null);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	10	None	replace
148	[BUG]  [BUGGY]  tryMinimizeFunctionExits(n.getFirstChild(),  Token.BLOCK,  null);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeFunctionExits(n.getFirstChild(),  Token.BLOCK,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunctionExits(n.getFirstChild(),  Token.BLOCK,  null);	          tryMinimizeExits(n.getFirstChild(),    Token.BLOCK,    null);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
149	[BUG]  [BUGGY]  tryMinimizeExits(t.getFirstChild(),  Token.RETURN,  null);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(t.getFirstChild(),  Token.RETURN,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(t.getFirstChild(),  Token.RETURN,  null);	  tryMinimizeExits(n.getFirstChild(),    Token.RETURN,    null);    tryMinimizeExits(t.getFirstChild(),    Token.RETURN,    null);    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
150	[BUG]  [BUGGY]  tryMinimizeExit(t.getFirstChild(),  Token.RETURN,  null);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExit(t.getFirstChild(),  Token.RETURN,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExit(t.getFirstChild(),  Token.RETURN,  null);	  tryMinimizeExits(n.getFirstChild(),    Token.RETURN,    null);    tryMinimizeExits(t.getFirstChild(),    Token.RETURN,    null);    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
151	[BUG]  [BUGGY]  tryMinimizeFunctionExits(t.getFirstChild(),  Token.RETURN,  null);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeFunctionExits(t.getFirstChild(),  Token.RETURN,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunctionExits(t.getFirstChild(),  Token.RETURN,  null);	  tryMinimizeExits(n.getFirstChild(),    Token.RETURN,    null);    tryMinimizeExits(t.getFirstChild(),    Token.RETURN,    null);    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
152	[BUG]  [BUGGY]  tryMinimizeExits(t.getLastChild(),  Token.RETURN,  null);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(t.getLastChild(),  Token.RETURN,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(t.getLastChild(),  Token.RETURN,  null);	  tryMinimizeExits(n.getFirstChild(),    Token.RETURN,    null);    tryMinimizeExits(t.getFirstChild(),    Token.RETURN,    null);    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
153	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]          tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	add	                tryMinimizeExits(n.getFirstChild(),        Token.FUNCTION,        null);        tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);	  	compilable	  [FE]  AssertionFailedError  	27	2	add
154	[BUG]  [BUGGY]          tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]          tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	                tryMinimizeExits(n.getFirstChild(),        Token.FUNCTION,        null);        tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);	  	compilable	  [FE]  AssertionFailedError  	27	2	add
155	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]          tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	add	                tryMinimizeExits(n.getFirstChild(),        Token.FUNCTION,        null);        tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);	  	compilable	  [FE]  AssertionFailedError  	27	2	add
156	[BUG]  [BUGGY]          tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]          tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	                tryMinimizeExits(n.getFirstChild(),        Token.FUNCTION,        null);        tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);	  	compilable	  [FE]  AssertionFailedError  	27	2	add
157	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]          tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	add	                tryMinimizeExits(n.getFirstChild(),        Token.FUNCTION,        null);        tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);	  	compilable	  [FE]  AssertionFailedError  	27	2	add
158	[BUG]  [BUGGY]          tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]          tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	                tryMinimizeExits(n.getFirstChild(),        Token.FUNCTION,        null);        tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);	  	compilable	  [FE]  AssertionFailedError  	27	2	add
159	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]          tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	add	                tryMinimizeExits(n.getFirstChild(),        Token.FUNCTION,        null);        tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);	  	compilable	  [FE]  AssertionFailedError  	27	2	add
160	[BUG]  [BUGGY]          tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]          tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	                tryMinimizeExits(n.getFirstChild(),        Token.FUNCTION,        null);        tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);	  	compilable	  [FE]  AssertionFailedError  	27	2	add
161	[BUG]  [BUGGY]          tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  TryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]          tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  TryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	                tryMinimizeExits(n.getFirstChild(),        Token.FUNCTION,        null);        tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    null);    TryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);	  	non-compiled	[CE]  cannot  find  symbol	27	None	add
162	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]          tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	add	                tryMinimizeExits(n.getFirstChild(),        Token.FUNCTION,        null);        tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);	  	compilable	  [FE]  AssertionFailedError  	27	2	add
163	[BUG]  [BUGGY]          tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]          tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	                tryMinimizeExits(n.getFirstChild(),        Token.FUNCTION,        null);        tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);	  	compilable	  [FE]  AssertionFailedError  	27	2	add
164	[BUG]  [BUGGY]  Node  n  =  NodeUtil.getFunctionExpression(cond,  parent);  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                      AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  Node  n  =  NodeUtil.getFunctionExpression(cond,  parent);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Node  n  =  NodeUtil.getFunctionExpression(cond,  parent);	  Node    n    =    NodeUtil.getFunctionExpression(cond);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	54	None	replace
165	[BUG]  [BUGGY]  Node  n  =  NodeUtil.getFunctionExpression(cond,  Token.FUNCTION);  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                        AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  Node  n  =  NodeUtil.getFunctionExpression(cond,  Token.FUNCTION);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Node  n  =  NodeUtil.getFunctionExpression(cond,  Token.FUNCTION);	  Node    n    =    NodeUtil.getFunctionExpression(cond);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	54	None	replace
166	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getLastChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	add	tryMinimizeExits(n.getLastChild(),        Token.FUNCTION,        null);        tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);	  	compilable	  [FE]  AssertionFailedError  	50	2	add
167	[BUG]  [BUGGY]  tryMinimizeExits(n.getLastChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getLastChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getLastChild(),        Token.FUNCTION,        null);        tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);	  	compilable	  [FE]  AssertionFailedError  	50	2	add
168	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getLastChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	add	tryMinimizeExits(n.getLastChild(),        Token.FUNCTION,        null);        tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);	  	compilable	  [FE]  AssertionFailedError  	50	2	add
169	[BUG]  [BUGGY]  tryMinimizeExits(n.getLastChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getLastChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getLastChild(),        Token.FUNCTION,        null);        tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);	  	compilable	  [FE]  AssertionFailedError  	50	2	add
170	[BUG]  [BUGGY]  tryMinimizeExits(n.getLastChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  TryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getLastChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  TryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getLastChild(),        Token.FUNCTION,        null);        tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    null);    TryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);	  	non-compiled	[CE]  cannot  find  symbol	50	None	add
171	[BUG]  [BUGGY]  tryMinimizeExits(n.getLastChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getfirstChild(),  Token.FUNCTION,  null);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getLastChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getfirstChild(),  Token.FUNCTION,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getLastChild(),        Token.FUNCTION,        null);        tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getfirstChild(),  Token.FUNCTION,  null);	  	non-compiled	[CE]  cannot  find  symbol	50	None	add
172	[BUG]  [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  cond,  TernaryValue.FUNCTION,  parent);  [CE]  cannot  find  symbol  FUNCTION  [FE]                  AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  cond,  TernaryValue.FUNCTION,  parent);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getLastChild(),  Token.RETURN,  cond,  TernaryValue.FUNCTION,  parent);	  tryMinimizeExits(n.getLastChild(),    Token.RETURN,    cond,    TernaryValue.FUNCTION);    	non-compiled	[CE]  cannot  find  symbol  FUNCTION	2	None	replace
173	[BUG]  [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  cond,  TernaryValue.FUNCTION,  false);  [CE]  cannot  find  symbol  FUNCTION  [FE]                    AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  cond,  TernaryValue.FUNCTION,  false);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getLastChild(),  Token.RETURN,  cond,  TernaryValue.FUNCTION,  false);	  tryMinimizeExits(n.getLastChild(),    Token.RETURN,    cond,    TernaryValue.FUNCTION);    	non-compiled	[CE]  cannot  find  symbol  FUNCTION	2	None	replace
174	[BUG]  [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  cond,  TernaryValue.RETURN);  [CE]  cannot  find  symbol  RETURN  [FE]                      AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  cond,  TernaryValue.RETURN);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  cond,  TernaryValue.RETURN);	  tryMinimizeExits(n.getLastChild(),    Token.RETURN,    cond,    TernaryValue.FUNCTION);    	non-compiled	[CE]  cannot  find  symbol  RETURN	2	None	replace
175	[BUG]  [BUGGY]  NodeUtil.copyCurrentStructure(parent);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  NodeUtil.copyCurrentStructure(parent);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	NodeUtil.copyCurrentStructure(parent);	          NodeUtil.copyCurrentStructure(n);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
176	[BUG]  [BUGGY]  NodeUtil.copyCurrentStructure(n,  parent);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  NodeUtil.copyCurrentStructure(n,  parent);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	NodeUtil.copyCurrentStructure(n,  parent);	          NodeUtil.copyCurrentStructure(n);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
177	[BUG]  [BUGGY]  NodeUtil.copyCurrentStructure(cond);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  NodeUtil.copyCurrentStructure(cond);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	NodeUtil.copyCurrentStructure(cond);	          NodeUtil.copyCurrentStructure(n);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
178	[BUG]  [BUGGY]  NodeUtil.copyCurrentFunctionStructure(n);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  NodeUtil.copyCurrentFunctionStructure(n);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	NodeUtil.copyCurrentFunctionStructure(n);	          NodeUtil.copyCurrentStructure(n);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
179	[BUG]  [BUGGY]  NodeUtil.copyCurrentStructure(compiler,  n);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  NodeUtil.copyCurrentStructure(compiler,  n);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	NodeUtil.copyCurrentStructure(compiler,  n);	          NodeUtil.copyCurrentStructure(n);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
180	[BUG]  [BUGGY]  Node  n  =  NodeUtil.getFunctionDeclaration(cond,  Token.FUNCTION);  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                      AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  Node  n  =  NodeUtil.getFunctionDeclaration(cond,  Token.FUNCTION);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Node  n  =  NodeUtil.getFunctionDeclaration(cond,  Token.FUNCTION);	  Node    n    =    NodeUtil.getFunctionDeclaration(cond);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	69	None	replace
181	[BUG]  [BUGGY]  Node  n  =  NodeUtil.getFunctionDeclaration(cond,  false);  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                        AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  Node  n  =  NodeUtil.getFunctionDeclaration(cond,  false);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Node  n  =  NodeUtil.getFunctionDeclaration(cond,  false);	  Node    n    =    NodeUtil.getFunctionDeclaration(cond);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	69	None	replace
182	[BUG]  [BUGGY]  Node  n  =  cond.getNext(),  parent;  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                    AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  Node  n  =  cond.getNext(),  parent;  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Node  n  =  cond.getNext(),  parent;	  Node    n    =    cond.getNext();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	64	None	replace
183	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION,  parent);  [CE]  cannot  find  symbol  Context  [FE]        AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION,  parent);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Context.checkState(n.getType()  ==  Token.FUNCTION,  parent);	  Context.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  cannot  find  symbol  Context	91	None	replace
184	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION,  cond);  [CE]  cannot  find  symbol  Context  [FE]          AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION,  cond);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Context.checkState(n.getType()  ==  Token.FUNCTION,  cond);	  Context.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  cannot  find  symbol  Context	91	None	replace
185	[BUG]  [BUGGY]  Context.checkState(parent.getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  Context  [FE]            AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  Context.checkState(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Context.checkState(parent.getType()  ==  Token.FUNCTION);	  Context.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  cannot  find  symbol  Context	91	None	replace
186	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.FUNCTION);  [CE]  cannot  find  symbol  Context  [FE]              AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  Context.checkState(n.getType()!=  Token.FUNCTION);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Context.checkState(n.getType()!=  Token.FUNCTION);	  Context.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  cannot  find  symbol  Context	91	None	replace
187	[BUG]  [BUGGY]  tryMinimizeExit(n.getLastChild(),  Token.FUNCTION,  null);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExit(n.getLastChild(),  Token.FUNCTION,  null);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExit(n.getLastChild(),  Token.FUNCTION,  null);	          tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    null);    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
188	[BUG]  [BUGGY]  tryMaximizeExits(n.getLastChild(),  Token.FUNCTION,  null);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMaximizeExits(n.getLastChild(),  Token.FUNCTION,  null);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMaximizeExits(n.getLastChild(),  Token.FUNCTION,  null);	          tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    null);    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
189	[BUG]  [BUGGY]  tryMinimizeFunction(cond.getLastChild(),  Token.RETURN,  n);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeFunction(cond.getLastChild(),  Token.RETURN,  n);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunction(cond.getLastChild(),  Token.RETURN,  n);	  tryMinimizeFunction(n.getLastChild(),    Token.RETURN,    cond);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
190	[BUG]  [BUGGY]  tryMinimizeFunction(n.getLastChild(),  Token.RETURN,  cond,  TernaryValue.FUNCTION);  [CE]  cannot  find  symbol  FUNCTION  [FE]                  AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeFunction(n.getLastChild(),  Token.RETURN,  cond,  TernaryValue.FUNCTION);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunction(n.getLastChild(),  Token.RETURN,  cond,  TernaryValue.FUNCTION);	  tryMinimizeFunction(n.getLastChild(),    Token.RETURN,    cond);    	non-compiled	[CE]  cannot  find  symbol  FUNCTION	18	None	replace
191	[BUG]  [BUGGY]  tryMinimizeFunction(n.getLastChild(),  Token.RETURN,  cond,  null);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeFunction(n.getLastChild(),  Token.RETURN,  cond,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunction(n.getLastChild(),  Token.RETURN,  cond,  null);	  tryMinimizeFunction(n.getLastChild(),    Token.RETURN,    cond);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
192	[BUG]  [BUGGY]  tryMinimizeFunction(n.getLastChild(),  Token.RETURN,  cond,  parent);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeFunction(n.getLastChild(),  Token.RETURN,  cond,  parent);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunction(n.getLastChild(),  Token.RETURN,  cond,  parent);	  tryMinimizeFunction(n.getLastChild(),    Token.RETURN,    cond);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
193	[BUG]  [BUGGY]  tryMinimizeFunction(n.getLastChild(),  Token.FUNCTION,  parent);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeFunction(n.getLastChild(),  Token.FUNCTION,  parent);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunction(n.getLastChild(),  Token.FUNCTION,  parent);	  tryMinimizeFunction(n.getLastChild(),    Token.FUNCTION,    null);    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
194	[BUG]  [BUGGY]  tryMinimizeFunction(n.getLastChild(),  Token.FUNCTION,  cond);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeFunction(n.getLastChild(),  Token.FUNCTION,  cond);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunction(n.getLastChild(),  Token.FUNCTION,  cond);	  tryMinimizeFunction(n.getLastChild(),    Token.FUNCTION,    null);    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
195	[BUG]  [BUGGY]  tryMinimizeFunction(n,  n.getLastChild(),  Token.FUNCTION,  null);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeFunction(n,  n.getLastChild(),  Token.FUNCTION,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunction(n,  n.getLastChild(),  Token.FUNCTION,  null);	  tryMinimizeFunction(n.getLastChild(),    Token.FUNCTION,    null);    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
196	[BUG]  [BUGGY]  tryMinimizeFunction(n.getLastChild(),  Token.FUNCTION,  cond,  null);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeFunction(n.getLastChild(),  Token.FUNCTION,  cond,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunction(n.getLastChild(),  Token.FUNCTION,  cond,  null);	  tryMinimizeFunction(n.getLastChild(),    Token.FUNCTION,    null);    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
197	[BUG]  [BUGGY]  Node  n  =  NodeUtil.getFunctionDeclaration(parent.getFirstChild());  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                    AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  Node  n  =  NodeUtil.getFunctionDeclaration(parent.getFirstChild());  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Node  n  =  NodeUtil.getFunctionDeclaration(parent.getFirstChild());	  Node    n    =    NodeUtil.getFunctionDeclaration(n.getFirstChild());    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	92	None	replace
198	[BUG]  [BUGGY]  Node  n  =  NodeUtil.getFunctionDeclaration(n.getFirstChild(),  Token.FUNCTION);  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                      AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  Node  n  =  NodeUtil.getFunctionDeclaration(n.getFirstChild(),  Token.FUNCTION);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Node  n  =  NodeUtil.getFunctionDeclaration(n.getFirstChild(),  Token.FUNCTION);	  Node    n    =    NodeUtil.getFunctionDeclaration(n.getFirstChild());    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	92	None	replace
199	[BUG]  [BUGGY]  Node  n  =  NodeUtil.getFunctionDeclaration(n.getFirstChild(),  parent);  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                        AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  Node  n  =  NodeUtil.getFunctionDeclaration(n.getFirstChild(),  parent);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Node  n  =  NodeUtil.getFunctionDeclaration(n.getFirstChild(),  parent);	  Node    n    =    NodeUtil.getFunctionDeclaration(n.getFirstChild());    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	92	None	replace
200	[BUG]  [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  cond,  null);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  cond,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  cond,  null);	  tryMinimizeExits(n.getFirstChild(),    Token.RETURN,    cond);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	38	None	replace
201	[BUG]  [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  cond,  TernaryValue.FUNCTION);  [CE]  cannot  find  symbol  FUNCTION  [FE]            AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  cond,  TernaryValue.FUNCTION);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  cond,  TernaryValue.FUNCTION);	  tryMinimizeExits(n.getFirstChild(),    Token.RETURN,    cond);    	non-compiled	[CE]  cannot  find  symbol  FUNCTION	38	None	replace
202	[BUG]  [BUGGY]  tryMinimizeExits(cond.getFirstChild(),  Token.RETURN,  n);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(cond.getFirstChild(),  Token.RETURN,  n);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(cond.getFirstChild(),  Token.RETURN,  n);	  tryMinimizeExits(n.getFirstChild(),    Token.RETURN,    cond);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	38	None	replace
203	[BUG]  [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  cond,  parent);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  cond,  parent);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  cond,  parent);	  tryMinimizeExits(n.getFirstChild(),    Token.RETURN,    cond);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	38	None	replace
204	[BUG]  [BUGGY]  tryMinimizeExits(t.getFirstChild(),  Token.RETURN,  cond);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(t.getFirstChild(),  Token.RETURN,  cond);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(t.getFirstChild(),  Token.RETURN,  cond);	  tryMinimizeExits(n.getFirstChild(),    Token.RETURN,    cond);    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
205	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]          tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	add	                tryMinimizeExits(n.getFirstChild(),        Token.FUNCTION,        null);        tryMinimizeExits(n.getLastChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);	  	compilable	  [FE]  AssertionFailedError  	30	2	add
206	[BUG]  [BUGGY]          tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]          tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	                tryMinimizeExits(n.getFirstChild(),        Token.FUNCTION,        null);        tryMinimizeExits(n.getLastChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);	  	compilable	  [FE]  AssertionFailedError  	30	2	add
207	[BUG]  [BUGGY]          tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  TryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]          tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  TryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	                tryMinimizeExits(n.getFirstChild(),        Token.FUNCTION,        null);        tryMinimizeExits(n.getLastChild(),    Token.FUNCTION,    null);    TryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);	  	non-compiled	[CE]  cannot  find  symbol	30	None	add
208	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]          tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	add	                tryMinimizeExits(n.getFirstChild(),        Token.FUNCTION,        null);        tryMinimizeExits(n.getLastChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);	  	compilable	  [FE]  AssertionFailedError  	30	2	add
209	[BUG]  [BUGGY]          tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]          tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	                tryMinimizeExits(n.getFirstChild(),        Token.FUNCTION,        null);        tryMinimizeExits(n.getLastChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);	  	compilable	  [FE]  AssertionFailedError  	30	2	add
210	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]          tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	add	                tryMinimizeExits(n.getFirstChild(),        Token.FUNCTION,        null);        tryMinimizeExits(n.getLastChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);	  	compilable	  [FE]  AssertionFailedError  	30	2	add
211	[BUG]  [BUGGY]          tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]          tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	                tryMinimizeExits(n.getFirstChild(),        Token.FUNCTION,        null);        tryMinimizeExits(n.getLastChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);	  	compilable	  [FE]  AssertionFailedError  	30	2	add
212	[BUG]  [BUGGY]  tryMinimizeExits(t.getFirstChild(),  Token.RETURN,  parent);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(t.getFirstChild(),  Token.RETURN,  parent);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(t.getFirstChild(),  Token.RETURN,  parent);	  tryMinimizeExits(n.getFirstChild(),    Token.RETURN,    parent);    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
213	[BUG]  [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  parent,  null);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  parent,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  parent,  null);	  tryMinimizeExits(n.getFirstChild(),    Token.RETURN,    parent);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	37	None	replace
214	[BUG]  [BUGGY]  tryMinimizeExits(t,  n.getFirstChild(),  Token.RETURN,  parent);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(t,  n.getFirstChild(),  Token.RETURN,  parent);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(t,  n.getFirstChild(),  Token.RETURN,  parent);	  tryMinimizeExits(n.getFirstChild(),    Token.RETURN,    parent);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	37	None	replace
215	[BUG]  [BUGGY]  tryMinimizeExits(cond.getLastChild(),  Token.RETURN,  null,  cond);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(cond.getLastChild(),  Token.RETURN,  null,  cond);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(cond.getLastChild(),  Token.RETURN,  null,  cond);	  tryMinimizeExits(n.getLastChild(),    Token.RETURN,    null,    cond);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	81	None	replace
216	[BUG]  [BUGGY]  tryMinimizeExits(t.getLastChild(),  Token.RETURN,  null,  cond);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(t.getLastChild(),  Token.RETURN,  null,  cond);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(t.getLastChild(),  Token.RETURN,  null,  cond);	  tryMinimizeExits(n.getLastChild(),    Token.RETURN,    null,    cond);    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
217	[BUG]  [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null,  cond);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null,  cond);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null,  cond);	  tryMinimizeExits(n.getLastChild(),    Token.RETURN,    null,    cond);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	81	None	replace
218	[BUG]  [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  parent,  cond);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  parent,  cond);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getLastChild(),  Token.RETURN,  parent,  cond);	  tryMinimizeExits(n.getLastChild(),    Token.RETURN,    null,    cond);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	81	None	replace
219	[BUG]  [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  cond,  TernaryValue.FALSE,  parent);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  cond,  TernaryValue.FALSE,  parent);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getLastChild(),  Token.RETURN,  cond,  TernaryValue.FALSE,  parent);	  tryMinimizeExits(n.getLastChild(),    Token.RETURN,    cond,    TernaryValue.FALSE);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	4	None	replace
220	[BUG]  [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  cond,  TernaryValue.FALSE,  null);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  cond,  TernaryValue.FALSE,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getLastChild(),  Token.RETURN,  cond,  TernaryValue.FALSE,  null);	  tryMinimizeExits(n.getLastChild(),    Token.RETURN,    cond,    TernaryValue.FALSE);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	4	None	replace
221	[BUG]  [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  cond,  TernaryValue.FALSE,  false);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  cond,  TernaryValue.FALSE,  false);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getLastChild(),  Token.RETURN,  cond,  TernaryValue.FALSE,  false);	  tryMinimizeExits(n.getLastChild(),    Token.RETURN,    cond,    TernaryValue.FALSE);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	4	None	replace
222	[BUG]  [BUGGY]  tryMinimizeExits(t.getLastChild(),  Token.RETURN,  cond,  TernaryValue.FALSE);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(t.getLastChild(),  Token.RETURN,  cond,  TernaryValue.FALSE);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(t.getLastChild(),  Token.RETURN,  cond,  TernaryValue.FALSE);	  tryMinimizeExits(n.getLastChild(),    Token.RETURN,    cond,    TernaryValue.FALSE);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
223	[BUG]  [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  TernaryValue.FALSE,  cond);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  TernaryValue.FALSE,  cond);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  TernaryValue.FALSE,  cond);	  tryMinimizeExits(n.getLastChild(),    Token.FUNCTION,    TernaryValue.FALSE);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	46	None	replace
224	[BUG]  [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  TernaryValue.FALSE,  parent);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  TernaryValue.FALSE,  parent);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  TernaryValue.FALSE,  parent);	  tryMinimizeExits(n.getLastChild(),    Token.FUNCTION,    TernaryValue.FALSE);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	46	None	replace
225	[BUG]  [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  cond,  TernaryValue.FALSE);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  cond,  TernaryValue.FALSE);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  cond,  TernaryValue.FALSE);	  tryMinimizeExits(n.getLastChild(),    Token.FUNCTION,    TernaryValue.FALSE);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	46	None	replace
226	[BUG]  [BUGGY]  tryMinimizeExits(t.getLastChild(),  Token.FUNCTION,  TernaryValue.FALSE);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(t.getLastChild(),  Token.FUNCTION,  TernaryValue.FALSE);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(t.getLastChild(),  Token.FUNCTION,  TernaryValue.FALSE);	  tryMinimizeExits(n.getLastChild(),    Token.FUNCTION,    TernaryValue.FALSE);    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
227	[BUG]  [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  TernaryValue.FALSE);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  TernaryValue.FALSE);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  TernaryValue.FALSE);	  tryMinimizeExits(n.getLastChild(),    Token.FUNCTION,    TernaryValue.FALSE);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	46	None	replace
228	[BUG]  [BUGGY]  Node  n  =  NodeUtil.getFunctionDeclaration(compiler,  parent);  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                          AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  Node  n  =  NodeUtil.getFunctionDeclaration(compiler,  parent);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Node  n  =  NodeUtil.getFunctionDeclaration(compiler,  parent);	  Node    n    =    NodeUtil.getFunctionDeclaration(compiler);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	71	None	replace
229	[BUG]  [BUGGY]  Node  n  =  NodeUtil.getFunctionDeclaration(compiler,  t);  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                            AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  Node  n  =  NodeUtil.getFunctionDeclaration(compiler,  t);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Node  n  =  NodeUtil.getFunctionDeclaration(compiler,  t);	  Node    n    =    NodeUtil.getFunctionDeclaration(compiler);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	71	None	replace
230	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.BREAK,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	add	tryMinimizeExits(n.getLastChild(),  Token.BREAK,  null);	          tryMinimizeExits(n.getFirstChild(),    Token.BREAK,    null);    	compilable	  [FE]  AssertionFailedError  	7	3	replace
231	[BUG]  [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.BREAK,  null);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.BREAK,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getLastChild(),  Token.BREAK,  null);	          tryMinimizeExits(n.getFirstChild(),    Token.BREAK,    null);    	compilable	  [FE]  AssertionFailedError  	7	3	replace
232	[BUG]  [BUGGY]  tryMinimizeFunctionExits(n.getFirstChild(),  Token.BREAK,  null);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeFunctionExits(n.getFirstChild(),  Token.BREAK,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunctionExits(n.getFirstChild(),  Token.BREAK,  null);	          tryMinimizeExits(n.getFirstChild(),    Token.BREAK,    null);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
233	[BUG]  [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  cond);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  cond);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  cond);	          tryMinimizeExits(n.getFirstChild(),    Token.BREAK,    null);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	7	None	replace
234	[BUG]  [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  parent);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  parent);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  parent);	          tryMinimizeExits(n.getFirstChild(),    Token.BREAK,    null);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	7	None	replace
235	[BUG]  [BUGGY]  tryMinimizeFunctionExit(n.getFirstChild(),  Token.BREAK,  null);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeFunctionExit(n.getFirstChild(),  Token.BREAK,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunctionExit(n.getFirstChild(),  Token.BREAK,  null);	          tryMinimizeExits(n.getFirstChild(),    Token.BREAK,    null);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
236	[BUG]  [BUGGY]  tryMinimizeExits(t.getLastChild(),  Token.RETURN,  parent,  null);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(t.getLastChild(),  Token.RETURN,  parent,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(t.getLastChild(),  Token.RETURN,  parent,  null);	  tryMinimizeExits(n.getLastChild(),    Token.RETURN,    parent,    null);    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
237	[BUG]  [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  parent,  cond,  null);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  parent,  cond,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getLastChild(),  Token.RETURN,  parent,  cond,  null);	  tryMinimizeExits(n.getLastChild(),    Token.RETURN,    parent,    null);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	41	None	replace
238	[BUG]  [BUGGY]  tryMinimizeExits(parent.getLastChild(),  Token.RETURN,  n,  null);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(parent.getLastChild(),  Token.RETURN,  n,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(parent.getLastChild(),  Token.RETURN,  n,  null);	  tryMinimizeExits(n.getLastChild(),    Token.RETURN,    parent,    null);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	41	None	replace
239	[BUG]  [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  cond,  null);  break;  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  cond,  null);  break;  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  cond,  null);  break;	  tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    cond);    break;    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	40	None	replace
240	[BUG]  [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  cond,  false);  break;  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  cond,  false);  break;  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  cond,  false);  break;	  tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    cond);    break;    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	40	None	replace
241	[BUG]  [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  cond,  parent);  break;  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  cond,  parent);  break;  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  cond,  parent);  break;	  tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    cond);    break;    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	40	None	replace
242	[BUG]  [BUGGY]  tryMinimizeExits(cond.getFirstChild(),  Token.FUNCTION,  n);  break;  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(cond.getFirstChild(),  Token.FUNCTION,  n);  break;  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(cond.getFirstChild(),  Token.FUNCTION,  n);  break;	  tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    cond);    break;    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	40	None	replace
243	[BUG]  [BUGGY]  tryMinimizeFunctionExits(n.getFirstChild(),  Token.RETURN,  parent);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeFunctionExits(n.getFirstChild(),  Token.RETURN,  parent);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunctionExits(n.getFirstChild(),  Token.RETURN,  parent);	  tryMinimizeFunctionExits(n.getFirstChild(),    Token.RETURN,    null);    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
244	[BUG]  [BUGGY]  tryMinimizeFunctionExits(n.getFirstChild(),  Token.RETURN,  cond);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeFunctionExits(n.getFirstChild(),  Token.RETURN,  cond);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunctionExits(n.getFirstChild(),  Token.RETURN,  cond);	  tryMinimizeFunctionExits(n.getFirstChild(),    Token.RETURN,    null);    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
245	[BUG]  [BUGGY]  tryMinimizeFunctionExits(n,  t.getFirstChild(),  Token.RETURN,  null);  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeFunctionExits(n,  t.getFirstChild(),  Token.RETURN,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunctionExits(n,  t.getFirstChild(),  Token.RETURN,  null);	  tryMinimizeFunctionExits(n.getFirstChild(),    Token.RETURN,    null);    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
246	[BUG]  [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  cond,  parent);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  cond,  parent);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  cond,  parent);	  tryMinimizeExits(n.getLastChild(),    Token.FUNCTION,    parent);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	44	None	replace
247	[BUG]  [BUGGY]  tryMinimizeExits(t.getLastChild(),  Token.FUNCTION,  parent);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(t.getLastChild(),  Token.FUNCTION,  parent);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(t.getLastChild(),  Token.FUNCTION,  parent);	  tryMinimizeExits(n.getLastChild(),    Token.FUNCTION,    parent);    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
248	[BUG]  [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  parent,  null);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  parent,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  parent,  null);	  tryMinimizeExits(n.getLastChild(),    Token.FUNCTION,    parent);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	44	None	replace
249	[BUG]  [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  cond,  false);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  cond,  false);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  cond,  false);	  tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    cond);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	73	None	replace
250	[BUG]  [BUGGY]  tryMinimizeExits(cond.getFirstChild(),  Token.FUNCTION,  n);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(cond.getFirstChild(),  Token.FUNCTION,  n);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(cond.getFirstChild(),  Token.FUNCTION,  n);	  tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    cond);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	73	None	replace
251	[BUG]  [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  cond,  TernaryValue.FALSE);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  cond,  TernaryValue.FALSE);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  cond,  TernaryValue.FALSE);	  tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    cond);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	73	None	replace
252	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  parent);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,MinimizeExitPoints,Node)  [FE]    StackOverflowError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  parent);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	NodeTraversal.traverse(compiler,  n,  this,  parent);	          NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,MinimizeExitPoints,Node)	83	None	replace
253	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      StackOverflowError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	add	NodeTraversal.traverse(compiler,  n,  null);	          NodeTraversal.traverse(compiler,    n,    this);    	compilable	  [FE]  RuntimeException  	83	3	replace
254	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  null);  [FE]  RuntimeException  [FE]      StackOverflowError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	NodeTraversal.traverse(compiler,  n,  null);	          NodeTraversal.traverse(compiler,    n,    this);    	compilable	  [FE]  RuntimeException  	83	3	replace
255	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  null);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,MinimizeExitPoints,<null>)  [FE]        StackOverflowError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	NodeTraversal.traverse(compiler,  n,  this,  null);	          NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,MinimizeExitPoints,<null>)	83	None	replace
256	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  cond);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,MinimizeExitPoints,Node)  [FE]          StackOverflowError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  cond);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	NodeTraversal.traverse(compiler,  n,  this,  cond);	          NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,MinimizeExitPoints,Node)	83	None	replace
257	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]          NodeTraversal.traverse(compiler,  n,  this);  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	add	                NodeTraversal.traverse(compiler,    n,    this);    NodeTraversal.traverse(compiler,  n,  this);	  	compilable	  [FE]  StackOverflowError  	82	3	add
258	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,  n,  this);  NodeTraversal.traverse(compiler,  n,  this);  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]          NodeTraversal.traverse(compiler,  n,  this);  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	                NodeTraversal.traverse(compiler,    n,    this);    NodeTraversal.traverse(compiler,  n,  this);	  	compilable	  [FE]  StackOverflowError  	82	3	add
259	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,  n,  this);  AssertionFailedError.traverse(compiler,  n,  this);  [CE]  cannot  find  symbol  AssertionFailedError  [FE]      StackOverflowError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]          NodeTraversal.traverse(compiler,  n,  this);  AssertionFailedError.traverse(compiler,  n,  this);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	                NodeTraversal.traverse(compiler,    n,    this);    AssertionFailedError.traverse(compiler,  n,  this);	  	non-compiled	[CE]  cannot  find  symbol  AssertionFailedError	82	None	add
260	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]          NodeTraversal.traverse(compiler,  n,  this);  NodeTraversal.traverse(compiler,  n,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	add	                NodeTraversal.traverse(compiler,    n,    this);    NodeTraversal.traverse(compiler,  n,  null);	  	compilable	  [FE]  StackOverflowError  	82	3	add
261	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,  n,  this);  NodeTraversal.traverse(compiler,  n,  null);  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]          NodeTraversal.traverse(compiler,  n,  this);  NodeTraversal.traverse(compiler,  n,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	                NodeTraversal.traverse(compiler,    n,    this);    NodeTraversal.traverse(compiler,  n,  null);	  	compilable	  [FE]  StackOverflowError  	82	3	add
262	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,  n,  this);  NodeTraversal.traverse(compiler,  n,  this);  break;  [CE]  unreachable  statement  [FE]          StackOverflowError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]          NodeTraversal.traverse(compiler,  n,  this);  NodeTraversal.traverse(compiler,  n,  this);  break;  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	                NodeTraversal.traverse(compiler,    n,    this);    NodeTraversal.traverse(compiler,  n,  this);  break;	  	non-compiled	[CE]  unreachable  statement	82	None	add
263	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,  n,  this);  Context.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  Context  [FE]            StackOverflowError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]          NodeTraversal.traverse(compiler,  n,  this);  Context.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	                NodeTraversal.traverse(compiler,    n,    this);    Context.checkState(n.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  cannot  find  symbol  Context	82	None	add
264	[BUG]  [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  TryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  TryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  TryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);	  tryMinimizeExits(n.getLastChild(),    Token.FUNCTION,    null);    TryMinimizeExits(n.getLastChild(),    Token.FUNCTION,    null);    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
265	[BUG]  [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  cond);  TryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  cond);  TryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  cond);  TryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);	  tryMinimizeExits(n.getLastChild(),    Token.FUNCTION,    null);    TryMinimizeExits(n.getLastChild(),    Token.FUNCTION,    null);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	49	None	replace
266	[BUG]  [BUGGY]  tryMinimizeExits(parent.getLastChild(),  Token.FUNCTION,  null);  TryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(parent.getLastChild(),  Token.FUNCTION,  null);  TryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(parent.getLastChild(),  Token.FUNCTION,  null);  TryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);	  tryMinimizeExits(n.getLastChild(),    Token.FUNCTION,    null);    TryMinimizeExits(n.getLastChild(),    Token.FUNCTION,    null);    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
267	[BUG]  [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  cond,  null);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  cond,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  cond,  null);	  tryMinimizeExits(n.getLastChild(),    Token.FUNCTION,    cond);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	45	None	replace
268	[BUG]  [BUGGY]  tryMinimizeExits(cond.getLastChild(),  Token.FUNCTION,  n);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(cond.getLastChild(),  Token.FUNCTION,  n);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(cond.getLastChild(),  Token.FUNCTION,  n);	  tryMinimizeExits(n.getLastChild(),    Token.FUNCTION,    cond);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	45	None	replace
269	[BUG]  [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  cond,  TernaryValue.BLOCK);  [CE]  cannot  find  symbol  BLOCK  [FE]              AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  cond,  TernaryValue.BLOCK);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  cond,  TernaryValue.BLOCK);	  tryMinimizeExits(n.getLastChild(),    Token.FUNCTION,    cond);    	non-compiled	[CE]  cannot  find  symbol  BLOCK	45	None	replace
270	[BUG]  [BUGGY]  TryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  TryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	TryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);	          tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getfirstChild(),    Token.FUNCTION,    null);    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
271	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(parent.getFirstChild(),  Token.FUNCTION,  null);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	add	tryMinimizeExits(parent.getFirstChild(),  Token.FUNCTION,  null);	          tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getfirstChild(),    Token.FUNCTION,    null);    	compilable	  [FE]  AssertionFailedError  	32	3	replace
272	[BUG]  [BUGGY]  tryMinimizeExits(parent.getFirstChild(),  Token.FUNCTION,  null);  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(parent.getFirstChild(),  Token.FUNCTION,  null);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(parent.getFirstChild(),  Token.FUNCTION,  null);	          tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getfirstChild(),    Token.FUNCTION,    null);    	compilable	  [FE]  AssertionFailedError  	32	3	replace
273	[BUG]  [BUGGY]  TryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getfirstChild(),  Token.FUNCTION,  null);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  TryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getfirstChild(),  Token.FUNCTION,  null);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	TryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getfirstChild(),  Token.FUNCTION,  null);	          tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getfirstChild(),    Token.FUNCTION,    null);    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
274	[BUG]  [BUGGY]  tryMinimizeFunction(n,  n.getLastChild(),  Token.RETURN,  this);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeFunction(n,  n.getLastChild(),  Token.RETURN,  this);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunction(n,  n.getLastChild(),  Token.RETURN,  this);	  tryMinimizeFunction(n.getLastChild(),    Token.RETURN,    this);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
275	[BUG]  [BUGGY]  tryMinimizeFunctionExits(n.getFirstChild(),  Token.FUNCTION,  parent);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeFunctionExits(n.getFirstChild(),  Token.FUNCTION,  parent);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunctionExits(n.getFirstChild(),  Token.FUNCTION,  parent);	  tryMinimizeFunctionExits(n.getFirstChild(),    Token.FUNCTION,    null);    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
276	[BUG]  [BUGGY]  tryMinimizeFunctionExits(n,  n.getFirstChild(),  Token.FUNCTION,  null);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeFunctionExits(n,  n.getFirstChild(),  Token.FUNCTION,  null);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunctionExits(n,  n.getFirstChild(),  Token.FUNCTION,  null);	  tryMinimizeFunctionExits(n.getFirstChild(),    Token.FUNCTION,    null);    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
277	[BUG]  [BUGGY]  tryMinimizeFunctionExits(n.getFirstChild(),  Token.FUNCTION,  cond,  null);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeFunctionExits(n.getFirstChild(),  Token.FUNCTION,  cond,  null);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunctionExits(n.getFirstChild(),  Token.FUNCTION,  cond,  null);	  tryMinimizeFunctionExits(n.getFirstChild(),    Token.FUNCTION,    null);    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
278	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getFirstChild(),    Token.RETURN,    null);    tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	add	tryMinimizeExits(n.getFirstChild(),        Token.RETURN,        null);        tryMinimizeExits(n.getLastChild(),    Token.RETURN,    null);    tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);	  	compilable	  [FE]  AssertionFailedError  	24	2	add
279	[BUG]  [BUGGY]  tryMinimizeExits(n.getFirstChild(),    Token.RETURN,    null);    tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getFirstChild(),    Token.RETURN,    null);    tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getFirstChild(),        Token.RETURN,        null);        tryMinimizeExits(n.getLastChild(),    Token.RETURN,    null);    tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);	  	compilable	  [FE]  AssertionFailedError  	24	2	add
280	[BUG]  [BUGGY]  tryMinimizeExits(n.getFirstChild(),    Token.RETURN,    null);    tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  TryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getFirstChild(),    Token.RETURN,    null);    tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  TryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getFirstChild(),        Token.RETURN,        null);        tryMinimizeExits(n.getLastChild(),    Token.RETURN,    null);    TryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);	  	non-compiled	[CE]  cannot  find  symbol	24	None	add
281	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getFirstChild(),    Token.RETURN,    null);    tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	add	tryMinimizeExits(n.getFirstChild(),        Token.RETURN,        null);        tryMinimizeExits(n.getLastChild(),    Token.RETURN,    null);    tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);	  	compilable	  [FE]  AssertionFailedError  	24	2	add
282	[BUG]  [BUGGY]  tryMinimizeExits(n.getFirstChild(),    Token.RETURN,    null);    tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getFirstChild(),    Token.RETURN,    null);    tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getFirstChild(),        Token.RETURN,        null);        tryMinimizeExits(n.getLastChild(),    Token.RETURN,    null);    tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);	  	compilable	  [FE]  AssertionFailedError  	24	2	add
283	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getFirstChild(),    Token.RETURN,    null);    tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	add	tryMinimizeExits(n.getFirstChild(),        Token.RETURN,        null);        tryMinimizeExits(n.getLastChild(),    Token.RETURN,    null);    tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);	  	compilable	  [FE]  AssertionFailedError  	24	2	add
284	[BUG]  [BUGGY]  tryMinimizeExits(n.getFirstChild(),    Token.RETURN,    null);    tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getFirstChild(),    Token.RETURN,    null);    tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getFirstChild(),        Token.RETURN,        null);        tryMinimizeExits(n.getLastChild(),    Token.RETURN,    null);    tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);	  	compilable	  [FE]  AssertionFailedError  	24	2	add
285	[BUG]  [BUGGY]  tryMinimizeFunctionExits(n,  parent.getLastChild(),  Token.RETURN,  null);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeFunctionExits(n,  parent.getLastChild(),  Token.RETURN,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunctionExits(n,  parent.getLastChild(),  Token.RETURN,  null);	  tryMinimizeFunctionExits(n,    n.getLastChild(),    Token.RETURN,    null);    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
286	[BUG]  [BUGGY]  tryMinimizeFunctionExits(n,  n.getFirstChild(),  Token.RETURN,  null);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeFunctionExits(n,  n.getFirstChild(),  Token.RETURN,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunctionExits(n,  n.getFirstChild(),  Token.RETURN,  null);	  tryMinimizeFunctionExits(n,    n.getLastChild(),    Token.RETURN,    null);    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
287	[BUG]  [BUGGY]  tryMinimizeFunctionExits(n.getLastChild(),  Token.FUNCTION,  parent);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeFunctionExits(n.getLastChild(),  Token.FUNCTION,  parent);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunctionExits(n.getLastChild(),  Token.FUNCTION,  parent);	  tryMinimizeFunctionExits(n.getLastChild(),    Token.FUNCTION,    null);    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
288	[BUG]  [BUGGY]  tryMinimizeFunctionExits(n.getLastChild(),  Token.FUNCTION,  cond);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeFunctionExits(n.getLastChild(),  Token.FUNCTION,  cond);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunctionExits(n.getLastChild(),  Token.FUNCTION,  cond);	  tryMinimizeFunctionExits(n.getLastChild(),    Token.FUNCTION,    null);    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
289	[BUG]  [BUGGY]  tryMinimizeFunctionExits(n,  n.getLastChild(),  Token.FUNCTION,  null);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeFunctionExits(n,  n.getLastChild(),  Token.FUNCTION,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunctionExits(n,  n.getLastChild(),  Token.FUNCTION,  null);	  tryMinimizeFunctionExits(n.getLastChild(),    Token.FUNCTION,    null);    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
290	[BUG]  [BUGGY]  tryMinimizeFunctionExits(n.getLastChild(),  Token.FUNCTION,  cond,  null);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeFunctionExits(n.getLastChild(),  Token.FUNCTION,  cond,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunctionExits(n.getLastChild(),  Token.FUNCTION,  cond,  null);	  tryMinimizeFunctionExits(n.getLastChild(),    Token.FUNCTION,    null);    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
291	[BUG]  [BUGGY]  tryMinimizeFunctionExit(n,  n.getLastChild(),  Token.RETURN,  this);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeFunctionExit(n,  n.getLastChild(),  Token.RETURN,  this);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunctionExit(n,  n.getLastChild(),  Token.RETURN,  this);	  tryMinimizeFunctionExit(n.getLastChild(),    Token.RETURN,    this);    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
292	[BUG]  [BUGGY]  tryMinimizeFunctionExit(n.getLastChild(),  Token.RETURN,  false);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeFunctionExit(n.getLastChild(),  Token.RETURN,  false);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunctionExit(n.getLastChild(),  Token.RETURN,  false);	  tryMinimizeFunctionExit(n.getLastChild(),    Token.RETURN,    this);    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
293	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getLastChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	add	tryMinimizeExits(n.getLastChild(),        Token.FUNCTION,        null);        tryMinimizeExits(n.getLastChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);	  	compilable	  [FE]  AssertionFailedError  	47	2	add
294	[BUG]  [BUGGY]  tryMinimizeExits(n.getLastChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getLastChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getLastChild(),        Token.FUNCTION,        null);        tryMinimizeExits(n.getLastChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);	  	compilable	  [FE]  AssertionFailedError  	47	2	add
295	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getLastChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	add	tryMinimizeExits(n.getLastChild(),        Token.FUNCTION,        null);        tryMinimizeExits(n.getLastChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);	  	compilable	  [FE]  AssertionFailedError  	47	2	add
296	[BUG]  [BUGGY]  tryMinimizeExits(n.getLastChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getLastChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getLastChild(),        Token.FUNCTION,        null);        tryMinimizeExits(n.getLastChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);	  	compilable	  [FE]  AssertionFailedError  	47	2	add
297	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getLastChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	add	tryMinimizeExits(n.getLastChild(),        Token.FUNCTION,        null);        tryMinimizeExits(n.getLastChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);	  	compilable	  [FE]  AssertionFailedError  	47	2	add
298	[BUG]  [BUGGY]  tryMinimizeExits(n.getLastChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getLastChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getLastChild(),        Token.FUNCTION,        null);        tryMinimizeExits(n.getLastChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);	  	compilable	  [FE]  AssertionFailedError  	47	2	add
299	[BUG]  [BUGGY]  tryMinimizeExits(n.getLastChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  TryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getLastChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  TryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getLastChild(),        Token.FUNCTION,        null);        tryMinimizeExits(n.getLastChild(),    Token.FUNCTION,    null);    TryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);	  	non-compiled	[CE]  cannot  find  symbol	47	None	add
300	[BUG]  [BUGGY]  Node  n  =  NodeUtil.getFunctionDeclaration(n,  parent,  null);  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                        AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  Node  n  =  NodeUtil.getFunctionDeclaration(n,  parent,  null);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Node  n  =  NodeUtil.getFunctionDeclaration(n,  parent,  null);	  Node    n    =    NodeUtil.getFunctionDeclaration(n,    parent);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	70	None	replace
301	[BUG]  [BUGGY]  Node  n  =  NodeUtil.getFunctionDeclaration(n,  cond);  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                          AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  Node  n  =  NodeUtil.getFunctionDeclaration(n,  cond);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Node  n  =  NodeUtil.getFunctionDeclaration(n,  cond);	  Node    n    =    NodeUtil.getFunctionDeclaration(n,    parent);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	70	None	replace
302	[BUG]  [BUGGY]  Node  n  =  NodeUtil.getFunctionDeclaration(n,  parent,  false);  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                            AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  Node  n  =  NodeUtil.getFunctionDeclaration(n,  parent,  false);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Node  n  =  NodeUtil.getFunctionDeclaration(n,  parent,  false);	  Node    n    =    NodeUtil.getFunctionDeclaration(n,    parent);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	70	None	replace
303	[BUG]  [BUGGY]  tryMinimizeExits(parent.getFirstChild(),  Token.FUNCTION,  null);  TryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(parent.getFirstChild(),  Token.FUNCTION,  null);  TryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(parent.getFirstChild(),  Token.FUNCTION,  null);  TryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);	          tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    null);    TryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    null);    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
304	[BUG]  [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  TryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  TryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  TryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);	          tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    null);    TryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    null);    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
305	[BUG]  [BUGGY]  Node  n  =  NodeUtil.getFunctionExpression(parent,  Token.FUNCTION);  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                      AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  Node  n  =  NodeUtil.getFunctionExpression(parent,  Token.FUNCTION);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Node  n  =  NodeUtil.getFunctionExpression(parent,  Token.FUNCTION);	  Node    n    =    NodeUtil.getFunctionExpression(parent,    n);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	77	None	replace
306	[BUG]  [BUGGY]  Node  n  =  NodeUtil.getFunctionExpression(parent,  cond);  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                        AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  Node  n  =  NodeUtil.getFunctionExpression(parent,  cond);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Node  n  =  NodeUtil.getFunctionExpression(parent,  cond);	  Node    n    =    NodeUtil.getFunctionExpression(parent,    n);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	77	None	replace
307	[BUG]  [BUGGY]  TryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getlastChild(),  Token.FUNCTION,  null);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  TryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getlastChild(),  Token.FUNCTION,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	TryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getlastChild(),  Token.FUNCTION,  null);	  tryMinimizeExits(n.getLastChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getlastChild(),    Token.FUNCTION,    null);    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
308	[BUG]  [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  cond);  break;  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  cond);  break;  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  cond);  break;	  tryMinimizeExits(n.getLastChild(),    Token.FUNCTION,    null);    break;    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	39	None	replace
309	[BUG]  [BUGGY]  tryMinimizeFunction(parent.getFirstChild(),  Token.RETURN,  null);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeFunction(parent.getFirstChild(),  Token.RETURN,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunction(parent.getFirstChild(),  Token.RETURN,  null);	  tryMinimizeFunction(n.getFirstChild(),    Token.RETURN,    null);    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
310	[BUG]  [BUGGY]  TryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  TryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	TryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);	  Node    n    =    node.getFirstChild();    tryMinimizeExits(n,    Token.FUNCTION,    null);    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
311	[BUG]  [BUGGY]  tryMinimizeFunction(parent.getLastChild(),  Token.RETURN,  n);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeFunction(parent.getLastChild(),  Token.RETURN,  n);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunction(parent.getLastChild(),  Token.RETURN,  n);	  tryMinimizeFunction(n.getLastChild(),    Token.RETURN,    parent);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
312	[BUG]  [BUGGY]  tryMinimizeExits(n.getFirstChild(),  cond,  Token.RETURN);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getFirstChild(),  cond,  Token.RETURN);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getFirstChild(),  cond,  Token.RETURN);	  tryMinimizeExits(n.getFirstChild(),    Token.RETURN,    cond);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	38	None	replace
313	[BUG]  [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Cond.RETURN,  cond);  [CE]  cannot  find  symbol  Cond  [FE]            AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Cond.RETURN,  cond);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getFirstChild(),  Cond.RETURN,  cond);	  tryMinimizeExits(n.getFirstChild(),    Token.RETURN,    cond);    	non-compiled	[CE]  cannot  find  symbol  Cond	38	None	replace
314	[BUG]  [BUGGY]  tryMinimizeExits(t,  n.getFirstChild(),  Token.RETURN,  cond);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(t,  n.getFirstChild(),  Token.RETURN,  cond);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(t,  n.getFirstChild(),  Token.RETURN,  cond);	  tryMinimizeExits(n.getFirstChild(),    Token.RETURN,    cond);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	38	None	replace
315	[BUG]  [BUGGY]  tryMinimizeFunction(parent.getFirstChild(),  Token.FUNCTION,  null);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeFunction(parent.getFirstChild(),  Token.FUNCTION,  null);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunction(parent.getFirstChild(),  Token.FUNCTION,  null);	  tryMinimizeFunction(n.getFirstChild(),    Token.FUNCTION,    null);    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
316	[BUG]  [BUGGY]  tryMinimizeFunction(n.getFirstChild(),  Token.FUNCTION,  this);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeFunction(n.getFirstChild(),  Token.FUNCTION,  this);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunction(n.getFirstChild(),  Token.FUNCTION,  this);	  tryMinimizeFunction(n.getFirstChild(),    Token.FUNCTION,    null);    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
317	[BUG]  [BUGGY]  tryMinimizeFunctionExit(n.getFirstChild(),  Token.RETURN,  this);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeFunctionExit(n.getFirstChild(),  Token.RETURN,  this);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunctionExit(n.getFirstChild(),  Token.RETURN,  this);	  tryMinimizeFunctionExit(n.getLastChild(),    Token.RETURN,    this);    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
318	[BUG]  [BUGGY]          tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  tryMinimizeExits(n.getfirstChild(),  Token.BREAK,  null);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]          tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  tryMinimizeExits(n.getfirstChild(),  Token.BREAK,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	                tryMinimizeExits(n.getFirstChild(),    Token.BREAK,    null);    tryMinimizeExits(n.getfirstChild(),  Token.BREAK,  null);	  	non-compiled	[CE]  cannot  find  symbol	6	None	add
319	[BUG]  [BUGGY]  Node  n  =  NodeUtil.getFunctionExpression(parent,  n,  null);  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                      AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  Node  n  =  NodeUtil.getFunctionExpression(parent,  n,  null);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Node  n  =  NodeUtil.getFunctionExpression(parent,  n,  null);	  Node    n    =    NodeUtil.getFunctionExpression(parent,    n);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	77	None	replace
320	[BUG]  [BUGGY]  Node  n  =  NodeUtil.getFunctionExpression(parent,  n.getFirstChild());  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                        AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  Node  n  =  NodeUtil.getFunctionExpression(parent,  n.getFirstChild());  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Node  n  =  NodeUtil.getFunctionExpression(parent,  n.getFirstChild());	  Node    n    =    NodeUtil.getFunctionExpression(parent,    n);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	77	None	replace
321	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  token);  [CE]  cannot  find  symbol  token  [FE]            AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  token);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	NodeTraversal.traverse(compiler,  n,  parent,  token);	          NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  token	85	None	replace
322	[BUG]  [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null,  cond);  break;  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null,  cond);  break;  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null,  cond);  break;	  tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    cond);    break;    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	40	None	replace
323	[BUG]  [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  TryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  TryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  TryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);	  tryMinimizeExits(n.getFirstChild(),    Token.RETURN,    null);    TryMinimizeExits(n.getFirstChild(),    Token.RETURN,    null);    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
324	[BUG]  [BUGGY]  tryMinimizeExit(n.getFirstChild(),  Token.FUNCTION,  null);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExit(n.getFirstChild(),  Token.FUNCTION,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExit(n.getFirstChild(),  Token.FUNCTION,  null);	  tryMinimizeExits(n.getLastChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getLastChild(),    Token.FUNCTION,    null);    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
325	[BUG]  [BUGGY]  tryMaximizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMaximizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMaximizeExits(n.getFirstChild(),  Token.FUNCTION,  null);	  tryMinimizeExits(n.getLastChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getLastChild(),    Token.FUNCTION,    null);    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
326	[BUG]  [BUGGY]  Node  n  =  node.getFunctionDeclaration(compiler);  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                          AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  Node  n  =  node.getFunctionDeclaration(compiler);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Node  n  =  node.getFunctionDeclaration(compiler);	  Node    n    =    NodeUtil.getFunctionDeclaration(compiler);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	71	None	replace
327	[BUG]  [BUGGY]  tryMinimizeFunctionExits(parent.getFirstChild(),  Token.RETURN,  null);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeFunctionExits(parent.getFirstChild(),  Token.RETURN,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunctionExits(parent.getFirstChild(),  Token.RETURN,  null);	  tryMinimizeFunctionExits(n.getFirstChild(),    Token.RETURN,    null);    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
328	[BUG]  [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null,  parent);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null,  parent);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null,  parent);	  tryMinimizeExits(n.getLastChild(),    Token.RETURN,    null,    parent);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	86	None	replace
329	[BUG]  [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  attemptMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  attemptMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  attemptMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);	  tryMinimizeExits(n.getLastChild(),    Token.FUNCTION,    null);    attemptMinimizeExits(n.getLastChild(),    Token.FUNCTION,    null);    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
330	[BUG]  [BUGGY]  NodeUtil.copyCurrentStructure(parent,  n);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  NodeUtil.copyCurrentStructure(parent,  n);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	NodeUtil.copyCurrentStructure(parent,  n);	          NodeUtil.copyCurrentStructure(n);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
331	[BUG]  [BUGGY]  Node  n  =  cond.removeFirstChild();  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                        AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  Node  n  =  cond.removeFirstChild();  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Node  n  =  cond.removeFirstChild();	  Node    n    =    cond.getFirstChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	16	None	replace
332	[BUG]  [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  cond,  TernaryValue.FALSE);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  cond,  TernaryValue.FALSE);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  cond,  TernaryValue.FALSE);	  tryMinimizeExits(n.getLastChild(),    Token.RETURN,    cond,    TernaryValue.FALSE);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	4	None	replace
333	[BUG]  [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null,  TernaryValue.FALSE);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null,  TernaryValue.FALSE);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null,  TernaryValue.FALSE);	  tryMinimizeExits(n.getLastChild(),    Token.FUNCTION,    TernaryValue.FALSE);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	46	None	replace
334	[BUG]  [BUGGY]  tryMinimizeFunction(n.getFirstChild(),  Token.BREAK,  null);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeFunction(n.getFirstChild(),  Token.BREAK,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunction(n.getFirstChild(),  Token.BREAK,  null);	          tryMinimizeExits(n.getFirstChild(),    Token.BREAK,    null);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
335	[BUG]  [BUGGY]  tryMinimizeExitPoints(n.getFirstChild(),  Token.BREAK,  null);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExitPoints(n.getFirstChild(),  Token.BREAK,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExitPoints(n.getFirstChild(),  Token.BREAK,  null);	          tryMinimizeExits(n.getFirstChild(),    Token.BREAK,    null);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
336	[BUG]  [BUGGY]  tryMinimizeFunction(n,  n.getLastChild(),  Token.RETURN,  cond);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeFunction(n,  n.getLastChild(),  Token.RETURN,  cond);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunction(n,  n.getLastChild(),  Token.RETURN,  cond);	  tryMinimizeFunction(n,    n.getLastChild(),    Token.RETURN,    null);    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
337	[BUG]  [BUGGY]  tryMinimizeFunctionExit(parent.getFirstChild(),  Token.RETURN,  null);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeFunctionExit(parent.getFirstChild(),  Token.RETURN,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunctionExit(parent.getFirstChild(),  Token.RETURN,  null);	  tryMinimizeFunctionExit(n.getFirstChild(),    Token.RETURN,    null);    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
338	[BUG]  [BUGGY]  Node  n  =  NodeUtil.getFunctionDeclaration(n,  parent,  t);  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                        AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  Node  n  =  NodeUtil.getFunctionDeclaration(n,  parent,  t);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Node  n  =  NodeUtil.getFunctionDeclaration(n,  parent,  t);	  Node    n    =    NodeUtil.getFunctionDeclaration(n,    parent);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	70	None	replace
339	[BUG]  [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null,  cond);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null,  cond);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null,  cond);	  tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    cond);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	73	None	replace
340	[BUG]  [BUGGY]  tryMinimizeExits(parent.getLastChild(),  Token.FUNCTION,  n);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(parent.getLastChild(),  Token.FUNCTION,  n);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(parent.getLastChild(),  Token.FUNCTION,  n);	  tryMinimizeExits(n.getLastChild(),    Token.FUNCTION,    parent);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	44	None	replace
341	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  NON_GLOBAL_NAME,  cond));  [CE]  cannot  find  symbol  NON_GLOBAL_NAME  [FE]              AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  Context.report(JSError.make(t,  n,  NON_GLOBAL_NAME,  cond));  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Context.report(JSError.make(t,  n,  NON_GLOBAL_NAME,  cond));	          Context.reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol  NON_GLOBAL_NAME	11	None	replace
342	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  NON_GLOBAL_NAME));  [CE]  cannot  find  symbol  NON_GLOBAL_NAME  [FE]                AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  Context.report(JSError.make(t,  n,  NON_GLOBAL_NAME));  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Context.report(JSError.make(t,  n,  NON_GLOBAL_NAME));	          Context.reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol  NON_GLOBAL_NAME	11	None	replace
343	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n,  Token.FUNCTION,  null);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	add	tryMinimizeExits(n,  Token.FUNCTION,  null);	  Node    n    =    parent.getFirstChild();    tryMinimizeExits(n,    Token.FUNCTION,    null);    	compilable	  [FE]  AssertionFailedError  	65	3	replace
344	[BUG]  [BUGGY]  tryMinimizeExits(n,  Token.FUNCTION,  null);  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n,  Token.FUNCTION,  null);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n,  Token.FUNCTION,  null);	  Node    n    =    parent.getFirstChild();    tryMinimizeExits(n,    Token.FUNCTION,    null);    	compilable	  [FE]  AssertionFailedError  	65	3	replace
345	[BUG]  [BUGGY]  Node  n  =  n.getNext();  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  Node  n  =  n.getNext();  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Node  n  =  n.getNext();	  Node    n    =    parent.getNext();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	63	None	replace
346	[BUG]  [BUGGY]  tryMinimizeFunctionExits(parent.getFirstChild(),  Token.FUNCTION,  null);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeFunctionExits(parent.getFirstChild(),  Token.FUNCTION,  null);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunctionExits(parent.getFirstChild(),  Token.FUNCTION,  null);	  tryMinimizeFunctionExits(n.getFirstChild(),    Token.FUNCTION,    null);    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
347	[BUG]  [BUGGY]  tryMinimizeFunctionExits(n.getFirstChild(),  Token.FUNCTION,  cond);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeFunctionExits(n.getFirstChild(),  Token.FUNCTION,  cond);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunctionExits(n.getFirstChild(),  Token.FUNCTION,  cond);	  tryMinimizeFunctionExits(n.getFirstChild(),    Token.FUNCTION,    null);    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
348	[BUG]  [BUGGY]  tryMinimizeExits(n.getLastChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getFirstChild()  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getLastChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getFirstChild()  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getLastChild(),        Token.FUNCTION,        null);        tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getFirstChild()	  	non-compiled	[CE]  ')'  expected	50	None	add
349	[BUG]  [BUGGY]  tryMinimizeExits(n,  t.getLastChild(),  Token.RETURN,  parent);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n,  t.getLastChild(),  Token.RETURN,  parent);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n,  t.getLastChild(),  Token.RETURN,  parent);	  tryMinimizeExits(t.getLastChild(),    Token.RETURN,    parent);    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
350	[BUG]  [BUGGY]  tryMinimizeExits(parent.getFirstChild(),  Token.FUNCTION);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(parent.getFirstChild(),  Token.FUNCTION);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(parent.getFirstChild(),  Token.FUNCTION);	          tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	12	None	replace
351	[BUG]  [BUGGY]  Node  n  =  cond.getFirstChild();  tryMinimizeExits(n,  Token.FUNCTION,  this);  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  Node  n  =  cond.getFirstChild();  tryMinimizeExits(n,  Token.FUNCTION,  this);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Node  n  =  cond.getFirstChild();  tryMinimizeExits(n,  Token.FUNCTION,  this);	  Node    n    =    cond.getFirstChild();    tryMinimizeExits(n,    Token.FUNCTION,    null);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	66	None	replace
352	[BUG]  [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  cond,  Cond.FUNCTION,  parent);  [CE]  cannot  find  symbol  Cond  [FE]                  AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  cond,  Cond.FUNCTION,  parent);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getLastChild(),  Token.RETURN,  cond,  Cond.FUNCTION,  parent);	  tryMinimizeExits(n.getLastChild(),    Token.RETURN,    Cond.FUNCTION,    parent);    	non-compiled	[CE]  cannot  find  symbol  Cond	43	None	replace
353	[BUG]  [BUGGY]          tryMinimizeExits(n.getFirstChild(),  Token.BLOCK,  null);  tryMinimizeExits(n.getfirstChild(),  Token.BLOCK,  null);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]          tryMinimizeExits(n.getFirstChild(),  Token.BLOCK,  null);  tryMinimizeExits(n.getfirstChild(),  Token.BLOCK,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	                tryMinimizeExits(n.getFirstChild(),    Token.BLOCK,    null);    tryMinimizeExits(n.getfirstChild(),  Token.BLOCK,  null);	  	non-compiled	[CE]  cannot  find  symbol	9	None	add
354	[BUG]  [BUGGY]  tryMinimizeExits(parent.getLastChild(),  Token.FUNCTION,  null);  TryMinimizeExits(parent.getLastChild(),  Token.FUNCTION,  null);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(parent.getLastChild(),  Token.FUNCTION,  null);  TryMinimizeExits(parent.getLastChild(),  Token.FUNCTION,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(parent.getLastChild(),  Token.FUNCTION,  null);  TryMinimizeExits(parent.getLastChild(),  Token.FUNCTION,  null);	  tryMinimizeExits(n.getLastChild(),    Token.FUNCTION,    null);    TryMinimizeExits(n.getLastChild(),    Token.FUNCTION,    null);    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
355	[BUG]  [BUGGY]  tryMinimizeFunctionExit(n.getFirstChild(),  Token.BLOCK,  null);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeFunctionExit(n.getFirstChild(),  Token.BLOCK,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunctionExit(n.getFirstChild(),  Token.BLOCK,  null);	          tryMinimizeExits(n.getFirstChild(),    Token.BLOCK,    null);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
356	[BUG]  [BUGGY]  tryMinimizeFunction(n.getFirstChild(),  Token.RETURN,  this);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeFunction(n.getFirstChild(),  Token.RETURN,  this);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunction(n.getFirstChild(),  Token.RETURN,  this);	  tryMinimizeFunction(n.getLastChild(),    Token.RETURN,    this);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
357	[BUG]  [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null,  cond,  TernaryValue.FUNCTION);  [CE]  cannot  find  symbol  FUNCTION  [FE]                AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null,  cond,  TernaryValue.FUNCTION);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null,  cond,  TernaryValue.FUNCTION);	  tryMinimizeExits(n.getLastChild(),    Token.RETURN,    null,    cond);    	non-compiled	[CE]  cannot  find  symbol  FUNCTION	81	None	replace
358	[BUG]  [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null,  cond,  TernaryValue.FALSE);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null,  cond,  TernaryValue.FALSE);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null,  cond,  TernaryValue.FALSE);	  tryMinimizeExits(n.getLastChild(),    Token.RETURN,    null,    cond);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	81	None	replace
359	[BUG]  [BUGGY]  tryMinimizeExits(n.getLastChild(),  Cond.RETURN,  null,  cond);  [CE]  cannot  find  symbol  Cond  [FE]                    AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getLastChild(),  Cond.RETURN,  null,  cond);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getLastChild(),  Cond.RETURN,  null,  cond);	  tryMinimizeExits(n.getLastChild(),    Token.RETURN,    null,    cond);    	non-compiled	[CE]  cannot  find  symbol  Cond	81	None	replace
360	[BUG]  [BUGGY]  tryMinimizeFunctionExits(n.getLastChild(),  Token.FUNCTION,  null);  break;  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeFunctionExits(n.getLastChild(),  Token.FUNCTION,  null);  break;  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunctionExits(n.getLastChild(),  Token.FUNCTION,  null);  break;	  tryMinimizeExits(n.getLastChild(),    Token.FUNCTION,    null);    break;    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
361	[BUG]  [BUGGY]  tryMinimizeFunctionExits(parent.getLastChild(),  Token.RETURN,  n);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeFunctionExits(parent.getLastChild(),  Token.RETURN,  n);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunctionExits(parent.getLastChild(),  Token.RETURN,  n);	  tryMinimizeFunctionExits(n.getLastChild(),    Token.RETURN,    parent);    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
362	[BUG]  [BUGGY]  Node  n  =  NodeUtil.getFunctionDeclaration(parent,  n,  false);  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                    AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  Node  n  =  NodeUtil.getFunctionDeclaration(parent,  n,  false);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Node  n  =  NodeUtil.getFunctionDeclaration(parent,  n,  false);	  Node    n    =    NodeUtil.getFunctionDeclaration(parent,    n);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	76	None	replace
363	[BUG]  [BUGGY]  Node  n  =  NodeUtil.getFunctionDeclaration(parent,  n,  Token.FUNCTION);  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                      AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  Node  n  =  NodeUtil.getFunctionDeclaration(parent,  n,  Token.FUNCTION);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Node  n  =  NodeUtil.getFunctionDeclaration(parent,  n,  Token.FUNCTION);	  Node    n    =    NodeUtil.getFunctionDeclaration(parent,    n);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	76	None	replace
364	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]          tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	add	                tryMinimizeExits(n.getFirstChild(),        Token.FUNCTION,        null);        tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);	  	compilable	  [FE]  AssertionFailedError  	27	2	add
365	[BUG]  [BUGGY]          tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]          tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	                tryMinimizeExits(n.getFirstChild(),        Token.FUNCTION,        null);        tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);	  	compilable	  [FE]  AssertionFailedError  	27	2	add
366	[BUG]  [BUGGY]  Node  n  =  NodeUtil.getFunctionExpression(parent)+  1L;  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                      AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  Node  n  =  NodeUtil.getFunctionExpression(parent)+  1L;  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Node  n  =  NodeUtil.getFunctionExpression(parent)+  1L;	  Node    n    =    NodeUtil.getFunctionExpression(parent)+    1;    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	89	None	replace
367	[BUG]  [BUGGY]  TryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  TryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	TryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);	          tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    null);    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
368	[BUG]  [BUGGY]  Node  n  =  NodeUtil.getFunctionDeclaration(cond,  null);  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                      AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  Node  n  =  NodeUtil.getFunctionDeclaration(cond,  null);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Node  n  =  NodeUtil.getFunctionDeclaration(cond,  null);	  Node    n    =    NodeUtil.getFunctionDeclaration(cond);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	69	None	replace
369	[BUG]  [BUGGY]  Node  n  =  NodeUtil.getFunctionExpression(parent,  false,  null);  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                            AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  Node  n  =  NodeUtil.getFunctionExpression(parent,  false,  null);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Node  n  =  NodeUtil.getFunctionExpression(parent,  false,  null);	  Node    n    =    NodeUtil.getFunctionExpression(parent,    false);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	57	None	replace
370	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,  n,  this);  NodeTraversal.traverse(compiler,  n,  that);  [CE]  cannot  find  symbol  that  [FE]    StackOverflowError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]          NodeTraversal.traverse(compiler,  n,  this);  NodeTraversal.traverse(compiler,  n,  that);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	                NodeTraversal.traverse(compiler,    n,    this);    NodeTraversal.traverse(compiler,  n,  that);	  	non-compiled	[CE]  cannot  find  symbol  that	82	None	add
371	[BUG]  [BUGGY]  tryMinimizeExits(parent.getFirstChild(),  Token.RETURN,  n);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(parent.getFirstChild(),  Token.RETURN,  n);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(parent.getFirstChild(),  Token.RETURN,  n);	  tryMinimizeExits(n.getFirstChild(),    Token.RETURN,    parent);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	37	None	replace
372	[BUG]  [BUGGY]  Node  n  =  cond.getfirstChild();  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                    AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  Node  n  =  cond.getfirstChild();  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Node  n  =  cond.getfirstChild();	  Node    n    =    cond.getLastChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	14	None	replace
373	[BUG]  [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  cond,  false);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  cond,  false);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  cond,  false);	  tryMinimizeExits(n.getLastChild(),    Token.FUNCTION,    cond);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	45	None	replace
374	[BUG]  [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  cond,  type);  [CE]  cannot  find  symbol  type  [FE]            AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  cond,  type);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  cond,  type);	  tryMinimizeExits(n.getLastChild(),    Token.FUNCTION,    cond);    	non-compiled	[CE]  cannot  find  symbol  type	45	None	replace
375	[BUG]  [BUGGY]  tryMinimizeFunctionExits(n,  n.getLastChild(),  Token.RETURN,  cond);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeFunctionExits(n,  n.getLastChild(),  Token.RETURN,  cond);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunctionExits(n,  n.getLastChild(),  Token.RETURN,  cond);	  tryMinimizeFunctionExits(n,    n.getLastChild(),    Token.RETURN,    null);    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
376	[BUG]  [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  cond,  n,  parent);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  cond,  n,  parent);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getLastChild(),  Token.RETURN,  cond,  n,  parent);	  tryMinimizeExits(n.getLastChild(),    Token.RETURN,    cond,    parent);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	3	None	replace
377	[BUG]  [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  cond,  FALSE,  parent);  [CE]  cannot  find  symbol  FALSE  [FE]                      AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  cond,  FALSE,  parent);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getLastChild(),  Token.RETURN,  cond,  FALSE,  parent);	  tryMinimizeExits(n.getLastChild(),    Token.RETURN,    cond,    parent);    	non-compiled	[CE]  cannot  find  symbol  FALSE	3	None	replace
378	[BUG]  [BUGGY]  tryMinimizeFunctionExits(n.getLastChild(),  Token.FUNCTION,  this);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeFunctionExits(n.getLastChild(),  Token.FUNCTION,  this);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunctionExits(n.getLastChild(),  Token.FUNCTION,  this);	  tryMinimizeFunctionExits(n.getLastChild(),    Token.FUNCTION,    null);    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
379	[BUG]  [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  cond,  FUNCTION);  [CE]  cannot  find  symbol  FUNCTION  [FE]                AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  cond,  FUNCTION);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getLastChild(),  Token.RETURN,  cond,  FUNCTION);	  tryMinimizeExits(n.getLastChild(),    Token.RETURN,    cond,    type);    	non-compiled	[CE]  cannot  find  symbol  FUNCTION	88	None	replace
380	[BUG]  [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  cond,  FUNCTION_TYPE);  [CE]  cannot  find  symbol  FUNCTION_TYPE  [FE]                  AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  cond,  FUNCTION_TYPE);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getLastChild(),  Token.RETURN,  cond,  FUNCTION_TYPE);	  tryMinimizeExits(n.getLastChild(),    Token.RETURN,    cond,    type);    	non-compiled	[CE]  cannot  find  symbol  FUNCTION_TYPE	88	None	replace
381	[BUG]  [BUGGY]  TryMinimizeExits(t.getFirstChild(),  Token.RETURN,  null);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  TryMinimizeExits(t.getFirstChild(),  Token.RETURN,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	TryMinimizeExits(t.getFirstChild(),  Token.RETURN,  null);	  tryMinimizeExits(n.getFirstChild(),    Token.RETURN,    null);    tryMinimizeExits(t.getFirstChild(),    Token.RETURN,    null);    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
382	[BUG]  [BUGGY]  tryMinimizeFunction(n,  parent.getFirstChild(),  Token.FUNCTION,  null);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeFunction(n,  parent.getFirstChild(),  Token.FUNCTION,  null);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunction(n,  parent.getFirstChild(),  Token.FUNCTION,  null);	  tryMinimizeFunction(n.getFirstChild(),    Token.FUNCTION,    null);    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
383	[BUG]  [BUGGY]  tryMinimizeFunction(cond.getFirstChild(),  Token.FUNCTION,  null);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeFunction(cond.getFirstChild(),  Token.FUNCTION,  null);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunction(cond.getFirstChild(),  Token.FUNCTION,  null);	  tryMinimizeFunction(n.getFirstChild(),    Token.FUNCTION,    null);    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
384	[BUG]  [BUGGY]  tryMinimizeFunctionExits(n,  parent.getFirstChild(),  Token.FUNCTION,  null);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeFunctionExits(n,  parent.getFirstChild(),  Token.FUNCTION,  null);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunctionExits(n,  parent.getFirstChild(),  Token.FUNCTION,  null);	  tryMinimizeFunctionExits(n.getFirstChild(),    Token.FUNCTION,    null);    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
385	[BUG]  [BUGGY]  tryMinimizeFunctionExits(t.getFirstChild(),  Token.FUNCTION,  null);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeFunctionExits(t.getFirstChild(),  Token.FUNCTION,  null);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunctionExits(t.getFirstChild(),  Token.FUNCTION,  null);	  tryMinimizeFunctionExits(n.getFirstChild(),    Token.FUNCTION,    null);    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
386	[BUG]  [BUGGY]  Node  n  =  NodeUtil.getFunctionDeclaration(n,  parent,  this);  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                        AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  Node  n  =  NodeUtil.getFunctionDeclaration(n,  parent,  this);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Node  n  =  NodeUtil.getFunctionDeclaration(n,  parent,  this);	  Node    n    =    NodeUtil.getFunctionDeclaration(n,    parent);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	70	None	replace
387	[BUG]  [BUGGY]  Node  n  =  NodeUtil.getFunctionExpression(parent)-  1;  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                      AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  Node  n  =  NodeUtil.getFunctionExpression(parent)-  1;  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Node  n  =  NodeUtil.getFunctionExpression(parent)-  1;	  Node    n    =    NodeUtil.getFunctionExpression(parent)+    1;    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	89	None	replace
388	[BUG]  [BUGGY]  Node  n  =  cond.getNext()  ||  parent.getType()  ==  Token.FUNCTION;  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                    AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  Node  n  =  cond.getNext()  ||  parent.getType()  ==  Token.FUNCTION;  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Node  n  =  cond.getNext()  ||  parent.getType()  ==  Token.FUNCTION;	  Node    n    =    cond.getNext();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	64	None	replace
389	[BUG]  [BUGGY]  tryMinimizeExits(parent.getFirstChild(),  Token.FUNCTION,  cond);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(parent.getFirstChild(),  Token.FUNCTION,  cond);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(parent.getFirstChild(),  Token.FUNCTION,  cond);	  tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    cond);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	73	None	replace
390	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  force);  [CE]  cannot  find  symbol  force  [FE]            AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  force);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	NodeTraversal.traverse(compiler,  n,  parent,  force);	          NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  force	85	None	replace
391	[BUG]  [BUGGY]  tryMinimizeExits(t,  n.getFirstChild(),  Token.RETURN,  null);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(t,  n.getFirstChild(),  Token.RETURN,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(t,  n.getFirstChild(),  Token.RETURN,  null);	  tryMinimizeExits(n.getFirstChild(),    Token.RETURN,    null);    tryMinimizeExits(t.getFirstChild(),    Token.RETURN,    null);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	95	None	replace
392	[BUG]  [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  cond,  false);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  cond,  false);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  cond,  false);	  tryMinimizeExits(n.getFirstChild(),    Token.RETURN,    cond);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	38	None	replace
393	[BUG]  [BUGGY]  tryMinimizeExits(t.getFirstChild(),  n,  Token.RETURN,  cond);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(t.getFirstChild(),  n,  Token.RETURN,  cond);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(t.getFirstChild(),  n,  Token.RETURN,  cond);	  tryMinimizeExits(n.getFirstChild(),    Token.RETURN,    cond);    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
394	[BUG]  [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  cond,  n);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  cond,  n);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getLastChild(),  Token.RETURN,  cond,  n);	  tryMinimizeExits(n.getLastChild(),    Token.RETURN,    cond,    parent);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	3	None	replace
395	[BUG]  [BUGGY]  if(NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  }  [CE]  variable  cond  might  not  have  been  initialized  [FE]    AssertionFailedError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  if(NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  }  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	if(NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  }	          tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getLastChild(),    Token.FUNCTION,    null);    	non-compiled	[CE]  variable  cond  might  not  have  been  initialized	31	None	replace
396	[BUG]  [BUGGY]  if(NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.  [CE]  <identifier>  expected  [FE]      AssertionFailedError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  if(NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	if(NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.	          tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getLastChild(),    Token.FUNCTION,    null);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
397	[BUG]  [BUGGY]  if(NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  tryMinimizeExits  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  if(NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  tryMinimizeExits  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	if(NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  tryMinimizeExits	          tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getLastChild(),    Token.FUNCTION,    null);    	non-compiled	[CE]  not  a  statement	31	None	replace
398	[BUG]  [BUGGY]  if(NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FUNCTION)  {  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  }  [CE]  cannot  find  symbol  FUNCTION  [FE]          AssertionFailedError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  if(NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FUNCTION)  {  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  }  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	if(NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FUNCTION)  {  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  }	          tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getLastChild(),    Token.FUNCTION,    null);    	non-compiled	[CE]  cannot  find  symbol  FUNCTION	31	None	replace
399	[BUG]  [BUGGY]  tryMinimizeFunctionExit(n.getLastChild(),  Token.RETURN,  cond,  false);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeFunctionExit(n.getLastChild(),  Token.RETURN,  cond,  false);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunctionExit(n.getLastChild(),  Token.RETURN,  cond,  false);	  tryMinimizeFunctionExit(n.getLastChild(),    Token.RETURN,    cond);    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
400	[BUG]  [BUGGY]          tryMinimizeExits(n.getFirstChild(),  Token.BLOCK,  null);  tryMinimizeExits(t.getFirstChild(),  Token.BLOCK,  null);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]          tryMinimizeExits(n.getFirstChild(),  Token.BLOCK,  null);  tryMinimizeExits(t.getFirstChild(),  Token.BLOCK,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	                tryMinimizeExits(n.getFirstChild(),    Token.BLOCK,    null);    tryMinimizeExits(t.getFirstChild(),  Token.BLOCK,  null);	  	non-compiled	[CE]  cannot  find  symbol	9	None	add
401	[BUG]  [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null,  parent,  cond);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null,  parent,  cond);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null,  parent,  cond);	  tryMinimizeExits(n.getLastChild(),    Token.RETURN,    null,    parent);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	86	None	replace
402	[BUG]  [BUGGY]  tryMinimizeFunction(parent.getLastChild(),  Token.RETURN,  parent);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeFunction(parent.getLastChild(),  Token.RETURN,  parent);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunction(parent.getLastChild(),  Token.RETURN,  parent);	  tryMinimizeFunction(n.getLastChild(),    Token.RETURN,    parent);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
403	[BUG]  [BUGGY]  tryMinimizeFunction(n.getLastChild(),  Token.FUNCTION,  null);  break;  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeFunction(n.getLastChild(),  Token.FUNCTION,  null);  break;  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunction(n.getLastChild(),  Token.FUNCTION,  null);  break;	  tryMinimizeExits(n.getLastChild(),    Token.FUNCTION,    null);    break;    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
404	[BUG]  [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  Context.TAG);  [CE]  cannot  find  symbol  Context  [FE]                AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  Context.TAG);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  Context.TAG);	          tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION);    	non-compiled	[CE]  cannot  find  symbol  Context	12	None	replace
405	[BUG]  [BUGGY]  Node  n  =  NodeUtil.getFunctionDeclaration(n.getParent(),  t);  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                      AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  Node  n  =  NodeUtil.getFunctionDeclaration(n.getParent(),  t);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Node  n  =  NodeUtil.getFunctionDeclaration(n.getParent(),  t);	  Node    n    =    NodeUtil.getFunctionDeclaration(n.getParent());    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	93	None	replace
406	[BUG]  [BUGGY]  tryMinimizeFunctionDeclarations(n.getFirstChild(),  Token.RETURN,  null);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeFunctionDeclarations(n.getFirstChild(),  Token.RETURN,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunctionDeclarations(n.getFirstChild(),  Token.RETURN,  null);	  tryMinimizeExits(n.getFirstChild(),    Token.RETURN,    null);    tryMinimizeExits(n.getFirstChild(),    Token.RETURN,    null);    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
407	[BUG]  [BUGGY]  Node  n  =  NodeUtil.getFunctionDeclaration(cond,  t);  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                      AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  Node  n  =  NodeUtil.getFunctionDeclaration(cond,  t);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Node  n  =  NodeUtil.getFunctionDeclaration(cond,  t);	  Node    n    =    NodeUtil.getFunctionDeclaration(cond);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	69	None	replace
408	[BUG]  [BUGGY]  tryMinimizeFunctionExit(n.getLastChild(),  Token.RETURN,  this,  null);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeFunctionExit(n.getLastChild(),  Token.RETURN,  this,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunctionExit(n.getLastChild(),  Token.RETURN,  this,  null);	  tryMinimizeFunctionExit(n.getLastChild(),    Token.RETURN,    this);    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
409	[BUG]  [BUGGY]  if(NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.EMPTY)  {  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  }  [CE]  cannot  find  symbol  EMPTY  [FE]    AssertionFailedError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  if(NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.EMPTY)  {  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  }  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	if(NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.EMPTY)  {  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  }	          tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    null);    	non-compiled	[CE]  cannot  find  symbol  EMPTY	28	None	replace
410	[BUG]  [BUGGY]  tryMinimizeFunction(t,  n.getLastChild(),  Token.RETURN,  null);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeFunction(t,  n.getLastChild(),  Token.RETURN,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunction(t,  n.getLastChild(),  Token.RETURN,  null);	  tryMinimizeFunction(n,    n.getLastChild(),    Token.RETURN,    null);    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
411	[BUG]  [BUGGY]  tryMinimizeExits(t.getLastChild(),  Token.RETURN,  cond,  null);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(t.getLastChild(),  Token.RETURN,  cond,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(t.getLastChild(),  Token.RETURN,  cond,  null);	  tryMinimizeExits(n.getLastChild(),    Token.RETURN,    parent,    null);    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
412	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  NON_GLOBAL_DEFINE_INIT_ERROR,  cond));  [CE]  cannot  find  symbol  NON_GLOBAL_DEFINE_INIT_ERROR  [FE]              AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  Context.report(JSError.make(t,  n,  NON_GLOBAL_DEFINE_INIT_ERROR,  cond));  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Context.report(JSError.make(t,  n,  NON_GLOBAL_DEFINE_INIT_ERROR,  cond));	          Context.reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol  NON_GLOBAL_DEFINE_INIT_ERROR	11	None	replace
413	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  NON_GLOBAL_EXPECTED_ERROR,  cond));  [CE]  cannot  find  symbol  NON_GLOBAL_EXPECTED_ERROR  [FE]                AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  Context.report(JSError.make(t,  n,  NON_GLOBAL_EXPECTED_ERROR,  cond));  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Context.report(JSError.make(t,  n,  NON_GLOBAL_EXPECTED_ERROR,  cond));	          Context.reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol  NON_GLOBAL_EXPECTED_ERROR	11	None	replace
414	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  NON_GLOBAL_EXPECTED_WARNING,  cond));  [CE]  cannot  find  symbol  NON_GLOBAL_EXPECTED_WARNING  [FE]                  AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  Context.report(JSError.make(t,  n,  NON_GLOBAL_EXPECTED_WARNING,  cond));  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Context.report(JSError.make(t,  n,  NON_GLOBAL_EXPECTED_WARNING,  cond));	          Context.reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol  NON_GLOBAL_EXPECTED_WARNING	11	None	replace
415	[BUG]  [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  cond,  false,  true);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  cond,  false,  true);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getLastChild(),  Token.RETURN,  cond,  false,  true);	  tryMinimizeExits(n.getLastChild(),    Token.RETURN,    cond,    false);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	5	None	replace
416	[BUG]  [BUGGY]  Node  n  =  NodeUtil.getFunctionExpression(parent,  n,  false);  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                      AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  Node  n  =  NodeUtil.getFunctionExpression(parent,  n,  false);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Node  n  =  NodeUtil.getFunctionExpression(parent,  n,  false);	  Node    n    =    NodeUtil.getFunctionExpression(parent,    n);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	77	None	replace
417	[BUG]  [BUGGY]  tryMinimizeFunction(cond.getLastChild(),  Token.RETURN,  cond);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeFunction(cond.getLastChild(),  Token.RETURN,  cond);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunction(cond.getLastChild(),  Token.RETURN,  cond);	  tryMinimizeFunction(n.getLastChild(),    Token.RETURN,    cond);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
418	[BUG]  [BUGGY]          tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  tryMaximizeExits(n.getLastChild(),  Token.FUNCTION,  null);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]          tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  tryMaximizeExits(n.getLastChild(),  Token.FUNCTION,  null);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	                tryMinimizeExits(n.getFirstChild(),        Token.FUNCTION,        null);        tryMinimizeExits(n.getLastChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  tryMaximizeExits(n.getLastChild(),  Token.FUNCTION,  null);	  	non-compiled	[CE]  cannot  find  symbol	30	None	add
419	[BUG]  [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  cond,  null,  true);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  cond,  null,  true);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  cond,  null,  true);	  tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    cond,    null);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	74	None	replace
420	[BUG]  [BUGGY]  tryMinimizeFunctionExit(t,  n.getLastChild(),  Token.RETURN,  null);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeFunctionExit(t,  n.getLastChild(),  Token.RETURN,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunctionExit(t,  n.getLastChild(),  Token.RETURN,  null);	  tryMinimizeFunctionExit(n,    n.getLastChild(),    Token.RETURN,    null);    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
421	[BUG]  [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);  TryMinimizeExits(parent.getFirstChild(),  Token.RETURN,  null);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);  TryMinimizeExits(parent.getFirstChild(),  Token.RETURN,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);  TryMinimizeExits(parent.getFirstChild(),  Token.RETURN,  null);	  tryMinimizeExits(n.getFirstChild(),    Token.RETURN,    null);    TryMinimizeExits(n.getFirstChild(),    Token.RETURN,    null);    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
422	[BUG]  [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  TernaryValue.FALSE,  null);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  TernaryValue.FALSE,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  TernaryValue.FALSE,  null);	  tryMinimizeExits(n.getLastChild(),    Token.FUNCTION,    TernaryValue.FALSE);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	46	None	replace
423	[BUG]  [BUGGY]  tryMinimizeExits(n.getLastChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  tryMaximizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getLastChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  tryMaximizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getLastChild(),        Token.FUNCTION,        null);        tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  tryMaximizeExits(n.getFirstChild(),  Token.FUNCTION,  null);	  	non-compiled	[CE]  cannot  find  symbol	50	None	add
424	[BUG]  [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  cond,  TernaryValue.FUNCTION,  TernaryValue.FALSE);  [CE]  cannot  find  symbol  FUNCTION  [FE]                      AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  cond,  TernaryValue.FUNCTION,  TernaryValue.FALSE);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getLastChild(),  Token.RETURN,  cond,  TernaryValue.FUNCTION,  TernaryValue.FALSE);	  tryMinimizeExits(n.getLastChild(),    Token.RETURN,    cond,    TernaryValue.FALSE);    	non-compiled	[CE]  cannot  find  symbol  FUNCTION	4	None	replace
425	[BUG]  [BUGGY]  tryMinimizeFunctionExits(cond.getLastChild(),  Token.RETURN,  parent);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeFunctionExits(cond.getLastChild(),  Token.RETURN,  parent);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunctionExits(cond.getLastChild(),  Token.RETURN,  parent);	  tryMinimizeFunctionExits(n.getLastChild(),    Token.RETURN,    cond);    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
426	[BUG]  [BUGGY]  tryMinimizeFunctionExits(cond.getFirstChild(),  Token.RETURN,  null);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeFunctionExits(cond.getFirstChild(),  Token.RETURN,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunctionExits(cond.getFirstChild(),  Token.RETURN,  null);	  tryMinimizeFunctionExits(n.getFirstChild(),    Token.RETURN,    null);    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
427	[BUG]  [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  Cond.FUNCTION,  null);  [CE]  cannot  find  symbol  Cond  [FE]                  AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  Cond.FUNCTION,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getLastChild(),  Token.RETURN,  Cond.FUNCTION,  null);	  tryMinimizeExits(n.getLastChild(),    Token.RETURN,    Cond.FUNCTION,    parent);    	non-compiled	[CE]  cannot  find  symbol  Cond	43	None	replace
428	[BUG]  [BUGGY]  tryMinimizeExits(cond.getFirstChild(),  Token.FUNCTION,  null);  break;  [CE]  variable  cond  might  not  have  been  initialized  [FE]                AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(cond.getFirstChild(),  Token.FUNCTION,  null);  break;  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(cond.getFirstChild(),  Token.FUNCTION,  null);  break;	  tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    cond);    break;    	non-compiled	[CE]  variable  cond  might  not  have  been  initialized	40	None	replace
429	[BUG]  [BUGGY]  tryMinimizeExits(n.getLastChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getLastChild()  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getLastChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getLastChild()  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getLastChild(),        Token.FUNCTION,        null);        tryMinimizeExits(n.getLastChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getLastChild()	  	non-compiled	[CE]  ')'  expected	47	None	add
430	[BUG]  [BUGGY]  tryMinimizeExits(t,  n.getLastChild(),  Token.RETURN,  null,  cond);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(t,  n.getLastChild(),  Token.RETURN,  null,  cond);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(t,  n.getLastChild(),  Token.RETURN,  null,  cond);	  tryMinimizeExits(n.getLastChild(),    Token.RETURN,    null,    cond);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	81	None	replace
431	[BUG]  [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null)&&  tryMinimizeExits(n.getlastChild(),  Token.FUNCTION,  null);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null)&&  tryMinimizeExits(n.getlastChild(),  Token.FUNCTION,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null)&&  tryMinimizeExits(n.getlastChild(),  Token.FUNCTION,  null);	  tryMinimizeExits(n.getLastChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getlastChild(),    Token.FUNCTION,    null);    	non-compiled	[CE]  not  a  statement	53	None	replace
432	[BUG]  [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  TryMinimizeExits(parent.getFirstChild(),  Token.FUNCTION,  null);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  TryMinimizeExits(parent.getFirstChild(),  Token.FUNCTION,  null);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  TryMinimizeExits(parent.getFirstChild(),  Token.FUNCTION,  null);	          tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    null);    TryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    null);    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
433	[BUG]  [BUGGY]  tryMinimizeFunctionExits(parent.getLastChild(),  Token.FUNCTION,  null);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeFunctionExits(parent.getLastChild(),  Token.FUNCTION,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunctionExits(parent.getLastChild(),  Token.FUNCTION,  null);	  tryMinimizeFunctionExits(n.getLastChild(),    Token.FUNCTION,    null);    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
434	[BUG]  [BUGGY]  NodeUtil.copyFunctionExits(parent,  n);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  NodeUtil.copyFunctionExits(parent,  n);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	NodeUtil.copyFunctionExits(parent,  n);	          NodeUtil.copyFunctionExit(n,    parent);    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
435	[BUG]  [BUGGY]  Node  n  =  NodeUtil.getFunctionExpression(parent,  t,  n);  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                          AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  Node  n  =  NodeUtil.getFunctionExpression(parent,  t,  n);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Node  n  =  NodeUtil.getFunctionExpression(parent,  t,  n);	  Node    n    =    NodeUtil.getFunctionExpression(parent,    t);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	56	None	replace
436	[BUG]  [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  cond,  token.FUNCTION,  null);  [CE]  cannot  find  symbol  token  [FE]                AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  cond,  token.FUNCTION,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getLastChild(),  Token.RETURN,  cond,  token.FUNCTION,  null);	  tryMinimizeExits(n.getLastChild(),    Token.RETURN,    cond,    null);    	non-compiled	[CE]  cannot  find  symbol  token	1	None	replace
437	[BUG]  [BUGGY]  Node  n  =  cond.getFirstChild();  tryMinimizeExits(n,  Token.FUNCTION,  token.BREAK,  null);  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  Node  n  =  cond.getFirstChild();  tryMinimizeExits(n,  Token.FUNCTION,  token.BREAK,  null);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Node  n  =  cond.getFirstChild();  tryMinimizeExits(n,  Token.FUNCTION,  token.BREAK,  null);	  Node    n    =    cond.getFirstChild();    tryMinimizeExits(n,    Token.FUNCTION,    null);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	66	None	replace
438	[BUG]  [BUGGY]          tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  tryMaximizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]          tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  tryMaximizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	                tryMinimizeExits(n.getFirstChild(),        Token.FUNCTION,        null);        tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  tryMaximizeExits(n.getFirstChild(),  Token.FUNCTION,  null);	  	non-compiled	[CE]  cannot  find  symbol	27	None	add
439	[BUG]  [BUGGY]  TryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);  tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  TryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);  tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	TryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);  tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);	  tryMinimizeExits(n.getFirstChild(),    Token.RETURN,    null);    tryMinimizeExits(n.getfirstChild(),    Token.RETURN,    null);    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
440	[BUG]  [BUGGY]  TryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);  tryMinimizeExits(n.getfirstChild(),  Token.RETURN,  null);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  TryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);  tryMinimizeExits(n.getfirstChild(),  Token.RETURN,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	TryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);  tryMinimizeExits(n.getfirstChild(),  Token.RETURN,  null);	  tryMinimizeExits(n.getFirstChild(),    Token.RETURN,    null);    tryMinimizeExits(n.getfirstChild(),    Token.RETURN,    null);    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
441	[BUG]  [BUGGY]          tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  tryMinimizeExits(t.getFirstChild(),  Token.BREAK,  null);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]          tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  tryMinimizeExits(t.getFirstChild(),  Token.BREAK,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	                tryMinimizeExits(n.getFirstChild(),    Token.BREAK,    null);    tryMinimizeExits(t.getFirstChild(),  Token.BREAK,  null);	  	non-compiled	[CE]  cannot  find  symbol	6	None	add
442	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,  n,  this);  nodeTraversal.traverse(compiler,  n,  this);  [CE]  cannot  find  symbol  nodeTraversal  [FE]    StackOverflowError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]          NodeTraversal.traverse(compiler,  n,  this);  nodeTraversal.traverse(compiler,  n,  this);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	                NodeTraversal.traverse(compiler,    n,    this);    nodeTraversal.traverse(compiler,  n,  this);	  	non-compiled	[CE]  cannot  find  symbol  nodeTraversal	82	None	add
443	[BUG]  [BUGGY]  tryMinimizeFunctionExit(t.getFirstChild(),  Token.RETURN,  null);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeFunctionExit(t.getFirstChild(),  Token.RETURN,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunctionExit(t.getFirstChild(),  Token.RETURN,  null);	  tryMinimizeFunctionExit(n.getFirstChild(),    Token.RETURN,    null);    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
444	[BUG]  [BUGGY]  tryMinimizeFunctionExits(t,  n.getLastChild(),  Token.RETURN,  null);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeFunctionExits(t,  n.getLastChild(),  Token.RETURN,  null);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunctionExits(t,  n.getLastChild(),  Token.RETURN,  null);	  tryMinimizeFunctionExits(n,    n.getLastChild(),    Token.RETURN,    null);    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
445	[BUG]  [BUGGY]  Node  n  =  NodeUtil.getFunctionExpression(cond,  null);  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                      AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  Node  n  =  NodeUtil.getFunctionExpression(cond,  null);  [BUGGY]      tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Node  n  =  NodeUtil.getFunctionExpression(cond,  null);	  Node    n    =    NodeUtil.getFunctionExpression(cond);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	54	None	replace
446	[BUG]  [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  cond,  EXPR_RESULT);  [CE]  cannot  find  symbol  EXPR_RESULT  [FE]                AssertionFailedError      [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  cond,  EXPR_RESULT);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getLastChild(),  Token.RETURN,  cond,  EXPR_RESULT);	  tryMinimizeExits(n.getLastChild(),    Token.RETURN,    cond,    type);    	non-compiled	[CE]  cannot  find  symbol  EXPR_RESULT	88	None	replace
447	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  false);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,MinimizeExitPoints,boolean)  [FE]    StackOverflowError    [CONTEXT]      Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  false);  [BUGGY]      break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	NodeTraversal.traverse(compiler,  n,  this,  false);	          NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,MinimizeExitPoints,boolean)	83	None	replace
