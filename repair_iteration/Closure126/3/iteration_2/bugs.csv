bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  cond,  null);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:    [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  cond,  null);  [BUGGY]    break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getLastChild(),  Token.RETURN,  cond,  null);	  tryMinimizeExits(n.getLastChild(),    Token.RETURN,    cond);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	4	None	replace
2	[BUG]  [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  cond,  TernaryValue.FUNCTION);  [CE]  cannot  find  symbol  FUNCTION  [FE]              AssertionFailedError    [CONTEXT]    Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:    [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  cond,  TernaryValue.FUNCTION);  [BUGGY]    break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getLastChild(),  Token.RETURN,  cond,  TernaryValue.FUNCTION);	  tryMinimizeExits(n.getLastChild(),    Token.RETURN,    cond);    	non-compiled	[CE]  cannot  find  symbol  FUNCTION	4	None	replace
3	[BUG]  [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  cond,  parent);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError    [CONTEXT]    Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:    [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  cond,  parent);  [BUGGY]    break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getLastChild(),  Token.RETURN,  cond,  parent);	  tryMinimizeExits(n.getLastChild(),    Token.RETURN,    cond);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	4	None	replace
4	[BUG]  [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  cond,  TernaryValue.FALSE);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError    [CONTEXT]    Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:    [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  cond,  TernaryValue.FALSE);  [BUGGY]    break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getLastChild(),  Token.RETURN,  cond,  TernaryValue.FALSE);	  tryMinimizeExits(n.getLastChild(),    Token.RETURN,    cond);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	4	None	replace
5	[BUG]  [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  cond,  false);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError    [CONTEXT]    Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:    [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  cond,  false);  [BUGGY]    break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getLastChild(),  Token.RETURN,  cond,  false);	  tryMinimizeExits(n.getLastChild(),    Token.RETURN,    cond);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	4	None	replace
6	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:    [BUGGY]      tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  [BUGGY]    break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	add	        tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);	  	compilable	  [FE]  AssertionFailedError  	8	2	add
7	[BUG]  [BUGGY]      tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:    [BUGGY]      tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  [BUGGY]    break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	        tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);	  	compilable	  [FE]  AssertionFailedError  	8	2	add
8	[BUG]  [BUGGY]      NodeUtil.copyCurrentStructure(n);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:    [BUGGY]      NodeUtil.copyCurrentStructure(n);  [BUGGY]    break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	        NodeUtil.copyCurrentStructure(n);	  	non-compiled	[CE]  cannot  find  symbol	8	None	add
9	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:    [BUGGY]      tryMinimizeExits(n.getFirstChild(),  Token.BLOCK,  null);  [BUGGY]    break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	add	        tryMinimizeExits(n.getFirstChild(),  Token.BLOCK,  null);	  	compilable	  [FE]  AssertionFailedError  	8	2	add
10	[BUG]  [BUGGY]      tryMinimizeExits(n.getFirstChild(),  Token.BLOCK,  null);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:    [BUGGY]      tryMinimizeExits(n.getFirstChild(),  Token.BLOCK,  null);  [BUGGY]    break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	        tryMinimizeExits(n.getFirstChild(),  Token.BLOCK,  null);	  	compilable	  [FE]  AssertionFailedError  	8	2	add
11	[BUG]  [BUGGY]      Context.reportCodeChange();  [CE]  cannot  find  symbol  Context  [FE]          AssertionFailedError    [CONTEXT]    Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:    [BUGGY]      Context.reportCodeChange();  [BUGGY]    break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	        Context.reportCodeChange();	  	non-compiled	[CE]  cannot  find  symbol  Context	8	None	add
12	[BUG]  [BUGGY]      tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:    [BUGGY]      tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION);  [BUGGY]    break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	        tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION);	  	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	8	None	add
13	[BUG]  [BUGGY]  Node  n  =  parent.getLastChild();  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]              AssertionFailedError    [CONTEXT]    Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:    [BUGGY]  Node  n  =  parent.getLastChild();  [BUGGY]    tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Node  n  =  parent.getLastChild();	      Node    n    =    n.getLastChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	20	None	replace
14	[BUG]  [BUGGY]  Node  n  =  cond.getLastChild();  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                AssertionFailedError    [CONTEXT]    Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:    [BUGGY]  Node  n  =  cond.getLastChild();  [BUGGY]    tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Node  n  =  cond.getLastChild();	      Node    n    =    n.getLastChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	20	None	replace
15	[BUG]  [BUGGY]  Node  n  =  node.getLastChild();  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                  AssertionFailedError    [CONTEXT]    Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:    [BUGGY]  Node  n  =  node.getLastChild();  [BUGGY]    tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Node  n  =  node.getLastChild();	      Node    n    =    n.getLastChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	20	None	replace
16	[BUG]  [BUGGY]  Node  n  =  cond.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                    AssertionFailedError    [CONTEXT]    Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:    [BUGGY]  Node  n  =  cond.getFirstChild();  [BUGGY]    tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Node  n  =  cond.getFirstChild();	      Node    n    =    n.getLastChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	20	None	replace
17	[BUG]  [BUGGY]  tryMinimizeFunction(n.getLastChild(),  Token.RETURN,  parent);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:    [BUGGY]  tryMinimizeFunction(n.getLastChild(),  Token.RETURN,  parent);  [BUGGY]    break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunction(n.getLastChild(),  Token.RETURN,  parent);	  tryMinimizeFunction(n.getLastChild(),    Token.RETURN,    null);    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
18	[BUG]  [BUGGY]  tryMinimizeFunction(n.getLastChild(),  Token.RETURN,  cond);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:    [BUGGY]  tryMinimizeFunction(n.getLastChild(),  Token.RETURN,  cond);  [BUGGY]    break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunction(n.getLastChild(),  Token.RETURN,  cond);	  tryMinimizeFunction(n.getLastChild(),    Token.RETURN,    null);    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
19	[BUG]  [BUGGY]  tryMinimizeFunction(n,  n.getLastChild(),  Token.RETURN,  null);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:    [BUGGY]  tryMinimizeFunction(n,  n.getLastChild(),  Token.RETURN,  null);  [BUGGY]    break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunction(n,  n.getLastChild(),  Token.RETURN,  null);	  tryMinimizeFunction(n.getLastChild(),    Token.RETURN,    null);    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
20	[BUG]  [BUGGY]  tryMinimizeFunction(n.getLastChild(),  Token.RETURN,  this);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:    [BUGGY]  tryMinimizeFunction(n.getLastChild(),  Token.RETURN,  this);  [BUGGY]    break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunction(n.getLastChild(),  Token.RETURN,  this);	  tryMinimizeFunction(n.getLastChild(),    Token.RETURN,    null);    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
21	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:    [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);  tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);  [BUGGY]    break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	add	tryMinimizeExits(n.getFirstChild(),    Token.RETURN,    null);    tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);	  	compilable	  [FE]  AssertionFailedError  	1	2	add
22	[BUG]  [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);  tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:    [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);  tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);  [BUGGY]    break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getFirstChild(),    Token.RETURN,    null);    tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);	  	compilable	  [FE]  AssertionFailedError  	1	2	add
23	[BUG]  [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);  TryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:    [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);  TryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);  [BUGGY]    break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getFirstChild(),    Token.RETURN,    null);    TryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
24	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:    [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  [BUGGY]    break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	add	tryMinimizeExits(n.getFirstChild(),    Token.RETURN,    null);    tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);	  	compilable	  [FE]  AssertionFailedError  	1	2	add
25	[BUG]  [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:    [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  [BUGGY]    break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getFirstChild(),    Token.RETURN,    null);    tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);	  	compilable	  [FE]  AssertionFailedError  	1	2	add
26	[BUG]  [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);  tryMinimizeExits(n.getfirstChild(),  Token.RETURN,  null);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:    [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);  tryMinimizeExits(n.getfirstChild(),  Token.RETURN,  null);  [BUGGY]    break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getFirstChild(),    Token.RETURN,    null);    tryMinimizeExits(n.getfirstChild(),  Token.RETURN,  null);	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
27	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:    [BUGGY]      tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  [BUGGY]    tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	add	        tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);	  	compilable	  [FE]  AssertionFailedError  	16	2	add
28	[BUG]  [BUGGY]      tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:    [BUGGY]      tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  [BUGGY]    tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	        tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);	  	compilable	  [FE]  AssertionFailedError  	16	2	add
29	[BUG]  [BUGGY]      tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  TryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:    [BUGGY]      tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  TryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  [BUGGY]    tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	        tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    null);    TryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);	  	non-compiled	[CE]  cannot  find  symbol	16	None	add
30	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:    [BUGGY]      tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  [BUGGY]    tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	add	        tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);	  	compilable	  [FE]  AssertionFailedError  	16	2	add
31	[BUG]  [BUGGY]      tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:    [BUGGY]      tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  [BUGGY]    tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	        tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);	  	compilable	  [FE]  AssertionFailedError  	16	2	add
32	[BUG]  [BUGGY]      tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getfirstChild(),  Token.FUNCTION,  null);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:    [BUGGY]      tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getfirstChild(),  Token.FUNCTION,  null);  [BUGGY]    tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	        tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getfirstChild(),  Token.FUNCTION,  null);	  	non-compiled	[CE]  cannot  find  symbol	16	None	add
33	[BUG]  [BUGGY]  tryMinimizeFunctionExits(n.getLastChild(),  Token.RETURN,  parent);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:    [BUGGY]  tryMinimizeFunctionExits(n.getLastChild(),  Token.RETURN,  parent);  [BUGGY]    break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunctionExits(n.getLastChild(),  Token.RETURN,  parent);	  tryMinimizeFunctionExits(n.getLastChild(),    Token.RETURN,    null);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
34	[BUG]  [BUGGY]  tryMinimizeFunctionExits(n.getLastChild(),  Token.RETURN,  cond);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:    [BUGGY]  tryMinimizeFunctionExits(n.getLastChild(),  Token.RETURN,  cond);  [BUGGY]    break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunctionExits(n.getLastChild(),  Token.RETURN,  cond);	  tryMinimizeFunctionExits(n.getLastChild(),    Token.RETURN,    null);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
35	[BUG]  [BUGGY]  tryMinimizeFunctionExits(n,  n.getLastChild(),  Token.RETURN,  null);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:    [BUGGY]  tryMinimizeFunctionExits(n,  n.getLastChild(),  Token.RETURN,  null);  [BUGGY]    break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunctionExits(n,  n.getLastChild(),  Token.RETURN,  null);	  tryMinimizeFunctionExits(n.getLastChild(),    Token.RETURN,    null);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
36	[BUG]  [BUGGY]  tryMinimizeFunctionExits(n.getFirstChild(),  Token.RETURN,  null);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError    [CONTEXT]    Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:    [BUGGY]  tryMinimizeFunctionExits(n.getFirstChild(),  Token.RETURN,  null);  [BUGGY]    break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunctionExits(n.getFirstChild(),  Token.RETURN,  null);	  tryMinimizeFunctionExits(n.getLastChild(),    Token.RETURN,    null);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
37	[BUG]  [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  parent);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]    Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:    [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  parent);  [BUGGY]    break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  parent);	  tryMinimizeExits(n.getFirstChild(),    Token.RETURN,    null);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	2	None	replace
38	[BUG]  [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  cond);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError    [CONTEXT]    Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:    [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  cond);  [BUGGY]    break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  cond);	  tryMinimizeExits(n.getFirstChild(),    Token.RETURN,    null);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	2	None	replace
39	[BUG]  [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  break;  [CE]  unreachable  statement  [FE]          AssertionFailedError    [CONTEXT]    Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:    [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  break;  [BUGGY]    tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  break;	      tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    null);    break;    	non-compiled	[CE]  unreachable  statement	18	None	replace
40	[BUG]  [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  cond);  break;  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:    [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  cond);  break;  [BUGGY]    tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  cond);  break;	      tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    null);    break;    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	18	None	replace
41	[BUG]  [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  parent,  null);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:    [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  parent,  null);  [BUGGY]    break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getLastChild(),  Token.RETURN,  parent,  null);	  tryMinimizeExits(n.getLastChild(),    Token.RETURN,    parent);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	3	None	replace
42	[BUG]  [BUGGY]  tryMinimizeExits(t.getLastChild(),  Token.RETURN,  parent);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:    [BUGGY]  tryMinimizeExits(t.getLastChild(),  Token.RETURN,  parent);  [BUGGY]    break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(t.getLastChild(),  Token.RETURN,  parent);	  tryMinimizeExits(n.getLastChild(),    Token.RETURN,    parent);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
43	[BUG]  [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  Cond.FUNCTION,  parent);  [CE]  cannot  find  symbol  Cond  [FE]              AssertionFailedError    [CONTEXT]    Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:    [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  Cond.FUNCTION,  parent);  [BUGGY]    break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getLastChild(),  Token.RETURN,  Cond.FUNCTION,  parent);	  tryMinimizeExits(n.getLastChild(),    Token.RETURN,    parent);    	non-compiled	[CE]  cannot  find  symbol  Cond	3	None	replace
44	[BUG]  [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  parent);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]    Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:    [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  parent);  [BUGGY]    break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  parent);	  tryMinimizeExits(n.getLastChild(),    Token.FUNCTION,    null);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	6	None	replace
45	[BUG]  [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  cond);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError    [CONTEXT]    Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:    [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  cond);  [BUGGY]    break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  cond);	  tryMinimizeExits(n.getLastChild(),    Token.FUNCTION,    null);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	6	None	replace
46	[BUG]  [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  TernaryValue.FALSE);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]    Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:    [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  TernaryValue.FALSE);  [BUGGY]    break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  TernaryValue.FALSE);	  tryMinimizeExits(n.getLastChild(),    Token.FUNCTION,    null);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	6	None	replace
47	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:    [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  [BUGGY]    break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	add	tryMinimizeExits(n.getLastChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);	  	compilable	  [FE]  AssertionFailedError  	5	2	add
48	[BUG]  [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:    [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  [BUGGY]    break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getLastChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);	  	compilable	  [FE]  AssertionFailedError  	5	2	add
49	[BUG]  [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  TryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:    [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  TryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  [BUGGY]    break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getLastChild(),    Token.FUNCTION,    null);    TryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);	  	non-compiled	[CE]  cannot  find  symbol	5	None	add
50	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:    [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  [BUGGY]    break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	add	tryMinimizeExits(n.getLastChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);	  	compilable	  [FE]  AssertionFailedError  	5	2	add
51	[BUG]  [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:    [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);  [BUGGY]    break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getLastChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  null);	  	compilable	  [FE]  AssertionFailedError  	5	2	add
52	[BUG]  [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  attemptMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:    [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  attemptMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  [BUGGY]    break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getLastChild(),    Token.FUNCTION,    null);    attemptMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);	  	non-compiled	[CE]  cannot  find  symbol	5	None	add
53	[BUG]  [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getlastChild(),  Token.FUNCTION,  null);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:    [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.FUNCTION,  null);  tryMinimizeExits(n.getlastChild(),  Token.FUNCTION,  null);  [BUGGY]    break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getLastChild(),    Token.FUNCTION,    null);    tryMinimizeExits(n.getlastChild(),  Token.FUNCTION,  null);	  	non-compiled	[CE]  cannot  find  symbol	5	None	add
54	[BUG]  [BUGGY]  Node  n  =  NodeUtil.getFunctionExpression(cond);  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                  AssertionFailedError    [CONTEXT]    Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:    [BUGGY]  Node  n  =  NodeUtil.getFunctionExpression(cond);  [BUGGY]    tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Node  n  =  NodeUtil.getFunctionExpression(cond);	      Node    n    =    NodeUtil.getFunctionExpression(parent);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	15	None	replace
55	[BUG]  [BUGGY]  Node  n  =  NodeUtil.getFunctionExpression(n);  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                    AssertionFailedError    [CONTEXT]    Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:    [BUGGY]  Node  n  =  NodeUtil.getFunctionExpression(n);  [BUGGY]    tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Node  n  =  NodeUtil.getFunctionExpression(n);	      Node    n    =    NodeUtil.getFunctionExpression(parent);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	15	None	replace
56	[BUG]  [BUGGY]  Node  n  =  NodeUtil.getFunctionExpression(parent,  t);  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                      AssertionFailedError    [CONTEXT]    Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:    [BUGGY]  Node  n  =  NodeUtil.getFunctionExpression(parent,  t);  [BUGGY]    tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Node  n  =  NodeUtil.getFunctionExpression(parent,  t);	      Node    n    =    NodeUtil.getFunctionExpression(parent);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	15	None	replace
57	[BUG]  [BUGGY]  Node  n  =  NodeUtil.getFunctionExpression(parent,  false);  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                        AssertionFailedError    [CONTEXT]    Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:    [BUGGY]  Node  n  =  NodeUtil.getFunctionExpression(parent,  false);  [BUGGY]    tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Node  n  =  NodeUtil.getFunctionExpression(parent,  false);	      Node    n    =    NodeUtil.getFunctionExpression(parent);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	15	None	replace
58	[BUG]  [BUGGY]  tryMinimizeFunctionExit(n.getLastChild(),  Token.RETURN,  parent);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:    [BUGGY]  tryMinimizeFunctionExit(n.getLastChild(),  Token.RETURN,  parent);  [BUGGY]    break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunctionExit(n.getLastChild(),  Token.RETURN,  parent);	  tryMinimizeFunctionExit(n.getLastChild(),    Token.RETURN,    null);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
59	[BUG]  [BUGGY]  tryMinimizeFunctionExit(n.getLastChild(),  Token.RETURN,  cond);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:    [BUGGY]  tryMinimizeFunctionExit(n.getLastChild(),  Token.RETURN,  cond);  [BUGGY]    break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunctionExit(n.getLastChild(),  Token.RETURN,  cond);	  tryMinimizeFunctionExit(n.getLastChild(),    Token.RETURN,    null);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
60	[BUG]  [BUGGY]  tryMinimizeFunctionExit(n,  n.getLastChild(),  Token.RETURN,  null);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:    [BUGGY]  tryMinimizeFunctionExit(n,  n.getLastChild(),  Token.RETURN,  null);  [BUGGY]    break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunctionExit(n,  n.getLastChild(),  Token.RETURN,  null);	  tryMinimizeFunctionExit(n.getLastChild(),    Token.RETURN,    null);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
61	[BUG]  [BUGGY]  tryMinimizeFunctionExit(n.getLastChild(),  Token.RETURN,  this);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:    [BUGGY]  tryMinimizeFunctionExit(n.getLastChild(),  Token.RETURN,  this);  [BUGGY]    break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunctionExit(n.getLastChild(),  Token.RETURN,  this);	  tryMinimizeFunctionExit(n.getLastChild(),    Token.RETURN,    null);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
62	[BUG]  [BUGGY]  Node  n  =  cond.getParent();  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]            AssertionFailedError    [CONTEXT]    Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:    [BUGGY]  Node  n  =  cond.getParent();  [BUGGY]    tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Node  n  =  cond.getParent();	      Node    n    =    parent.getParent();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	12	None	replace
63	[BUG]  [BUGGY]  Node  n  =  parent.getNext();  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]              AssertionFailedError    [CONTEXT]    Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:    [BUGGY]  Node  n  =  parent.getNext();  [BUGGY]    tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Node  n  =  parent.getNext();	      Node    n    =    parent.getParent();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	12	None	replace
64	[BUG]  [BUGGY]  Node  n  =  cond.getNext();  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                AssertionFailedError    [CONTEXT]    Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:    [BUGGY]  Node  n  =  cond.getNext();  [BUGGY]    tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Node  n  =  cond.getNext();	      Node    n    =    parent.getParent();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	12	None	replace
65	[BUG]  [BUGGY]  Node  n  =  parent.getFirstChild();  tryMinimizeExits(n,  Token.FUNCTION,  null);  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]            AssertionFailedError    [CONTEXT]    Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:    [BUGGY]  Node  n  =  parent.getFirstChild();  tryMinimizeExits(n,  Token.FUNCTION,  null);  [BUGGY]    tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Node  n  =  parent.getFirstChild();  tryMinimizeExits(n,  Token.FUNCTION,  null);	      Node    n    =    n.getFirstChild();    tryMinimizeExits(n,    Token.FUNCTION,    null);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	19	None	replace
66	[BUG]  [BUGGY]  Node  n  =  cond.getFirstChild();  tryMinimizeExits(n,  Token.FUNCTION,  null);  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]              AssertionFailedError    [CONTEXT]    Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:    [BUGGY]  Node  n  =  cond.getFirstChild();  tryMinimizeExits(n,  Token.FUNCTION,  null);  [BUGGY]    tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Node  n  =  cond.getFirstChild();  tryMinimizeExits(n,  Token.FUNCTION,  null);	      Node    n    =    n.getFirstChild();    tryMinimizeExits(n,    Token.FUNCTION,    null);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	19	None	replace
67	[BUG]  [BUGGY]  Node  n  =  node.getFirstChild();  tryMinimizeExits(n,  Token.FUNCTION,  null);  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                AssertionFailedError    [CONTEXT]    Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:    [BUGGY]  Node  n  =  node.getFirstChild();  tryMinimizeExits(n,  Token.FUNCTION,  null);  [BUGGY]    tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Node  n  =  node.getFirstChild();  tryMinimizeExits(n,  Token.FUNCTION,  null);	      Node    n    =    n.getFirstChild();    tryMinimizeExits(n,    Token.FUNCTION,    null);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	19	None	replace
68	[BUG]  [BUGGY]  Node  n  =  NodeUtil.getFunctionDeclaration(parent);  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                AssertionFailedError    [CONTEXT]    Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:    [BUGGY]  Node  n  =  NodeUtil.getFunctionDeclaration(parent);  [BUGGY]    tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Node  n  =  NodeUtil.getFunctionDeclaration(parent);	      Node    n    =    NodeUtil.getFunctionDeclaration(n);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	14	None	replace
69	[BUG]  [BUGGY]  Node  n  =  NodeUtil.getFunctionDeclaration(cond);  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                  AssertionFailedError    [CONTEXT]    Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:    [BUGGY]  Node  n  =  NodeUtil.getFunctionDeclaration(cond);  [BUGGY]    tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Node  n  =  NodeUtil.getFunctionDeclaration(cond);	      Node    n    =    NodeUtil.getFunctionDeclaration(n);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	14	None	replace
70	[BUG]  [BUGGY]  Node  n  =  NodeUtil.getFunctionDeclaration(n,  parent);  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                    AssertionFailedError    [CONTEXT]    Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:    [BUGGY]  Node  n  =  NodeUtil.getFunctionDeclaration(n,  parent);  [BUGGY]    tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Node  n  =  NodeUtil.getFunctionDeclaration(n,  parent);	      Node    n    =    NodeUtil.getFunctionDeclaration(n);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	14	None	replace
71	[BUG]  [BUGGY]  Node  n  =  NodeUtil.getFunctionDeclaration(compiler);  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                      AssertionFailedError    [CONTEXT]    Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:    [BUGGY]  Node  n  =  NodeUtil.getFunctionDeclaration(compiler);  [BUGGY]    tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Node  n  =  NodeUtil.getFunctionDeclaration(compiler);	      Node    n    =    NodeUtil.getFunctionDeclaration(n);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	14	None	replace
72	[BUG]  [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  parent);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]    Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:    [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  parent);  [BUGGY]    tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  parent);	      tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    null);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	17	None	replace
73	[BUG]  [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  cond);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError    [CONTEXT]    Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:    [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  cond);  [BUGGY]    tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  cond);	      tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    null);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	17	None	replace
74	[BUG]  [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  cond,  null);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]    Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:    [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  cond,  null);  [BUGGY]    tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getFirstChild(),  Token.FUNCTION,  cond,  null);	      tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    null);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	17	None	replace
75	[BUG]  [BUGGY]  tryMinimizeFunctionExit(n.getFirstChild(),  Token.RETURN,  null);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:    [BUGGY]  tryMinimizeFunctionExit(n.getFirstChild(),  Token.RETURN,  null);  [BUGGY]    break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunctionExit(n.getFirstChild(),  Token.RETURN,  null);	  tryMinimizeExits(n.getFirstChild(),    Token.RETURN,    null);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
76	[BUG]  [BUGGY]  Node  n  =  NodeUtil.getFunctionDeclaration(parent,  n);  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                AssertionFailedError    [CONTEXT]    Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:    [BUGGY]  Node  n  =  NodeUtil.getFunctionDeclaration(parent,  n);  [BUGGY]    tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Node  n  =  NodeUtil.getFunctionDeclaration(parent,  n);	      Node    n    =    NodeUtil.getFunctionDeclaration(n);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	14	None	replace
77	[BUG]  [BUGGY]  Node  n  =  NodeUtil.getFunctionExpression(parent,  n);  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                  AssertionFailedError    [CONTEXT]    Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:    [BUGGY]  Node  n  =  NodeUtil.getFunctionExpression(parent,  n);  [BUGGY]    tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Node  n  =  NodeUtil.getFunctionExpression(parent,  n);	      Node    n    =    NodeUtil.getFunctionExpression(parent);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	15	None	replace
78	[BUG]  [BUGGY]  tryMinimizeFunctionExits(n.getFirstChild(),  Token.FUNCTION,  null);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:    [BUGGY]  tryMinimizeFunctionExits(n.getFirstChild(),  Token.FUNCTION,  null);  [BUGGY]    tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunctionExits(n.getFirstChild(),  Token.FUNCTION,  null);	      tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    null);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
79	[BUG]  [BUGGY]  tryMinimizeFunctionExits(n.getLastChild(),  Token.FUNCTION,  null);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:    [BUGGY]  tryMinimizeFunctionExits(n.getLastChild(),  Token.FUNCTION,  null);  [BUGGY]    break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunctionExits(n.getLastChild(),  Token.FUNCTION,  null);	  tryMinimizeExits(n.getLastChild(),    Token.FUNCTION,    null);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
80	[BUG]  [BUGGY]  tryMinimizeFunction(n.getLastChild(),  Token.FUNCTION,  null);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:    [BUGGY]  tryMinimizeFunction(n.getLastChild(),  Token.FUNCTION,  null);  [BUGGY]    break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunction(n.getLastChild(),  Token.FUNCTION,  null);	  tryMinimizeExits(n.getLastChild(),    Token.FUNCTION,    null);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
81	[BUG]  [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null,  cond);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:    [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null,  cond);  [BUGGY]    break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null,  cond);	  tryMinimizeExits(n.getLastChild(),    Token.RETURN,    cond);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	4	None	replace
82	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    AssertionFailedError    [CONTEXT]    Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:    [BUGGY]      NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]    break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	add	        NodeTraversal.traverse(compiler,  n,  this);	  	compilable	  [FE]  StackOverflowError  	8	3	add
83	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  n,  this);  [FE]  StackOverflowError  [FE]    AssertionFailedError    [CONTEXT]    Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:    [BUGGY]      NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]    break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	        NodeTraversal.traverse(compiler,  n,  this);	  	compilable	  [FE]  StackOverflowError  	8	3	add
84	[BUG]  [BUGGY]      NodeUtil.copyFunctionExit(n,  parent);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:    [BUGGY]      NodeUtil.copyFunctionExit(n,  parent);  [BUGGY]    break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	        NodeUtil.copyFunctionExit(n,  parent);	  	non-compiled	[CE]  cannot  find  symbol	8	None	add
85	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  n,  parent);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)  [FE]        AssertionFailedError    [CONTEXT]    Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:    [BUGGY]      NodeTraversal.traverse(compiler,  n,  parent);  [BUGGY]    break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	        NodeTraversal.traverse(compiler,  n,  parent);	  	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)	8	None	add
86	[BUG]  [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null,  parent);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:    [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null,  parent);  [BUGGY]    break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null,  parent);	  tryMinimizeExits(n.getLastChild(),    Token.RETURN,    parent);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	3	None	replace
87	[BUG]  [BUGGY]  tryMinimizeFunction(n.getFirstChild(),  Token.RETURN,  null);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:    [BUGGY]  tryMinimizeFunction(n.getFirstChild(),  Token.RETURN,  null);  [BUGGY]    break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunction(n.getFirstChild(),  Token.RETURN,  null);	  tryMinimizeFunction(n.getLastChild(),    Token.RETURN,    null);    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
88	[BUG]  [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  cond,  type);  [CE]  cannot  find  symbol  type  [FE]            AssertionFailedError    [CONTEXT]    Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:    [BUGGY]  tryMinimizeExits(n.getLastChild(),  Token.RETURN,  cond,  type);  [BUGGY]    break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getLastChild(),  Token.RETURN,  cond,  type);	  tryMinimizeExits(n.getLastChild(),    Token.RETURN,    cond);    	non-compiled	[CE]  cannot  find  symbol  type	4	None	replace
89	[BUG]  [BUGGY]  Node  n  =  NodeUtil.getFunctionExpression(parent)+  1;  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                  AssertionFailedError    [CONTEXT]    Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:    [BUGGY]  Node  n  =  NodeUtil.getFunctionExpression(parent)+  1;  [BUGGY]    tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Node  n  =  NodeUtil.getFunctionExpression(parent)+  1;	      Node    n    =    NodeUtil.getFunctionExpression(parent);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	15	None	replace
90	[BUG]  [BUGGY]  Node  n  =  parent.getFirstChild();  tryMinimizeExits(parent,  Token.FUNCTION,  null);  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]            AssertionFailedError    [CONTEXT]    Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:    [BUGGY]  Node  n  =  parent.getFirstChild();  tryMinimizeExits(parent,  Token.FUNCTION,  null);  [BUGGY]    tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Node  n  =  parent.getFirstChild();  tryMinimizeExits(parent,  Token.FUNCTION,  null);	      Node    n    =    n.getFirstChild();    tryMinimizeExits(n,    Token.FUNCTION,    null);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	19	None	replace
91	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  Context  [FE]    AssertionFailedError    [CONTEXT]    Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:    [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]    break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Context.checkState(n.getType()  ==  Token.FUNCTION);	      	non-compiled	[CE]  cannot  find  symbol  Context	9	None	replace
92	[BUG]  [BUGGY]  Node  n  =  NodeUtil.getFunctionDeclaration(n.getFirstChild());  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                AssertionFailedError    [CONTEXT]    Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:    [BUGGY]  Node  n  =  NodeUtil.getFunctionDeclaration(n.getFirstChild());  [BUGGY]    tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Node  n  =  NodeUtil.getFunctionDeclaration(n.getFirstChild());	      Node    n    =    NodeUtil.getFunctionDeclaration(n);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	14	None	replace
93	[BUG]  [BUGGY]  Node  n  =  NodeUtil.getFunctionDeclaration(n.getParent());  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                  AssertionFailedError    [CONTEXT]    Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:    [BUGGY]  Node  n  =  NodeUtil.getFunctionDeclaration(n.getParent());  [BUGGY]    tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	Node  n  =  NodeUtil.getFunctionDeclaration(n.getParent());	      Node    n    =    NodeUtil.getFunctionDeclaration(n);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	14	None	replace
94	[BUG]  [BUGGY]  tryMinimizeFunction(n.getFirstChild(),  Token.FUNCTION,  null);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:    [BUGGY]  tryMinimizeFunction(n.getFirstChild(),  Token.FUNCTION,  null);  [BUGGY]    tryMinimizeExits(n.getLastChild(),  Token.RETURN,  null);  break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeFunction(n.getFirstChild(),  Token.FUNCTION,  null);	      tryMinimizeExits(n.getFirstChild(),    Token.FUNCTION,    null);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
95	[BUG]  [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);  tryMinimizeExits(t.getFirstChild(),  Token.RETURN,  null);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    Node  cond  =  NodeUtil.getConditionExpression(n);  if  (NodeUtil.getImpureBooleanValue(cond)  ==  TernaryValue.FALSE)  {    tryMinimizeExits(n.getFirstChild(),  Token.BREAK,  null);  }  break;  case  Token.FUNCTION:    [BUGGY]  tryMinimizeExits(n.getFirstChild(),  Token.RETURN,  null);  tryMinimizeExits(t.getFirstChild(),  Token.RETURN,  null);  [BUGGY]    break;  }  }  [CLASS]  MinimizeExitPoints  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	tryMinimizeExits(n.getFirstChild(),    Token.RETURN,    null);    tryMinimizeExits(t.getFirstChild(),  Token.RETURN,  null);	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
