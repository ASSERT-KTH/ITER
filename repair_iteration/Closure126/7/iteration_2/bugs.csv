bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  n.removeChild(labelName);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]    RuntimeException    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]  n.removeChild(labelName);  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	n.removeChild(labelName);	      n.removeChild(tryBlock);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	24	None	replace
2	[BUG]  [BUGGY]  n.removeChild(tryBlock.cloneTree());  [CE]  cannot  find  symbol  allCatchNodes  [FE]      RuntimeException    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]  n.removeChild(tryBlock.cloneTree());  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	n.removeChild(tryBlock.cloneTree());	      n.removeChild(tryBlock);    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	24	None	replace
3	[BUG]  [BUGGY]  n.removeChild(c);  [CE]  cannot  find  symbol  c  [FE]        RuntimeException    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]  n.removeChild(c);  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	n.removeChild(c);	      n.removeChild(tryBlock);    	non-compiled	[CE]  cannot  find  symbol  c	24	None	replace
4	[BUG]  [BUGGY]  n.removeChild(tryBlock.getNext());  [CE]  cannot  find  symbol  allCatchNodes  [FE]          RuntimeException    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]  n.removeChild(tryBlock.getNext());  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	n.removeChild(tryBlock.getNext());	      n.removeChild(tryBlock);    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	24	None	replace
5	[BUG]  [BUGGY]      Node  elseBlock  =  tryBlock.getFirstChild();  Node  elseBlock  =  tryBlock.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]      Node  elseBlock  =  tryBlock.getFirstChild();  Node  elseBlock  =  tryBlock.getFirstChild();  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	        Node    elseBlock    =    tryBlock.getFirstChild();    Node  elseBlock  =  tryBlock.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	10	None	add
6	[BUG]  [BUGGY]      Node  elseBlock  =  tryBlock.getFirstChild();  Node  elseBlock  =  tryBlock.getLastChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]      Node  elseBlock  =  tryBlock.getFirstChild();  Node  elseBlock  =  tryBlock.getLastChild();  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	        Node    elseBlock    =    tryBlock.getFirstChild();    Node  elseBlock  =  tryBlock.getLastChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	10	None	add
7	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]      Node  elseBlock  =  tryBlock.getFirstChild();  Node  otherBlock  =  tryBlock.getFirstChild();  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	add	        Node    elseBlock    =    tryBlock.getFirstChild();    Node  otherBlock  =  tryBlock.getFirstChild();	  	compilable	  [FE]  AssertionFailedError  	10	2	add
8	[BUG]  [BUGGY]      Node  elseBlock  =  tryBlock.getFirstChild();  Node  otherBlock  =  tryBlock.getFirstChild();  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]      Node  elseBlock  =  tryBlock.getFirstChild();  Node  otherBlock  =  tryBlock.getFirstChild();  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	        Node    elseBlock    =    tryBlock.getFirstChild();    Node  otherBlock  =  tryBlock.getFirstChild();	  	compilable	  [FE]  AssertionFailedError  	10	2	add
9	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]      Node  elseBlock  =  tryBlock.getFirstChild();  Node  thenBlock  =  tryBlock.getFirstChild();  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	add	        Node    elseBlock    =    tryBlock.getFirstChild();    Node  thenBlock  =  tryBlock.getFirstChild();	  	compilable	  [FE]  AssertionFailedError  	10	2	add
10	[BUG]  [BUGGY]      Node  elseBlock  =  tryBlock.getFirstChild();  Node  thenBlock  =  tryBlock.getFirstChild();  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]      Node  elseBlock  =  tryBlock.getFirstChild();  Node  thenBlock  =  tryBlock.getFirstChild();  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	        Node    elseBlock    =    tryBlock.getFirstChild();    Node  thenBlock  =  tryBlock.getFirstChild();	  	compilable	  [FE]  AssertionFailedError  	10	2	add
11	[BUG]  [BUGGY]      Node  elseBlock  =  tryBlock.getFirstChild();  Node  elseBlock  =  attemptBlock.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]            AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]      Node  elseBlock  =  tryBlock.getFirstChild();  Node  elseBlock  =  attemptBlock.getFirstChild();  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	        Node    elseBlock    =    tryBlock.getFirstChild();    Node  elseBlock  =  attemptBlock.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	10	None	add
12	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isExitBlock(n));  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]  Preconditions.checkState(NodeUtil.isExitBlock(n));  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(NodeUtil.isExitBlock(n));	      Preconditions.checkState(NodeUtil.isExitBlock(tryBlock));    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
13	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isExitBlock(labelName));  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]  Preconditions.checkState(NodeUtil.isExitBlock(labelName));  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(NodeUtil.isExitBlock(labelName));	      Preconditions.checkState(NodeUtil.isExitBlock(tryBlock));    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
14	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isExitBlock(tryBlock,  n));  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]  Preconditions.checkState(NodeUtil.isExitBlock(tryBlock,  n));  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(NodeUtil.isExitBlock(tryBlock,  n));	      Preconditions.checkState(NodeUtil.isExitBlock(tryBlock));    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
15	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isExitBlock(tryBlock),  exitType);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]  Preconditions.checkState(NodeUtil.isExitBlock(tryBlock),  exitType);  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(NodeUtil.isExitBlock(tryBlock),  exitType);	      Preconditions.checkState(NodeUtil.isExitBlock(tryBlock));    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
16	[BUG]  [BUGGY]  Node  elseBlock  =  n.getLastChild();  [CE]  cannot  find  symbol  allCatchNodes  [FE]    AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]  Node  elseBlock  =  n.getLastChild();  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  n.getLastChild();	      Node    elseBlock    =    tryBlock.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	15	None	replace
17	[BUG]  [BUGGY]  Node  elseBlock  =  tryBlock.getParent();  [CE]  cannot  find  symbol  allCatchNodes  [FE]      AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]  Node  elseBlock  =  tryBlock.getParent();  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  tryBlock.getParent();	      Node    elseBlock    =    tryBlock.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	15	None	replace
18	[BUG]  [BUGGY]  Node  c  =  tryBlock.getCurrentNode();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]  Node  c  =  tryBlock.getCurrentNode();  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  c  =  tryBlock.getCurrentNode();	      Node    c    =    tryBlock.getNext();    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
19	[BUG]  [BUGGY]  Node  c  =  tryBlock.getLastChild();  [CE]  cannot  find  symbol  allCatchNodes  [FE]      AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]  Node  c  =  tryBlock.getLastChild();  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  c  =  tryBlock.getLastChild();	      Node    c    =    tryBlock.getNext();    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	18	None	replace
20	[BUG]  [BUGGY]  Node  c  =  tryBlock.getCatch();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]  Node  c  =  tryBlock.getCatch();  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  c  =  tryBlock.getCatch();	      Node    c    =    tryBlock.getNext();    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
21	[BUG]  [BUGGY]  Node  c  =  tryBlock.getFirstChild();  [CE]  cannot  find  symbol  allCatchNodes  [FE]          AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]  Node  c  =  tryBlock.getFirstChild();  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  c  =  tryBlock.getFirstChild();	      Node    c    =    tryBlock.getNext();    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	18	None	replace
22	[BUG]  [BUGGY]  Preconditions.checkState(tryBlock.isTry());  [CE]  cannot  find  symbol  allCatchNodes  [FE]    AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]  Preconditions.checkState(tryBlock.isTry());  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(tryBlock.isTry());	      Preconditions.checkState(n.isTry());    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	21	None	replace
23	[BUG]  [BUGGY]  Preconditions.checkState(n.isExit());  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]  Preconditions.checkState(n.isExit());  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(n.isExit());	      Preconditions.checkState(n.isTry());    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
24	[BUG]  [BUGGY]  Preconditions.checkState(n.isFunction());  [CE]  cannot  find  symbol  allCatchNodes  [FE]        AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]  Preconditions.checkState(n.isFunction());  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(n.isFunction());	      Preconditions.checkState(n.isTry());    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	21	None	replace
25	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  [CE]  cannot  find  symbol  allCatchNodes  [FE]          AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);	      Preconditions.checkState(n.isTry());    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	21	None	replace
26	[BUG]  [BUGGY]      Node  elseBlock  =  tryBlock.getLastChild();  Node  elseBlock  =  tryBlock.getLastChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]      Node  elseBlock  =  tryBlock.getLastChild();  Node  elseBlock  =  tryBlock.getLastChild();  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	        Node    elseBlock    =    tryBlock.getLastChild();    Node  elseBlock  =  tryBlock.getLastChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	14	None	add
27	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]      Node  elseBlock  =  tryBlock.getLastChild();  Node  otherBlock  =  tryBlock.getLastChild();  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	add	        Node    elseBlock    =    tryBlock.getLastChild();    Node  otherBlock  =  tryBlock.getLastChild();	  	compilable	  [FE]  AssertionFailedError  	14	2	add
28	[BUG]  [BUGGY]      Node  elseBlock  =  tryBlock.getLastChild();  Node  otherBlock  =  tryBlock.getLastChild();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]      Node  elseBlock  =  tryBlock.getLastChild();  Node  otherBlock  =  tryBlock.getLastChild();  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	        Node    elseBlock    =    tryBlock.getLastChild();    Node  otherBlock  =  tryBlock.getLastChild();	  	compilable	  [FE]  AssertionFailedError  	14	2	add
29	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]      Node  elseBlock  =  tryBlock.getLastChild();  Node  thenBlock  =  tryBlock.getLastChild();  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	add	        Node    elseBlock    =    tryBlock.getLastChild();    Node  thenBlock  =  tryBlock.getLastChild();	  	compilable	  [FE]  AssertionFailedError  	14	2	add
30	[BUG]  [BUGGY]      Node  elseBlock  =  tryBlock.getLastChild();  Node  thenBlock  =  tryBlock.getLastChild();  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]      Node  elseBlock  =  tryBlock.getLastChild();  Node  thenBlock  =  tryBlock.getLastChild();  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	        Node    elseBlock    =    tryBlock.getLastChild();    Node  thenBlock  =  tryBlock.getLastChild();	  	compilable	  [FE]  AssertionFailedError  	14	2	add
31	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]      Node  elseBlock  =  tryBlock.getLastChild();  Node  anotherBlock  =  tryBlock.getLastChild();  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	add	        Node    elseBlock    =    tryBlock.getLastChild();    Node  anotherBlock  =  tryBlock.getLastChild();	  	compilable	  [FE]  AssertionFailedError  	14	2	add
32	[BUG]  [BUGGY]      Node  elseBlock  =  tryBlock.getLastChild();  Node  anotherBlock  =  tryBlock.getLastChild();  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]      Node  elseBlock  =  tryBlock.getLastChild();  Node  anotherBlock  =  tryBlock.getLastChild();  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	        Node    elseBlock    =    tryBlock.getLastChild();    Node  anotherBlock  =  tryBlock.getLastChild();	  	compilable	  [FE]  AssertionFailedError  	14	2	add
33	[BUG]  [BUGGY]      Node  elseBlock  =  tryBlock.getLastChild();  Node  elseBlock  =  attemptBlock.getLastChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]            AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]      Node  elseBlock  =  tryBlock.getLastChild();  Node  elseBlock  =  attemptBlock.getLastChild();  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	        Node    elseBlock    =    tryBlock.getLastChild();    Node  elseBlock  =  attemptBlock.getLastChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	14	None	add
34	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(n);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(n);  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(n);	  Node    allCatchNodes    =    NodeUtil.getAllCatchNodes(tryBlock);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
35	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(tryBlock,  labelName);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(tryBlock,  labelName);  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(tryBlock,  labelName);	  Node    allCatchNodes    =    NodeUtil.getAllCatchNodes(tryBlock);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
36	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(labelName);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(labelName);  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(labelName);	  Node    allCatchNodes    =    NodeUtil.getAllCatchNodes(tryBlock);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
37	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(n,  tryBlock);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(n,  tryBlock);  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(n,  tryBlock);	  Node    allCatchNodes    =    NodeUtil.getAllCatchNodes(tryBlock);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
38	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(c,  tryBlock);  [CE]  cannot  find  symbol  c  [FE]                  AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(c,  tryBlock);  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(c,  tryBlock);	  Node    allCatchNodes    =    NodeUtil.getAllCatchNodes(tryBlock);    	non-compiled	[CE]  cannot  find  symbol  c	3	None	replace
39	[BUG]  [BUGGY]      Node  elseBlock  =  tryBlock.getNext();  Node  elseBlock  =  tryBlock.getNext();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]      Node  elseBlock  =  tryBlock.getNext();  Node  elseBlock  =  tryBlock.getNext();  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	        Node    elseBlock    =    tryBlock.getNext();    Node  elseBlock  =  tryBlock.getNext();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	8	None	add
40	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]      Node  elseBlock  =  tryBlock.getNext();  Node  otherBlock  =  tryBlock.getNext();  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	add	        Node    elseBlock    =    tryBlock.getNext();    Node  otherBlock  =  tryBlock.getNext();	  	compilable	  [FE]  AssertionFailedError  	8	2	add
41	[BUG]  [BUGGY]      Node  elseBlock  =  tryBlock.getNext();  Node  otherBlock  =  tryBlock.getNext();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]      Node  elseBlock  =  tryBlock.getNext();  Node  otherBlock  =  tryBlock.getNext();  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	        Node    elseBlock    =    tryBlock.getNext();    Node  otherBlock  =  tryBlock.getNext();	  	compilable	  [FE]  AssertionFailedError  	8	2	add
42	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]      Node  elseBlock  =  tryBlock.getNext();  Node  thenBlock  =  tryBlock.getNext();  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	add	        Node    elseBlock    =    tryBlock.getNext();    Node  thenBlock  =  tryBlock.getNext();	  	compilable	  [FE]  AssertionFailedError  	8	2	add
43	[BUG]  [BUGGY]      Node  elseBlock  =  tryBlock.getNext();  Node  thenBlock  =  tryBlock.getNext();  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]      Node  elseBlock  =  tryBlock.getNext();  Node  thenBlock  =  tryBlock.getNext();  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	        Node    elseBlock    =    tryBlock.getNext();    Node  thenBlock  =  tryBlock.getNext();	  	compilable	  [FE]  AssertionFailedError  	8	2	add
44	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]      Node  elseBlock  =  tryBlock.getNext();  Node  anotherBlock  =  tryBlock.getNext();  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	add	        Node    elseBlock    =    tryBlock.getNext();    Node  anotherBlock  =  tryBlock.getNext();	  	compilable	  [FE]  AssertionFailedError  	8	2	add
45	[BUG]  [BUGGY]      Node  elseBlock  =  tryBlock.getNext();  Node  anotherBlock  =  tryBlock.getNext();  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]      Node  elseBlock  =  tryBlock.getNext();  Node  anotherBlock  =  tryBlock.getNext();  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	        Node    elseBlock    =    tryBlock.getNext();    Node  anotherBlock  =  tryBlock.getNext();	  	compilable	  [FE]  AssertionFailedError  	8	2	add
46	[BUG]  [BUGGY]      Node  elseBlock  =  tryBlock.getNext();  Node  elseBlock  =  tryBlock.getNext();  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]      Node  elseBlock  =  tryBlock.getNext();  Node  elseBlock  =  tryBlock.getNext();  }  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	        Node    elseBlock    =    tryBlock.getNext();    Node  elseBlock  =  tryBlock.getNext();  }	  	non-compiled	[CE]  illegal  start  of  type	8	None	add
47	[BUG]  [BUGGY]  Node  elseBlock  =  tryBlock.getNext(),  labelName);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]  Node  elseBlock  =  tryBlock.getNext(),  labelName);  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  tryBlock.getNext(),  labelName);	      Node    elseBlock    =    tryBlock.getNext();    	non-compiled	[CE]  ';'  expected	9	None	replace
48	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock);  [CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    RuntimeException    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock);  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock);    Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock);	  	non-compiled	[CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	1	None	add
49	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock);  Node  allSatchNodes  =  NodeUtil.getCatchBlock(tryBlock);  [CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      RuntimeException    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock);  Node  allSatchNodes  =  NodeUtil.getCatchBlock(tryBlock);  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock);    Node  allSatchNodes  =  NodeUtil.getCatchBlock(tryBlock);	  	non-compiled	[CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	1	None	add
50	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock);  Preconditions.checkState(NodeUtil.hasCatchHandler(allCatchNodes));  [CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        RuntimeException    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock);  Preconditions.checkState(NodeUtil.hasCatchHandler(allCatchNodes));  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock);    Preconditions.checkState(NodeUtil.hasCatchHandler(allCatchNodes));	  	non-compiled	[CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	1	None	add
51	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock);  Node  allBatchNodes  =  NodeUtil.getCatchBlock(tryBlock);  [CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          RuntimeException    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock);  Node  allBatchNodes  =  NodeUtil.getCatchBlock(tryBlock);  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock);    Node  allBatchNodes  =  NodeUtil.getCatchBlock(tryBlock);	  	non-compiled	[CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	1	None	add
52	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock));  [CE]  ';'  expected  [FE]            RuntimeException    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock));  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock);    Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock));	  	non-compiled	[CE]  ';'  expected	1	None	add
53	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n,  tryBlock);  [CE]  method  getCatchBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n,  tryBlock);  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(n,  tryBlock);	  Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock,    n);    	non-compiled	[CE]  method  getCatchBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;	19	None	replace
54	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock,  n,  labelName);  [CE]  method  getCatchBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock,  n,  labelName);  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock,  n,  labelName);	  Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock,    n);    	non-compiled	[CE]  method  getCatchBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;	19	None	replace
55	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock,  n,  exitType);  [CE]  method  getCatchBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock,  n,  exitType);  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock,  n,  exitType);	  Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock,    n);    	non-compiled	[CE]  method  getCatchBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;	19	None	replace
56	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(c,  tryBlock,  n);  [CE]  cannot  find  symbol  c  [FE]              AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(c,  tryBlock,  n);  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(c,  tryBlock,  n);	  Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock,    n);    	non-compiled	[CE]  cannot  find  symbol  c	19	None	replace
57	[BUG]  [BUGGY]  Preconditions.checkState(n.isTree()  &&  tryBlock.isTree());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]  Preconditions.checkState(n.isTree()  &&  tryBlock.isTree());  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(n.isTree()  &&  tryBlock.isTree());	      Preconditions.checkState(n.isTree());    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
58	[BUG]  [BUGGY]  Preconditions.checkState(n.isTree(),  exitType);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]  Preconditions.checkState(n.isTree(),  exitType);  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(n.isTree(),  exitType);	      Preconditions.checkState(n.isTree());    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
59	[BUG]  [BUGGY]  Preconditions.checkState(n.isTree(),  tryBlock.isTree());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]  Preconditions.checkState(n.isTree(),  tryBlock.isTree());  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(n.isTree(),  tryBlock.isTree());	      Preconditions.checkState(n.isTree());    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
60	[BUG]  [BUGGY]  Preconditions.checkState(n.isTree()  ||  tryBlock.isTree());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]  Preconditions.checkState(n.isTree()  ||  tryBlock.isTree());  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(n.isTree()  ||  tryBlock.isTree());	      Preconditions.checkState(n.isTree());    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
61	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock,  labelName);  [CE]  method  getCatchBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]    RuntimeException    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock,  labelName);  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock,  labelName);	  Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock);    	non-compiled	[CE]  method  getCatchBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;	2	None	replace
62	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  [CE]  cannot  find  symbol  allCatchNodes  [FE]                  AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  allCatchNodes.getFirstChild();	      	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	7	None	replace
63	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                    AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]  Node  allCatchNodes  =  tryBlock.getFirstChild();  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	add	Node  allCatchNodes  =  tryBlock.getFirstChild();	      	compilable	  [FE]  RuntimeException  	7	6	replace
64	[BUG]  [BUGGY]  Node  allCatchNodes  =  tryBlock.getFirstChild();  [FE]  RuntimeException  [FE]                    AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]  Node  allCatchNodes  =  tryBlock.getFirstChild();  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  tryBlock.getFirstChild();	      	compilable	  [FE]  RuntimeException  	7	6	replace
65	[BUG]  [BUGGY]      Node  c  =  tryBlock.getNext();  Node  c  =  tryBlock.getNext();  [CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]      Node  c  =  tryBlock.getNext();  Node  c  =  tryBlock.getNext();  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	        Node    c    =    tryBlock.getNext();    Node  c  =  tryBlock.getNext();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	17	None	add
66	[BUG]  [BUGGY]      Node  c  =  tryBlock.getNext();  Node  c  =  tryBlock.getNext();  Preconditions.checkState(NodeUtil.hasCatchHandler(c));  [CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]      Node  c  =  tryBlock.getNext();  Node  c  =  tryBlock.getNext();  Preconditions.checkState(NodeUtil.hasCatchHandler(c));  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	        Node    c    =    tryBlock.getNext();    Node  c  =  tryBlock.getNext();  Preconditions.checkState(NodeUtil.hasCatchHandler(c));	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	17	None	add
67	[BUG]  [BUGGY]      Node  c  =  tryBlock.getNext();  Node  c  =  tryBlock.getNext();  Preconditions.checkState(NodeUtil.hasFailedCatchHandler(c));  [CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]      Node  c  =  tryBlock.getNext();  Node  c  =  tryBlock.getNext();  Preconditions.checkState(NodeUtil.hasFailedCatchHandler(c));  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	        Node    c    =    tryBlock.getNext();    Node  c  =  tryBlock.getNext();  Preconditions.checkState(NodeUtil.hasFailedCatchHandler(c));	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	17	None	add
68	[BUG]  [BUGGY]      Node  c  =  tryBlock.getNext();  Node  c  =  tryBlock.getNext();  Preconditions.checkState(NodeUtil.hasCatchHandler(c),  exitType,  labelName);  [CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]      Node  c  =  tryBlock.getNext();  Node  c  =  tryBlock.getNext();  Preconditions.checkState(NodeUtil.hasCatchHandler(c),  exitType,  labelName);  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	        Node    c    =    tryBlock.getNext();    Node  c  =  tryBlock.getNext();  Preconditions.checkState(NodeUtil.hasCatchHandler(c),  exitType,  labelName);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	17	None	add
69	[BUG]  [BUGGY]      Node  c  =  tryBlock.getNext();  Node  c  =  tryBlock.getNext();  Preconditions.checkState(NodeUtil.hasCatchHandler(labelName));  [CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]            AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]      Node  c  =  tryBlock.getNext();  Node  c  =  tryBlock.getNext();  Preconditions.checkState(NodeUtil.hasCatchHandler(labelName));  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	        Node    c    =    tryBlock.getNext();    Node  c  =  tryBlock.getNext();  Preconditions.checkState(NodeUtil.hasCatchHandler(labelName));	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	17	None	add
70	[BUG]  [BUGGY]      Node  c  =  tryBlock.getNext();  Node  c  =  tryBlock.getNext();  Preconditions.checkState(c!=  null);  [CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]              AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]      Node  c  =  tryBlock.getNext();  Node  c  =  tryBlock.getNext();  Preconditions.checkState(c!=  null);  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	        Node    c    =    tryBlock.getNext();    Node  c  =  tryBlock.getNext();  Preconditions.checkState(c!=  null);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	17	None	add
71	[BUG]  [BUGGY]  Node  elseBlock  =  tryBlock.getOwnerChild();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]  Node  elseBlock  =  tryBlock.getOwnerChild();  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  tryBlock.getOwnerChild();	      Node    elseBlock    =    tryBlock.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
72	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchNodes(n);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchNodes(n);  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchNodes(n);	  Node    allCatchNodes    =    NodeUtil.getCatchNodes(tryBlock);    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
73	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchNodes(n,  tryBlock);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchNodes(n,  tryBlock);  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchNodes(n,  tryBlock);	  Node    allCatchNodes    =    NodeUtil.getCatchNodes(tryBlock);    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
74	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchNodes(tryBlock,  labelName);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchNodes(tryBlock,  labelName);  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchNodes(tryBlock,  labelName);	  Node    allCatchNodes    =    NodeUtil.getCatchNodes(tryBlock);    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
75	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchNodes(labelName);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchNodes(labelName);  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchNodes(labelName);	  Node    allCatchNodes    =    NodeUtil.getCatchNodes(tryBlock);    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
76	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchNodes(labelName,  tryBlock);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchNodes(labelName,  tryBlock);  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchNodes(labelName,  tryBlock);	  Node    allCatchNodes    =    NodeUtil.getCatchNodes(tryBlock);    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
77	[BUG]  [BUGGY]      Node  elseBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]      Node  elseBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	        Node    elseBlock    =    n.getFirstChild();    Node  elseBlock  =  n.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	12	None	add
78	[BUG]  [BUGGY]      Node  elseBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  Preconditions.checkState(anythingCatchNodes.hasOneChild());  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]      Node  elseBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  Preconditions.checkState(anythingCatchNodes.hasOneChild());  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	        Node    elseBlock    =    n.getFirstChild();    Node  elseBlock  =  n.getFirstChild();  Preconditions.checkState(anythingCatchNodes.hasOneChild());	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	12	None	add
79	[BUG]  [BUGGY]      Node  elseBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  Preconditions.checkState(allCatchNodes.hasOneChild());  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]      Node  elseBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  Preconditions.checkState(allCatchNodes.hasOneChild());  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	        Node    elseBlock    =    n.getFirstChild();    Node  elseBlock  =  n.getFirstChild();  Preconditions.checkState(allCatchNodes.hasOneChild());	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	12	None	add
80	[BUG]  [BUGGY]      Node  elseBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getLastChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]      Node  elseBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getLastChild();  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	        Node    elseBlock    =    n.getFirstChild();    Node  elseBlock  =  n.getLastChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	12	None	add
81	[BUG]  [BUGGY]      Node  elseBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  Preconditions.checkState(alwaysBlock.hasOneChild());  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]            AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]      Node  elseBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  Preconditions.checkState(alwaysBlock.hasOneChild());  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	        Node    elseBlock    =    n.getFirstChild();    Node  elseBlock  =  n.getFirstChild();  Preconditions.checkState(alwaysBlock.hasOneChild());	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	12	None	add
82	[BUG]  [BUGGY]      Node  elseBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  Preconditions.checkState(labelName.equals(tryBlock));  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]              AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]      Node  elseBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  Preconditions.checkState(labelName.equals(tryBlock));  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	        Node    elseBlock    =    n.getFirstChild();    Node  elseBlock  =  n.getFirstChild();  Preconditions.checkState(labelName.equals(tryBlock));	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	12	None	add
83	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(labelName);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(labelName);  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchHandler(labelName);	  Node    allCatchNodes    =    NodeUtil.getCatchHandler(tryBlock);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
84	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(tryBlock,  labelName);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(tryBlock,  labelName);  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchHandler(tryBlock,  labelName);	  Node    allCatchNodes    =    NodeUtil.getCatchHandler(tryBlock);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
85	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(n,  tryBlock);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(n,  tryBlock);  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchHandler(n,  tryBlock);	  Node    allCatchNodes    =    NodeUtil.getCatchHandler(tryBlock);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
86	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(c);  [CE]  cannot  find  symbol  c  [FE]                  AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(c);  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchHandler(c);	  Node    allCatchNodes    =    NodeUtil.getCatchHandler(tryBlock);    	non-compiled	[CE]  cannot  find  symbol  c	4	None	replace
87	[BUG]  [BUGGY]  Node  n  =  tryBlock.getLastChild();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]  Node  n  =  tryBlock.getLastChild();  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  n  =  tryBlock.getLastChild();	      Node    n    =    tryBlock.getNext();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	16	None	replace
88	[BUG]  [BUGGY]  Node  n  =  tryBlock.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                  AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]  Node  n  =  tryBlock.getFirstChild();  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  n  =  tryBlock.getFirstChild();	      Node    n    =    tryBlock.getNext();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	16	None	replace
89	[BUG]  [BUGGY]  Node  n  =  tryBlock.getNext()  +  1;  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                    AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]  Node  n  =  tryBlock.getNext()  +  1;  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  n  =  tryBlock.getNext()  +  1;	      Node    n    =    tryBlock.getNext();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	16	None	replace
90	[BUG]  [BUGGY]  Node  n  =  tryBlock.getParent();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                      AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]  Node  n  =  tryBlock.getParent();  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  n  =  tryBlock.getParent();	      Node    n    =    tryBlock.getNext();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	16	None	replace
91	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]      n.removeChild(tryBlock);  n.removeChild(tryBlock);  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	add	        n.removeChild(tryBlock);    n.removeChild(tryBlock);	  	compilable	  [FE]  RuntimeException  	23	6	add
92	[BUG]  [BUGGY]      n.removeChild(tryBlock);  n.removeChild(tryBlock);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]      n.removeChild(tryBlock);  n.removeChild(tryBlock);  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	        n.removeChild(tryBlock);    n.removeChild(tryBlock);	  	compilable	  [FE]  RuntimeException  	23	6	add
93	[BUG]  [BUGGY]      n.removeChild(tryBlock);  Node  n.removeChild(tryBlock);  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]      n.removeChild(tryBlock);  Node  n.removeChild(tryBlock);  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	        n.removeChild(tryBlock);    Node  n.removeChild(tryBlock);	  	non-compiled	[CE]  ';'  expected	23	None	add
94	[BUG]  [BUGGY]      n.removeChild(tryBlock);  Node  n  =  tryBlock.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        RuntimeException    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]      n.removeChild(tryBlock);  Node  n  =  tryBlock.getFirstChild();  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	        n.removeChild(tryBlock);    Node  n  =  tryBlock.getFirstChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	23	None	add
95	[BUG]  [BUGGY]      n.removeChild(tryBlock);  NodeUtil.removeChild(tryBlock);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]          RuntimeException    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]      n.removeChild(tryBlock);  NodeUtil.removeChild(tryBlock);  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	        n.removeChild(tryBlock);    NodeUtil.removeChild(tryBlock);	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	23	None	add
96	[BUG]  [BUGGY]      n.removeChild(tryBlock);  Node  n  =  tryBlock.getNext();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]            RuntimeException    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]      n.removeChild(tryBlock);  Node  n  =  tryBlock.getNext();  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	        n.removeChild(tryBlock);    Node  n  =  tryBlock.getNext();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	23	None	add
97	[BUG]  [BUGGY]      n.removeChild(tryBlock);  NodeUtil.removeChild(n);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]              RuntimeException    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]      n.removeChild(tryBlock);  NodeUtil.removeChild(n);  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	        n.removeChild(tryBlock);    NodeUtil.removeChild(n);	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	23	None	add
98	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(c);  [CE]  cannot  find  symbol  c  [FE]              AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(c);  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(c);	  Node    allCatchNodes    =    NodeUtil.getAllCatchNodes();    	non-compiled	[CE]  cannot  find  symbol  c	5	None	replace
99	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]      Preconditions.checkState(n.isTry());  Preconditions.checkState(n.isTry());  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	add	        Preconditions.checkState(n.isTry());    Preconditions.checkState(n.isTry());	  	compilable	  [FE]  AssertionFailedError  	20	2	add
100	[BUG]  [BUGGY]      Preconditions.checkState(n.isTry());  Preconditions.checkState(n.isTry());  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]      Preconditions.checkState(n.isTry());  Preconditions.checkState(n.isTry());  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	        Preconditions.checkState(n.isTry());    Preconditions.checkState(n.isTry());	  	compilable	  [FE]  AssertionFailedError  	20	2	add
101	[BUG]  [BUGGY]      Preconditions.checkState(n.isTry());  Node  n  =  tryBlock.getFirstChild();  Preconditions.checkState(n.isTry());  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]      Preconditions.checkState(n.isTry());  Node  n  =  tryBlock.getFirstChild();  Preconditions.checkState(n.isTry());  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	        Preconditions.checkState(n.isTry());    Node  n  =  tryBlock.getFirstChild();  Preconditions.checkState(n.isTry());	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	20	None	add
102	[BUG]  [BUGGY]      Preconditions.checkState(n.isTry());  Node  n  =  tryBlock.getNext();  Preconditions.checkState(n.isTry());  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]      Preconditions.checkState(n.isTry());  Node  n  =  tryBlock.getNext();  Preconditions.checkState(n.isTry());  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	        Preconditions.checkState(n.isTry());    Node  n  =  tryBlock.getNext();  Preconditions.checkState(n.isTry());	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	20	None	add
103	[BUG]  [BUGGY]      Preconditions.checkState(n.isTry());  Node  n  =  tryBlock.getLastChild();  Preconditions.checkState(n.isTry());  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]      Preconditions.checkState(n.isTry());  Node  n  =  tryBlock.getLastChild();  Preconditions.checkState(n.isTry());  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	        Preconditions.checkState(n.isTry());    Node  n  =  tryBlock.getLastChild();  Preconditions.checkState(n.isTry());	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	20	None	add
104	[BUG]  [BUGGY]      Preconditions.checkState(n.isTry());  Node  n  =  n.getFirstChild();  Preconditions.checkState(n.isTry());  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]            AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]      Preconditions.checkState(n.isTry());  Node  n  =  n.getFirstChild();  Preconditions.checkState(n.isTry());  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	        Preconditions.checkState(n.isTry());    Node  n  =  n.getFirstChild();  Preconditions.checkState(n.isTry());	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	20	None	add
105	[BUG]  [BUGGY]      Preconditions.checkState(n.isTry());  NodeUtil.checkState(n.isTry());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]      Preconditions.checkState(n.isTry());  NodeUtil.checkState(n.isTry());  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	        Preconditions.checkState(n.isTry());    NodeUtil.checkState(n.isTry());	  	non-compiled	[CE]  cannot  find  symbol	20	None	add
106	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(tryBlock,  n);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(tryBlock,  n);  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchHandler(tryBlock,  n);	  Node    allCatchNodes    =    NodeUtil.getCatchHandler(n);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
107	[BUG]  [BUGGY]  Preconditions.checkState(tryBlock.isTree());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]  Preconditions.checkState(tryBlock.isTree());  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(tryBlock.isTree());	      Preconditions.checkState(n.isTree());    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
108	[BUG]  [BUGGY]      Node  elseBlock  =  tryBlock.getLastChild();  node  elseBlock  =  tryBlock.getLastChild();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]      Node  elseBlock  =  tryBlock.getLastChild();  node  elseBlock  =  tryBlock.getLastChild();  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	        Node    elseBlock    =    tryBlock.getLastChild();    node  elseBlock  =  tryBlock.getLastChild();	  	non-compiled	[CE]  cannot  find  symbol	14	None	add
109	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(tryBlock,  exitType);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(tryBlock,  exitType);  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(tryBlock,  exitType);	  Node    allCatchNodes    =    NodeUtil.getAllCatchNodes(tryBlock);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
110	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(tryBlock,  n);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(tryBlock,  n);  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(tryBlock,  n);	  Node    allCatchNodes    =    NodeUtil.getAllCatchNodes(tryBlock);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
111	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(tryBlock,  falseBlock);  [CE]  cannot  find  symbol  falseBlock  [FE]              AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(tryBlock,  falseBlock);  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(tryBlock,  falseBlock);	  Node    allCatchNodes    =    NodeUtil.getAllCatchNodes(tryBlock);    	non-compiled	[CE]  cannot  find  symbol  falseBlock	3	None	replace
112	[BUG]  [BUGGY]      n.removeChild(tryBlock);  Node  n  =  n.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    RuntimeException    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]      n.removeChild(tryBlock);  Node  n  =  n.getFirstChild();  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	        n.removeChild(tryBlock);    Node  n  =  n.getFirstChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	23	None	add
113	[BUG]  [BUGGY]      n.removeChild(tryBlock);  node.removeChild(tryBlock);  [CE]  cannot  find  symbol  node  [FE]      RuntimeException    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]      n.removeChild(tryBlock);  node.removeChild(tryBlock);  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	        n.removeChild(tryBlock);    node.removeChild(tryBlock);	  	non-compiled	[CE]  cannot  find  symbol  node	23	None	add
114	[BUG]  [BUGGY]  n.addChildToFront(tryBlock);  [CE]  cannot  find  symbol  allCatchNodes  [FE]    RuntimeException    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]  n.addChildToFront(tryBlock);  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	n.addChildToFront(tryBlock);	      n.removeChild(tryBlock);    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	24	None	replace
115	[BUG]  [BUGGY]  n.replaceChild(n,  tryBlock);  [CE]  cannot  find  symbol  allCatchNodes  [FE]      RuntimeException    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]  n.replaceChild(n,  tryBlock);  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	n.replaceChild(n,  tryBlock);	      n.removeChild(tryBlock);    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	24	None	replace
116	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(triesBlock);  [CE]  cannot  find  symbol  triesBlock  [FE]                AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(triesBlock);  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchHandler(triesBlock);	  Node    allCatchNodes    =    NodeUtil.getCatchHandler(n);    	non-compiled	[CE]  cannot  find  symbol  triesBlock	6	None	replace
117	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock,  n,  falseBlock);  [CE]  cannot  find  symbol  falseBlock  [FE]        AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock,  n,  falseBlock);  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock,  n,  falseBlock);	  Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock,    n);    	non-compiled	[CE]  cannot  find  symbol  falseBlock	19	None	replace
118	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock,  n,  escapeType);  [CE]  cannot  find  symbol  escapeType  [FE]          AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock,  n,  escapeType);  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock,  n,  escapeType);	  Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock,    n);    	non-compiled	[CE]  cannot  find  symbol  escapeType	19	None	replace
119	[BUG]  [BUGGY]      Node  c  =  tryBlock.getNext();  Node  c  =  tryBlock.getNext();  Preconditions.checkState(!NodeUtil.hasCatchHandler(c));  [CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]      Node  c  =  tryBlock.getNext();  Node  c  =  tryBlock.getNext();  Preconditions.checkState(!NodeUtil.hasCatchHandler(c));  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	        Node    c    =    tryBlock.getNext();    Node  c  =  tryBlock.getNext();  Preconditions.checkState(!NodeUtil.hasCatchHandler(c));	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	17	None	add
120	[BUG]  [BUGGY]      Node  c  =  tryBlock.getNext();  AssertionFailedError  <  Node>  c  =  tryBlock.getNext();  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]      Node  c  =  tryBlock.getNext();  AssertionFailedError  <  Node>  c  =  tryBlock.getNext();  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	        Node    c    =    tryBlock.getNext();    AssertionFailedError  <  Node>  c  =  tryBlock.getNext();	  	non-compiled	[CE]  cannot  find  symbol	17	None	add
121	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchNodes(tryBlock,  exitType);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchNodes(tryBlock,  exitType);  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchNodes(tryBlock,  exitType);	  Node    allCatchNodes    =    NodeUtil.getCatchNodes(tryBlock);    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
122	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchNodes(tryBlock,  n);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchNodes(tryBlock,  n);  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchNodes(tryBlock,  n);	  Node    allCatchNodes    =    NodeUtil.getCatchNodes(tryBlock);    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
123	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                  AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]  Node  allCatchNodes  =  tryBlock.getLastChild();  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	add	Node  allCatchNodes  =  tryBlock.getLastChild();	      	compilable	  [FE]  RuntimeException  	7	6	replace
124	[BUG]  [BUGGY]  Node  allCatchNodes  =  tryBlock.getLastChild();  [FE]  RuntimeException  [FE]                  AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]  Node  allCatchNodes  =  tryBlock.getLastChild();  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  tryBlock.getLastChild();	      	compilable	  [FE]  RuntimeException  	7	6	replace
125	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]  Node  allCatchNodes  =  n.getFirstChild();  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	add	Node  allCatchNodes  =  n.getFirstChild();	      	compilable	  [FE]  AssertionFailedError  	7	6	replace
126	[BUG]  [BUGGY]  Node  allCatchNodes  =  n.getFirstChild();  [FE]  AssertionFailedError  [FE]                    AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]  Node  allCatchNodes  =  n.getFirstChild();  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  n.getFirstChild();	      	compilable	  [FE]  AssertionFailedError  	7	6	replace
127	[BUG]  [BUGGY]      Node  elseBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getfirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]      Node  elseBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getfirstChild();  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	        Node    elseBlock    =    n.getFirstChild();    Node  elseBlock  =  n.getfirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	12	None	add
128	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]      Node  elseBlock  =  n.getFirstChild();  Node  otherBlock  =  n.getFirstChild();  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	add	        Node    elseBlock    =    n.getFirstChild();    Node  otherBlock  =  n.getFirstChild();	  	compilable	  [FE]  AssertionFailedError  	12	2	add
129	[BUG]  [BUGGY]      Node  elseBlock  =  n.getFirstChild();  Node  otherBlock  =  n.getFirstChild();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]      Node  elseBlock  =  n.getFirstChild();  Node  otherBlock  =  n.getFirstChild();  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	        Node    elseBlock    =    n.getFirstChild();    Node  otherBlock  =  n.getFirstChild();	  	compilable	  [FE]  AssertionFailedError  	12	2	add
130	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]      Node  elseBlock  =  n.getFirstChild();  Node  thenBlock  =  n.getFirstChild();  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	add	        Node    elseBlock    =    n.getFirstChild();    Node  thenBlock  =  n.getFirstChild();	  	compilable	  [FE]  AssertionFailedError  	12	2	add
131	[BUG]  [BUGGY]      Node  elseBlock  =  n.getFirstChild();  Node  thenBlock  =  n.getFirstChild();  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]      Node  elseBlock  =  n.getFirstChild();  Node  thenBlock  =  n.getFirstChild();  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	        Node    elseBlock    =    n.getFirstChild();    Node  thenBlock  =  n.getFirstChild();	  	compilable	  [FE]  AssertionFailedError  	12	2	add
132	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isExitBlock(tryBlock,  exitType));  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]  Preconditions.checkState(NodeUtil.isExitBlock(tryBlock,  exitType));  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(NodeUtil.isExitBlock(tryBlock,  exitType));	      Preconditions.checkState(NodeUtil.isExitBlock(tryBlock));    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
133	[BUG]  [BUGGY]  Preconditions.checkArgument(n.isTree());  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]  Preconditions.checkArgument(n.isTree());  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkArgument(n.isTree());	      Preconditions.checkState(n.isTry());    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
134	[BUG]  [BUGGY]  Preconditions.checkArgument(tryBlock.isTry());  [CE]  cannot  find  symbol  allCatchNodes  [FE]      AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]  Preconditions.checkArgument(tryBlock.isTry());  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkArgument(tryBlock.isTry());	      Preconditions.checkState(n.isTry());    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	21	None	replace
135	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(tryBlock,  exitType);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(tryBlock,  exitType);  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchHandler(tryBlock,  exitType);	  Node    allCatchNodes    =    NodeUtil.getCatchHandler(tryBlock);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
136	[BUG]  [BUGGY]  Node  n  =  tryBlock.getNextChild();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]  Node  n  =  tryBlock.getNextChild();  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  n  =  tryBlock.getNextChild();	      Node    n    =    tryBlock.getNext();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	16	None	replace
137	[BUG]  [BUGGY]  Node  elseBlock  =  tryBlock.removeFirstChild();  [CE]  cannot  find  symbol  allCatchNodes  [FE]    AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]  Node  elseBlock  =  tryBlock.removeFirstChild();  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  tryBlock.removeFirstChild();	      Node    elseBlock    =    tryBlock.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	11	None	replace
138	[BUG]  [BUGGY]      Node  elseBlock  =  tryBlock.getNext();  node  elseBlock  =  tryBlock.getNext();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]      Node  elseBlock  =  tryBlock.getNext();  node  elseBlock  =  tryBlock.getNext();  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	        Node    elseBlock    =    tryBlock.getNext();    node  elseBlock  =  tryBlock.getNext();	  	non-compiled	[CE]  cannot  find  symbol	8	None	add
139	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]      Node  elseBlock  =  tryBlock.getNext();  Preconditions.checkState(tryBlock!=  null);  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	add	        Node    elseBlock    =    tryBlock.getNext();    Preconditions.checkState(tryBlock!=  null);	  	compilable	  [FE]  AssertionFailedError  	8	2	add
140	[BUG]  [BUGGY]      Node  elseBlock  =  tryBlock.getNext();  Preconditions.checkState(tryBlock!=  null);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]      Node  elseBlock  =  tryBlock.getNext();  Preconditions.checkState(tryBlock!=  null);  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	        Node    elseBlock    =    tryBlock.getNext();    Preconditions.checkState(tryBlock!=  null);	  	compilable	  [FE]  AssertionFailedError  	8	2	add
141	[BUG]  [BUGGY]  Node  elseBlock  =  tryBlock.next();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]  Node  elseBlock  =  tryBlock.next();  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  tryBlock.next();	      Node    elseBlock    =    tryBlock.getNext();    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
142	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock);  Preconditions.checkState(NodeUtil.hasCatchHandler(tryBlock));  [CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    RuntimeException    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock);  Preconditions.checkState(NodeUtil.hasCatchHandler(tryBlock));  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock);    Preconditions.checkState(NodeUtil.hasCatchHandler(tryBlock));	  	non-compiled	[CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	1	None	add
143	[BUG]  [BUGGY]  Node  c  =  tryBlock.getParent();  [CE]  cannot  find  symbol  allCatchNodes  [FE]    AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]  Node  c  =  tryBlock.getParent();  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  c  =  tryBlock.getParent();	      Node    c    =    tryBlock.getNext();    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	18	None	replace
144	[BUG]  [BUGGY]  Node  c  =  tryBlock.getCatchNodes();  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]  Node  c  =  tryBlock.getCatchNodes();  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  c  =  tryBlock.getCatchNodes();	      Node    c    =    tryBlock.getNext();    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
145	[BUG]  [BUGGY]      Preconditions.checkState(n.isTry());  Node  n  =  tryBlock.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]      Preconditions.checkState(n.isTry());  Node  n  =  tryBlock.getFirstChild();  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	        Preconditions.checkState(n.isTry());    Node  n  =  tryBlock.getFirstChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	20	None	add
146	[BUG]  [BUGGY]      Preconditions.checkState(n.isTry());  Node  n  =  tryBlock.getParent();  Preconditions.checkState(n.isTry());  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]      Preconditions.checkState(n.isTry());  Node  n  =  tryBlock.getParent();  Preconditions.checkState(n.isTry());  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	        Preconditions.checkState(n.isTry());    Node  n  =  tryBlock.getParent();  Preconditions.checkState(n.isTry());	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	20	None	add
147	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock,  exitType);  [CE]  method  getCatchBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]    RuntimeException    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock,  exitType);  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock,  exitType);	  Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock);    	non-compiled	[CE]  method  getCatchBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;	2	None	replace
148	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock,  falseBlock);  [CE]  cannot  find  symbol  falseBlock  [FE]      RuntimeException    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock,  falseBlock);  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock,  falseBlock);	  Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock);    	non-compiled	[CE]  cannot  find  symbol  falseBlock	2	None	replace
149	[BUG]  [BUGGY]      Node  elseBlock  =  tryBlock.getFirstChild();  node  elseBlock  =  tryBlock.getFirstChild();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]      Node  elseBlock  =  tryBlock.getFirstChild();  node  elseBlock  =  tryBlock.getFirstChild();  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	        Node    elseBlock    =    tryBlock.getFirstChild();    node  elseBlock  =  tryBlock.getFirstChild();	  	non-compiled	[CE]  cannot  find  symbol	10	None	add
150	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(exitType);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(exitType);  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(exitType);	  Node    allCatchNodes    =    NodeUtil.getAllCatchNodes();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
151	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(n,  exitType);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(n,  exitType);  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchHandler(n,  exitType);	  Node    allCatchNodes    =    NodeUtil.getCatchHandler(n);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
152	[BUG]  [BUGGY]      Node  elseBlock  =  n.getFirstChild();  Node  elseBlock  =  null.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]      Node  elseBlock  =  n.getFirstChild();  Node  elseBlock  =  null.getFirstChild();  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	        Node    elseBlock    =    n.getFirstChild();    Node  elseBlock  =  null.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	12	None	add
153	[BUG]  [BUGGY]      Node  elseBlock  =  n.getFirstChild();  Node  elseBlock  =  no.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]      Node  elseBlock  =  n.getFirstChild();  Node  elseBlock  =  no.getFirstChild();  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	        Node    elseBlock    =    n.getFirstChild();    Node  elseBlock  =  no.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	12	None	add
154	[BUG]  [BUGGY]      Node  c  =  tryBlock.getNext();  Node  c  =  attemptBlock.getNext();  [CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]      Node  c  =  tryBlock.getNext();  Node  c  =  attemptBlock.getNext();  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	        Node    c    =    tryBlock.getNext();    Node  c  =  attemptBlock.getNext();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	17	None	add
155	[BUG]  [BUGGY]      Node  c  =  tryBlock.getNext();  node  c  =  tryBlock.getNext();  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]      Node  c  =  tryBlock.getNext();  node  c  =  tryBlock.getNext();  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	        Node    c    =    tryBlock.getNext();    node  c  =  tryBlock.getNext();	  	non-compiled	[CE]  cannot  find  symbol	17	None	add
156	[BUG]  [BUGGY]      Node  c  =  tryBlock.getNext();  Node  c  =  tryBlock.getNext());  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]      Node  c  =  tryBlock.getNext();  Node  c  =  tryBlock.getNext());  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	        Node    c    =    tryBlock.getNext();    Node  c  =  tryBlock.getNext());	  	non-compiled	[CE]  ';'  expected	17	None	add
157	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]      Node  c  =  tryBlock.getNext();  c  =  tryBlock.getNext();  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	add	        Node    c    =    tryBlock.getNext();    c  =  tryBlock.getNext();	  	compilable	  [FE]  AssertionFailedError  	17	2	add
158	[BUG]  [BUGGY]      Node  c  =  tryBlock.getNext();  c  =  tryBlock.getNext();  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]      Node  c  =  tryBlock.getNext();  c  =  tryBlock.getNext();  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	        Node    c    =    tryBlock.getNext();    c  =  tryBlock.getNext();	  	compilable	  [FE]  AssertionFailedError  	17	2	add
159	[BUG]  [BUGGY]  Node  elseBlock  =  tryBlock.cloneTree();  [CE]  cannot  find  symbol  allCatchNodes  [FE]    AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]  Node  elseBlock  =  tryBlock.cloneTree();  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  tryBlock.cloneTree();	      Node    elseBlock    =    tryBlock.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	15	None	replace
160	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(labelName);  [CE]  method  getCatchBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]    RuntimeException    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(labelName);  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(labelName);	  Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock);    	non-compiled	[CE]  method  getCatchBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;	2	None	replace
161	[BUG]  [BUGGY]      Node  elseBlock  =  tryBlock.getLastChild();  Node  elseBlock  =  triedBlock.getLastChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]      Node  elseBlock  =  tryBlock.getLastChild();  Node  elseBlock  =  triedBlock.getLastChild();  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	        Node    elseBlock    =    tryBlock.getLastChild();    Node  elseBlock  =  triedBlock.getLastChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	14	None	add
162	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchNodes(exitType,  tryBlock);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchNodes(exitType,  tryBlock);  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchNodes(exitType,  tryBlock);	  Node    allCatchNodes    =    NodeUtil.getCatchNodes(tryBlock);    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
163	[BUG]  [BUGGY]      Node  elseBlock  =  tryBlock.getNext();  Node  elseBlock  =  attemptBlock.getNext();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]      Node  elseBlock  =  tryBlock.getNext();  Node  elseBlock  =  attemptBlock.getNext();  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	        Node    elseBlock    =    tryBlock.getNext();    Node  elseBlock  =  attemptBlock.getNext();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	8	None	add
164	[BUG]  [BUGGY]      Node  elseBlock  =  tryBlock.getNext();  Node  elseBlock  =  triedBlock.getNext();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]      Node  elseBlock  =  tryBlock.getNext();  Node  elseBlock  =  triedBlock.getNext();  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	        Node    elseBlock    =    tryBlock.getNext();    Node  elseBlock  =  triedBlock.getNext();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	8	None	add
165	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock).getLastChild();  [CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    RuntimeException    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock).getLastChild();  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock);    Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock).getLastChild();	  	non-compiled	[CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	1	None	add
166	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock).getFirstChild();  [CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      RuntimeException    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock).getFirstChild();  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock);    Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock).getFirstChild();	  	non-compiled	[CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	1	None	add
167	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isExitBlock(n,  tryBlock));  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]  Preconditions.checkState(NodeUtil.isExitBlock(n,  tryBlock));  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(NodeUtil.isExitBlock(n,  tryBlock));	      Preconditions.checkState(NodeUtil.isExitBlock(tryBlock));    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
168	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isExitBlock(n),  tryBlock);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]  Preconditions.checkState(NodeUtil.isExitBlock(n),  tryBlock);  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(NodeUtil.isExitBlock(n),  tryBlock);	      Preconditions.checkState(NodeUtil.isExitBlock(tryBlock));    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
169	[BUG]  [BUGGY]      Node  elseBlock  =  tryBlock.getFirstChild();  Node  elseBlock  =  triedBlock.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]      Node  elseBlock  =  tryBlock.getFirstChild();  Node  elseBlock  =  triedBlock.getFirstChild();  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	        Node    elseBlock    =    tryBlock.getFirstChild();    Node  elseBlock  =  triedBlock.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	10	None	add
170	[BUG]  [BUGGY]  Preconditions.checkState(n.isTree()  ||  n.isTree());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]  Preconditions.checkState(n.isTree()  ||  n.isTree());  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(n.isTree()  ||  n.isTree());	      Preconditions.checkState(n.isTree());    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
171	[BUG]  [BUGGY]  Preconditions.checkState(n.isTree(),  tryBlock);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]  Preconditions.checkState(n.isTree(),  tryBlock);  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(n.isTree(),  tryBlock);	      Preconditions.checkState(n.isTree());    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
172	[BUG]  [BUGGY]  n.removeChild(testBlock());  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]  n.removeChild(testBlock());  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	n.removeChild(testBlock());	      n.removeChild(tryBlock);    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
173	[BUG]  [BUGGY]  n.removeChild(t);  [CE]  cannot  find  symbol  t  [FE]      RuntimeException    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]  n.removeChild(t);  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	n.removeChild(t);	      n.removeChild(tryBlock);    	non-compiled	[CE]  cannot  find  symbol  t	24	None	replace
174	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(labelName,  tryBlock,  n);  [CE]  method  getCatchBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(labelName,  tryBlock,  n);  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(labelName,  tryBlock,  n);	  Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock,    n);    	non-compiled	[CE]  method  getCatchBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;	19	None	replace
175	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(labelName,  tryBlock);  [CE]  method  getCatchBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(labelName,  tryBlock);  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(labelName,  tryBlock);	  Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock,    n);    	non-compiled	[CE]  method  getCatchBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;	19	None	replace
176	[BUG]  [BUGGY]  Preconditions.checkState(n.hasOneChild());  [CE]  cannot  find  symbol  allCatchNodes  [FE]    AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]  Preconditions.checkState(n.hasOneChild());  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(n.hasOneChild());	      Preconditions.checkState(n.isTry());    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	21	None	replace
177	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(exitType,  tryBlock);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(exitType,  tryBlock);  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(exitType,  tryBlock);	  Node    allCatchNodes    =    NodeUtil.getAllCatchNodes(tryBlock);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
178	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]  Node  allCatchNodes  =  n.getLastChild();  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	add	Node  allCatchNodes  =  n.getLastChild();	      	compilable	  [FE]  AssertionFailedError  	7	2	replace
179	[BUG]  [BUGGY]  Node  allCatchNodes  =  n.getLastChild();  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]  Node  allCatchNodes  =  n.getLastChild();  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  n.getLastChild();	      	compilable	  [FE]  AssertionFailedError  	7	2	replace
180	[BUG]  [BUGGY]  Node  n  =  tryBlock.removeFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]  Node  n  =  tryBlock.removeFirstChild();  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  n  =  tryBlock.removeFirstChild();	      Node    n    =    tryBlock.getNext();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	16	None	replace
181	[BUG]  [BUGGY]  Node  c  =  tryBlock.removeFirstChild();  [CE]  cannot  find  symbol  allCatchNodes  [FE]    AssertionFailedError    [CONTEXT]    if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);    [BUGGY]  Node  c  =  tryBlock.removeFirstChild();  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  c  =  tryBlock.removeFirstChild();	      Node    c    =    tryBlock.getNext();    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	18	None	replace
