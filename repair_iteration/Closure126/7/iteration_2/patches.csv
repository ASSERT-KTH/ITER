bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(n,  tryBlock,  labelName);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(n,  tryBlock,  labelName);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchHandler(n,  tryBlock,  labelName);	  Node    allCatchNodes    =    NodeUtil.getCatchHandler(n,    tryBlock);    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
2	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(n,  tryBlock,  exitType);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(n,  tryBlock,  exitType);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchHandler(n,  tryBlock,  exitType);	  Node    allCatchNodes    =    NodeUtil.getCatchHandler(n,    tryBlock);    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
3	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(labelName,  tryBlock);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(labelName,  tryBlock);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchHandler(labelName,  tryBlock);	  Node    allCatchNodes    =    NodeUtil.getCatchHandler(n,    tryBlock);    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
4	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(testNode,  tryBlock);  [CE]  cannot  find  symbol  testNode  [FE]                          AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(testNode,  tryBlock);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchHandler(testNode,  tryBlock);	  Node    allCatchNodes    =    NodeUtil.getCatchHandler(n,    tryBlock);    	non-compiled	[CE]  cannot  find  symbol  testNode	85	None	replace
5	[BUG]  [BUGGY]  Node  elseBlock  =  tryBlock.cloneTree(),  exitType);  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  tryBlock.cloneTree(),  exitType);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  tryBlock.cloneTree(),  exitType);	  Node    elseBlock    =    tryBlock.cloneTree();    	non-compiled	[CE]  ';'  expected	159	None	replace
6	[BUG]  [BUGGY]  Node  elseBlock  =  tryBlock.cloneTree(),  falseBlock);  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  tryBlock.cloneTree(),  falseBlock);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  tryBlock.cloneTree(),  falseBlock);	  Node    elseBlock    =    tryBlock.cloneTree();    	non-compiled	[CE]  ';'  expected	159	None	replace
7	[BUG]  [BUGGY]  Node  n  =  n.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  n  =  n.getFirstChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  n  =  n.getFirstChild();	          n.removeChild(tryBlock);    Node    n    =    n.getFirstChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	112	None	replace
8	[BUG]  [BUGGY]          Node    c    =    tryBlock.getNext();    c  =  tryBlock.getNext();  Node  c  =  tryBlock.getNext();  c  =  tryBlock.getNext();  [CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Node    c    =    tryBlock.getNext();    c  =  tryBlock.getNext();  Node  c  =  tryBlock.getNext();  c  =  tryBlock.getNext();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Node        c        =        tryBlock.getNext();        c    =    tryBlock.getNext();    Node  c  =  tryBlock.getNext();  c  =  tryBlock.getNext();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	157	None	add
9	[BUG]  [BUGGY]          Node    c    =    tryBlock.getNext();    c  =  tryBlock.getNext();  Node  c  =  tryBlock.getNext();  c  =  TryBlock.getNext();  [CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Node    c    =    tryBlock.getNext();    c  =  tryBlock.getNext();  Node  c  =  tryBlock.getNext();  c  =  TryBlock.getNext();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Node        c        =        tryBlock.getNext();        c    =    tryBlock.getNext();    Node  c  =  tryBlock.getNext();  c  =  TryBlock.getNext();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	157	None	add
10	[BUG]  [BUGGY]          Node    c    =    tryBlock.getNext();    c  =  tryBlock.getNext();  Node  c  =  attemptBlock.getNext();  c  =  tryBlock.getNext();  [CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Node    c    =    tryBlock.getNext();    c  =  tryBlock.getNext();  Node  c  =  attemptBlock.getNext();  c  =  tryBlock.getNext();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Node        c        =        tryBlock.getNext();        c    =    tryBlock.getNext();    Node  c  =  attemptBlock.getNext();  c  =  tryBlock.getNext();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	157	None	add
11	[BUG]  [BUGGY]          Node    c    =    tryBlock.getNext();    c  =  tryBlock.getNext();  Node  c  =  triedBlock.getNext();  c  =  tryBlock.getNext();  [CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Node    c    =    tryBlock.getNext();    c  =  tryBlock.getNext();  Node  c  =  triedBlock.getNext();  c  =  tryBlock.getNext();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Node        c        =        tryBlock.getNext();        c    =    tryBlock.getNext();    Node  c  =  triedBlock.getNext();  c  =  tryBlock.getNext();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	157	None	add
12	[BUG]  [BUGGY]          Node    c    =    tryBlock.getNext();    c  =  tryBlock.getNext();  Node  c  =  tryBlock.getNext();  c  =  startBlock.getNext();  [CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]            AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Node    c    =    tryBlock.getNext();    c  =  tryBlock.getNext();  Node  c  =  tryBlock.getNext();  c  =  startBlock.getNext();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Node        c        =        tryBlock.getNext();        c    =    tryBlock.getNext();    Node  c  =  tryBlock.getNext();  c  =  startBlock.getNext();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	157	None	add
13	[BUG]  [BUGGY]  n.removeChild(labelName.cloneTree());  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  n.removeChild(labelName.cloneTree());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	n.removeChild(labelName.cloneTree());	  n.removeChild(tryBlock.cloneTree());    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
14	[BUG]  [BUGGY]  n.removeChild(falseBlock.cloneTree());  [CE]  cannot  find  symbol  falseBlock  [FE]            RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  n.removeChild(falseBlock.cloneTree());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	n.removeChild(falseBlock.cloneTree());	  n.removeChild(tryBlock.cloneTree());    	non-compiled	[CE]  cannot  find  symbol  falseBlock	2	None	replace
15	[BUG]  [BUGGY]  n.removeChild(testBlock.cloneTree());  [CE]  cannot  find  symbol  testBlock  [FE]              RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  n.removeChild(testBlock.cloneTree());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	n.removeChild(testBlock.cloneTree());	  n.removeChild(tryBlock.cloneTree());    	non-compiled	[CE]  cannot  find  symbol  testBlock	2	None	replace
16	[BUG]  [BUGGY]  n.removeChild(tryBlock.cloneTree(),  labelName);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  n.removeChild(tryBlock.cloneTree(),  labelName);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	n.removeChild(tryBlock.cloneTree(),  labelName);	  n.removeChild(tryBlock.cloneTree());    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	2	None	replace
17	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(n,  exitType,  labelName);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(n,  exitType,  labelName);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchHandler(n,  exitType,  labelName);	  Node    allCatchNodes    =    NodeUtil.getCatchHandler(n,    exitType);    	non-compiled	[CE]  cannot  find  symbol	151	None	replace
18	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(labelName,  exitType);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(labelName,  exitType);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchHandler(labelName,  exitType);	  Node    allCatchNodes    =    NodeUtil.getCatchHandler(n,    exitType);    	non-compiled	[CE]  cannot  find  symbol	151	None	replace
19	[BUG]  [BUGGY]  n.replaceChild(tryBlock,  n);  [CE]  cannot  find  symbol  allCatchNodes  [FE]          RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  n.replaceChild(tryBlock,  n);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	n.replaceChild(tryBlock,  n);	  n.replaceChild(n,    tryBlock);    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	115	None	replace
20	[BUG]  [BUGGY]  n.replaceChild(n,  tryBlock,  falseBlock);  [CE]  cannot  find  symbol  falseBlock  [FE]            RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  n.replaceChild(n,  tryBlock,  falseBlock);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	n.replaceChild(n,  tryBlock,  falseBlock);	  n.replaceChild(n,    tryBlock);    	non-compiled	[CE]  cannot  find  symbol  falseBlock	115	None	replace
21	[BUG]  [BUGGY]  n.replaceChild(testNode,  tryBlock);  [CE]  cannot  find  symbol  testNode  [FE]              RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  n.replaceChild(testNode,  tryBlock);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	n.replaceChild(testNode,  tryBlock);	  n.replaceChild(n,    tryBlock);    	non-compiled	[CE]  cannot  find  symbol  testNode	115	None	replace
22	[BUG]  [BUGGY]  n.replaceChild(n,  tryBlock,  labelName);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  n.replaceChild(n,  tryBlock,  labelName);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	n.replaceChild(n,  tryBlock,  labelName);	  n.replaceChild(n,    tryBlock);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	115	None	replace
23	[BUG]  [BUGGY]          Node    elseBlock    =    tryBlock.getFirstChild();    Node  thenBlock  =  tryBlock.getFirstChild();  Node  elseBlock  =  tryBlock.getFirstChild();  Node  thenBlock  =  tryBlock.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Node    elseBlock    =    tryBlock.getFirstChild();    Node  thenBlock  =  tryBlock.getFirstChild();  Node  elseBlock  =  tryBlock.getFirstChild();  Node  thenBlock  =  tryBlock.getFirstChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Node        elseBlock        =        tryBlock.getFirstChild();        Node    thenBlock    =    tryBlock.getFirstChild();    Node  elseBlock  =  tryBlock.getFirstChild();  Node  thenBlock  =  tryBlock.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	9	None	add
24	[BUG]  [BUGGY]          Node    elseBlock    =    tryBlock.getFirstChild();    Node  thenBlock  =  tryBlock.getFirstChild();  Node  elseBlock  =  tryBlock.getFirstChild();  Node  finallyBlock  =  tryBlock.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Node    elseBlock    =    tryBlock.getFirstChild();    Node  thenBlock  =  tryBlock.getFirstChild();  Node  elseBlock  =  tryBlock.getFirstChild();  Node  finallyBlock  =  tryBlock.getFirstChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Node        elseBlock        =        tryBlock.getFirstChild();        Node    thenBlock    =    tryBlock.getFirstChild();    Node  elseBlock  =  tryBlock.getFirstChild();  Node  finallyBlock  =  tryBlock.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	9	None	add
25	[BUG]  [BUGGY]          Node    elseBlock    =    tryBlock.getFirstChild();    Node  thenBlock  =  tryBlock.getFirstChild();  Node  elseBlock  =  tryBlock.getFirstChild();  Node  thenBlock  =  tryBlock.getLastChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Node    elseBlock    =    tryBlock.getFirstChild();    Node  thenBlock  =  tryBlock.getFirstChild();  Node  elseBlock  =  tryBlock.getFirstChild();  Node  thenBlock  =  tryBlock.getLastChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Node        elseBlock        =        tryBlock.getFirstChild();        Node    thenBlock    =    tryBlock.getFirstChild();    Node  elseBlock  =  tryBlock.getFirstChild();  Node  thenBlock  =  tryBlock.getLastChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	9	None	add
26	[BUG]  [BUGGY]          Node    elseBlock    =    tryBlock.getFirstChild();    Node  thenBlock  =  tryBlock.getFirstChild();  Node  elseBlock  =  tryBlock.getLastChild();  Node  thenBlock  =  tryBlock.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Node    elseBlock    =    tryBlock.getFirstChild();    Node  thenBlock  =  tryBlock.getFirstChild();  Node  elseBlock  =  tryBlock.getLastChild();  Node  thenBlock  =  tryBlock.getFirstChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Node        elseBlock        =        tryBlock.getFirstChild();        Node    thenBlock    =    tryBlock.getFirstChild();    Node  elseBlock  =  tryBlock.getLastChild();  Node  thenBlock  =  tryBlock.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	9	None	add
27	[BUG]  [BUGGY]          Node    elseBlock    =    tryBlock.getFirstChild();    Node  thenBlock  =  tryBlock.getFirstChild();  Node  elseBlock  =  tryBlock.getFirstChild();  Node  alsoBlock  =  tryBlock.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]            AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Node    elseBlock    =    tryBlock.getFirstChild();    Node  thenBlock  =  tryBlock.getFirstChild();  Node  elseBlock  =  tryBlock.getFirstChild();  Node  alsoBlock  =  tryBlock.getFirstChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Node        elseBlock        =        tryBlock.getFirstChild();        Node    thenBlock    =    tryBlock.getFirstChild();    Node  elseBlock  =  tryBlock.getFirstChild();  Node  alsoBlock  =  tryBlock.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	9	None	add
28	[BUG]  [BUGGY]          Node    elseBlock    =    tryBlock.getFirstChild();    Node  thenBlock  =  tryBlock.getFirstChild();  Node  elseBlock  =  tryBlock.getFirstChild();  Node  nextBlock  =  tryBlock.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]              AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Node    elseBlock    =    tryBlock.getFirstChild();    Node  thenBlock  =  tryBlock.getFirstChild();  Node  elseBlock  =  tryBlock.getFirstChild();  Node  nextBlock  =  tryBlock.getFirstChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Node        elseBlock        =        tryBlock.getFirstChild();        Node    thenBlock    =    tryBlock.getFirstChild();    Node  elseBlock  =  tryBlock.getFirstChild();  Node  nextBlock  =  tryBlock.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	9	None	add
29	[BUG]  [BUGGY]  Node  c  =  tryBlock.getNext();  node  c  =  c.getNext();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  c  =  tryBlock.getNext();  node  c  =  c.getNext();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  c  =  tryBlock.getNext();  node  c  =  c.getNext();	          Node    c    =    tryBlock.getNext();    node    c    =    tryBlock.getNext();    	non-compiled	[CE]  cannot  find  symbol	155	None	replace
30	[BUG]  [BUGGY]  Node  c  =  tryBlock.getNext();  node  c  =  n.getNext();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  c  =  tryBlock.getNext();  node  c  =  n.getNext();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  c  =  tryBlock.getNext();  node  c  =  n.getNext();	          Node    c    =    tryBlock.getNext();    node    c    =    tryBlock.getNext();    	non-compiled	[CE]  cannot  find  symbol	155	None	replace
31	[BUG]  [BUGGY]  Node  c  =  tryBlock!=  null?  null  :  tryBlock.getNext();  node  c  =  tryBlock.getNext();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  c  =  tryBlock!=  null?  null  :  tryBlock.getNext();  node  c  =  tryBlock.getNext();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  c  =  tryBlock!=  null?  null  :  tryBlock.getNext();  node  c  =  tryBlock.getNext();	          Node    c    =    tryBlock.getNext();    node    c    =    tryBlock.getNext();    	non-compiled	[CE]  cannot  find  symbol	155	None	replace
32	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isExitBlock(n),  exitType);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(NodeUtil.isExitBlock(n),  exitType);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(NodeUtil.isExitBlock(n),  exitType);	  Preconditions.checkState(NodeUtil.isExitBlock(tryBlock),    exitType);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
33	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isExitBlock(tryBlock),  exitType,  labelName);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(NodeUtil.isExitBlock(tryBlock),  exitType,  labelName);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(NodeUtil.isExitBlock(tryBlock),  exitType,  labelName);	  Preconditions.checkState(NodeUtil.isExitBlock(tryBlock),    exitType);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
34	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isExitBlock(tryBlock),  labelName);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(NodeUtil.isExitBlock(tryBlock),  labelName);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(NodeUtil.isExitBlock(tryBlock),  labelName);	  Preconditions.checkState(NodeUtil.isExitBlock(tryBlock),    exitType);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
35	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isExitBlock(n,  tryBlock),  exitType);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(NodeUtil.isExitBlock(n,  tryBlock),  exitType);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(NodeUtil.isExitBlock(n,  tryBlock),  exitType);	  Preconditions.checkState(NodeUtil.isExitBlock(tryBlock),    exitType);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
36	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isExitBlock(tryBlock),  labelName,  exitType);  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(NodeUtil.isExitBlock(tryBlock),  labelName,  exitType);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(NodeUtil.isExitBlock(tryBlock),  labelName,  exitType);	  Preconditions.checkState(NodeUtil.isExitBlock(tryBlock),    exitType);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
37	[BUG]  [BUGGY]  Node  n  =  tryBlock.getLastChild();  Preconditions.checkState(n.isTry());  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  n  =  tryBlock.getLastChild();  Preconditions.checkState(n.isTry());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  n  =  tryBlock.getLastChild();  Preconditions.checkState(n.isTry());	          Preconditions.checkState(n.isTry());    Node    n    =    tryBlock.getLastChild();    Preconditions.checkState(n.isTry());    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	103	None	replace
38	[BUG]  [BUGGY]  Node  n  =  tryBlock.getFirstChild();  Preconditions.checkState(n.isTry());  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  n  =  tryBlock.getFirstChild();  Preconditions.checkState(n.isTry());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  n  =  tryBlock.getFirstChild();  Preconditions.checkState(n.isTry());	          Preconditions.checkState(n.isTry());    Node    n    =    tryBlock.getLastChild();    Preconditions.checkState(n.isTry());    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	103	None	replace
39	[BUG]  [BUGGY]          Node    elseBlock    =    tryBlock.getLastChild();    Node  otherBlock  =  tryBlock.getLastChild();  Node  elseBlock  =  tryBlock.getLastChild();  Node  otherBlock  =  tryBlock.getLastChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Node    elseBlock    =    tryBlock.getLastChild();    Node  otherBlock  =  tryBlock.getLastChild();  Node  elseBlock  =  tryBlock.getLastChild();  Node  otherBlock  =  tryBlock.getLastChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Node        elseBlock        =        tryBlock.getLastChild();        Node    otherBlock    =    tryBlock.getLastChild();    Node  elseBlock  =  tryBlock.getLastChild();  Node  otherBlock  =  tryBlock.getLastChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	27	None	add
40	[BUG]  [BUGGY]          Node    elseBlock    =    tryBlock.getLastChild();    Node  otherBlock  =  tryBlock.getLastChild();  Node  elseBlock  =  tryBlock.getLastChild();  Node  elseBlock  =  tryBlock.getLastChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Node    elseBlock    =    tryBlock.getLastChild();    Node  otherBlock  =  tryBlock.getLastChild();  Node  elseBlock  =  tryBlock.getLastChild();  Node  elseBlock  =  tryBlock.getLastChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Node        elseBlock        =        tryBlock.getLastChild();        Node    otherBlock    =    tryBlock.getLastChild();    Node  elseBlock  =  tryBlock.getLastChild();  Node  elseBlock  =  tryBlock.getLastChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	27	None	add
41	[BUG]  [BUGGY]          Node    elseBlock    =    tryBlock.getLastChild();    Node  otherBlock  =  tryBlock.getLastChild();  Node  elseBlock  =  tryBlock.getLastChild();  Node  anotherBlock  =  tryBlock.getLastChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Node    elseBlock    =    tryBlock.getLastChild();    Node  otherBlock  =  tryBlock.getLastChild();  Node  elseBlock  =  tryBlock.getLastChild();  Node  anotherBlock  =  tryBlock.getLastChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Node        elseBlock        =        tryBlock.getLastChild();        Node    otherBlock    =    tryBlock.getLastChild();    Node  elseBlock  =  tryBlock.getLastChild();  Node  anotherBlock  =  tryBlock.getLastChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	27	None	add
42	[BUG]  [BUGGY]          Node    elseBlock    =    tryBlock.getLastChild();    Node  otherBlock  =  tryBlock.getLastChild();  Node  elseBlock  =  tryBlock.getLastChild();  Node  othersBlock  =  tryBlock.getLastChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Node    elseBlock    =    tryBlock.getLastChild();    Node  otherBlock  =  tryBlock.getLastChild();  Node  elseBlock  =  tryBlock.getLastChild();  Node  othersBlock  =  tryBlock.getLastChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Node        elseBlock        =        tryBlock.getLastChild();        Node    otherBlock    =    tryBlock.getLastChild();    Node  elseBlock  =  tryBlock.getLastChild();  Node  othersBlock  =  tryBlock.getLastChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	27	None	add
43	[BUG]  [BUGGY]          Node    elseBlock    =    tryBlock.getLastChild();    Node  otherBlock  =  tryBlock.getLastChild();  Node  elseBlock  =  tryBlock.getLastChild();  Node  typeBlock  =  typeBlock.getLastChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]            AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Node    elseBlock    =    tryBlock.getLastChild();    Node  otherBlock  =  tryBlock.getLastChild();  Node  elseBlock  =  tryBlock.getLastChild();  Node  typeBlock  =  typeBlock.getLastChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Node        elseBlock        =        tryBlock.getLastChild();        Node    otherBlock    =    tryBlock.getLastChild();    Node  elseBlock  =  tryBlock.getLastChild();  Node  typeBlock  =  typeBlock.getLastChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	27	None	add
44	[BUG]  [BUGGY]          Node    elseBlock    =    tryBlock.getLastChild();    Node  otherBlock  =  tryBlock.getLastChild();  Node  elseBlock  =  tryBlock.getLastChild();  Node  alsoBlock  =  tryBlock.getLastChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]              AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Node    elseBlock    =    tryBlock.getLastChild();    Node  otherBlock  =  tryBlock.getLastChild();  Node  elseBlock  =  tryBlock.getLastChild();  Node  alsoBlock  =  tryBlock.getLastChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Node        elseBlock        =        tryBlock.getLastChild();        Node    otherBlock    =    tryBlock.getLastChild();    Node  elseBlock  =  tryBlock.getLastChild();  Node  alsoBlock  =  tryBlock.getLastChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	27	None	add
45	[BUG]  [BUGGY]  Node  elseBlock  =  tryBlock.getFirstChild();  Node  thenBlock  =  n.getFirstChild();  [CE]  cannot  find  symbol  allCatchNodes  [FE]    AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  tryBlock.getFirstChild();  Node  thenBlock  =  n.getFirstChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  tryBlock.getFirstChild();  Node  thenBlock  =  n.getFirstChild();	          Node    elseBlock    =    n.getFirstChild();    Node    thenBlock    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	131	None	replace
46	[BUG]  [BUGGY]  Node  elseBlock  =  n.getLastChild();  Node  thenBlock  =  n.getFirstChild();  [CE]  cannot  find  symbol  allCatchNodes  [FE]      AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  n.getLastChild();  Node  thenBlock  =  n.getFirstChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  n.getLastChild();  Node  thenBlock  =  n.getFirstChild();	          Node    elseBlock    =    n.getFirstChild();    Node    thenBlock    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	131	None	replace
47	[BUG]  [BUGGY]  Node  elseBlock  =  n.getFirstChild();  Node  thenBlock  =  n.getLastChild();  [CE]  cannot  find  symbol  allCatchNodes  [FE]        AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  n.getFirstChild();  Node  thenBlock  =  n.getLastChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  n.getFirstChild();  Node  thenBlock  =  n.getLastChild();	          Node    elseBlock    =    n.getFirstChild();    Node    thenBlock    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	131	None	replace
48	[BUG]  [BUGGY]  Node  elseBlock  =  tryBlock.getLastChild();  Node  thenBlock  =  n.getFirstChild();  [CE]  cannot  find  symbol  allCatchNodes  [FE]          AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  tryBlock.getLastChild();  Node  thenBlock  =  n.getFirstChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  tryBlock.getLastChild();  Node  thenBlock  =  n.getFirstChild();	          Node    elseBlock    =    n.getFirstChild();    Node    thenBlock    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	131	None	replace
49	[BUG]  [BUGGY]  NodeUtil.removeChild(n,  tryBlock);  [CE]  cannot  find  symbol  allCatchNodes  [FE]              RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  NodeUtil.removeChild(n,  tryBlock);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	NodeUtil.removeChild(n,  tryBlock);	          n.removeChild(tryBlock);    NodeUtil.removeChild(tryBlock);    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	95	None	replace
50	[BUG]  [BUGGY]  NodeUtil.removeChild(n);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]                RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  NodeUtil.removeChild(n);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	NodeUtil.removeChild(n);	          n.removeChild(tryBlock);    NodeUtil.removeChild(tryBlock);    	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	95	None	replace
51	[BUG]  [BUGGY]  node.removeChild(tryBlock);  NodeUtil.removeChild(tryBlock,  labelName);  [CE]  cannot  find  symbol  node  [FE]                  RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  node.removeChild(tryBlock);  NodeUtil.removeChild(tryBlock,  labelName);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	node.removeChild(tryBlock);  NodeUtil.removeChild(tryBlock,  labelName);	          n.removeChild(tryBlock);    NodeUtil.removeChild(tryBlock);    	non-compiled	[CE]  cannot  find  symbol  node	95	None	replace
52	[BUG]  [BUGGY]  node.removeChild(tryBlock);  NodeUtil.removeChild(n,  tryBlock);  [CE]  cannot  find  symbol  node  [FE]                    RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  node.removeChild(tryBlock);  NodeUtil.removeChild(n,  tryBlock);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	node.removeChild(tryBlock);  NodeUtil.removeChild(n,  tryBlock);	          n.removeChild(tryBlock);    NodeUtil.removeChild(tryBlock);    	non-compiled	[CE]  cannot  find  symbol  node	95	None	replace
53	[BUG]  [BUGGY]  NodeUtil.removeChild(tryBlock,  n);  [CE]  cannot  find  symbol  allCatchNodes  [FE]                      RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  NodeUtil.removeChild(tryBlock,  n);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	NodeUtil.removeChild(tryBlock,  n);	          n.removeChild(tryBlock);    NodeUtil.removeChild(tryBlock);    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	95	None	replace
54	[BUG]  [BUGGY]  Node  n  =  tryBlock.getPreviousChild();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                      AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  n  =  tryBlock.getPreviousChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  n  =  tryBlock.getPreviousChild();	  Node    n    =    tryBlock.getFirstChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	88	None	replace
55	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isExitBlock(tryBlock,  n,  labelName));  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(NodeUtil.isExitBlock(tryBlock,  n,  labelName));  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(NodeUtil.isExitBlock(tryBlock,  n,  labelName));	  Preconditions.checkState(NodeUtil.isExitBlock(tryBlock,    n));    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
56	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isExitBlock(tryBlock,  n),  exitType);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(NodeUtil.isExitBlock(tryBlock,  n),  exitType);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(NodeUtil.isExitBlock(tryBlock,  n),  exitType);	  Preconditions.checkState(NodeUtil.isExitBlock(tryBlock,    n));    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
57	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isExitBlock(tryBlock,  n),  labelName);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(NodeUtil.isExitBlock(tryBlock,  n),  labelName);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(NodeUtil.isExitBlock(tryBlock,  n),  labelName);	  Preconditions.checkState(NodeUtil.isExitBlock(tryBlock,    n));    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
58	[BUG]  [BUGGY]  Node  elseBlock  =  tryBlock.getParent();  Node  otherBlock  =  tryBlock.getNext();  [CE]  cannot  find  symbol  allCatchNodes  [FE]    AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  tryBlock.getParent();  Node  otherBlock  =  tryBlock.getNext();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  tryBlock.getParent();  Node  otherBlock  =  tryBlock.getNext();	          Node    elseBlock    =    tryBlock.getNext();    Node    otherBlock    =    tryBlock.getNext();    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	41	None	replace
59	[BUG]  [BUGGY]  Node  elseBlock  =  tryBlock.getFirstChild();  Node  otherBlock  =  tryBlock.getNext();  [CE]  cannot  find  symbol  allCatchNodes  [FE]      AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  tryBlock.getFirstChild();  Node  otherBlock  =  tryBlock.getNext();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  tryBlock.getFirstChild();  Node  otherBlock  =  tryBlock.getNext();	          Node    elseBlock    =    tryBlock.getNext();    Node    otherBlock    =    tryBlock.getNext();    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	41	None	replace
60	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchNodes(tryBlock,  n,  labelName);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchNodes(tryBlock,  n,  labelName);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchNodes(tryBlock,  n,  labelName);	  Node    allCatchNodes    =    NodeUtil.getCatchNodes(tryBlock,    n);    	non-compiled	[CE]  cannot  find  symbol	122	None	replace
61	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchNodes(tryBlock,  n,  falseBlock);  [CE]  cannot  find  symbol  falseBlock  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchNodes(tryBlock,  n,  falseBlock);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchNodes(tryBlock,  n,  falseBlock);	  Node    allCatchNodes    =    NodeUtil.getCatchNodes(tryBlock,    n);    	non-compiled	[CE]  cannot  find  symbol  falseBlock	122	None	replace
62	[BUG]  [BUGGY]  Node  elseBlock  =  tryBlock.getPrevious();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  tryBlock.getPrevious();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  tryBlock.getPrevious();	  Node    elseBlock    =    tryBlock.getParent();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
63	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(n,  exitType);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(n,  exitType);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(n,  exitType);	  Node    allCatchNodes    =    NodeUtil.getAllCatchNodes(tryBlock,    exitType);    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
64	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(labelName,  exitType);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(labelName,  exitType);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(labelName,  exitType);	  Node    allCatchNodes    =    NodeUtil.getAllCatchNodes(tryBlock,    exitType);    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
65	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(c,  exitType);  [CE]  cannot  find  symbol  c  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(c,  exitType);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(c,  exitType);	  Node    allCatchNodes    =    NodeUtil.getAllCatchNodes(tryBlock,    exitType);    	non-compiled	[CE]  cannot  find  symbol  c	109	None	replace
66	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(labelName,  tryBlock,  exitType);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(labelName,  tryBlock,  exitType);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(labelName,  tryBlock,  exitType);	  Node    allCatchNodes    =    NodeUtil.getAllCatchNodes(tryBlock,    exitType);    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
67	[BUG]  [BUGGY]  Node  elseBlock  =  tryBlock.getFirstChild();  Node  otherBlock  =  n.getFirstChild();  [CE]  cannot  find  symbol  allCatchNodes  [FE]    AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  tryBlock.getFirstChild();  Node  otherBlock  =  n.getFirstChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  tryBlock.getFirstChild();  Node  otherBlock  =  n.getFirstChild();	          Node    elseBlock    =    n.getFirstChild();    Node    otherBlock    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	129	None	replace
68	[BUG]  [BUGGY]  Node  elseBlock  =  n.getLastChild();  Node  otherBlock  =  n.getFirstChild();  [CE]  cannot  find  symbol  allCatchNodes  [FE]      AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  n.getLastChild();  Node  otherBlock  =  n.getFirstChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  n.getLastChild();  Node  otherBlock  =  n.getFirstChild();	          Node    elseBlock    =    n.getFirstChild();    Node    otherBlock    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	129	None	replace
69	[BUG]  [BUGGY]  Node  elseBlock  =  tryBlock.getLastChild();  Node  otherBlock  =  n.getFirstChild();  [CE]  cannot  find  symbol  allCatchNodes  [FE]        AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  tryBlock.getLastChild();  Node  otherBlock  =  n.getFirstChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  tryBlock.getLastChild();  Node  otherBlock  =  n.getFirstChild();	          Node    elseBlock    =    n.getFirstChild();    Node    otherBlock    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	129	None	replace
70	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(triesBlock);  [CE]  cannot  find  symbol  triesBlock  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(triesBlock);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(triesBlock);	  Node    allCatchNodes    =    NodeUtil.getAllCatchNodes(c);    	non-compiled	[CE]  cannot  find  symbol  triesBlock	98	None	replace
71	[BUG]  [BUGGY]  NodeUtil.checkState(n.isTry());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  NodeUtil.checkState(n.isTry());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	NodeUtil.checkState(n.isTry());	          Preconditions.checkState(n.isTry());    NodeUtil.checkState(n.isTry());    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
72	[BUG]  [BUGGY]  Preconditions.checkState(n.isTry(),  tryBlock.isTry());  NodeUtil.checkState(n.isTry());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(n.isTry(),  tryBlock.isTry());  NodeUtil.checkState(n.isTry());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(n.isTry(),  tryBlock.isTry());  NodeUtil.checkState(n.isTry());	          Preconditions.checkState(n.isTry());    NodeUtil.checkState(n.isTry());    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
73	[BUG]  [BUGGY]  Preconditions.checkState(n.isTree());  NodeUtil.checkState(n.isTry());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(n.isTree());  NodeUtil.checkState(n.isTry());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(n.isTree());  NodeUtil.checkState(n.isTry());	          Preconditions.checkState(n.isTry());    NodeUtil.checkState(n.isTry());    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
74	[BUG]  [BUGGY]  Preconditions.checkState(n.isTry()  &&  NodeUtil.checkState(n.isTry());  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(n.isTry()  &&  NodeUtil.checkState(n.isTry());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(n.isTry()  &&  NodeUtil.checkState(n.isTry());	          Preconditions.checkState(n.isTry());    NodeUtil.checkState(n.isTry());    	non-compiled	[CE]  ')'  expected	105	None	replace
75	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isExitBlock(n,  exitType));  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(NodeUtil.isExitBlock(n,  exitType));  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(NodeUtil.isExitBlock(n,  exitType));	  Preconditions.checkState(NodeUtil.isExitBlock(n,    tryBlock));    	non-compiled	[CE]  cannot  find  symbol	167	None	replace
76	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isExitBlock(n,  tryBlock,  exitType));  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(NodeUtil.isExitBlock(n,  tryBlock,  exitType));  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(NodeUtil.isExitBlock(n,  tryBlock,  exitType));	  Preconditions.checkState(NodeUtil.isExitBlock(n,    tryBlock));    	non-compiled	[CE]  cannot  find  symbol	167	None	replace
77	[BUG]  [BUGGY]  Preconditions.checkArgument(n.isTree(),  tryBlock.isTree());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkArgument(n.isTree(),  tryBlock.isTree());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkArgument(n.isTree(),  tryBlock.isTree());	  Preconditions.checkArgument(n.isTree());    	non-compiled	[CE]  cannot  find  symbol	133	None	replace
78	[BUG]  [BUGGY]  Preconditions.checkArgument(n.isTree(),  exitType);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkArgument(n.isTree(),  exitType);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkArgument(n.isTree(),  exitType);	  Preconditions.checkArgument(n.isTree());    	non-compiled	[CE]  cannot  find  symbol	133	None	replace
79	[BUG]  [BUGGY]  Preconditions.checkArgument(n.isTree()  &&  tryBlock.isTree());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkArgument(n.isTree()  &&  tryBlock.isTree());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkArgument(n.isTree()  &&  tryBlock.isTree());	  Preconditions.checkArgument(n.isTree());    	non-compiled	[CE]  cannot  find  symbol	133	None	replace
80	[BUG]  [BUGGY]  Preconditions.checkArgument(n.isTree()  ||  tryBlock.isTree());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkArgument(n.isTree()  ||  tryBlock.isTree());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkArgument(n.isTree()  ||  tryBlock.isTree());	  Preconditions.checkArgument(n.isTree());    	non-compiled	[CE]  cannot  find  symbol	133	None	replace
81	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchNodes(n,  exitType);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchNodes(n,  exitType);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchNodes(n,  exitType);	  Node    allCatchNodes    =    NodeUtil.getCatchNodes(tryBlock,    exitType);    	non-compiled	[CE]  cannot  find  symbol	121	None	replace
82	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchNodes(labelName,  exitType);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchNodes(labelName,  exitType);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchNodes(labelName,  exitType);	  Node    allCatchNodes    =    NodeUtil.getCatchNodes(tryBlock,    exitType);    	non-compiled	[CE]  cannot  find  symbol	121	None	replace
83	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchNodes(labelName,  tryBlock,  exitType);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchNodes(labelName,  tryBlock,  exitType);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchNodes(labelName,  tryBlock,  exitType);	  Node    allCatchNodes    =    NodeUtil.getCatchNodes(tryBlock,    exitType);    	non-compiled	[CE]  cannot  find  symbol	121	None	replace
84	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchNodes(c,  exitType);  [CE]  cannot  find  symbol  c  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchNodes(c,  exitType);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchNodes(c,  exitType);	  Node    allCatchNodes    =    NodeUtil.getCatchNodes(tryBlock,    exitType);    	non-compiled	[CE]  cannot  find  symbol  c	121	None	replace
85	[BUG]  [BUGGY]  Node  elseBlock  =  no.getFirstChild();  [CE]  cannot  find  symbol  no  [FE]          AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  no.getFirstChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  no.getFirstChild();	          Node    elseBlock    =    n.getFirstChild();    Node    elseBlock    =    no.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  no	153	None	replace
86	[BUG]  [BUGGY]  Node  elseBlock  =  triedBlock.getLastChild();  [CE]  cannot  find  symbol  triedBlock  [FE]        AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  triedBlock.getLastChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  triedBlock.getLastChild();	          Node    elseBlock    =    tryBlock.getLastChild();    Node    elseBlock    =    triedBlock.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  triedBlock	161	None	replace
87	[BUG]  [BUGGY]  Node  elseBlock  =  triedBlock.getFirstChild();  [CE]  cannot  find  symbol  triedBlock  [FE]          AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  triedBlock.getFirstChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  triedBlock.getFirstChild();	          Node    elseBlock    =    tryBlock.getLastChild();    Node    elseBlock    =    triedBlock.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  triedBlock	161	None	replace
88	[BUG]  [BUGGY]  Node  c  =  tryBlock.getFirstChild();  c  =  tryBlock.getNext();  [CE]  cannot  find  symbol  allCatchNodes  [FE]    AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  c  =  tryBlock.getFirstChild();  c  =  tryBlock.getNext();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  c  =  tryBlock.getFirstChild();  c  =  tryBlock.getNext();	          Node    c    =    tryBlock.getNext();    c    =    tryBlock.getNext();    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	158	None	replace
89	[BUG]  [BUGGY]  Node  c  =  tryBlock.getCurrentNode();  c  =  tryBlock.getNext();  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  c  =  tryBlock.getCurrentNode();  c  =  tryBlock.getNext();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  c  =  tryBlock.getCurrentNode();  c  =  tryBlock.getNext();	          Node    c    =    tryBlock.getNext();    c    =    tryBlock.getNext();    	non-compiled	[CE]  cannot  find  symbol	158	None	replace
90	[BUG]  [BUGGY]  Node  c  =  tryBlock.getNext();  c  =  c.getNext();  [CE]  cannot  find  symbol  allCatchNodes  [FE]        AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  c  =  tryBlock.getNext();  c  =  c.getNext();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  c  =  tryBlock.getNext();  c  =  c.getNext();	          Node    c    =    tryBlock.getNext();    c    =    tryBlock.getNext();    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	158	None	replace
91	[BUG]  [BUGGY]  Node  c  =  tryBlock.getParent();  c  =  tryBlock.getNext();  [CE]  cannot  find  symbol  allCatchNodes  [FE]          AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  c  =  tryBlock.getParent();  c  =  tryBlock.getNext();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  c  =  tryBlock.getParent();  c  =  tryBlock.getNext();	          Node    c    =    tryBlock.getNext();    c    =    tryBlock.getNext();    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	158	None	replace
92	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock);  Node  allBatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	add	Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock);  Node  allBatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes);	  Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock);    Node    allBatchNodes    =    NodeUtil.getCatchBlock(tryBlock);    	compilable	  [FE]  RuntimeException  	51	6	replace
93	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock);  Node  allBatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes);  [FE]  RuntimeException  [FE]              RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock);  Node  allBatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock);  Node  allBatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes);	  Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock);    Node    allBatchNodes    =    NodeUtil.getCatchBlock(tryBlock);    	compilable	  [FE]  RuntimeException  	51	6	replace
94	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(tryBlock);  Node  allBatchNodes  =  NodeUtil.getCatchBlock(tryBlock);  [CE]  cannot  find  symbol  [FE]                RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(tryBlock);  Node  allBatchNodes  =  NodeUtil.getCatchBlock(tryBlock);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(tryBlock);  Node  allBatchNodes  =  NodeUtil.getCatchBlock(tryBlock);	  Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock);    Node    allBatchNodes    =    NodeUtil.getCatchBlock(tryBlock);    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
95	[BUG]  [BUGGY]  Node  elseBlock  =  triedBlock.getNext();  [CE]  cannot  find  symbol  triedBlock  [FE]          AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  triedBlock.getNext();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  triedBlock.getNext();	          Node    elseBlock    =    tryBlock.getNext();    Node    elseBlock    =    triedBlock.getNext();    	non-compiled	[CE]  cannot  find  symbol  triedBlock	164	None	replace
96	[BUG]  [BUGGY]  Node  elseBlock  =  tryBlock!=  null?  tryBlock.getNext()  :  null;  [CE]  cannot  find  symbol  allCatchNodes  [FE]            AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  tryBlock!=  null?  tryBlock.getNext()  :  null;  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  tryBlock!=  null?  tryBlock.getNext()  :  null;	          Node    elseBlock    =    tryBlock.getNext();    Node    elseBlock    =    triedBlock.getNext();    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	164	None	replace
97	[BUG]  [BUGGY]  Node  elseBlock  =  tryBlock!=  null?  null  :  tryBlock.getNext();  [CE]  cannot  find  symbol  allCatchNodes  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  tryBlock!=  null?  null  :  tryBlock.getNext();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  tryBlock!=  null?  null  :  tryBlock.getNext();	          Node    elseBlock    =    tryBlock.getNext();    Node    elseBlock    =    triedBlock.getNext();    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	164	None	replace
98	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isExitBlock(n),  tryBlock,  exitType);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(NodeUtil.isExitBlock(n),  tryBlock,  exitType);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(NodeUtil.isExitBlock(n),  tryBlock,  exitType);	  Preconditions.checkState(NodeUtil.isExitBlock(n),    tryBlock);    	non-compiled	[CE]  cannot  find  symbol	168	None	replace
99	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isExitBlock(tryBlock),  n);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(NodeUtil.isExitBlock(tryBlock),  n);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(NodeUtil.isExitBlock(tryBlock),  n);	  Preconditions.checkState(NodeUtil.isExitBlock(n),    tryBlock);    	non-compiled	[CE]  cannot  find  symbol	168	None	replace
100	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isExitBlock(n)||  tryBlock.isExitBlock(n));  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(NodeUtil.isExitBlock(n)||  tryBlock.isExitBlock(n));  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(NodeUtil.isExitBlock(n)||  tryBlock.isExitBlock(n));	  Preconditions.checkState(NodeUtil.isExitBlock(n),    tryBlock);    	non-compiled	[CE]  cannot  find  symbol	168	None	replace
101	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isExitBlock(n)||  tryBlock.isExitBlock(),  tryBlock);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(NodeUtil.isExitBlock(n)||  tryBlock.isExitBlock(),  tryBlock);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(NodeUtil.isExitBlock(n)||  tryBlock.isExitBlock(),  tryBlock);	  Preconditions.checkState(NodeUtil.isExitBlock(n),    tryBlock);    	non-compiled	[CE]  cannot  find  symbol	168	None	replace
102	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  Preconditions.checkState(NodeUtil.hasCatchHandler(allCatchNodes));  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	add	Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  Preconditions.checkState(NodeUtil.hasCatchHandler(allCatchNodes));	  Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock);    Preconditions.checkState(NodeUtil.hasCatchHandler(tryBlock));    	compilable	  [FE]  RuntimeException  	142	2	replace
103	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  Preconditions.checkState(NodeUtil.hasCatchHandler(allCatchNodes));  [FE]  RuntimeException  [FE]        RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  Preconditions.checkState(NodeUtil.hasCatchHandler(allCatchNodes));  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  Preconditions.checkState(NodeUtil.hasCatchHandler(allCatchNodes));	  Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock);    Preconditions.checkState(NodeUtil.hasCatchHandler(tryBlock));    	compilable	  [FE]  RuntimeException  	142	2	replace
104	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  Preconditions.checkState(NodeUtil.hasCatchHandler(tryBlock));  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	add	Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  Preconditions.checkState(NodeUtil.hasCatchHandler(tryBlock));	  Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock);    Preconditions.checkState(NodeUtil.hasCatchHandler(tryBlock));    	compilable	  [FE]  RuntimeException  	142	6	replace
105	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  Preconditions.checkState(NodeUtil.hasCatchHandler(tryBlock));  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  Preconditions.checkState(NodeUtil.hasCatchHandler(tryBlock));  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  Preconditions.checkState(NodeUtil.hasCatchHandler(tryBlock));	  Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock);    Preconditions.checkState(NodeUtil.hasCatchHandler(tryBlock));    	compilable	  [FE]  RuntimeException  	142	6	replace
106	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock,  labelName);  Preconditions.checkState(NodeUtil.hasCatchHandler(allCatchNodes));  [CE]  method  getCatchBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]            RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock,  labelName);  Preconditions.checkState(NodeUtil.hasCatchHandler(allCatchNodes));  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock,  labelName);  Preconditions.checkState(NodeUtil.hasCatchHandler(allCatchNodes));	  Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock);    Preconditions.checkState(NodeUtil.hasCatchHandler(tryBlock));    	non-compiled	[CE]  method  getCatchBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;	142	None	replace
107	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.hasCatchHandler(tryBlock));  [CE]  cannot  find  symbol  allCatchNodes  [FE]              RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(NodeUtil.hasCatchHandler(tryBlock));  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(NodeUtil.hasCatchHandler(tryBlock));	  Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock);    Preconditions.checkState(NodeUtil.hasCatchHandler(tryBlock));    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	142	None	replace
108	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(n,  labelName);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(n,  labelName);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchHandler(n,  labelName);	  Node    allCatchNodes    =    NodeUtil.getCatchHandler(tryBlock,    labelName);    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
109	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(c,  tryBlock,  labelName);  [CE]  cannot  find  symbol  c  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(c,  tryBlock,  labelName);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchHandler(c,  tryBlock,  labelName);	  Node    allCatchNodes    =    NodeUtil.getCatchHandler(tryBlock,    labelName);    	non-compiled	[CE]  cannot  find  symbol  c	84	None	replace
110	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(tryBlock,  exitType,  labelName);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(tryBlock,  exitType,  labelName);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchHandler(tryBlock,  exitType,  labelName);	  Node    allCatchNodes    =    NodeUtil.getCatchHandler(tryBlock,    labelName);    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
111	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(tryBlock,  labelName,  exitType);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(tryBlock,  labelName,  exitType);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchHandler(tryBlock,  labelName,  exitType);	  Node    allCatchNodes    =    NodeUtil.getCatchHandler(tryBlock,    labelName);    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
112	[BUG]  [BUGGY]  Node  c  =  tryBlock.getNext();  Preconditions.checkState(!NodeUtil.hasCatchHandler(c));  [CE]  cannot  find  symbol  allCatchNodes  [FE]        AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  c  =  tryBlock.getNext();  Preconditions.checkState(!NodeUtil.hasCatchHandler(c));  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  c  =  tryBlock.getNext();  Preconditions.checkState(!NodeUtil.hasCatchHandler(c));	          Node    c    =    tryBlock.getNext();    Node    c    =    tryBlock.getNext();    Preconditions.checkState(!NodeUtil.hasCatchHandler(c));    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	119	None	replace
113	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.hasCatchHandler(tryBlock));  [CE]  cannot  find  symbol  allCatchNodes  [FE]          AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(!NodeUtil.hasCatchHandler(tryBlock));  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(!NodeUtil.hasCatchHandler(tryBlock));	          Node    c    =    tryBlock.getNext();    Node    c    =    tryBlock.getNext();    Preconditions.checkState(!NodeUtil.hasCatchHandler(c));    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	119	None	replace
114	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.hasCatchHandler(c));  [CE]  cannot  find  symbol  c  [FE]            AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(!NodeUtil.hasCatchHandler(c));  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(!NodeUtil.hasCatchHandler(c));	          Node    c    =    tryBlock.getNext();    Node    c    =    tryBlock.getNext();    Preconditions.checkState(!NodeUtil.hasCatchHandler(c));    	non-compiled	[CE]  cannot  find  symbol  c	119	None	replace
115	[BUG]  [BUGGY]  Node  c  =  tryBlock.getFirstChild();  Preconditions.checkState(!NodeUtil.hasCatchHandler(c));  [CE]  cannot  find  symbol  allCatchNodes  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  c  =  tryBlock.getFirstChild();  Preconditions.checkState(!NodeUtil.hasCatchHandler(c));  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  c  =  tryBlock.getFirstChild();  Preconditions.checkState(!NodeUtil.hasCatchHandler(c));	          Node    c    =    tryBlock.getNext();    Node    c    =    tryBlock.getNext();    Preconditions.checkState(!NodeUtil.hasCatchHandler(c));    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	119	None	replace
116	[BUG]  [BUGGY]  Node  elseBlock  =  node.getFirstChild();  [CE]  cannot  find  symbol  node  [FE]        AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  node.getFirstChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  node.getFirstChild();	          Node    elseBlock    =    n.getFirstChild();    Node    elseBlock    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  node	77	None	replace
117	[BUG]  [BUGGY]  Node  c  =  tryBlock.getNext();  Preconditions.checkState(c!=  null);  [CE]  cannot  find  symbol  allCatchNodes  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  c  =  tryBlock.getNext();  Preconditions.checkState(c!=  null);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  c  =  tryBlock.getNext();  Preconditions.checkState(c!=  null);	          Node    c    =    tryBlock.getNext();    Node    c    =    tryBlock.getNext();    Preconditions.checkState(c!=    null);    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	70	None	replace
118	[BUG]  [BUGGY]  Node  c  =  tryBlock.getNext();  Preconditions.checkState(c  ==  null);  [CE]  cannot  find  symbol  allCatchNodes  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  c  =  tryBlock.getNext();  Preconditions.checkState(c  ==  null);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  c  =  tryBlock.getNext();  Preconditions.checkState(c  ==  null);	          Node    c    =    tryBlock.getNext();    Node    c    =    tryBlock.getNext();    Preconditions.checkState(c!=    null);    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	70	None	replace
119	[BUG]  [BUGGY]  Preconditions.checkState(tryBlock!=  null);  [CE]  cannot  find  symbol  allCatchNodes  [FE]                      AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(tryBlock!=  null);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(tryBlock!=  null);	          Node    c    =    tryBlock.getNext();    Node    c    =    tryBlock.getNext();    Preconditions.checkState(c!=    null);    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	70	None	replace
120	[BUG]  [BUGGY]  Node  c  =  tryBlock.getFirstChild();  Preconditions.checkState(c!=  null);  [CE]  cannot  find  symbol  allCatchNodes  [FE]                        AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  c  =  tryBlock.getFirstChild();  Preconditions.checkState(c!=  null);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  c  =  tryBlock.getFirstChild();  Preconditions.checkState(c!=  null);	          Node    c    =    tryBlock.getNext();    Node    c    =    tryBlock.getNext();    Preconditions.checkState(c!=    null);    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	70	None	replace
121	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(labelName,  tryBlock);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(labelName,  tryBlock);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(labelName,  tryBlock);	  Node    allCatchNodes    =    NodeUtil.getAllCatchNodes(tryBlock,    labelName);    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
122	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(tryBlock,  labelName,  exitType);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(tryBlock,  labelName,  exitType);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(tryBlock,  labelName,  exitType);	  Node    allCatchNodes    =    NodeUtil.getAllCatchNodes(tryBlock,    labelName);    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
123	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(tryBlock,  exitType,  labelName);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(tryBlock,  exitType,  labelName);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(tryBlock,  exitType,  labelName);	  Node    allCatchNodes    =    NodeUtil.getAllCatchNodes(tryBlock,    labelName);    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
124	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(n,  labelName);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(n,  labelName);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(n,  labelName);	  Node    allCatchNodes    =    NodeUtil.getAllCatchNodes(tryBlock,    labelName);    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
125	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(c,  tryBlock,  labelName);  [CE]  cannot  find  symbol  c  [FE]                        AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(c,  tryBlock,  labelName);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(c,  tryBlock,  labelName);	  Node    allCatchNodes    =    NodeUtil.getAllCatchNodes(tryBlock,    labelName);    	non-compiled	[CE]  cannot  find  symbol  c	35	None	replace
126	[BUG]  [BUGGY]  Node  elseBlock  =  tryBlock.getLastChild();  node  elseBlock  =  elseBlock.getLastChild();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  tryBlock.getLastChild();  node  elseBlock  =  elseBlock.getLastChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  tryBlock.getLastChild();  node  elseBlock  =  elseBlock.getLastChild();	          Node    elseBlock    =    tryBlock.getLastChild();    node    elseBlock    =    tryBlock.getLastChild();    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
127	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(tryBlock);  Preconditions.checkState(NodeUtil.hasCatchHandler(allCatchNodes));  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(tryBlock);  Preconditions.checkState(NodeUtil.hasCatchHandler(allCatchNodes));  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(tryBlock);  Preconditions.checkState(NodeUtil.hasCatchHandler(allCatchNodes));	  Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock);    Preconditions.checkState(NodeUtil.hasCatchHandler(allCatchNodes));    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
128	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.hasCatchHandler(allCatchNodes));  [CE]  cannot  find  symbol  allCatchNodes  [FE]              RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(NodeUtil.hasCatchHandler(allCatchNodes));  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(NodeUtil.hasCatchHandler(allCatchNodes));	  Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock);    Preconditions.checkState(NodeUtil.hasCatchHandler(allCatchNodes));    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	50	None	replace
129	[BUG]  [BUGGY]  node.removeChild(tryBlock);  [CE]  cannot  find  symbol  node  [FE]          RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  node.removeChild(tryBlock);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	node.removeChild(tryBlock);	          n.removeChild(tryBlock);    node.removeChild(tryBlock);    	non-compiled	[CE]  cannot  find  symbol  node	113	None	replace
130	[BUG]  [BUGGY]  Node.removeChild(n);  [CE]  non-static  method  removeChild(Node)  cannot  be  referenced  from  a  static  context  [FE]            RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node.removeChild(n);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node.removeChild(n);	          n.removeChild(tryBlock);    node.removeChild(tryBlock);    	non-compiled	[CE]  non-static  method  removeChild(Node)  cannot  be  referenced  from  a  static  context	113	None	replace
131	[BUG]  [BUGGY]  Node  node  =  tryBlock.removeChild(n);  [CE]  incompatible  types  [FE]              RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  node  =  tryBlock.removeChild(n);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  node  =  tryBlock.removeChild(n);	          n.removeChild(tryBlock);    node.removeChild(tryBlock);    	non-compiled	[CE]  incompatible  types	113	None	replace
132	[BUG]  [BUGGY]  Node  elseBlock  =  tryBlock.getFirstChild();  Node  anotherBlock  =  tryBlock.getLastChild();  [CE]  cannot  find  symbol  allCatchNodes  [FE]    AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  tryBlock.getFirstChild();  Node  anotherBlock  =  tryBlock.getLastChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  tryBlock.getFirstChild();  Node  anotherBlock  =  tryBlock.getLastChild();	          Node    elseBlock    =    tryBlock.getLastChild();    Node    anotherBlock    =    tryBlock.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	32	None	replace
133	[BUG]  [BUGGY]  Node  anotherBlock  =  tryBlock.getLastChild();  [CE]  cannot  find  symbol  allCatchNodes  [FE]      AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  anotherBlock  =  tryBlock.getLastChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  anotherBlock  =  tryBlock.getLastChild();	          Node    elseBlock    =    tryBlock.getLastChild();    Node    anotherBlock    =    tryBlock.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	32	None	replace
134	[BUG]  [BUGGY]  Node  anotherBlock  =  tryBlock.getFirstChild();  [CE]  cannot  find  symbol  allCatchNodes  [FE]        AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  anotherBlock  =  tryBlock.getFirstChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  anotherBlock  =  tryBlock.getFirstChild();	          Node    elseBlock    =    tryBlock.getLastChild();    Node    anotherBlock    =    tryBlock.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	32	None	replace
135	[BUG]  [BUGGY]  Node  c  =  tryBlock.nextChild();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  c  =  tryBlock.nextChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  c  =  tryBlock.nextChild();	  Node    c    =    tryBlock.getLastChild();    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
136	[BUG]  [BUGGY]  Node  c  =  node.getLastChild();  [CE]  cannot  find  symbol  node  [FE]            AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  c  =  node.getLastChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  c  =  node.getLastChild();	  Node    c    =    tryBlock.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  node	19	None	replace
137	[BUG]  [BUGGY]  Node  elseBlock  =  tryBlock.getNext(),  labelName,  exitType);  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  tryBlock.getNext(),  labelName,  exitType);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  tryBlock.getNext(),  labelName,  exitType);	  Node    elseBlock    =    tryBlock.getNext(),    labelName);    	non-compiled	[CE]  ';'  expected	47	None	replace
138	[BUG]  [BUGGY]  Node  elseBlock  =  tryBlock.getNext(),  labelName,  escapeType);  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  tryBlock.getNext(),  labelName,  escapeType);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  tryBlock.getNext(),  labelName,  escapeType);	  Node    elseBlock    =    tryBlock.getNext(),    labelName);    	non-compiled	[CE]  ';'  expected	47	None	replace
139	[BUG]  [BUGGY]  Node  elseBlock  =  tryBlock.getNext(),  exitType);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  tryBlock.getNext(),  exitType);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  tryBlock.getNext(),  exitType);	  Node    elseBlock    =    tryBlock.getNext(),    labelName);    	non-compiled	[CE]  ';'  expected	47	None	replace
140	[BUG]  [BUGGY]  Node  elseBlock  =  tryBlock.getNext(),  labelName  +  1);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  tryBlock.getNext(),  labelName  +  1);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  tryBlock.getNext(),  labelName  +  1);	  Node    elseBlock    =    tryBlock.getNext(),    labelName);    	non-compiled	[CE]  ';'  expected	47	None	replace
141	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchNodes(labelName,  tryBlock,  escapeType);  [CE]  cannot  find  symbol  escapeType  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchNodes(labelName,  tryBlock,  escapeType);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchNodes(labelName,  tryBlock,  escapeType);	  Node    allCatchNodes    =    NodeUtil.getCatchNodes(labelName,    tryBlock);    	non-compiled	[CE]  cannot  find  symbol  escapeType	76	None	replace
142	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchNodes(labelName,  tryBlock,  labelName);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchNodes(labelName,  tryBlock,  labelName);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchNodes(labelName,  tryBlock,  labelName);	  Node    allCatchNodes    =    NodeUtil.getCatchNodes(labelName,    tryBlock);    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
143	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchNodes(labelName,  tryBlock,  n);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchNodes(labelName,  tryBlock,  n);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchNodes(labelName,  tryBlock,  n);	  Node    allCatchNodes    =    NodeUtil.getCatchNodes(labelName,    tryBlock);    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
144	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchNodes(labelName,  tryBlock,  falseBlock);  [CE]  cannot  find  symbol  falseBlock  [FE]                          AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchNodes(labelName,  tryBlock,  falseBlock);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchNodes(labelName,  tryBlock,  falseBlock);	  Node    allCatchNodes    =    NodeUtil.getCatchNodes(labelName,    tryBlock);    	non-compiled	[CE]  cannot  find  symbol  falseBlock	76	None	replace
145	[BUG]  [BUGGY]  Preconditions.checkState(tryBlock.getType()  ==  Token.EXPR_RESULT);  [CE]  cannot  find  symbol  allCatchNodes  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(tryBlock.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(tryBlock.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	25	None	replace
146	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT);  [CE]  cannot  find  symbol  allCatchNodes  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	25	None	replace
147	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  tryBlock.getFirstChild());  [CE]  cannot  find  symbol  allCatchNodes  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  tryBlock.getFirstChild());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  tryBlock.getFirstChild());	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	25	None	replace
148	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  exitType);  [CE]  cannot  find  symbol  allCatchNodes  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  exitType);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  exitType);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	25	None	replace
149	[BUG]  [BUGGY]  Node  otherBlock  =  tryBlock.getLastChild();  [CE]  cannot  find  symbol  allCatchNodes  [FE]        AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  otherBlock  =  tryBlock.getLastChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  otherBlock  =  tryBlock.getLastChild();	  Node    elseBlock    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	16	None	replace
150	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(n,  exitType,  tryBlock);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(n,  exitType,  tryBlock);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(n,  exitType,  tryBlock);	  Node    allCatchNodes    =    NodeUtil.getAllCatchNodes(exitType,    tryBlock);    	non-compiled	[CE]  cannot  find  symbol	177	None	replace
151	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(exitType,  tryBlock,  labelName);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(exitType,  tryBlock,  labelName);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(exitType,  tryBlock,  labelName);	  Node    allCatchNodes    =    NodeUtil.getAllCatchNodes(exitType,    tryBlock);    	non-compiled	[CE]  cannot  find  symbol	177	None	replace
152	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(testNode,  exitType);  [CE]  cannot  find  symbol  testNode  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(testNode,  exitType);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(testNode,  exitType);	  Node    allCatchNodes    =    NodeUtil.getAllCatchNodes(exitType,    tryBlock);    	non-compiled	[CE]  cannot  find  symbol  testNode	177	None	replace
153	[BUG]  [BUGGY]  Node  elseBlock  =  tryBlock.getNext();  node  elseBlock  =  elseBlock.getNext();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  tryBlock.getNext();  node  elseBlock  =  elseBlock.getNext();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  tryBlock.getNext();  node  elseBlock  =  elseBlock.getNext();	          Node    elseBlock    =    tryBlock.getNext();    node    elseBlock    =    tryBlock.getNext();    	non-compiled	[CE]  cannot  find  symbol	138	None	replace
154	[BUG]  [BUGGY]  Node  elseBlock  =  tryBlock.getNext();  node  elseBlock  =  otherBlock.getNext();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  tryBlock.getNext();  node  elseBlock  =  otherBlock.getNext();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  tryBlock.getNext();  node  elseBlock  =  otherBlock.getNext();	          Node    elseBlock    =    tryBlock.getNext();    node    elseBlock    =    tryBlock.getNext();    	non-compiled	[CE]  cannot  find  symbol	138	None	replace
155	[BUG]  [BUGGY]  Node  elseBlock  =  tryBlock  ==  null?  null  :  tryBlock.getNext();  [CE]  cannot  find  symbol  allCatchNodes  [FE]            AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  tryBlock  ==  null?  null  :  tryBlock.getNext();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  tryBlock  ==  null?  null  :  tryBlock.getNext();	          Node    elseBlock    =    tryBlock.getNext();    node    elseBlock    =    tryBlock.getNext();    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	138	None	replace
156	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(labelName,  tryBlock,  exitType);  [CE]  method  getCatchBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(labelName,  tryBlock,  exitType);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(labelName,  tryBlock,  exitType);	  Node    allCatchNodes    =    NodeUtil.getCatchBlock(labelName,    tryBlock);    	non-compiled	[CE]  method  getCatchBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;	175	None	replace
157	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(labelName,  tryBlock,  escapeType);  [CE]  cannot  find  symbol  escapeType  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(labelName,  tryBlock,  escapeType);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(labelName,  tryBlock,  escapeType);	  Node    allCatchNodes    =    NodeUtil.getCatchBlock(labelName,    tryBlock);    	non-compiled	[CE]  cannot  find  symbol  escapeType	175	None	replace
158	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(labelName,  tryBlock,  labelName);  [CE]  method  getCatchBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(labelName,  tryBlock,  labelName);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(labelName,  tryBlock,  labelName);	  Node    allCatchNodes    =    NodeUtil.getCatchBlock(labelName,    tryBlock);    	non-compiled	[CE]  method  getCatchBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;	175	None	replace
159	[BUG]  [BUGGY]  Node  elseBlock  =  n.getFirstChild();  Preconditions.checkState(labelName.equals(tryBlock));  [CE]  cannot  find  symbol  allCatchNodes  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  n.getFirstChild();  Preconditions.checkState(labelName.equals(tryBlock));  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  n.getFirstChild();  Preconditions.checkState(labelName.equals(tryBlock));	          Node    elseBlock    =    n.getFirstChild();    Node    elseBlock    =    n.getFirstChild();    Preconditions.checkState(labelName.equals(tryBlock));    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	82	None	replace
160	[BUG]  [BUGGY]  Node  elseBlock  =  n.getFirstChild();  Preconditions.checkState(labelName.equals(otherBlock));  [CE]  cannot  find  symbol  otherBlock  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  n.getFirstChild();  Preconditions.checkState(labelName.equals(otherBlock));  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  n.getFirstChild();  Preconditions.checkState(labelName.equals(otherBlock));	          Node    elseBlock    =    n.getFirstChild();    Node    elseBlock    =    n.getFirstChild();    Preconditions.checkState(labelName.equals(tryBlock));    	non-compiled	[CE]  cannot  find  symbol  otherBlock	82	None	replace
161	[BUG]  [BUGGY]  Node  c  =  tryBlock!=  null?  null  :  tryBlock.getCatch();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  c  =  tryBlock!=  null?  null  :  tryBlock.getCatch();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  c  =  tryBlock!=  null?  null  :  tryBlock.getCatch();	  Node    c    =    tryBlock.getCatch();    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
162	[BUG]  [BUGGY]  Node  c  =  tryBlock.getCatchHandler();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  c  =  tryBlock.getCatchHandler();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  c  =  tryBlock.getCatchHandler();	  Node    c    =    tryBlock.getCatch();    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
163	[BUG]  [BUGGY]  Node  c  =  tryBlock!=  null?  null.getCatch()  :  tryBlock.getCatch();  [CE]  <null>  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  c  =  tryBlock!=  null?  null.getCatch()  :  tryBlock.getCatch();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  c  =  tryBlock!=  null?  null.getCatch()  :  tryBlock.getCatch();	  Node    c    =    tryBlock.getCatch();    	non-compiled	[CE]  <null>  cannot  be  dereferenced	20	None	replace
164	[BUG]  [BUGGY]  Node  c  =  tryBlock.getCatchNode();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  c  =  tryBlock.getCatchNode();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  c  =  tryBlock.getCatchNode();	  Node    c    =    tryBlock.getCatch();    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
165	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchNodes(tryBlock,  exitType,  labelName);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchNodes(tryBlock,  exitType,  labelName);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchNodes(tryBlock,  exitType,  labelName);	  Node    allCatchNodes    =    NodeUtil.getCatchNodes(tryBlock,    labelName);    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
166	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchNodes(n,  labelName);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchNodes(n,  labelName);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchNodes(n,  labelName);	  Node    allCatchNodes    =    NodeUtil.getCatchNodes(tryBlock,    labelName);    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
167	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchNodes(c,  tryBlock,  labelName);  [CE]  cannot  find  symbol  c  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchNodes(c,  tryBlock,  labelName);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchNodes(c,  tryBlock,  labelName);	  Node    allCatchNodes    =    NodeUtil.getCatchNodes(tryBlock,    labelName);    	non-compiled	[CE]  cannot  find  symbol  c	74	None	replace
168	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchNodes(tryBlock,  labelName,  exitType);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchNodes(tryBlock,  labelName,  exitType);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchNodes(tryBlock,  labelName,  exitType);	  Node    allCatchNodes    =    NodeUtil.getCatchNodes(tryBlock,    labelName);    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
169	[BUG]  [BUGGY]          Node    elseBlock    =    tryBlock.getNext();    Preconditions.checkState(tryBlock!=  null);  Node  elseBlock  =  tryBlock.getNext();  Preconditions.checkState(tryBlock!=  null);  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Node    elseBlock    =    tryBlock.getNext();    Preconditions.checkState(tryBlock!=  null);  Node  elseBlock  =  tryBlock.getNext();  Preconditions.checkState(tryBlock!=  null);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Node        elseBlock        =        tryBlock.getNext();        Preconditions.checkState(tryBlock!=    null);    Node  elseBlock  =  tryBlock.getNext();  Preconditions.checkState(tryBlock!=  null);	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	139	None	add
170	[BUG]  [BUGGY]          Node    elseBlock    =    tryBlock.getNext();    Preconditions.checkState(tryBlock!=  null);  Node  elseBlock  =  tryBlock.getNext();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Node    elseBlock    =    tryBlock.getNext();    Preconditions.checkState(tryBlock!=  null);  Node  elseBlock  =  tryBlock.getNext();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Node        elseBlock        =        tryBlock.getNext();        Preconditions.checkState(tryBlock!=    null);    Node  elseBlock  =  tryBlock.getNext();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	139	None	add
171	[BUG]  [BUGGY]          Node    elseBlock    =    tryBlock.getNext();    Preconditions.checkState(tryBlock!=  null);  Node  elseBlock  =  tryBlock.getNext();  Preconditions.checkState(tryBlock  ==  null);  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Node    elseBlock    =    tryBlock.getNext();    Preconditions.checkState(tryBlock!=  null);  Node  elseBlock  =  tryBlock.getNext();  Preconditions.checkState(tryBlock  ==  null);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Node        elseBlock        =        tryBlock.getNext();        Preconditions.checkState(tryBlock!=    null);    Node  elseBlock  =  tryBlock.getNext();  Preconditions.checkState(tryBlock  ==  null);	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	139	None	add
172	[BUG]  [BUGGY]          Node    elseBlock    =    tryBlock.getNext();    Preconditions.checkState(tryBlock!=  null);  Node  elseBlock  =  tryBlock.getNext();  preconditions.checkState(tryBlock!=  null);  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Node    elseBlock    =    tryBlock.getNext();    Preconditions.checkState(tryBlock!=  null);  Node  elseBlock  =  tryBlock.getNext();  preconditions.checkState(tryBlock!=  null);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Node        elseBlock        =        tryBlock.getNext();        Preconditions.checkState(tryBlock!=    null);    Node  elseBlock  =  tryBlock.getNext();  preconditions.checkState(tryBlock!=  null);	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	139	None	add
173	[BUG]  [BUGGY]          Node    elseBlock    =    tryBlock.getNext();    Preconditions.checkState(tryBlock!=  null);  Node  elseBlock  =  tryBlock.getNext();  Preconditions.checkState(tryBlock  >=  null);  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]            AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Node    elseBlock    =    tryBlock.getNext();    Preconditions.checkState(tryBlock!=  null);  Node  elseBlock  =  tryBlock.getNext();  Preconditions.checkState(tryBlock  >=  null);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Node        elseBlock        =        tryBlock.getNext();        Preconditions.checkState(tryBlock!=    null);    Node  elseBlock  =  tryBlock.getNext();  Preconditions.checkState(tryBlock  >=  null);	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	139	None	add
174	[BUG]  [BUGGY]          Node    elseBlock    =    tryBlock.getNext();    Preconditions.checkState(tryBlock!=  null);  Node  elseBlock  =  tryBlock.getNext();  Preconditions.checkState(tryBlock  >>  null);  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]              AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Node    elseBlock    =    tryBlock.getNext();    Preconditions.checkState(tryBlock!=  null);  Node  elseBlock  =  tryBlock.getNext();  Preconditions.checkState(tryBlock  >>  null);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Node        elseBlock        =        tryBlock.getNext();        Preconditions.checkState(tryBlock!=    null);    Node  elseBlock  =  tryBlock.getNext();  Preconditions.checkState(tryBlock  >>  null);	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	139	None	add
175	[BUG]  [BUGGY]  Preconditions.checkState(tryBlock.isFunction());  [CE]  cannot  find  symbol  allCatchNodes  [FE]            AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(tryBlock.isFunction());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(tryBlock.isFunction());	  Preconditions.checkState(n.isFunction());    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	24	None	replace
176	[BUG]  [BUGGY]  Preconditions.checkState(n.isFunction()  ||  tryBlock.isFunction());  [CE]  cannot  find  symbol  allCatchNodes  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(n.isFunction()  ||  tryBlock.isFunction());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(n.isFunction()  ||  tryBlock.isFunction());	  Preconditions.checkState(n.isFunction());    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	24	None	replace
177	[BUG]  [BUGGY]  Preconditions.checkState(n.isFunction()  &&  tryMinimizeExits(tryBlock,  exitType,  labelName));  [CE]  'void'  type  not  allowed  here  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(n.isFunction()  &&  tryMinimizeExits(tryBlock,  exitType,  labelName));  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(n.isFunction()  &&  tryMinimizeExits(tryBlock,  exitType,  labelName));	  Preconditions.checkState(n.isFunction());    	non-compiled	[CE]  'void'  type  not  allowed  here	24	None	replace
178	[BUG]  [BUGGY]  Preconditions.checkState(n.isFunction()  &&  tryMinimizeExits(tryBlock,  exitType,  labelName);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(n.isFunction()  &&  tryMinimizeExits(tryBlock,  exitType,  labelName);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(n.isFunction()  &&  tryMinimizeExits(tryBlock,  exitType,  labelName);	  Preconditions.checkState(n.isFunction());    	non-compiled	[CE]  ')'  expected	24	None	replace
179	[BUG]  [BUGGY]  Preconditions.checkState(n.isExit()  &&  tryBlock.isExit());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(n.isExit()  &&  tryBlock.isExit());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(n.isExit()  &&  tryBlock.isExit());	  Preconditions.checkState(n.isExit());    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
180	[BUG]  [BUGGY]  Preconditions.checkState(n.isExit()  ||  tryBlock.isExit());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(n.isExit()  ||  tryBlock.isExit());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(n.isExit()  ||  tryBlock.isExit());	  Preconditions.checkState(n.isExit());    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
181	[BUG]  [BUGGY]  Preconditions.checkState(n.isExit(),  exitType);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(n.isExit(),  exitType);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(n.isExit(),  exitType);	  Preconditions.checkState(n.isExit());    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
182	[BUG]  [BUGGY]  Preconditions.checkState(n.isExit(),  tryBlock.isExit());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(n.isExit(),  tryBlock.isExit());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(n.isExit(),  tryBlock.isExit());	  Preconditions.checkState(n.isExit());    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
183	[BUG]  [BUGGY]  Node  n  =  tryBlock.getParent()  +  1;  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                        AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  n  =  tryBlock.getParent()  +  1;  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  n  =  tryBlock.getParent()  +  1;	  Node    n    =    tryBlock.getNext()    +    1;    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	89	None	replace
184	[BUG]  [BUGGY]  Node  n  =  attemptBlock.getNext();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                          AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  n  =  attemptBlock.getNext();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  n  =  attemptBlock.getNext();	  Node    n    =    tryBlock.getNext()    +    1;    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	89	None	replace
185	[BUG]  [BUGGY]  Node  n  =  tryBlock.getParent();  Preconditions.checkState(n.isTry());  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  n  =  tryBlock.getParent();  Preconditions.checkState(n.isTry());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  n  =  tryBlock.getParent();  Preconditions.checkState(n.isTry());	          Preconditions.checkState(n.isTry());    Node    n    =    tryBlock.getParent();    Preconditions.checkState(n.isTry());    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	146	None	replace
186	[BUG]  [BUGGY]  Node  n  =  tryBlock.getNext();  Preconditions.checkState(n.isTry());  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]            AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  n  =  tryBlock.getNext();  Preconditions.checkState(n.isTry());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  n  =  tryBlock.getNext();  Preconditions.checkState(n.isTry());	          Preconditions.checkState(n.isTry());    Node    n    =    tryBlock.getParent();    Preconditions.checkState(n.isTry());    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	146	None	replace
187	[BUG]  [BUGGY]  Node  n  =  tryBlock.getParent();  Preconditions.checkState(t.isTry());  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  n  =  tryBlock.getParent();  Preconditions.checkState(t.isTry());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  n  =  tryBlock.getParent();  Preconditions.checkState(t.isTry());	          Preconditions.checkState(n.isTry());    Node    n    =    tryBlock.getParent();    Preconditions.checkState(n.isTry());    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	146	None	replace
188	[BUG]  [BUGGY]  Node  c  =  tryBlock.getCatchNodes(labelName);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  c  =  tryBlock.getCatchNodes(labelName);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  c  =  tryBlock.getCatchNodes(labelName);	  Node    c    =    tryBlock.getCatchNodes();    	non-compiled	[CE]  cannot  find  symbol	144	None	replace
189	[BUG]  [BUGGY]  Node  c  =  tryBlock.getCatchNodes(n);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  c  =  tryBlock.getCatchNodes(n);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  c  =  tryBlock.getCatchNodes(n);	  Node    c    =    tryBlock.getCatchNodes();    	non-compiled	[CE]  cannot  find  symbol	144	None	replace
190	[BUG]  [BUGGY]  Node  c  =  attemptBlock.getCatchNodes();  [CE]  cannot  find  symbol  attemptBlock  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  c  =  attemptBlock.getCatchNodes();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  c  =  attemptBlock.getCatchNodes();	  Node    c    =    tryBlock.getCatchNodes();    	non-compiled	[CE]  cannot  find  symbol  attemptBlock	144	None	replace
191	[BUG]  [BUGGY]  Node  c  =  tryBlock.getCatchStructure();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  c  =  tryBlock.getCatchStructure();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  c  =  tryBlock.getCatchStructure();	  Node    c    =    tryBlock.getCatchNodes();    	non-compiled	[CE]  cannot  find  symbol	144	None	replace
192	[BUG]  [BUGGY]  Preconditions.checkState(n.isTree()  &&  n.isTree());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(n.isTree()  &&  n.isTree());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(n.isTree()  &&  n.isTree());	  Preconditions.checkState(n.isTree()    ||    n.isTree());    	non-compiled	[CE]  cannot  find  symbol	170	None	replace
193	[BUG]  [BUGGY]  Preconditions.checkState(labelName.isTree()  ||  n.isTree());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(labelName.isTree()  ||  n.isTree());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(labelName.isTree()  ||  n.isTree());	  Preconditions.checkState(n.isTree()    ||    n.isTree());    	non-compiled	[CE]  cannot  find  symbol	170	None	replace
194	[BUG]  [BUGGY]  Preconditions.checkState(t.isTree()  ||  n.isTree());  [CE]  cannot  find  symbol  t  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(t.isTree()  ||  n.isTree());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(t.isTree()  ||  n.isTree());	  Preconditions.checkState(n.isTree()    ||    n.isTree());    	non-compiled	[CE]  cannot  find  symbol  t	170	None	replace
195	[BUG]  [BUGGY]  Node  elseBlock  =  tryBlock.getLastChild();  Preconditions.checkState(tryBlock!=  null);  [CE]  cannot  find  symbol  allCatchNodes  [FE]    AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  tryBlock.getLastChild();  Preconditions.checkState(tryBlock!=  null);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  tryBlock.getLastChild();  Preconditions.checkState(tryBlock!=  null);	          Node    elseBlock    =    tryBlock.getNext();    Preconditions.checkState(tryBlock!=    null);    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	140	None	replace
196	[BUG]  [BUGGY]  Node  elseBlock  =  tryBlock.getFirstChild();  Preconditions.checkState(tryBlock!=  null);  [CE]  cannot  find  symbol  allCatchNodes  [FE]      AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  tryBlock.getFirstChild();  Preconditions.checkState(tryBlock!=  null);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  tryBlock.getFirstChild();  Preconditions.checkState(tryBlock!=  null);	          Node    elseBlock    =    tryBlock.getNext();    Preconditions.checkState(tryBlock!=    null);    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	140	None	replace
197	[BUG]  [BUGGY]  Node  elseBlock  =  tryBlock.getNext();  Preconditions.checkState(tryBlock  ==  null);  [CE]  cannot  find  symbol  allCatchNodes  [FE]        AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  tryBlock.getNext();  Preconditions.checkState(tryBlock  ==  null);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  tryBlock.getNext();  Preconditions.checkState(tryBlock  ==  null);	          Node    elseBlock    =    tryBlock.getNext();    Preconditions.checkState(tryBlock!=    null);    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	140	None	replace
198	[BUG]  [BUGGY]  Node  elseBlock  =  tryBlock.getNext();  Preconditions.checkState(n!=  null);  [CE]  cannot  find  symbol  allCatchNodes  [FE]          AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  tryBlock.getNext();  Preconditions.checkState(n!=  null);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  tryBlock.getNext();  Preconditions.checkState(n!=  null);	          Node    elseBlock    =    tryBlock.getNext();    Preconditions.checkState(tryBlock!=    null);    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	140	None	replace
199	[BUG]  [BUGGY]  Node  elseBlock  =  n.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  Preconditions.checkState(allCatchNodes.hasOneChild());  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]            AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  n.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  Preconditions.checkState(allCatchNodes.hasOneChild());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  n.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  Preconditions.checkState(allCatchNodes.hasOneChild());	          Node    elseBlock    =    n.getFirstChild();    Node    elseBlock    =    n.getFirstChild();    Preconditions.checkState(allCatchNodes.hasOneChild());    	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	79	None	replace
200	[BUG]  [BUGGY]  Node  elseBlock  =  n.getFirstChild();  Preconditions.checkState(allCatchNodes.hasOneChild());  [CE]  cannot  find  symbol  allCatchNodes  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  n.getFirstChild();  Preconditions.checkState(allCatchNodes.hasOneChild());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  n.getFirstChild();  Preconditions.checkState(allCatchNodes.hasOneChild());	          Node    elseBlock    =    n.getFirstChild();    Node    elseBlock    =    n.getFirstChild();    Preconditions.checkState(allCatchNodes.hasOneChild());    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	79	None	replace
201	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  Preconditions.checkState(allCatchNodes.hasOneChild());  [CE]  cannot  find  symbol  allCatchNodes  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  Preconditions.checkState(allCatchNodes.hasOneChild());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  Preconditions.checkState(allCatchNodes.hasOneChild());	          Node    elseBlock    =    n.getFirstChild();    Node    elseBlock    =    n.getFirstChild();    Preconditions.checkState(allCatchNodes.hasOneChild());    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	79	None	replace
202	[BUG]  [BUGGY]  n.addChildToFront(trueBlock);  [CE]  cannot  find  symbol  trueBlock  [FE]        RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  n.addChildToFront(trueBlock);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	n.addChildToFront(trueBlock);	  n.addChildToFront(tryBlock);    	non-compiled	[CE]  cannot  find  symbol  trueBlock	114	None	replace
203	[BUG]  [BUGGY]  n.addChildToFront(falseBlock);  [CE]  cannot  find  symbol  falseBlock  [FE]          RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  n.addChildToFront(falseBlock);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	n.addChildToFront(falseBlock);	  n.addChildToFront(tryBlock);    	non-compiled	[CE]  cannot  find  symbol  falseBlock	114	None	replace
204	[BUG]  [BUGGY]  n.addChildToFront(labelName);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]            RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  n.addChildToFront(labelName);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	n.addChildToFront(labelName);	  n.addChildToFront(tryBlock);    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	114	None	replace
205	[BUG]  [BUGGY]  n.addChildToFront(c);  [CE]  cannot  find  symbol  c  [FE]              RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  n.addChildToFront(c);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	n.addChildToFront(c);	  n.addChildToFront(tryBlock);    	non-compiled	[CE]  cannot  find  symbol  c	114	None	replace
206	[BUG]  [BUGGY]  Node  n  =  tryBlock.getFirstChild();  Preconditions.checkState(t.isTry());  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  n  =  tryBlock.getFirstChild();  Preconditions.checkState(t.isTry());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  n  =  tryBlock.getFirstChild();  Preconditions.checkState(t.isTry());	          Preconditions.checkState(n.isTry());    Node    n    =    tryBlock.getFirstChild();    Preconditions.checkState(n.isTry());    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	101	None	replace
207	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isExitBlock(n)||  NodeUtil.isExitBlock(n));  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(NodeUtil.isExitBlock(n)||  NodeUtil.isExitBlock(n));  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(NodeUtil.isExitBlock(n)||  NodeUtil.isExitBlock(n));	  Preconditions.checkState(NodeUtil.isExitBlock(n));    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
208	[BUG]  [BUGGY]  Preconditions.checkState(tryBlock.isTree()  &&  n.isTree());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(tryBlock.isTree()  &&  n.isTree());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(tryBlock.isTree()  &&  n.isTree());	  Preconditions.checkState(n.isTree()    &&    tryBlock.isTree());    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
209	[BUG]  [BUGGY]  Preconditions.checkState(labelName.isTree()  &&  tryBlock.isTree());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(labelName.isTree()  &&  tryBlock.isTree());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(labelName.isTree()  &&  tryBlock.isTree());	  Preconditions.checkState(n.isTree()    &&    tryBlock.isTree());    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
210	[BUG]  [BUGGY]  Preconditions.checkState(t.isTree()  &&  tryBlock.isTree());  [CE]  cannot  find  symbol  t  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(t.isTree()  &&  tryBlock.isTree());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(t.isTree()  &&  tryBlock.isTree());	  Preconditions.checkState(n.isTree()    &&    tryBlock.isTree());    	non-compiled	[CE]  cannot  find  symbol  t	57	None	replace
211	[BUG]  [BUGGY]  Preconditions.checkState(labelName.isTry());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(labelName.isTry());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(labelName.isTry());	  Preconditions.checkState(tryBlock.isTry());    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
212	[BUG]  [BUGGY]  Preconditions.checkState(falseBlock.isTry());  [CE]  cannot  find  symbol  falseBlock  [FE]          AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(falseBlock.isTry());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(falseBlock.isTry());	  Preconditions.checkState(tryBlock.isTry());    	non-compiled	[CE]  cannot  find  symbol  falseBlock	22	None	replace
213	[BUG]  [BUGGY]  Preconditions.checkState(!tryBlock.isTry());  [CE]  cannot  find  symbol  allCatchNodes  [FE]            AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(!tryBlock.isTry());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(!tryBlock.isTry());	  Preconditions.checkState(tryBlock.isTry());    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	22	None	replace
214	[BUG]  [BUGGY]  Node  elseBlock  =  tryBlock.getFirstChild();  node  elseBlock  =  elseBlock.getFirstChild();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  tryBlock.getFirstChild();  node  elseBlock  =  elseBlock.getFirstChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  tryBlock.getFirstChild();  node  elseBlock  =  elseBlock.getFirstChild();	          Node    elseBlock    =    tryBlock.getFirstChild();    node    elseBlock    =    tryBlock.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	149	None	replace
215	[BUG]  [BUGGY]  Node  elseBlock  =  tryBlock!=  null?  null  :  tryBlock.getFirstChild();  [CE]  cannot  find  symbol  allCatchNodes  [FE]          AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  tryBlock!=  null?  null  :  tryBlock.getFirstChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  tryBlock!=  null?  null  :  tryBlock.getFirstChild();	          Node    elseBlock    =    tryBlock.getFirstChild();    node    elseBlock    =    tryBlock.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	149	None	replace
216	[BUG]  [BUGGY]          Node    elseBlock    =    tryBlock.getNext();    Node  anotherBlock  =  tryBlock.getNext();  Node  elseBlock  =  tryBlock.getNext();  Node  anotherBlock  =  tryBlock.getNext();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Node    elseBlock    =    tryBlock.getNext();    Node  anotherBlock  =  tryBlock.getNext();  Node  elseBlock  =  tryBlock.getNext();  Node  anotherBlock  =  tryBlock.getNext();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Node        elseBlock        =        tryBlock.getNext();        Node    anotherBlock    =    tryBlock.getNext();    Node  elseBlock  =  tryBlock.getNext();  Node  anotherBlock  =  tryBlock.getNext();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	44	None	add
217	[BUG]  [BUGGY]          Node    elseBlock    =    tryBlock.getNext();    Node  anotherBlock  =  tryBlock.getNext();  Node  anotherBlock  =  tryBlock.getNext();  Node  anotherBlock  =  tryBlock.getNext();  [CE]  variable  anotherBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Node    elseBlock    =    tryBlock.getNext();    Node  anotherBlock  =  tryBlock.getNext();  Node  anotherBlock  =  tryBlock.getNext();  Node  anotherBlock  =  tryBlock.getNext();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Node        elseBlock        =        tryBlock.getNext();        Node    anotherBlock    =    tryBlock.getNext();    Node  anotherBlock  =  tryBlock.getNext();  Node  anotherBlock  =  tryBlock.getNext();	  	non-compiled	[CE]  variable  anotherBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	44	None	add
218	[BUG]  [BUGGY]          Node    elseBlock    =    tryBlock.getNext();    Node  anotherBlock  =  tryBlock.getNext();  Node  otherBlock  =  tryBlock.getNext();  Node  anotherBlock  =  tryBlock.getNext();  [CE]  variable  anotherBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Node    elseBlock    =    tryBlock.getNext();    Node  anotherBlock  =  tryBlock.getNext();  Node  otherBlock  =  tryBlock.getNext();  Node  anotherBlock  =  tryBlock.getNext();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Node        elseBlock        =        tryBlock.getNext();        Node    anotherBlock    =    tryBlock.getNext();    Node  otherBlock  =  tryBlock.getNext();  Node  anotherBlock  =  tryBlock.getNext();	  	non-compiled	[CE]  variable  anotherBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	44	None	add
219	[BUG]  [BUGGY]          Node    elseBlock    =    tryBlock.getNext();    Node  anotherBlock  =  tryBlock.getNext();  Node  elseBlock  =  tryBlock.getNext();  Node  otherBlock  =  tryBlock.getNext();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Node    elseBlock    =    tryBlock.getNext();    Node  anotherBlock  =  tryBlock.getNext();  Node  elseBlock  =  tryBlock.getNext();  Node  otherBlock  =  tryBlock.getNext();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Node        elseBlock        =        tryBlock.getNext();        Node    anotherBlock    =    tryBlock.getNext();    Node  elseBlock  =  tryBlock.getNext();  Node  otherBlock  =  tryBlock.getNext();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	44	None	add
220	[BUG]  [BUGGY]          Node    elseBlock    =    tryBlock.getNext();    Node  anotherBlock  =  tryBlock.getNext();  Node  elseBlock  =  attemptBlock.getNext();  Node  anotherBlock  =  tryBlock.getNext();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]            AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Node    elseBlock    =    tryBlock.getNext();    Node  anotherBlock  =  tryBlock.getNext();  Node  elseBlock  =  attemptBlock.getNext();  Node  anotherBlock  =  tryBlock.getNext();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Node        elseBlock        =        tryBlock.getNext();        Node    anotherBlock    =    tryBlock.getNext();    Node  elseBlock  =  attemptBlock.getNext();  Node  anotherBlock  =  tryBlock.getNext();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	44	None	add
221	[BUG]  [BUGGY]  Node  elseBlock  =  attemptBlock.getNext();  [CE]  cannot  find  symbol  attemptBlock  [FE]        AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  attemptBlock.getNext();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  attemptBlock.getNext();	          Node    elseBlock    =    tryBlock.getNext();    Node    elseBlock    =    attemptBlock.getNext();    	non-compiled	[CE]  cannot  find  symbol  attemptBlock	163	None	replace
222	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(c,  labelName);  [CE]  cannot  find  symbol  c  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(c,  labelName);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(c,  labelName);	  Node    allCatchNodes    =    NodeUtil.getAllCatchNodes(labelName);    	non-compiled	[CE]  cannot  find  symbol  c	36	None	replace
223	[BUG]  [BUGGY]  node.removeChild(tryBlock);  NodeUtil.removeChild(n,  labelName);  [CE]  cannot  find  symbol  node  [FE]                  RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  node.removeChild(tryBlock);  NodeUtil.removeChild(n,  labelName);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	node.removeChild(tryBlock);  NodeUtil.removeChild(n,  labelName);	          n.removeChild(tryBlock);    NodeUtil.removeChild(n);    	non-compiled	[CE]  cannot  find  symbol  node	97	None	replace
224	[BUG]  [BUGGY]  node.removeChild(tryBlock);  NodeUtil.removeChild(n,  tryMinimizeExits);  [CE]  cannot  find  symbol  node  [FE]                    RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  node.removeChild(tryBlock);  NodeUtil.removeChild(n,  tryMinimizeExits);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	node.removeChild(tryBlock);  NodeUtil.removeChild(n,  tryMinimizeExits);	          n.removeChild(tryBlock);    NodeUtil.removeChild(n);    	non-compiled	[CE]  cannot  find  symbol  node	97	None	replace
225	[BUG]  [BUGGY]  node.removeChild(tryBlock);  NodeUtil.removeChild(n,  exitType);  [CE]  cannot  find  symbol  node  [FE]                      RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  node.removeChild(tryBlock);  NodeUtil.removeChild(n,  exitType);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	node.removeChild(tryBlock);  NodeUtil.removeChild(n,  exitType);	          n.removeChild(tryBlock);    NodeUtil.removeChild(n);    	non-compiled	[CE]  cannot  find  symbol  node	97	None	replace
226	[BUG]  [BUGGY]  Node  allCatchNodes  =  attemptBlock.getLastChild();  [CE]  cannot  find  symbol  attemptBlock  [FE]    AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  attemptBlock.getLastChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  attemptBlock.getLastChild();	  Node    allCatchNodes    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  attemptBlock	179	None	replace
227	[BUG]  [BUGGY]  Node  c  =  tryBlock.getNext();  Preconditions.checkState(NodeUtil.hasCatchHandler(labelName));  [CE]  method  hasCatchHandler  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  c  =  tryBlock.getNext();  Preconditions.checkState(NodeUtil.hasCatchHandler(labelName));  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  c  =  tryBlock.getNext();  Preconditions.checkState(NodeUtil.hasCatchHandler(labelName));	          Node    c    =    tryBlock.getNext();    Node    c    =    tryBlock.getNext();    Preconditions.checkState(NodeUtil.hasCatchHandler(labelName));    	non-compiled	[CE]  method  hasCatchHandler  in  class  NodeUtil  cannot  be  applied  to  given  types;	69	None	replace
228	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.hasCatchHandler(labelName));  [CE]  method  hasCatchHandler  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(NodeUtil.hasCatchHandler(labelName));  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(NodeUtil.hasCatchHandler(labelName));	          Node    c    =    tryBlock.getNext();    Node    c    =    tryBlock.getNext();    Preconditions.checkState(NodeUtil.hasCatchHandler(labelName));    	non-compiled	[CE]  method  hasCatchHandler  in  class  NodeUtil  cannot  be  applied  to  given  types;	69	None	replace
229	[BUG]  [BUGGY]  Node  c  =  tryBlock.getNext();  Preconditions.checkState(NodeUtil.hasCatchHandler(c));  [CE]  cannot  find  symbol  allCatchNodes  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  c  =  tryBlock.getNext();  Preconditions.checkState(NodeUtil.hasCatchHandler(c));  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  c  =  tryBlock.getNext();  Preconditions.checkState(NodeUtil.hasCatchHandler(c));	          Node    c    =    tryBlock.getNext();    Node    c    =    tryBlock.getNext();    Preconditions.checkState(NodeUtil.hasCatchHandler(labelName));    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	69	None	replace
230	[BUG]  [BUGGY]  Node  c  =  tryBlock.getFirstChild();  Preconditions.checkState(NodeUtil.hasCatchHandler(labelName));  [CE]  method  hasCatchHandler  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  c  =  tryBlock.getFirstChild();  Preconditions.checkState(NodeUtil.hasCatchHandler(labelName));  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  c  =  tryBlock.getFirstChild();  Preconditions.checkState(NodeUtil.hasCatchHandler(labelName));	          Node    c    =    tryBlock.getNext();    Node    c    =    tryBlock.getNext();    Preconditions.checkState(NodeUtil.hasCatchHandler(labelName));    	non-compiled	[CE]  method  hasCatchHandler  in  class  NodeUtil  cannot  be  applied  to  given  types;	69	None	replace
231	[BUG]  [BUGGY]  Node  elseBlock  =  tryBlock.getFirstChild();  Node  thenBlock  =  tryBlock.getLastChild();  [CE]  cannot  find  symbol  allCatchNodes  [FE]    AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  tryBlock.getFirstChild();  Node  thenBlock  =  tryBlock.getLastChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  tryBlock.getFirstChild();  Node  thenBlock  =  tryBlock.getLastChild();	          Node    elseBlock    =    tryBlock.getLastChild();    Node    thenBlock    =    tryBlock.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	30	None	replace
232	[BUG]  [BUGGY]  Node  elseBlock  =  tryBlock.getNext();  Node  thenBlock  =  tryBlock.getLastChild();  [CE]  cannot  find  symbol  allCatchNodes  [FE]      AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  tryBlock.getNext();  Node  thenBlock  =  tryBlock.getLastChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  tryBlock.getNext();  Node  thenBlock  =  tryBlock.getLastChild();	          Node    elseBlock    =    tryBlock.getLastChild();    Node    thenBlock    =    tryBlock.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	30	None	replace
233	[BUG]  [BUGGY]  Node  elseBlock  =  tryBlock.getLastChild();  Node  thenBlock  =  tryBlock.getFirstChild();  [CE]  cannot  find  symbol  allCatchNodes  [FE]        AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  tryBlock.getLastChild();  Node  thenBlock  =  tryBlock.getFirstChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  tryBlock.getLastChild();  Node  thenBlock  =  tryBlock.getFirstChild();	          Node    elseBlock    =    tryBlock.getLastChild();    Node    thenBlock    =    tryBlock.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	30	None	replace
234	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Preconditions.checkState(n.isTry());    Preconditions.checkState(n.isTry());  Preconditions.checkState(n.isTry());  Preconditions.checkState(n.isTry());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	add	                Preconditions.checkState(n.isTry());        Preconditions.checkState(n.isTry());    Preconditions.checkState(n.isTry());  Preconditions.checkState(n.isTry());	  	compilable	  [FE]  AssertionFailedError  	99	2	add
235	[BUG]  [BUGGY]          Preconditions.checkState(n.isTry());    Preconditions.checkState(n.isTry());  Preconditions.checkState(n.isTry());  Preconditions.checkState(n.isTry());  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Preconditions.checkState(n.isTry());    Preconditions.checkState(n.isTry());  Preconditions.checkState(n.isTry());  Preconditions.checkState(n.isTry());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Preconditions.checkState(n.isTry());        Preconditions.checkState(n.isTry());    Preconditions.checkState(n.isTry());  Preconditions.checkState(n.isTry());	  	compilable	  [FE]  AssertionFailedError  	99	2	add
236	[BUG]  [BUGGY]          Preconditions.checkState(n.isTry());    Preconditions.checkState(n.isTry());  Node  n  =  tryBlock.getFirstChild();  Preconditions.checkState(n.isTry());  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Preconditions.checkState(n.isTry());    Preconditions.checkState(n.isTry());  Node  n  =  tryBlock.getFirstChild();  Preconditions.checkState(n.isTry());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Preconditions.checkState(n.isTry());        Preconditions.checkState(n.isTry());    Node  n  =  tryBlock.getFirstChild();  Preconditions.checkState(n.isTry());	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	99	None	add
237	[BUG]  [BUGGY]          Preconditions.checkState(n.isTry());    Preconditions.checkState(n.isTry());  Node  n  =  tryBlock.getNext();  Preconditions.checkState(n.isTry());  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Preconditions.checkState(n.isTry());    Preconditions.checkState(n.isTry());  Node  n  =  tryBlock.getNext();  Preconditions.checkState(n.isTry());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Preconditions.checkState(n.isTry());        Preconditions.checkState(n.isTry());    Node  n  =  tryBlock.getNext();  Preconditions.checkState(n.isTry());	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	99	None	add
238	[BUG]  [BUGGY]          Preconditions.checkState(n.isTry());    Preconditions.checkState(n.isTry());  Node  n  =  tryBlock.getLastChild();  Preconditions.checkState(n.isTry());  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Preconditions.checkState(n.isTry());    Preconditions.checkState(n.isTry());  Node  n  =  tryBlock.getLastChild();  Preconditions.checkState(n.isTry());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Preconditions.checkState(n.isTry());        Preconditions.checkState(n.isTry());    Node  n  =  tryBlock.getLastChild();  Preconditions.checkState(n.isTry());	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	99	None	add
239	[BUG]  [BUGGY]          Preconditions.checkState(n.isTry());    Preconditions.checkState(n.isTry());  Preconditions.checkState(t.isTry());  Preconditions.checkState(n.isTry());  [CE]  cannot  find  symbol  t  [FE]            AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Preconditions.checkState(n.isTry());    Preconditions.checkState(n.isTry());  Preconditions.checkState(t.isTry());  Preconditions.checkState(n.isTry());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Preconditions.checkState(n.isTry());        Preconditions.checkState(n.isTry());    Preconditions.checkState(t.isTry());  Preconditions.checkState(n.isTry());	  	non-compiled	[CE]  cannot  find  symbol  t	99	None	add
240	[BUG]  [BUGGY]  Node  elseBlock  =  tryBlock.getLastChild();  Node  otherBlock  =  tryBlock.getFirstChild();  [CE]  cannot  find  symbol  allCatchNodes  [FE]    AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  tryBlock.getLastChild();  Node  otherBlock  =  tryBlock.getFirstChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  tryBlock.getLastChild();  Node  otherBlock  =  tryBlock.getFirstChild();	          Node    elseBlock    =    tryBlock.getFirstChild();    Node    otherBlock    =    tryBlock.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	8	None	replace
241	[BUG]  [BUGGY]  Node  elseBlock  =  tryBlock.getNext();  Node  otherBlock  =  tryBlock.getFirstChild();  [CE]  cannot  find  symbol  allCatchNodes  [FE]      AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  tryBlock.getNext();  Node  otherBlock  =  tryBlock.getFirstChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  tryBlock.getNext();  Node  otherBlock  =  tryBlock.getFirstChild();	          Node    elseBlock    =    tryBlock.getFirstChild();    Node    otherBlock    =    tryBlock.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	8	None	replace
242	[BUG]  [BUGGY]  Node  elseBlock  =  tryBlock.getFirstChild();  Node  otherBlock  =  otherBlock.getFirstChild();  [CE]  cannot  find  symbol  allCatchNodes  [FE]        AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  tryBlock.getFirstChild();  Node  otherBlock  =  otherBlock.getFirstChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  tryBlock.getFirstChild();  Node  otherBlock  =  otherBlock.getFirstChild();	          Node    elseBlock    =    tryBlock.getFirstChild();    Node    otherBlock    =    tryBlock.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	8	None	replace
243	[BUG]  [BUGGY]  Node  elseBlock  =  attemptBlock.getFirstChild();  [CE]  cannot  find  symbol  attemptBlock  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  attemptBlock.getFirstChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  attemptBlock.getFirstChild();	          Node    elseBlock    =    tryBlock.getFirstChild();    Node    elseBlock    =    attemptBlock.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  attemptBlock	11	None	replace
244	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock);  Node  allSatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	add	Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock);  Node  allSatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes);	  Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock);    Node    allSatchNodes    =    NodeUtil.getCatchBlock(tryBlock);    	compilable	  [FE]  RuntimeException  	49	6	replace
245	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock);  Node  allSatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes);  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock);  Node  allSatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock);  Node  allSatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes);	  Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock);    Node    allSatchNodes    =    NodeUtil.getCatchBlock(tryBlock);    	compilable	  [FE]  RuntimeException  	49	6	replace
246	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(exitType,  labelName);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(exitType,  labelName);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(exitType,  labelName);	  Node    allCatchNodes    =    NodeUtil.getAllCatchNodes(exitType);    	non-compiled	[CE]  cannot  find  symbol	150	None	replace
247	[BUG]  [BUGGY]  n.removeChild(n.getNext());  [CE]  cannot  find  symbol  allCatchNodes  [FE]              RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  n.removeChild(n.getNext());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	n.removeChild(n.getNext());	  n.removeChild(tryBlock.getNext());    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	4	None	replace
248	[BUG]  [BUGGY]  n.removeChild(labelName.getNext());  [CE]  cannot  find  symbol  [FE]                RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  n.removeChild(labelName.getNext());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	n.removeChild(labelName.getNext());	  n.removeChild(tryBlock.getNext());    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
249	[BUG]  [BUGGY]  n.removeChild(tryBlock.getFirstChild());  [CE]  cannot  find  symbol  allCatchNodes  [FE]                  RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  n.removeChild(tryBlock.getFirstChild());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	n.removeChild(tryBlock.getFirstChild());	  n.removeChild(tryBlock.getNext());    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	4	None	replace
250	[BUG]  [BUGGY]  n.removeChild(testBlock.getNext());  [CE]  cannot  find  symbol  testBlock  [FE]                    RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  n.removeChild(testBlock.getNext());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	n.removeChild(testBlock.getNext());	  n.removeChild(tryBlock.getNext());    	non-compiled	[CE]  cannot  find  symbol  testBlock	4	None	replace
251	[BUG]  [BUGGY]  Node  elseBlock  =  tryBlock.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  Preconditions.checkState(alwaysBlock.hasOneChild());  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  tryBlock.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  Preconditions.checkState(alwaysBlock.hasOneChild());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  tryBlock.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  Preconditions.checkState(alwaysBlock.hasOneChild());	          Node    elseBlock    =    n.getFirstChild();    Node    elseBlock    =    n.getFirstChild();    Preconditions.checkState(alwaysBlock.hasOneChild());    	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	81	None	replace
252	[BUG]  [BUGGY]  Node  elseBlock  =  n.getFirstChild();  Preconditions.checkState(alwaysBlock.hasOneChild());  [CE]  cannot  find  symbol  alwaysBlock  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  n.getFirstChild();  Preconditions.checkState(alwaysBlock.hasOneChild());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  n.getFirstChild();  Preconditions.checkState(alwaysBlock.hasOneChild());	          Node    elseBlock    =    n.getFirstChild();    Node    elseBlock    =    n.getFirstChild();    Preconditions.checkState(alwaysBlock.hasOneChild());    	non-compiled	[CE]  cannot  find  symbol  alwaysBlock	81	None	replace
253	[BUG]  [BUGGY]  Node  elseBlock  =  n.getFirstChild();  Node  elseBlock  =  elseBlock.getFirstChild();  Preconditions.checkState(alwaysBlock.hasOneChild());  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  n.getFirstChild();  Node  elseBlock  =  elseBlock.getFirstChild();  Preconditions.checkState(alwaysBlock.hasOneChild());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  n.getFirstChild();  Node  elseBlock  =  elseBlock.getFirstChild();  Preconditions.checkState(alwaysBlock.hasOneChild());	          Node    elseBlock    =    n.getFirstChild();    Node    elseBlock    =    n.getFirstChild();    Preconditions.checkState(alwaysBlock.hasOneChild());    	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	81	None	replace
254	[BUG]  [BUGGY]  Node  elseBlock  =  n.getOwnerChild();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  n.getOwnerChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  n.getOwnerChild();	  Node    elseBlock    =    tryBlock.getOwnerChild();    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
255	[BUG]  [BUGGY]  Node  elseBlock  =  attemptBlock.getOwnerChild();  [CE]  cannot  find  symbol  attemptBlock  [FE]          AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  attemptBlock.getOwnerChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  attemptBlock.getOwnerChild();	  Node    elseBlock    =    tryBlock.getOwnerChild();    	non-compiled	[CE]  cannot  find  symbol  attemptBlock	71	None	replace
256	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchNodes(n,  tryBlock,  exitType);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchNodes(n,  tryBlock,  exitType);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchNodes(n,  tryBlock,  exitType);	  Node    allCatchNodes    =    NodeUtil.getCatchNodes(n,    tryBlock);    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
257	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchNodes(n,  tryBlock,  labelName);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchNodes(n,  tryBlock,  labelName);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchNodes(n,  tryBlock,  labelName);	  Node    allCatchNodes    =    NodeUtil.getCatchNodes(n,    tryBlock);    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
258	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchNodes(n,  exitType,  tryBlock);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchNodes(n,  exitType,  tryBlock);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchNodes(n,  exitType,  tryBlock);	  Node    allCatchNodes    =    NodeUtil.getCatchNodes(n,    tryBlock);    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
259	[BUG]  [BUGGY]  n.removeChild(labelName);  Node  n  =  tryBlock.getFirstChild();  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]            RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  n.removeChild(labelName);  Node  n  =  tryBlock.getFirstChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	n.removeChild(labelName);  Node  n  =  tryBlock.getFirstChild();	          n.removeChild(tryBlock);    Node    n    =    tryBlock.getFirstChild();    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	94	None	replace
260	[BUG]  [BUGGY]  node.removeChild(tryBlock);  Node  n  =  tryBlock.getFirstChild();  [CE]  cannot  find  symbol  node  [FE]              RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  node.removeChild(tryBlock);  Node  n  =  tryBlock.getFirstChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	node.removeChild(tryBlock);  Node  n  =  tryBlock.getFirstChild();	          n.removeChild(tryBlock);    Node    n    =    tryBlock.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  node	94	None	replace
261	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  tryBlock.getNext();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	add	Node  allCatchNodes  =  tryBlock.getNext();	  Node    allCatchNodes    =    tryBlock.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	64	2	replace
262	[BUG]  [BUGGY]  Node  allCatchNodes  =  tryBlock.getNext();  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  tryBlock.getNext();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  tryBlock.getNext();	  Node    allCatchNodes    =    tryBlock.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	64	2	replace
263	[BUG]  [BUGGY]  Node  allCatchNodes  =  tryBlock.getAllChildren();  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  tryBlock.getAllChildren();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  tryBlock.getAllChildren();	  Node    allCatchNodes    =    tryBlock.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
264	[BUG]  [BUGGY]  Node  elseBlock  =  tryBlock.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  Preconditions.checkState(anythingCatchNodes.hasOneChild());  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  tryBlock.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  Preconditions.checkState(anythingCatchNodes.hasOneChild());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  tryBlock.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  Preconditions.checkState(anythingCatchNodes.hasOneChild());	          Node    elseBlock    =    n.getFirstChild();    Node    elseBlock    =    n.getFirstChild();    Preconditions.checkState(anythingCatchNodes.hasOneChild());    	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	78	None	replace
265	[BUG]  [BUGGY]  Node  elseBlock  =  n.getFirstChild();  Preconditions.checkState(anythingCatchNodes.hasOneChild());  [CE]  cannot  find  symbol  anythingCatchNodes  [FE]            AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  n.getFirstChild();  Preconditions.checkState(anythingCatchNodes.hasOneChild());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  n.getFirstChild();  Preconditions.checkState(anythingCatchNodes.hasOneChild());	          Node    elseBlock    =    n.getFirstChild();    Node    elseBlock    =    n.getFirstChild();    Preconditions.checkState(anythingCatchNodes.hasOneChild());    	non-compiled	[CE]  cannot  find  symbol  anythingCatchNodes	78	None	replace
266	[BUG]  [BUGGY]  Node  elseBlock  =  n.getFirstChild();  Node  elseBlock  =  elseBlock.getFirstChild();  Preconditions.checkState(anythingCatchNodes.hasOneChild());  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  n.getFirstChild();  Node  elseBlock  =  elseBlock.getFirstChild();  Preconditions.checkState(anythingCatchNodes.hasOneChild());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  n.getFirstChild();  Node  elseBlock  =  elseBlock.getFirstChild();  Preconditions.checkState(anythingCatchNodes.hasOneChild());	          Node    elseBlock    =    n.getFirstChild();    Node    elseBlock    =    n.getFirstChild();    Preconditions.checkState(anythingCatchNodes.hasOneChild());    	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	78	None	replace
267	[BUG]  [BUGGY]  n.removeChild(testNode(tryBlock));  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  n.removeChild(testNode(tryBlock));  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	n.removeChild(testNode(tryBlock));	  n.removeChild(t);    	non-compiled	[CE]  cannot  find  symbol	173	None	replace
268	[BUG]  [BUGGY]  Node  allCatchNodes  =  n.getFirstChild();  Node  allCatchNodes  =  n.getFirstChild();  [CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  n.getFirstChild();  Node  allCatchNodes  =  n.getFirstChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node    allCatchNodes    =    n.getFirstChild();    Node  allCatchNodes  =  n.getFirstChild();	  	non-compiled	[CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	125	None	add
269	[BUG]  [BUGGY]  Node  allCatchNodes  =  n.getFirstChild();  Node  allCatchNodes  =  n.getFirstChild();  Preconditions.checkState(allCatchNodes.hasOneChild());  [CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  n.getFirstChild();  Node  allCatchNodes  =  n.getFirstChild();  Preconditions.checkState(allCatchNodes.hasOneChild());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node    allCatchNodes    =    n.getFirstChild();    Node  allCatchNodes  =  n.getFirstChild();  Preconditions.checkState(allCatchNodes.hasOneChild());	  	non-compiled	[CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	125	None	add
270	[BUG]  [BUGGY]  Node  allCatchNodes  =  n.getFirstChild();  Node  allCatchNodes  =  n.getLastChild();  [CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  n.getFirstChild();  Node  allCatchNodes  =  n.getLastChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node    allCatchNodes    =    n.getFirstChild();    Node  allCatchNodes  =  n.getLastChild();	  	non-compiled	[CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	125	None	add
271	[BUG]  [BUGGY]  Node  allCatchNodes  =  n.getFirstChild();  Node  allCatchNodes  =  n.getFirstChild();  preconditions.checkState(allCatchNodes.hasOneChild());  [CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  n.getFirstChild();  Node  allCatchNodes  =  n.getFirstChild();  preconditions.checkState(allCatchNodes.hasOneChild());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node    allCatchNodes    =    n.getFirstChild();    Node  allCatchNodes  =  n.getFirstChild();  preconditions.checkState(allCatchNodes.hasOneChild());	  	non-compiled	[CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	125	None	add
272	[BUG]  [BUGGY]  Node  allCatchNodes  =  n.getFirstChild();  Node  allCatchNodes  =  n.getFirstChild();  }  else  {  Preconditions.checkState(allCatchNodes.hasOneChild());  [CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]            AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  n.getFirstChild();  Node  allCatchNodes  =  n.getFirstChild();  }  else  {  Preconditions.checkState(allCatchNodes.hasOneChild());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node    allCatchNodes    =    n.getFirstChild();    Node  allCatchNodes  =  n.getFirstChild();  }  else  {  Preconditions.checkState(allCatchNodes.hasOneChild());	  	non-compiled	[CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	125	None	add
273	[BUG]  [BUGGY]  Node  allCatchNodes  =  n.getFirstChild();  Node  allCatchNodes  =  n.getFirstChild();  Preconditions.checkState(AllCatchNodes.hasOneChild());  [CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]              AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  n.getFirstChild();  Node  allCatchNodes  =  n.getFirstChild();  Preconditions.checkState(AllCatchNodes.hasOneChild());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node    allCatchNodes    =    n.getFirstChild();    Node  allCatchNodes  =  n.getFirstChild();  Preconditions.checkState(AllCatchNodes.hasOneChild());	  	non-compiled	[CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	125	None	add
274	[BUG]  [BUGGY]  Node  c  =  tryBlock!=  null?  null  :  tryBlock.getNext();  [CE]  cannot  find  symbol  allCatchNodes  [FE]        AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  c  =  tryBlock!=  null?  null  :  tryBlock.getNext();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  c  =  tryBlock!=  null?  null  :  tryBlock.getNext();	          Node    c    =    tryBlock.getNext();    Node    c    =    tryBlock.getNext();    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	65	None	replace
275	[BUG]  [BUGGY]  Node  allCatchNodes  =  tryBlock.getFirstChild();  Node  allCatchNodes  =  tryBlock.getFirstChild();  [CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    RuntimeException    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  tryBlock.getFirstChild();  Node  allCatchNodes  =  tryBlock.getFirstChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node    allCatchNodes    =    tryBlock.getFirstChild();    Node  allCatchNodes  =  tryBlock.getFirstChild();	  	non-compiled	[CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	63	None	add
276	[BUG]  [BUGGY]  Node  allCatchNodes  =  tryBlock.getFirstChild();  Node  allCatchNodes  =  tryBlock.getLastChild();  [CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      RuntimeException    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  tryBlock.getFirstChild();  Node  allCatchNodes  =  tryBlock.getLastChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node    allCatchNodes    =    tryBlock.getFirstChild();    Node  allCatchNodes  =  tryBlock.getLastChild();	  	non-compiled	[CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	63	None	add
277	[BUG]  [BUGGY]  Node  allCatchNodes  =  tryBlock.getFirstChild();  Node  allSatchNodes  =  tryBlock.getFirstChild();  [CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        RuntimeException    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  tryBlock.getFirstChild();  Node  allSatchNodes  =  tryBlock.getFirstChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node    allCatchNodes    =    tryBlock.getFirstChild();    Node  allSatchNodes  =  tryBlock.getFirstChild();	  	non-compiled	[CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	63	None	add
278	[BUG]  [BUGGY]  Node  allCatchNodes  =  tryBlock.getFirstChild();  Node  wholeCatchNodes  =  tryBlock.getFirstChild();  [CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          RuntimeException    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  tryBlock.getFirstChild();  Node  wholeCatchNodes  =  tryBlock.getFirstChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node    allCatchNodes    =    tryBlock.getFirstChild();    Node  wholeCatchNodes  =  tryBlock.getFirstChild();	  	non-compiled	[CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	63	None	add
279	[BUG]  [BUGGY]  Node  allCatchNodes  =  tryBlock.getFirstChild();  Node  allCatchNodes  =  attemptBlock.getFirstChild();  [CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]            RuntimeException    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  tryBlock.getFirstChild();  Node  allCatchNodes  =  attemptBlock.getFirstChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node    allCatchNodes    =    tryBlock.getFirstChild();    Node  allCatchNodes  =  attemptBlock.getFirstChild();	  	non-compiled	[CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	63	None	add
280	[BUG]  [BUGGY]  Node  c  =  attemptBlock.getNext();  [CE]  cannot  find  symbol  attemptBlock  [FE]        AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  c  =  attemptBlock.getNext();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  c  =  attemptBlock.getNext();	          Node    c    =    tryBlock.getNext();    Node    c    =    attemptBlock.getNext();    	non-compiled	[CE]  cannot  find  symbol  attemptBlock	154	None	replace
281	[BUG]  [BUGGY]  Preconditions.checkState(n.isTree(),  tryBlock,  exitType);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(n.isTree(),  tryBlock,  exitType);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(n.isTree(),  tryBlock,  exitType);	  Preconditions.checkState(n.isTree(),    tryBlock);    	non-compiled	[CE]  cannot  find  symbol	171	None	replace
282	[BUG]  [BUGGY]  Preconditions.checkState(tryBlock.isTree(),  n);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(tryBlock.isTree(),  n);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(tryBlock.isTree(),  n);	  Preconditions.checkState(n.isTree(),    tryBlock);    	non-compiled	[CE]  cannot  find  symbol	171	None	replace
283	[BUG]  [BUGGY]  Preconditions.checkState(n.isTree(),  exitType,  tryBlock);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(n.isTree(),  exitType,  tryBlock);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(n.isTree(),  exitType,  tryBlock);	  Preconditions.checkState(n.isTree(),    tryBlock);    	non-compiled	[CE]  cannot  find  symbol	171	None	replace
284	[BUG]  [BUGGY]  Preconditions.checkState(labelName.isTree(),  tryBlock);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(labelName.isTree(),  tryBlock);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(labelName.isTree(),  tryBlock);	  Preconditions.checkState(n.isTree(),    tryBlock);    	non-compiled	[CE]  cannot  find  symbol	171	None	replace
285	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock,  exitType,  labelName);  [CE]  method  getCatchBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]        RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock,  exitType,  labelName);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock,  exitType,  labelName);	  Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock,    labelName);    	non-compiled	[CE]  method  getCatchBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;	61	None	replace
286	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(c,  tryBlock,  labelName);  [CE]  cannot  find  symbol  c  [FE]          RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(c,  tryBlock,  labelName);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(c,  tryBlock,  labelName);	  Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock,    labelName);    	non-compiled	[CE]  cannot  find  symbol  c	61	None	replace
287	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n,  tryBlock,  labelName);  [CE]  method  getCatchBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]            RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n,  tryBlock,  labelName);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(n,  tryBlock,  labelName);	  Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock,    labelName);    	non-compiled	[CE]  method  getCatchBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;	61	None	replace
288	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock,  labelName,  exitType);  [CE]  method  getCatchBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]              RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock,  labelName,  exitType);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock,  labelName,  exitType);	  Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock,    labelName);    	non-compiled	[CE]  method  getCatchBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;	61	None	replace
289	[BUG]  [BUGGY]  Node  elseBlock  =  tryBlock.nextChild();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  tryBlock.nextChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  tryBlock.nextChild();	  Node    elseBlock    =    tryBlock.next();    	non-compiled	[CE]  cannot  find  symbol	141	None	replace
290	[BUG]  [BUGGY]  Node  elseBlock  =  tryBlock.next(),  exitType);  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  tryBlock.next(),  exitType);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  tryBlock.next(),  exitType);	  Node    elseBlock    =    tryBlock.next();    	non-compiled	[CE]  ';'  expected	141	None	replace
291	[BUG]  [BUGGY]  Node  elseBlock  =  n.next();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  n.next();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  n.next();	  Node    elseBlock    =    tryBlock.next();    	non-compiled	[CE]  cannot  find  symbol	141	None	replace
292	[BUG]  [BUGGY]  n.removeChild(labelName,  tryBlock);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]        RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  n.removeChild(labelName,  tryBlock);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	n.removeChild(labelName,  tryBlock);	  n.removeChild(labelName);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	1	None	replace
293	[BUG]  [BUGGY]  n.removeChild(tryBlock,  labelName);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]          RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  n.removeChild(tryBlock,  labelName);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	n.removeChild(tryBlock,  labelName);	  n.removeChild(labelName);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	1	None	replace
294	[BUG]  [BUGGY]  n.removeChild(labelName,  exitType);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]            RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  n.removeChild(labelName,  exitType);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	n.removeChild(labelName,  exitType);	  n.removeChild(labelName);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	1	None	replace
295	[BUG]  [BUGGY]  n.removeChild(c,  labelName);  [CE]  cannot  find  symbol  c  [FE]              RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  n.removeChild(c,  labelName);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	n.removeChild(c,  labelName);	  n.removeChild(labelName);    	non-compiled	[CE]  cannot  find  symbol  c	1	None	replace
296	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n,  tryBlock,  exitType);  [CE]  method  getCatchBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]        RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n,  tryBlock,  exitType);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(n,  tryBlock,  exitType);	  Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock,    exitType);    	non-compiled	[CE]  method  getCatchBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;	147	None	replace
297	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(c,  tryBlock,  exitType);  [CE]  cannot  find  symbol  c  [FE]          RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(c,  tryBlock,  exitType);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(c,  tryBlock,  exitType);	  Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock,    exitType);    	non-compiled	[CE]  cannot  find  symbol  c	147	None	replace
298	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n,  exitType);  [CE]  method  getCatchBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]            RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n,  exitType);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(n,  exitType);	  Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock,    exitType);    	non-compiled	[CE]  method  getCatchBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;	147	None	replace
299	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(labelName,  exitType);  [CE]  method  getCatchBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]        RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(labelName,  exitType);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(labelName,  exitType);	  Node    allCatchNodes    =    NodeUtil.getCatchBlock(labelName);    	non-compiled	[CE]  method  getCatchBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;	160	None	replace
300	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(c,  labelName);  [CE]  cannot  find  symbol  c  [FE]          RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(c,  labelName);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(c,  labelName);	  Node    allCatchNodes    =    NodeUtil.getCatchBlock(labelName);    	non-compiled	[CE]  cannot  find  symbol  c	160	None	replace
301	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(labelName,  escapeType);  [CE]  cannot  find  symbol  escapeType  [FE]            RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(labelName,  escapeType);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(labelName,  escapeType);	  Node    allCatchNodes    =    NodeUtil.getCatchBlock(labelName);    	non-compiled	[CE]  cannot  find  symbol  escapeType	160	None	replace
302	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          n.removeChild(tryBlock);    n.removeChild(tryBlock);  n.removeChild(tryBlock);  n.removeChild(tryBlock);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	add	                n.removeChild(tryBlock);        n.removeChild(tryBlock);    n.removeChild(tryBlock);  n.removeChild(tryBlock);	  	compilable	  [FE]  RuntimeException  	91	6	add
303	[BUG]  [BUGGY]          n.removeChild(tryBlock);    n.removeChild(tryBlock);  n.removeChild(tryBlock);  n.removeChild(tryBlock);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          n.removeChild(tryBlock);    n.removeChild(tryBlock);  n.removeChild(tryBlock);  n.removeChild(tryBlock);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                n.removeChild(tryBlock);        n.removeChild(tryBlock);    n.removeChild(tryBlock);  n.removeChild(tryBlock);	  	compilable	  [FE]  RuntimeException  	91	6	add
304	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          n.removeChild(tryBlock);    n.removeChild(tryBlock);  n.addChildToFront(tryBlock);  n.removeChild(tryBlock);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	add	                n.removeChild(tryBlock);        n.removeChild(tryBlock);    n.addChildToFront(tryBlock);  n.removeChild(tryBlock);	  	compilable	  [FE]  RuntimeException  	91	6	add
305	[BUG]  [BUGGY]          n.removeChild(tryBlock);    n.removeChild(tryBlock);  n.addChildToFront(tryBlock);  n.removeChild(tryBlock);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          n.removeChild(tryBlock);    n.removeChild(tryBlock);  n.addChildToFront(tryBlock);  n.removeChild(tryBlock);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                n.removeChild(tryBlock);        n.removeChild(tryBlock);    n.addChildToFront(tryBlock);  n.removeChild(tryBlock);	  	compilable	  [FE]  RuntimeException  	91	6	add
306	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          n.removeChild(tryBlock);    n.removeChild(tryBlock);  n.removeChild(tryBlock);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	add	                n.removeChild(tryBlock);        n.removeChild(tryBlock);    n.removeChild(tryBlock);	  	compilable	  [FE]  RuntimeException  	91	6	add
307	[BUG]  [BUGGY]          n.removeChild(tryBlock);    n.removeChild(tryBlock);  n.removeChild(tryBlock);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          n.removeChild(tryBlock);    n.removeChild(tryBlock);  n.removeChild(tryBlock);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                n.removeChild(tryBlock);        n.removeChild(tryBlock);    n.removeChild(tryBlock);	  	compilable	  [FE]  RuntimeException  	91	6	add
308	[BUG]  [BUGGY]          n.removeChild(tryBlock);    n.removeChild(tryBlock);  n.removeChild(tryBlock);  n.removeChild(tryBlock);  return;  [CE]  unreachable  statement  [FE]          RuntimeException    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          n.removeChild(tryBlock);    n.removeChild(tryBlock);  n.removeChild(tryBlock);  n.removeChild(tryBlock);  return;  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                n.removeChild(tryBlock);        n.removeChild(tryBlock);    n.removeChild(tryBlock);  n.removeChild(tryBlock);  return;	  	non-compiled	[CE]  unreachable  statement	91	None	add
309	[BUG]  [BUGGY]          Node    elseBlock    =    tryBlock.getFirstChild();    Node  otherBlock  =  tryBlock.getFirstChild();  Node  elseBlock  =  tryBlock.getFirstChild();  Node  otherBlock  =  tryBlock.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Node    elseBlock    =    tryBlock.getFirstChild();    Node  otherBlock  =  tryBlock.getFirstChild();  Node  elseBlock  =  tryBlock.getFirstChild();  Node  otherBlock  =  tryBlock.getFirstChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Node        elseBlock        =        tryBlock.getFirstChild();        Node    otherBlock    =    tryBlock.getFirstChild();    Node  elseBlock  =  tryBlock.getFirstChild();  Node  otherBlock  =  tryBlock.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	7	None	add
310	[BUG]  [BUGGY]          Node    elseBlock    =    tryBlock.getFirstChild();    Node  otherBlock  =  tryBlock.getFirstChild();  Node  elseBlock  =  tryBlock.getFirstChild();  Node  elseBlock  =  tryBlock.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Node    elseBlock    =    tryBlock.getFirstChild();    Node  otherBlock  =  tryBlock.getFirstChild();  Node  elseBlock  =  tryBlock.getFirstChild();  Node  elseBlock  =  tryBlock.getFirstChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Node        elseBlock        =        tryBlock.getFirstChild();        Node    otherBlock    =    tryBlock.getFirstChild();    Node  elseBlock  =  tryBlock.getFirstChild();  Node  elseBlock  =  tryBlock.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	7	None	add
311	[BUG]  [BUGGY]          Node    elseBlock    =    tryBlock.getFirstChild();    Node  otherBlock  =  tryBlock.getFirstChild();  Node  elseBlock  =  tryBlock.getFirstChild();  Node  otherBlock  =  tryBlock.getLastChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Node    elseBlock    =    tryBlock.getFirstChild();    Node  otherBlock  =  tryBlock.getFirstChild();  Node  elseBlock  =  tryBlock.getFirstChild();  Node  otherBlock  =  tryBlock.getLastChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Node        elseBlock        =        tryBlock.getFirstChild();        Node    otherBlock    =    tryBlock.getFirstChild();    Node  elseBlock  =  tryBlock.getFirstChild();  Node  otherBlock  =  tryBlock.getLastChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	7	None	add
312	[BUG]  [BUGGY]          Node    elseBlock    =    tryBlock.getFirstChild();    Node  otherBlock  =  tryBlock.getFirstChild();  Node  elseBlock  =  tryBlock.getFirstChild();  Node  othersBlock  =  tryBlock.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Node    elseBlock    =    tryBlock.getFirstChild();    Node  otherBlock  =  tryBlock.getFirstChild();  Node  elseBlock  =  tryBlock.getFirstChild();  Node  othersBlock  =  tryBlock.getFirstChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Node        elseBlock        =        tryBlock.getFirstChild();        Node    otherBlock    =    tryBlock.getFirstChild();    Node  elseBlock  =  tryBlock.getFirstChild();  Node  othersBlock  =  tryBlock.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	7	None	add
313	[BUG]  [BUGGY]          Node    elseBlock    =    tryBlock.getFirstChild();    Node  otherBlock  =  tryBlock.getFirstChild();  Node  elseBlock  =  tryBlock.getFirstChild();  Node  anotherBlock  =  tryBlock.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]            AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Node    elseBlock    =    tryBlock.getFirstChild();    Node  otherBlock  =  tryBlock.getFirstChild();  Node  elseBlock  =  tryBlock.getFirstChild();  Node  anotherBlock  =  tryBlock.getFirstChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Node        elseBlock        =        tryBlock.getFirstChild();        Node    otherBlock    =    tryBlock.getFirstChild();    Node  elseBlock  =  tryBlock.getFirstChild();  Node  anotherBlock  =  tryBlock.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	7	None	add
314	[BUG]  [BUGGY]          Node    elseBlock    =    tryBlock.getFirstChild();    Node  otherBlock  =  tryBlock.getFirstChild();  Node  elseBlock  =  tryBlock.getLastChild();  Node  otherBlock  =  tryBlock.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]              AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Node    elseBlock    =    tryBlock.getFirstChild();    Node  otherBlock  =  tryBlock.getFirstChild();  Node  elseBlock  =  tryBlock.getLastChild();  Node  otherBlock  =  tryBlock.getFirstChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Node        elseBlock        =        tryBlock.getFirstChild();        Node    otherBlock    =    tryBlock.getFirstChild();    Node  elseBlock  =  tryBlock.getLastChild();  Node  otherBlock  =  tryBlock.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	7	None	add
315	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock,  n,  exitType,  labelName);  [CE]  method  getCatchBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock,  n,  exitType,  labelName);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock,  n,  exitType,  labelName);	  Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock,    n,    exitType);    	non-compiled	[CE]  method  getCatchBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;	55	None	replace
316	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(labelName,  n,  exitType);  [CE]  method  getCatchBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(labelName,  n,  exitType);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(labelName,  n,  exitType);	  Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock,    n,    exitType);    	non-compiled	[CE]  method  getCatchBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;	55	None	replace
317	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(c,  tryBlock,  n,  exitType);  [CE]  cannot  find  symbol  c  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(c,  tryBlock,  n,  exitType);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(c,  tryBlock,  n,  exitType);	  Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock,    n,    exitType);    	non-compiled	[CE]  cannot  find  symbol  c	55	None	replace
318	[BUG]  [BUGGY]  Node  c  =  tryBlock.nextNode();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  c  =  tryBlock.nextNode();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  c  =  tryBlock.nextNode();	  Node    c    =    tryBlock.getCurrentNode();    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
319	[BUG]  [BUGGY]  Node  c  =  tryBlock.next();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  c  =  tryBlock.next();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  c  =  tryBlock.next();	  Node    c    =    tryBlock.getCurrentNode();    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
320	[BUG]  [BUGGY]  Node.removeChild(tryBlock);  [CE]  non-static  method  removeChild(Node)  cannot  be  referenced  from  a  static  context  [FE]            RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node.removeChild(tryBlock);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node.removeChild(tryBlock);	  n.removeChild(c);    	non-compiled	[CE]  non-static  method  removeChild(Node)  cannot  be  referenced  from  a  static  context	3	None	replace
321	[BUG]  [BUGGY]  Node  elseBlock  =  tryBlock.getFirstChild();  Node  elseBlock  =  tryBlock.getNext();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  tryBlock.getFirstChild();  Node  elseBlock  =  tryBlock.getNext();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  tryBlock.getFirstChild();  Node  elseBlock  =  tryBlock.getNext();	          Node    elseBlock    =    tryBlock.getNext();    Node    elseBlock    =    tryBlock.getNext();    }    	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	46	None	replace
322	[BUG]  [BUGGY]  Node  elseBlock  =  tryBlock.getParent();  Node  elseBlock  =  tryBlock.getNext();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  tryBlock.getParent();  Node  elseBlock  =  tryBlock.getNext();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  tryBlock.getParent();  Node  elseBlock  =  tryBlock.getNext();	          Node    elseBlock    =    tryBlock.getNext();    Node    elseBlock    =    tryBlock.getNext();    }    	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	46	None	replace
323	[BUG]  [BUGGY]  Node  elseBlock  =  tryBlock.getNext();  Node  elseBlock  =  elseBlock.getNext();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  tryBlock.getNext();  Node  elseBlock  =  elseBlock.getNext();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  tryBlock.getNext();  Node  elseBlock  =  elseBlock.getNext();	          Node    elseBlock    =    tryBlock.getNext();    Node    elseBlock    =    tryBlock.getNext();    }    	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	46	None	replace
324	[BUG]  [BUGGY]  Node  anotherBlock  =  tryBlock.getNext();  [CE]  cannot  find  symbol  allCatchNodes  [FE]    AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  anotherBlock  =  tryBlock.getNext();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  anotherBlock  =  tryBlock.getNext();	          Node    elseBlock    =    tryBlock.getNext();    Node    anotherBlock    =    tryBlock.getNext();    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	45	None	replace
325	[BUG]  [BUGGY]  Node  elseBlock  =  tryBlock.getParent();  Node  anotherBlock  =  tryBlock.getNext();  [CE]  cannot  find  symbol  allCatchNodes  [FE]      AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  tryBlock.getParent();  Node  anotherBlock  =  tryBlock.getNext();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  tryBlock.getParent();  Node  anotherBlock  =  tryBlock.getNext();	          Node    elseBlock    =    tryBlock.getNext();    Node    anotherBlock    =    tryBlock.getNext();    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	45	None	replace
326	[BUG]  [BUGGY]  Node  elseBlock  =  tryBlock.getNext();  Node  anotherBlock  =  otherBlock.getNext();  [CE]  cannot  find  symbol  otherBlock  [FE]        AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  tryBlock.getNext();  Node  anotherBlock  =  otherBlock.getNext();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  tryBlock.getNext();  Node  anotherBlock  =  otherBlock.getNext();	          Node    elseBlock    =    tryBlock.getNext();    Node    anotherBlock    =    tryBlock.getNext();    	non-compiled	[CE]  cannot  find  symbol  otherBlock	45	None	replace
327	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(labelName,  escapeType);  [CE]  cannot  find  symbol  escapeType  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(labelName,  escapeType);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchHandler(labelName,  escapeType);	  Node    allCatchNodes    =    NodeUtil.getCatchHandler(labelName);    	non-compiled	[CE]  cannot  find  symbol  escapeType	83	None	replace
328	[BUG]  [BUGGY]  Node  c  =  tryBlock.getNext();  Preconditions.checkState(NodeUtil.hasCatchHandler(c),  exitType,  labelName);  [CE]  no  suitable  method  found  for  checkState(boolean,int,String)  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  c  =  tryBlock.getNext();  Preconditions.checkState(NodeUtil.hasCatchHandler(c),  exitType,  labelName);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  c  =  tryBlock.getNext();  Preconditions.checkState(NodeUtil.hasCatchHandler(c),  exitType,  labelName);	          Node    c    =    tryBlock.getNext();    Node    c    =    tryBlock.getNext();    Preconditions.checkState(NodeUtil.hasCatchHandler(c),    exitType,    labelName);    	non-compiled	[CE]  no  suitable  method  found  for  checkState(boolean,int,String)	68	None	replace
329	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.hasCatchHandler(c),  exitType,  labelName);  [CE]  cannot  find  symbol  c  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(NodeUtil.hasCatchHandler(c),  exitType,  labelName);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(NodeUtil.hasCatchHandler(c),  exitType,  labelName);	          Node    c    =    tryBlock.getNext();    Node    c    =    tryBlock.getNext();    Preconditions.checkState(NodeUtil.hasCatchHandler(c),    exitType,    labelName);    	non-compiled	[CE]  cannot  find  symbol  c	68	None	replace
330	[BUG]  [BUGGY]  Node  c  =  tryBlock.getFirstChild();  Preconditions.checkState(NodeUtil.hasCatchHandler(c),  exitType,  labelName);  [CE]  no  suitable  method  found  for  checkState(boolean,int,String)  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  c  =  tryBlock.getFirstChild();  Preconditions.checkState(NodeUtil.hasCatchHandler(c),  exitType,  labelName);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  c  =  tryBlock.getFirstChild();  Preconditions.checkState(NodeUtil.hasCatchHandler(c),  exitType,  labelName);	          Node    c    =    tryBlock.getNext();    Node    c    =    tryBlock.getNext();    Preconditions.checkState(NodeUtil.hasCatchHandler(c),    exitType,    labelName);    	non-compiled	[CE]  no  suitable  method  found  for  checkState(boolean,int,String)	68	None	replace
331	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(testNode,  n);  [CE]  cannot  find  symbol  testNode  [FE]            AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(testNode,  n);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(testNode,  n);	  Node    allCatchNodes    =    NodeUtil.getCatchBlock(n,    tryBlock);    	non-compiled	[CE]  cannot  find  symbol  testNode	53	None	replace
332	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n,  exitType,  tryBlock);  [CE]  method  getCatchBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n,  exitType,  tryBlock);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(n,  exitType,  tryBlock);	  Node    allCatchNodes    =    NodeUtil.getCatchBlock(n,    tryBlock);    	non-compiled	[CE]  method  getCatchBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;	53	None	replace
333	[BUG]  [BUGGY]  Node  c  =  tryBlock.getNext();  Preconditions.checkState(NodeUtil.hasFailedCatchHandler(c));  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  c  =  tryBlock.getNext();  Preconditions.checkState(NodeUtil.hasFailedCatchHandler(c));  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  c  =  tryBlock.getNext();  Preconditions.checkState(NodeUtil.hasFailedCatchHandler(c));	          Node    c    =    tryBlock.getNext();    Node    c    =    tryBlock.getNext();    Preconditions.checkState(NodeUtil.hasFailedCatchHandler(c));    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
334	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.hasFailedCatchHandler(tryBlock));  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(NodeUtil.hasFailedCatchHandler(tryBlock));  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(NodeUtil.hasFailedCatchHandler(tryBlock));	          Node    c    =    tryBlock.getNext();    Node    c    =    tryBlock.getNext();    Preconditions.checkState(NodeUtil.hasFailedCatchHandler(c));    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
335	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.hasFailedCatchHandler(n));  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(NodeUtil.hasFailedCatchHandler(n));  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(NodeUtil.hasFailedCatchHandler(n));	          Node    c    =    tryBlock.getNext();    Node    c    =    tryBlock.getNext();    Preconditions.checkState(NodeUtil.hasFailedCatchHandler(c));    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
336	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.hasFailedCatchHandler(c));  [CE]  cannot  find  symbol  c  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(NodeUtil.hasFailedCatchHandler(c));  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(NodeUtil.hasFailedCatchHandler(c));	          Node    c    =    tryBlock.getNext();    Node    c    =    tryBlock.getNext();    Preconditions.checkState(NodeUtil.hasFailedCatchHandler(c));    	non-compiled	[CE]  cannot  find  symbol  c	67	None	replace
337	[BUG]  [BUGGY]  n.removeChild(labelName);  n.removeChild(tryBlock);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]    RuntimeException    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  n.removeChild(labelName);  n.removeChild(tryBlock);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	n.removeChild(labelName);  n.removeChild(tryBlock);	          n.removeChild(tryBlock);    n.removeChild(tryBlock);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	92	None	replace
338	[BUG]  [BUGGY]          Node    elseBlock    =    tryBlock.getNext();    Node  otherBlock  =  tryBlock.getNext();  Node  elseBlock  =  tryBlock.getNext();  Node  otherBlock  =  tryBlock.getNext();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Node    elseBlock    =    tryBlock.getNext();    Node  otherBlock  =  tryBlock.getNext();  Node  elseBlock  =  tryBlock.getNext();  Node  otherBlock  =  tryBlock.getNext();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Node        elseBlock        =        tryBlock.getNext();        Node    otherBlock    =    tryBlock.getNext();    Node  elseBlock  =  tryBlock.getNext();  Node  otherBlock  =  tryBlock.getNext();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	40	None	add
339	[BUG]  [BUGGY]          Node    elseBlock    =    tryBlock.getNext();    Node  otherBlock  =  tryBlock.getNext();  Node  elseBlock  =  tryBlock.getNext();  Node  elseBlock  =  tryBlock.getNext();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Node    elseBlock    =    tryBlock.getNext();    Node  otherBlock  =  tryBlock.getNext();  Node  elseBlock  =  tryBlock.getNext();  Node  elseBlock  =  tryBlock.getNext();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Node        elseBlock        =        tryBlock.getNext();        Node    otherBlock    =    tryBlock.getNext();    Node  elseBlock  =  tryBlock.getNext();  Node  elseBlock  =  tryBlock.getNext();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	40	None	add
340	[BUG]  [BUGGY]          Node    elseBlock    =    tryBlock.getNext();    Node  otherBlock  =  tryBlock.getNext();  Node  elseBlock  =  tryBlock.getNext();  Node  othersBlock  =  tryBlock.getNext();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Node    elseBlock    =    tryBlock.getNext();    Node  otherBlock  =  tryBlock.getNext();  Node  elseBlock  =  tryBlock.getNext();  Node  othersBlock  =  tryBlock.getNext();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Node        elseBlock        =        tryBlock.getNext();        Node    otherBlock    =    tryBlock.getNext();    Node  elseBlock  =  tryBlock.getNext();  Node  othersBlock  =  tryBlock.getNext();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	40	None	add
341	[BUG]  [BUGGY]          Node    elseBlock    =    tryBlock.getNext();    Node  otherBlock  =  tryBlock.getNext();  Node  elseBlock  =  tryBlock.getNext();  Node  anotherBlock  =  tryBlock.getNext();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Node    elseBlock    =    tryBlock.getNext();    Node  otherBlock  =  tryBlock.getNext();  Node  elseBlock  =  tryBlock.getNext();  Node  anotherBlock  =  tryBlock.getNext();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Node        elseBlock        =        tryBlock.getNext();        Node    otherBlock    =    tryBlock.getNext();    Node  elseBlock  =  tryBlock.getNext();  Node  anotherBlock  =  tryBlock.getNext();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	40	None	add
342	[BUG]  [BUGGY]          Node    elseBlock    =    tryBlock.getNext();    Node  otherBlock  =  tryBlock.getNext();  Node  elseBlock  =  tryBlock.getNext();  Node  otherBlock  =  tryBlock.getNext();  Preconditions.checkState(otherBlock!=  null);  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]            AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Node    elseBlock    =    tryBlock.getNext();    Node  otherBlock  =  tryBlock.getNext();  Node  elseBlock  =  tryBlock.getNext();  Node  otherBlock  =  tryBlock.getNext();  Preconditions.checkState(otherBlock!=  null);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Node        elseBlock        =        tryBlock.getNext();        Node    otherBlock    =    tryBlock.getNext();    Node  elseBlock  =  tryBlock.getNext();  Node  otherBlock  =  tryBlock.getNext();  Preconditions.checkState(otherBlock!=  null);	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	40	None	add
343	[BUG]  [BUGGY]          Node    elseBlock    =    tryBlock.getLastChild();    Node  anotherBlock  =  tryBlock.getLastChild();  Node  elseBlock  =  tryBlock.getLastChild();  Node  anotherBlock  =  tryBlock.getLastChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Node    elseBlock    =    tryBlock.getLastChild();    Node  anotherBlock  =  tryBlock.getLastChild();  Node  elseBlock  =  tryBlock.getLastChild();  Node  anotherBlock  =  tryBlock.getLastChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Node        elseBlock        =        tryBlock.getLastChild();        Node    anotherBlock    =    tryBlock.getLastChild();    Node  elseBlock  =  tryBlock.getLastChild();  Node  anotherBlock  =  tryBlock.getLastChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	31	None	add
344	[BUG]  [BUGGY]          Node    elseBlock    =    tryBlock.getLastChild();    Node  anotherBlock  =  tryBlock.getLastChild();  Node  otherBlock  =  tryBlock.getLastChild();  Node  anotherBlock  =  tryBlock.getLastChild();  [CE]  variable  anotherBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Node    elseBlock    =    tryBlock.getLastChild();    Node  anotherBlock  =  tryBlock.getLastChild();  Node  otherBlock  =  tryBlock.getLastChild();  Node  anotherBlock  =  tryBlock.getLastChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Node        elseBlock        =        tryBlock.getLastChild();        Node    anotherBlock    =    tryBlock.getLastChild();    Node  otherBlock  =  tryBlock.getLastChild();  Node  anotherBlock  =  tryBlock.getLastChild();	  	non-compiled	[CE]  variable  anotherBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	31	None	add
345	[BUG]  [BUGGY]          Node    elseBlock    =    tryBlock.getLastChild();    Node  anotherBlock  =  tryBlock.getLastChild();  Node  elseBlock  =  tryBlock.getLastChild();  Node  otherBlock  =  tryBlock.getLastChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Node    elseBlock    =    tryBlock.getLastChild();    Node  anotherBlock  =  tryBlock.getLastChild();  Node  elseBlock  =  tryBlock.getLastChild();  Node  otherBlock  =  tryBlock.getLastChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Node        elseBlock        =        tryBlock.getLastChild();        Node    anotherBlock    =    tryBlock.getLastChild();    Node  elseBlock  =  tryBlock.getLastChild();  Node  otherBlock  =  tryBlock.getLastChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	31	None	add
346	[BUG]  [BUGGY]          Node    elseBlock    =    tryBlock.getLastChild();    Node  anotherBlock  =  tryBlock.getLastChild();  Node  anotherBlock  =  tryBlock.getLastChild();  Node  anotherBlock  =  tryBlock.getLastChild();  [CE]  variable  anotherBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Node    elseBlock    =    tryBlock.getLastChild();    Node  anotherBlock  =  tryBlock.getLastChild();  Node  anotherBlock  =  tryBlock.getLastChild();  Node  anotherBlock  =  tryBlock.getLastChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Node        elseBlock        =        tryBlock.getLastChild();        Node    anotherBlock    =    tryBlock.getLastChild();    Node  anotherBlock  =  tryBlock.getLastChild();  Node  anotherBlock  =  tryBlock.getLastChild();	  	non-compiled	[CE]  variable  anotherBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	31	None	add
347	[BUG]  [BUGGY]          Node    elseBlock    =    tryBlock.getLastChild();    Node  anotherBlock  =  tryBlock.getLastChild();  Node  elseBlock  =  tryBlock.getFirstChild();  Node  anotherBlock  =  tryBlock.getLastChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]            AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Node    elseBlock    =    tryBlock.getLastChild();    Node  anotherBlock  =  tryBlock.getLastChild();  Node  elseBlock  =  tryBlock.getFirstChild();  Node  anotherBlock  =  tryBlock.getLastChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Node        elseBlock        =        tryBlock.getLastChild();        Node    anotherBlock    =    tryBlock.getLastChild();    Node  elseBlock  =  tryBlock.getFirstChild();  Node  anotherBlock  =  tryBlock.getLastChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	31	None	add
348	[BUG]  [BUGGY]  Node  c  =  tryBlock.getFirstChild();  Node  c  =  tryBlock.getNext());  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  c  =  tryBlock.getFirstChild();  Node  c  =  tryBlock.getNext());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  c  =  tryBlock.getFirstChild();  Node  c  =  tryBlock.getNext());	          Node    c    =    tryBlock.getNext();    Node    c    =    tryBlock.getNext());    	non-compiled	[CE]  ';'  expected	156	None	replace
349	[BUG]  [BUGGY]  Node  c  =  tryBlock.getCurrentNode();  Node  c  =  tryBlock.getNext());  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  c  =  tryBlock.getCurrentNode();  Node  c  =  tryBlock.getNext());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  c  =  tryBlock.getCurrentNode();  Node  c  =  tryBlock.getNext());	          Node    c    =    tryBlock.getNext();    Node    c    =    tryBlock.getNext());    	non-compiled	[CE]  ';'  expected	156	None	replace
350	[BUG]  [BUGGY]  Node  c  =  tryBlock.getParent();  Node  c  =  tryBlock.getNext());  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  c  =  tryBlock.getParent();  Node  c  =  tryBlock.getNext());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  c  =  tryBlock.getParent();  Node  c  =  tryBlock.getNext());	          Node    c    =    tryBlock.getNext();    Node    c    =    tryBlock.getNext());    	non-compiled	[CE]  ';'  expected	156	None	replace
351	[BUG]  [BUGGY]  Node  c  =  tryBlock.getLastChild();  Node  c  =  tryBlock.getNext());  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  c  =  tryBlock.getLastChild();  Node  c  =  tryBlock.getNext());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  c  =  tryBlock.getLastChild();  Node  c  =  tryBlock.getNext());	          Node    c    =    tryBlock.getNext();    Node    c    =    tryBlock.getNext());    	non-compiled	[CE]  ';'  expected	156	None	replace
352	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(callNode);  [CE]  cannot  find  symbol  callNode  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(callNode);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchHandler(callNode);	  Node    allCatchNodes    =    NodeUtil.getCatchHandler(triesBlock);    	non-compiled	[CE]  cannot  find  symbol  callNode	116	None	replace
353	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(n,  tryBlock,  labelName);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(n,  tryBlock,  labelName);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(n,  tryBlock,  labelName);	  Node    allCatchNodes    =    NodeUtil.getAllCatchNodes(n,    tryBlock);    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
354	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(n,  tryBlock,  exitType);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(n,  tryBlock,  exitType);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(n,  tryBlock,  exitType);	  Node    allCatchNodes    =    NodeUtil.getAllCatchNodes(n,    tryBlock);    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
355	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(testNode,  n);  [CE]  cannot  find  symbol  testNode  [FE]                        AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(testNode,  n);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(testNode,  n);	  Node    allCatchNodes    =    NodeUtil.getAllCatchNodes(n,    tryBlock);    	non-compiled	[CE]  cannot  find  symbol  testNode	37	None	replace
356	[BUG]  [BUGGY]  Node  elseBlock  =  null.getFirstChild();  [CE]  <null>  cannot  be  dereferenced  [FE]        AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  null.getFirstChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  null.getFirstChild();	          Node    elseBlock    =    n.getFirstChild();    Node    elseBlock    =    null.getFirstChild();    	non-compiled	[CE]  <null>  cannot  be  dereferenced	152	None	replace
357	[BUG]  [BUGGY]  Node  n  =  tryBlock.cloneTree();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                          AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  n  =  tryBlock.cloneTree();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  n  =  tryBlock.cloneTree();	  Node    n    =    tryBlock.getParent();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	90	None	replace
358	[BUG]  [BUGGY]  Preconditions.checkState(n.isTree());  Node  n  =  tryBlock.getFirstChild();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(n.isTree());  Node  n  =  tryBlock.getFirstChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(n.isTree());  Node  n  =  tryBlock.getFirstChild();	          Preconditions.checkState(n.isTry());    Node    n    =    tryBlock.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	145	None	replace
359	[BUG]  [BUGGY]  Preconditions.checkState(n.isTry());  Node  n  =  tryBlock.getLastChild();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(n.isTry());  Node  n  =  tryBlock.getLastChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(n.isTry());  Node  n  =  tryBlock.getLastChild();	          Preconditions.checkState(n.isTry());    Node    n    =    tryBlock.getFirstChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	145	None	replace
360	[BUG]  [BUGGY]  Preconditions.checkState(n.isTry());  Node  c  =  tryBlock.getFirstChild();  [CE]  cannot  find  symbol  allCatchNodes  [FE]            AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(n.isTry());  Node  c  =  tryBlock.getFirstChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(n.isTry());  Node  c  =  tryBlock.getFirstChild();	          Preconditions.checkState(n.isTry());    Node    n    =    tryBlock.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	145	None	replace
361	[BUG]  [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  thenBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  Node  thenBlock  =  n.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  thenBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  Node  thenBlock  =  n.getFirstChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Node        elseBlock        =        n.getFirstChild();        Node    thenBlock    =    n.getFirstChild();    Node  elseBlock  =  n.getFirstChild();  Node  thenBlock  =  n.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	130	None	add
362	[BUG]  [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  thenBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  Node  finallyBlock  =  n.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  thenBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  Node  finallyBlock  =  n.getFirstChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Node        elseBlock        =        n.getFirstChild();        Node    thenBlock    =    n.getFirstChild();    Node  elseBlock  =  n.getFirstChild();  Node  finallyBlock  =  n.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	130	None	add
363	[BUG]  [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  thenBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  Node  thenBlock  =  n.getLastChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  thenBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  Node  thenBlock  =  n.getLastChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Node        elseBlock        =        n.getFirstChild();        Node    thenBlock    =    n.getFirstChild();    Node  elseBlock  =  n.getFirstChild();  Node  thenBlock  =  n.getLastChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	130	None	add
364	[BUG]  [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  thenBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  Node  nextBlock  =  n.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  thenBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  Node  nextBlock  =  n.getFirstChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Node        elseBlock        =        n.getFirstChild();        Node    thenBlock    =    n.getFirstChild();    Node  elseBlock  =  n.getFirstChild();  Node  nextBlock  =  n.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	130	None	add
365	[BUG]  [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  thenBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getLastChild();  Node  thenBlock  =  n.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]            AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  thenBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getLastChild();  Node  thenBlock  =  n.getFirstChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Node        elseBlock        =        n.getFirstChild();        Node    thenBlock    =    n.getFirstChild();    Node  elseBlock  =  n.getLastChild();  Node  thenBlock  =  n.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	130	None	add
366	[BUG]  [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  thenBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  Node  alsoBlock  =  n.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]              AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  thenBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  Node  alsoBlock  =  n.getFirstChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Node        elseBlock        =        n.getFirstChild();        Node    thenBlock    =    n.getFirstChild();    Node  elseBlock  =  n.getFirstChild();  Node  alsoBlock  =  n.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	130	None	add
367	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock,  startType,  n);  [CE]  cannot  find  symbol  startType  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock,  startType,  n);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock,  startType,  n);	  Node    allCatchNodes    =    NodeUtil.getCatchBlock(c,    tryBlock,    n);    	non-compiled	[CE]  cannot  find  symbol  startType	56	None	replace
368	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock,  tryBlock,  labelName);  [CE]  method  getCatchBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock,  tryBlock,  labelName);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock,  tryBlock,  labelName);	  Node    allCatchNodes    =    NodeUtil.getCatchBlock(c,    tryBlock,    n);    	non-compiled	[CE]  method  getCatchBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;	56	None	replace
369	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock,  no);  [CE]  cannot  find  symbol  no  [FE]                      AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock,  no);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock,  no);	  Node    allCatchNodes    =    NodeUtil.getCatchBlock(c,    tryBlock,    n);    	non-compiled	[CE]  cannot  find  symbol  no	56	None	replace
370	[BUG]  [BUGGY]  Preconditions.checkState(tryBlock.isTree()  ||  n.isTree());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(tryBlock.isTree()  ||  n.isTree());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(tryBlock.isTree()  ||  n.isTree());	  Preconditions.checkState(n.isTree()    ||    tryBlock.isTree());    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
371	[BUG]  [BUGGY]  Preconditions.checkState(labelName.isTree()  ||  tryBlock.isTree());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(labelName.isTree()  ||  tryBlock.isTree());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(labelName.isTree()  ||  tryBlock.isTree());	  Preconditions.checkState(n.isTree()    ||    tryBlock.isTree());    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
372	[BUG]  [BUGGY]  Preconditions.checkState(t.isTree()  ||  tryBlock.isTree());  [CE]  cannot  find  symbol  t  [FE]                      AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(t.isTree()  ||  tryBlock.isTree());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(t.isTree()  ||  tryBlock.isTree());	  Preconditions.checkState(n.isTree()    ||    tryBlock.isTree());    	non-compiled	[CE]  cannot  find  symbol  t	60	None	replace
373	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchNodes(labelName,  escapeType);  [CE]  cannot  find  symbol  escapeType  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchNodes(labelName,  escapeType);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchNodes(labelName,  escapeType);	  Node    allCatchNodes    =    NodeUtil.getCatchNodes(labelName);    	non-compiled	[CE]  cannot  find  symbol  escapeType	75	None	replace
374	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock).getLastChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	add	Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock).getLastChild();	  Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock);    Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock).getLastChild();    	compilable	  [FE]  RuntimeException  	165	6	replace
375	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock).getLastChild();  [FE]  RuntimeException  [FE]        RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock).getLastChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock).getLastChild();	  Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock);    Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock).getLastChild();    	compilable	  [FE]  RuntimeException  	165	6	replace
376	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n).getLastChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	add	Node  allCatchNodes  =  NodeUtil.getCatchBlock(n).getLastChild();	  Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock);    Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock).getLastChild();    	compilable	  [FE]  RuntimeException  	165	6	replace
377	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n).getLastChild();  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n).getLastChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(n).getLastChild();	  Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock);    Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock).getLastChild();    	compilable	  [FE]  RuntimeException  	165	6	replace
378	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock).getFirstChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	add	Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock).getFirstChild();	  Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock);    Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock).getLastChild();    	compilable	  [FE]  RuntimeException  	165	6	replace
379	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock).getFirstChild();  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock).getFirstChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock).getFirstChild();	  Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock);    Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock).getLastChild();    	compilable	  [FE]  RuntimeException  	165	6	replace
380	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n,  tryBlock).getLastChild();  [CE]  method  getCatchBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]              RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n,  tryBlock).getLastChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(n,  tryBlock).getLastChild();	  Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock);    Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock).getLastChild();    	non-compiled	[CE]  method  getCatchBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;	165	None	replace
381	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(labelName).getLastChild();  [CE]  method  getCatchBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]                RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(labelName).getLastChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(labelName).getLastChild();	  Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock);    Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock).getLastChild();    	non-compiled	[CE]  method  getCatchBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;	165	None	replace
382	[BUG]  [BUGGY]  Node  elseBlock  =  tryBlock.getFirstChild();  Node  thenBlock  =  thenBlock.getFirstChild();  [CE]  cannot  find  symbol  allCatchNodes  [FE]    AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  tryBlock.getFirstChild();  Node  thenBlock  =  thenBlock.getFirstChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  tryBlock.getFirstChild();  Node  thenBlock  =  thenBlock.getFirstChild();	          Node    elseBlock    =    tryBlock.getFirstChild();    Node    thenBlock    =    tryBlock.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	10	None	replace
383	[BUG]  [BUGGY]  Node  elseBlock  =  tryBlock.getNext();  Node  thenBlock  =  tryBlock.getFirstChild();  [CE]  cannot  find  symbol  allCatchNodes  [FE]      AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  tryBlock.getNext();  Node  thenBlock  =  tryBlock.getFirstChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  tryBlock.getNext();  Node  thenBlock  =  tryBlock.getFirstChild();	          Node    elseBlock    =    tryBlock.getFirstChild();    Node    thenBlock    =    tryBlock.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	10	None	replace
384	[BUG]  [BUGGY]  Node  elseBlock  =  tryBlock.getFirstChild();  Node  thenBlock  =  thenBlock.getLastChild();  [CE]  cannot  find  symbol  allCatchNodes  [FE]        AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  tryBlock.getFirstChild();  Node  thenBlock  =  thenBlock.getLastChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  tryBlock.getFirstChild();  Node  thenBlock  =  thenBlock.getLastChild();	          Node    elseBlock    =    tryBlock.getFirstChild();    Node    thenBlock    =    tryBlock.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	10	None	replace
385	[BUG]  [BUGGY]  Node  n  =  tryBlock.removeChild(labelName);  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  n  =  tryBlock.removeChild(labelName);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  n  =  tryBlock.removeChild(labelName);	          n.removeChild(tryBlock);    Node    n.removeChild(tryBlock);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	93	None	replace
386	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(labelName,  n,  tryBlock);  [CE]  method  getCatchBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(labelName,  n,  tryBlock);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(labelName,  n,  tryBlock);	  Node    allCatchNodes    =    NodeUtil.getCatchBlock(labelName,    tryBlock,    n);    	non-compiled	[CE]  method  getCatchBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;	174	None	replace
387	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(labelName,  tryBlock,  n,  exitType);  [CE]  method  getCatchBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(labelName,  tryBlock,  n,  exitType);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(labelName,  tryBlock,  n,  exitType);	  Node    allCatchNodes    =    NodeUtil.getCatchBlock(labelName,    tryBlock,    n);    	non-compiled	[CE]  method  getCatchBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;	174	None	replace
388	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(labelName,  tryBlock,  exitType,  n);  [CE]  method  getCatchBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(labelName,  tryBlock,  exitType,  n);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(labelName,  tryBlock,  exitType,  n);	  Node    allCatchNodes    =    NodeUtil.getCatchBlock(labelName,    tryBlock,    n);    	non-compiled	[CE]  method  getCatchBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;	174	None	replace
389	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(labelName,  tryBlock,  exitType,  labelName);  [CE]  method  getCatchBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(labelName,  tryBlock,  exitType,  labelName);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(labelName,  tryBlock,  exitType,  labelName);	  Node    allCatchNodes    =    NodeUtil.getCatchBlock(labelName,    tryBlock,    n);    	non-compiled	[CE]  method  getCatchBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;	174	None	replace
390	[BUG]  [BUGGY]  Preconditions.checkArgument(n.isTry());  [CE]  cannot  find  symbol  allCatchNodes  [FE]          AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkArgument(n.isTry());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkArgument(n.isTry());	  Preconditions.checkArgument(tryBlock.isTry());    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	134	None	replace
391	[BUG]  [BUGGY]  Preconditions.checkArgument(labelName.isTry());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkArgument(labelName.isTry());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkArgument(labelName.isTry());	  Preconditions.checkArgument(tryBlock.isTry());    	non-compiled	[CE]  cannot  find  symbol	134	None	replace
392	[BUG]  [BUGGY]  Preconditions.checkArgument(tryBlock.isTree());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkArgument(tryBlock.isTree());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkArgument(tryBlock.isTree());	  Preconditions.checkArgument(tryBlock.isTry());    	non-compiled	[CE]  cannot  find  symbol	134	None	replace
393	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isExitBlock(tryBlock,  labelName));  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(NodeUtil.isExitBlock(tryBlock,  labelName));  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(NodeUtil.isExitBlock(tryBlock,  labelName));	  Preconditions.checkState(NodeUtil.isExitBlock(labelName));    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
394	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isExitBlock(labelName),  exitType);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(NodeUtil.isExitBlock(labelName),  exitType);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(NodeUtil.isExitBlock(labelName),  exitType);	  Preconditions.checkState(NodeUtil.isExitBlock(labelName));    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
395	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(c,  tryBlock,  n,  labelName);  [CE]  cannot  find  symbol  c  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(c,  tryBlock,  n,  labelName);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(c,  tryBlock,  n,  labelName);	  Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock,    n,    labelName);    	non-compiled	[CE]  cannot  find  symbol  c	54	None	replace
396	[BUG]  [BUGGY]  Node  elseBlock  =  tryBlock.getNext();  Node  thenBlock  =  thenBlock.getNext();  [CE]  cannot  find  symbol  allCatchNodes  [FE]    AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  tryBlock.getNext();  Node  thenBlock  =  thenBlock.getNext();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  tryBlock.getNext();  Node  thenBlock  =  thenBlock.getNext();	          Node    elseBlock    =    tryBlock.getNext();    Node    thenBlock    =    tryBlock.getNext();    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	43	None	replace
397	[BUG]  [BUGGY]  Node  elseBlock  =  tryBlock.getParent();  Node  thenBlock  =  tryBlock.getNext();  [CE]  cannot  find  symbol  allCatchNodes  [FE]      AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  tryBlock.getParent();  Node  thenBlock  =  tryBlock.getNext();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  tryBlock.getParent();  Node  thenBlock  =  tryBlock.getNext();	          Node    elseBlock    =    tryBlock.getNext();    Node    thenBlock    =    tryBlock.getNext();    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	43	None	replace
398	[BUG]  [BUGGY]  Node  elseBlock  =  tryBlock.getFirstChild();  Node  thenBlock  =  tryBlock.getNext();  [CE]  cannot  find  symbol  allCatchNodes  [FE]        AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  tryBlock.getFirstChild();  Node  thenBlock  =  tryBlock.getNext();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  tryBlock.getFirstChild();  Node  thenBlock  =  tryBlock.getNext();	          Node    elseBlock    =    tryBlock.getNext();    Node    thenBlock    =    tryBlock.getNext();    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	43	None	replace
399	[BUG]  [BUGGY]  Node  elseBlock  =  tryBlock.getLastChild();  Node  thenBlock  =  tryBlock.getNext();  [CE]  cannot  find  symbol  allCatchNodes  [FE]          AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  tryBlock.getLastChild();  Node  thenBlock  =  tryBlock.getNext();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  tryBlock.getLastChild();  Node  thenBlock  =  tryBlock.getNext();	          Node    elseBlock    =    tryBlock.getNext();    Node    thenBlock    =    tryBlock.getNext();    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	43	None	replace
400	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(tryBlock,  tryBlock);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(tryBlock,  tryBlock);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(tryBlock,  tryBlock);	  Node    allCatchNodes    =    NodeUtil.getAllCatchNodes(c,    tryBlock);    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
401	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(tryBlock,  c);  [CE]  cannot  find  symbol  c  [FE]                        AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(tryBlock,  c);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(tryBlock,  c);	  Node    allCatchNodes    =    NodeUtil.getAllCatchNodes(c,    tryBlock);    	non-compiled	[CE]  cannot  find  symbol  c	38	None	replace
402	[BUG]  [BUGGY]  Node  elseBlock  =  tryBlock.getFirstChild();  Node  otherBlock  =  tryBlock.getLastChild();  [CE]  cannot  find  symbol  allCatchNodes  [FE]    AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  tryBlock.getFirstChild();  Node  otherBlock  =  tryBlock.getLastChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  tryBlock.getFirstChild();  Node  otherBlock  =  tryBlock.getLastChild();	          Node    elseBlock    =    tryBlock.getLastChild();    Node    otherBlock    =    tryBlock.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	28	None	replace
403	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  tryBlock.getParent();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	add	Node  allCatchNodes  =  tryBlock.getParent();	  Node    allCatchNodes    =    tryBlock.getLastChild();    	compilable	  [FE]  RuntimeException  	124	6	replace
404	[BUG]  [BUGGY]  Node  allCatchNodes  =  tryBlock.getParent();  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  tryBlock.getParent();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  tryBlock.getParent();	  Node    allCatchNodes    =    tryBlock.getLastChild();    	compilable	  [FE]  RuntimeException  	124	6	replace
405	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n).getFirstChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	add	Node  allCatchNodes  =  NodeUtil.getCatchBlock(n).getFirstChild();	  Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock);    Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock).getFirstChild();    	compilable	  [FE]  RuntimeException  	166	6	replace
406	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n).getFirstChild();  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n).getFirstChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(n).getFirstChild();	  Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock);    Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock).getFirstChild();    	compilable	  [FE]  RuntimeException  	166	6	replace
407	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(labelName).getFirstChild();  [CE]  method  getCatchBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]            RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(labelName).getFirstChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(labelName).getFirstChild();	  Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock);    Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock).getFirstChild();    	non-compiled	[CE]  method  getCatchBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;	166	None	replace
408	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n,  tryBlock).getFirstChild();  [CE]  method  getCatchBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]              RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n,  tryBlock).getFirstChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(n,  tryBlock).getFirstChild();	  Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock);    Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock).getFirstChild();    	non-compiled	[CE]  method  getCatchBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;	166	None	replace
409	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock,  labelName).getFirstChild();  [CE]  method  getCatchBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]                RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock,  labelName).getFirstChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock,  labelName).getFirstChild();	  Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock);    Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock).getFirstChild();    	non-compiled	[CE]  method  getCatchBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;	166	None	replace
410	[BUG]  [BUGGY]          Node    elseBlock    =    tryBlock.getNext();    Node  thenBlock  =  tryBlock.getNext();  Node  elseBlock  =  tryBlock.getNext();  Node  thenBlock  =  tryBlock.getNext();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Node    elseBlock    =    tryBlock.getNext();    Node  thenBlock  =  tryBlock.getNext();  Node  elseBlock  =  tryBlock.getNext();  Node  thenBlock  =  tryBlock.getNext();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Node        elseBlock        =        tryBlock.getNext();        Node    thenBlock    =    tryBlock.getNext();    Node  elseBlock  =  tryBlock.getNext();  Node  thenBlock  =  tryBlock.getNext();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	42	None	add
411	[BUG]  [BUGGY]          Node    elseBlock    =    tryBlock.getNext();    Node  thenBlock  =  tryBlock.getNext();  Node  elseBlock  =  tryBlock.getNext();  Node  finallyBlock  =  tryBlock.getNext();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Node    elseBlock    =    tryBlock.getNext();    Node  thenBlock  =  tryBlock.getNext();  Node  elseBlock  =  tryBlock.getNext();  Node  finallyBlock  =  tryBlock.getNext();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Node        elseBlock        =        tryBlock.getNext();        Node    thenBlock    =    tryBlock.getNext();    Node  elseBlock  =  tryBlock.getNext();  Node  finallyBlock  =  tryBlock.getNext();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	42	None	add
412	[BUG]  [BUGGY]          Node    elseBlock    =    tryBlock.getNext();    Node  thenBlock  =  tryBlock.getNext();  Node  elseBlock  =  triedBlock.getNext();  Node  thenBlock  =  tryBlock.getNext();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Node    elseBlock    =    tryBlock.getNext();    Node  thenBlock  =  tryBlock.getNext();  Node  elseBlock  =  triedBlock.getNext();  Node  thenBlock  =  tryBlock.getNext();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Node        elseBlock        =        tryBlock.getNext();        Node    thenBlock    =    tryBlock.getNext();    Node  elseBlock  =  triedBlock.getNext();  Node  thenBlock  =  tryBlock.getNext();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	42	None	add
413	[BUG]  [BUGGY]          Node    elseBlock    =    tryBlock.getNext();    Node  thenBlock  =  tryBlock.getNext();  Node  elseBlock  =  startType.getNext();  Node  thenBlock  =  tryBlock.getNext();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Node    elseBlock    =    tryBlock.getNext();    Node  thenBlock  =  tryBlock.getNext();  Node  elseBlock  =  startType.getNext();  Node  thenBlock  =  tryBlock.getNext();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Node        elseBlock        =        tryBlock.getNext();        Node    thenBlock    =    tryBlock.getNext();    Node  elseBlock  =  startType.getNext();  Node  thenBlock  =  tryBlock.getNext();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	42	None	add
414	[BUG]  [BUGGY]          Node    elseBlock    =    tryBlock.getNext();    Node  thenBlock  =  tryBlock.getNext();  Node  otherBlock  =  tryBlock.getNext();  Node  thenBlock  =  tryBlock.getNext();  [CE]  variable  thenBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]            AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Node    elseBlock    =    tryBlock.getNext();    Node  thenBlock  =  tryBlock.getNext();  Node  otherBlock  =  tryBlock.getNext();  Node  thenBlock  =  tryBlock.getNext();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Node        elseBlock        =        tryBlock.getNext();        Node    thenBlock    =    tryBlock.getNext();    Node  otherBlock  =  tryBlock.getNext();  Node  thenBlock  =  tryBlock.getNext();	  	non-compiled	[CE]  variable  thenBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	42	None	add
415	[BUG]  [BUGGY]  Node  n  =  tryBlock.getNextSibling();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  n  =  tryBlock.getNextSibling();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  n  =  tryBlock.getNextSibling();	  Node    n    =    tryBlock.getNextChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	136	None	replace
416	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock,  n,  trueBlock);  [CE]  cannot  find  symbol  trueBlock  [FE]            AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock,  n,  trueBlock);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock,  n,  trueBlock);	  Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock,    n,    falseBlock);    	non-compiled	[CE]  cannot  find  symbol  trueBlock	117	None	replace
417	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock,  n,  tryBlock);  [CE]  method  getCatchBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock,  n,  tryBlock);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock,  n,  tryBlock);	  Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock,    n,    falseBlock);    	non-compiled	[CE]  method  getCatchBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;	117	None	replace
418	[BUG]  [BUGGY]  Preconditions.checkState(tryBlock.isTree(),  exitType);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(tryBlock.isTree(),  exitType);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(tryBlock.isTree(),  exitType);	  Preconditions.checkState(tryBlock.isTree());    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
419	[BUG]  [BUGGY]  Preconditions.checkState(labelName.isTree());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(labelName.isTree());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(labelName.isTree());	  Preconditions.checkState(tryBlock.isTree());    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
420	[BUG]  [BUGGY]  Preconditions.checkState(tryBlock.isTree()  ||  tryBlock.isTree());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(tryBlock.isTree()  ||  tryBlock.isTree());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(tryBlock.isTree()  ||  tryBlock.isTree());	  Preconditions.checkState(tryBlock.isTree());    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
421	[BUG]  [BUGGY]  Node  c  =  tryBlock!=  null?  null  :  tryBlock.getNext();  AssertionFailedError  <  Node>  c  =  tryBlock.getNext();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  c  =  tryBlock!=  null?  null  :  tryBlock.getNext();  AssertionFailedError  <  Node>  c  =  tryBlock.getNext();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  c  =  tryBlock!=  null?  null  :  tryBlock.getNext();  AssertionFailedError  <  Node>  c  =  tryBlock.getNext();	          Node    c    =    tryBlock.getNext();    AssertionFailedError    <    Node>    c    =    tryBlock.getNext();    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
422	[BUG]  [BUGGY]  Node  c  =  tryBlock.getNext();  AssertionFailedError  <  Node>  c  =  n.getNext();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  c  =  tryBlock.getNext();  AssertionFailedError  <  Node>  c  =  n.getNext();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  c  =  tryBlock.getNext();  AssertionFailedError  <  Node>  c  =  n.getNext();	          Node    c    =    tryBlock.getNext();    AssertionFailedError    <    Node>    c    =    tryBlock.getNext();    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
423	[BUG]  [BUGGY]  Node  c  =  tryBlock  ==  null?  null  :  tryBlock.getNext();  AssertionFailedError  <  Node>  c  =  tryBlock.getNext();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  c  =  tryBlock  ==  null?  null  :  tryBlock.getNext();  AssertionFailedError  <  Node>  c  =  tryBlock.getNext();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  c  =  tryBlock  ==  null?  null  :  tryBlock.getNext();  AssertionFailedError  <  Node>  c  =  tryBlock.getNext();	          Node    c    =    tryBlock.getNext();    AssertionFailedError    <    Node>    c    =    tryBlock.getNext();    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
424	[BUG]  [BUGGY]  Node  c  =  tryBlock.getChildCount();  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  c  =  tryBlock.getChildCount();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  c  =  tryBlock.getChildCount();	  Node    c    =    tryBlock.getFirstChild();    	non-compiled	[CE]  incompatible  types	21	None	replace
425	[BUG]  [BUGGY]  n.removeChild(tryBlock.getLastChild());  [CE]  cannot  find  symbol  allCatchNodes  [FE]        RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  n.removeChild(tryBlock.getLastChild());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	n.removeChild(tryBlock.getLastChild());	  n.removeChild(testBlock());    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	172	None	replace
426	[BUG]  [BUGGY]  tryMinimizeExits(n.removeChild(testBlock()));  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  tryMinimizeExits(n.removeChild(testBlock()));  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	tryMinimizeExits(n.removeChild(testBlock()));	  n.removeChild(testBlock());    	non-compiled	[CE]  cannot  find  symbol	172	None	replace
427	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(tryBlock,  n,  labelName);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(tryBlock,  n,  labelName);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchHandler(tryBlock,  n,  labelName);	  Node    allCatchNodes    =    NodeUtil.getCatchHandler(tryBlock,    n);    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
428	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(c,  tryBlock,  n);  [CE]  cannot  find  symbol  c  [FE]                      AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(c,  tryBlock,  n);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchHandler(c,  tryBlock,  n);	  Node    allCatchNodes    =    NodeUtil.getCatchHandler(tryBlock,    n);    	non-compiled	[CE]  cannot  find  symbol  c	106	None	replace
429	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(tryBlock,  n,  labelName);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(tryBlock,  n,  labelName);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(tryBlock,  n,  labelName);	  Node    allCatchNodes    =    NodeUtil.getAllCatchNodes(tryBlock,    n);    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
430	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(tryBlock,  n,  falseBlock);  [CE]  cannot  find  symbol  falseBlock  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(tryBlock,  n,  falseBlock);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(tryBlock,  n,  falseBlock);	  Node    allCatchNodes    =    NodeUtil.getAllCatchNodes(tryBlock,    n);    	non-compiled	[CE]  cannot  find  symbol  falseBlock	110	None	replace
431	[BUG]  [BUGGY]  Preconditions.checkState(tryBlock.hasOneChild());  [CE]  cannot  find  symbol  allCatchNodes  [FE]        AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(tryBlock.hasOneChild());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(tryBlock.hasOneChild());	  Preconditions.checkState(n.hasOneChild());    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	176	None	replace
432	[BUG]  [BUGGY]  Preconditions.checkState(n.hasOneChild(),  tryBlock.getLastChild());  [CE]  cannot  find  symbol  allCatchNodes  [FE]          AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(n.hasOneChild(),  tryBlock.getLastChild());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(n.hasOneChild(),  tryBlock.getLastChild());	  Preconditions.checkState(n.hasOneChild());    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	176	None	replace
433	[BUG]  [BUGGY]  Preconditions.checkState(n.hasOneChild(),  tryBlock.isTry());  [CE]  cannot  find  symbol  allCatchNodes  [FE]            AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(n.hasOneChild(),  tryBlock.isTry());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(n.hasOneChild(),  tryBlock.isTry());	  Preconditions.checkState(n.hasOneChild());    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	176	None	replace
434	[BUG]  [BUGGY]  Preconditions.checkState(n.hasOneChild(),  tryBlock.getFirstChild());  [CE]  cannot  find  symbol  allCatchNodes  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(n.hasOneChild(),  tryBlock.getFirstChild());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(n.hasOneChild(),  tryBlock.getFirstChild());	  Preconditions.checkState(n.hasOneChild());    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	176	None	replace
435	[BUG]  [BUGGY]  Node  elseBlock  =  attemptBlock.getLastChild();  [CE]  cannot  find  symbol  attemptBlock  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  attemptBlock.getLastChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  attemptBlock.getLastChild();	          Node    elseBlock    =    tryBlock.getLastChild();    Node    elseBlock    =    attemptBlock.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  attemptBlock	33	None	replace
436	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(tryBlock,  finallyBlock);  [CE]  cannot  find  symbol  finallyBlock  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(tryBlock,  finallyBlock);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(tryBlock,  finallyBlock);	  Node    allCatchNodes    =    NodeUtil.getAllCatchNodes(tryBlock,    falseBlock);    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	111	None	replace
437	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(tryBlock,  trueBlock);  [CE]  cannot  find  symbol  trueBlock  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(tryBlock,  trueBlock);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(tryBlock,  trueBlock);	  Node    allCatchNodes    =    NodeUtil.getAllCatchNodes(tryBlock,    falseBlock);    	non-compiled	[CE]  cannot  find  symbol  trueBlock	111	None	replace
438	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(tryBlock,  startType);  [CE]  cannot  find  symbol  startType  [FE]                      AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(tryBlock,  startType);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(tryBlock,  startType);	  Node    allCatchNodes    =    NodeUtil.getAllCatchNodes(tryBlock,    falseBlock);    	non-compiled	[CE]  cannot  find  symbol  startType	111	None	replace
439	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(c,  n);  [CE]  cannot  find  symbol  c  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(c,  n);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(c,  n);	  Node    allCatchNodes    =    NodeUtil.getAllCatchNodes(n);    	non-compiled	[CE]  cannot  find  symbol  c	34	None	replace
440	[BUG]  [BUGGY]  NodeUtil.checkState(n.isTree());  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  NodeUtil.checkState(n.isTree());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	NodeUtil.checkState(n.isTree());	          Preconditions.checkState(n.isTry());    Preconditions.checkState(n.isTry());    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
441	[BUG]  [BUGGY]  Preconditions.checkState(n.isTree(),  exitType,  labelName);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(n.isTree(),  exitType,  labelName);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(n.isTree(),  exitType,  labelName);	  Preconditions.checkState(n.isTree(),    exitType);    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
442	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(labelName,  tryBlock,  exitType);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(labelName,  tryBlock,  exitType);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchHandler(labelName,  tryBlock,  exitType);	  Node    allCatchNodes    =    NodeUtil.getCatchHandler(tryBlock,    exitType);    	non-compiled	[CE]  cannot  find  symbol	135	None	replace
443	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(c,  exitType);  [CE]  cannot  find  symbol  c  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(c,  exitType);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchHandler(c,  exitType);	  Node    allCatchNodes    =    NodeUtil.getCatchHandler(tryBlock,    exitType);    	non-compiled	[CE]  cannot  find  symbol  c	135	None	replace
444	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isExitBlock(labelName,  exitType));  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(NodeUtil.isExitBlock(labelName,  exitType));  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(NodeUtil.isExitBlock(labelName,  exitType));	  Preconditions.checkState(NodeUtil.isExitBlock(tryBlock,    exitType));    	non-compiled	[CE]  cannot  find  symbol	132	None	replace
445	[BUG]  [BUGGY]  Preconditions.checkState(tryBlock.isTree(),  n.isTree());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(tryBlock.isTree(),  n.isTree());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(tryBlock.isTree(),  n.isTree());	  Preconditions.checkState(n.isTree(),    tryBlock.isTree());    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
446	[BUG]  [BUGGY]  Preconditions.checkState(labelName.isTree(),  tryBlock.isTree());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(labelName.isTree(),  tryBlock.isTree());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(labelName.isTree(),  tryBlock.isTree());	  Preconditions.checkState(n.isTree(),    tryBlock.isTree());    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
447	[BUG]  [BUGGY]  Preconditions.checkState(tree.isTree(),  n.isTree());  [CE]  cannot  find  symbol  tree  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(tree.isTree(),  n.isTree());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(tree.isTree(),  n.isTree());	  Preconditions.checkState(n.isTree(),    tryBlock.isTree());    	non-compiled	[CE]  cannot  find  symbol  tree	59	None	replace
448	[BUG]  [BUGGY]  Preconditions.checkState(tries.isTree(),  n.isTree());  [CE]  cannot  find  symbol  tries  [FE]                      AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(tries.isTree(),  n.isTree());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(tries.isTree(),  n.isTree());	  Preconditions.checkState(n.isTree(),    tryBlock.isTree());    	non-compiled	[CE]  cannot  find  symbol  tries	59	None	replace
449	[BUG]  [BUGGY]  node.removeChild(tryBlock);  Node  n  =  tryBlock.getNext();  [CE]  cannot  find  symbol  node  [FE]                RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  node.removeChild(tryBlock);  Node  n  =  tryBlock.getNext();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	node.removeChild(tryBlock);  Node  n  =  tryBlock.getNext();	          n.removeChild(tryBlock);    Node    n    =    tryBlock.getNext();    	non-compiled	[CE]  cannot  find  symbol  node	96	None	replace
450	[BUG]  [BUGGY]  n.removeChild(labelName);  Node  n  =  tryBlock.getNext();  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  n.removeChild(labelName);  Node  n  =  tryBlock.getNext();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	n.removeChild(labelName);  Node  n  =  tryBlock.getNext();	          n.removeChild(tryBlock);    Node    n    =    tryBlock.getNext();    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	96	None	replace
451	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(tryBlock);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock));  [CE]  ';'  expected  [FE]                RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(tryBlock);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock));  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(tryBlock);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock));	  Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock);    Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock));    	non-compiled	[CE]  ';'  expected	52	None	replace
452	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock);  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(tryBlock));  [CE]  ';'  expected  [FE]                  RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock);  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(tryBlock));  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock);  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(tryBlock));	  Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock);    Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock));    	non-compiled	[CE]  ';'  expected	52	None	replace
453	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock);  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes));  [CE]  ';'  expected  [FE]                    RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock);  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes));  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock);  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes));	  Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock);    Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock));    	non-compiled	[CE]  ';'  expected	52	None	replace
454	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock,  finallyBlock);  [CE]  cannot  find  symbol  finallyBlock  [FE]          RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock,  finallyBlock);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock,  finallyBlock);	  Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock,    falseBlock);    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	148	None	replace
455	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock,  trueBlock);  [CE]  cannot  find  symbol  trueBlock  [FE]            RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock,  trueBlock);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock,  trueBlock);	  Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock,    falseBlock);    	non-compiled	[CE]  cannot  find  symbol  trueBlock	148	None	replace
456	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock,  startType);  [CE]  cannot  find  symbol  startType  [FE]              RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock,  startType);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock,  startType);	  Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock,    falseBlock);    	non-compiled	[CE]  cannot  find  symbol  startType	148	None	replace
457	[BUG]  [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  otherBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  Node  otherBlock  =  n.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  otherBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  Node  otherBlock  =  n.getFirstChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Node        elseBlock        =        n.getFirstChild();        Node    otherBlock    =    n.getFirstChild();    Node  elseBlock  =  n.getFirstChild();  Node  otherBlock  =  n.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	128	None	add
458	[BUG]  [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  otherBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  Node  otherBlock  =  n.getLastChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  otherBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  Node  otherBlock  =  n.getLastChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Node        elseBlock        =        n.getFirstChild();        Node    otherBlock    =    n.getFirstChild();    Node  elseBlock  =  n.getFirstChild();  Node  otherBlock  =  n.getLastChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	128	None	add
459	[BUG]  [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  otherBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  otherBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Node        elseBlock        =        n.getFirstChild();        Node    otherBlock    =    n.getFirstChild();    Node  elseBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	128	None	add
460	[BUG]  [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  otherBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  Node  othersBlock  =  n.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  otherBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  Node  othersBlock  =  n.getFirstChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Node        elseBlock        =        n.getFirstChild();        Node    otherBlock    =    n.getFirstChild();    Node  elseBlock  =  n.getFirstChild();  Node  othersBlock  =  n.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	128	None	add
461	[BUG]  [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  otherBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getLastChild();  Node  otherBlock  =  n.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]            AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  otherBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getLastChild();  Node  otherBlock  =  n.getFirstChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Node        elseBlock        =        n.getFirstChild();        Node    otherBlock    =    n.getFirstChild();    Node  elseBlock  =  n.getLastChild();  Node  otherBlock  =  n.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	128	None	add
462	[BUG]  [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  otherBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  Node  anotherBlock  =  n.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]              AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  otherBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  Node  anotherBlock  =  n.getFirstChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Node        elseBlock        =        n.getFirstChild();        Node    otherBlock    =    n.getFirstChild();    Node  elseBlock  =  n.getFirstChild();  Node  anotherBlock  =  n.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	128	None	add
463	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchNodes(exitType,  tryBlock,  labelName);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchNodes(exitType,  tryBlock,  labelName);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchNodes(exitType,  tryBlock,  labelName);	  Node    allCatchNodes    =    NodeUtil.getCatchNodes(exitType,    tryBlock);    	non-compiled	[CE]  cannot  find  symbol	162	None	replace
464	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchNodes(testNode,  exitType);  [CE]  cannot  find  symbol  testNode  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchNodes(testNode,  exitType);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchNodes(testNode,  exitType);	  Node    allCatchNodes    =    NodeUtil.getCatchNodes(exitType,    tryBlock);    	non-compiled	[CE]  cannot  find  symbol  testNode	162	None	replace
465	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchNodes(labelName,  exitType,  tryBlock);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchNodes(labelName,  exitType,  tryBlock);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchNodes(labelName,  exitType,  tryBlock);	  Node    allCatchNodes    =    NodeUtil.getCatchNodes(exitType,    tryBlock);    	non-compiled	[CE]  cannot  find  symbol	162	None	replace
466	[BUG]  [BUGGY]  Node  n  =  n.getFirstChild();  Preconditions.checkState(n.isTry());  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  n  =  n.getFirstChild();  Preconditions.checkState(n.isTry());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  n  =  n.getFirstChild();  Preconditions.checkState(n.isTry());	          Preconditions.checkState(n.isTry());    Node    n    =    n.getFirstChild();    Preconditions.checkState(n.isTry());    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	104	None	replace
467	[BUG]  [BUGGY]          Node    elseBlock    =    tryBlock.getLastChild();    Node  thenBlock  =  tryBlock.getLastChild();  Node  elseBlock  =  tryBlock.getLastChild();  Node  thenBlock  =  tryBlock.getLastChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Node    elseBlock    =    tryBlock.getLastChild();    Node  thenBlock  =  tryBlock.getLastChild();  Node  elseBlock  =  tryBlock.getLastChild();  Node  thenBlock  =  tryBlock.getLastChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Node        elseBlock        =        tryBlock.getLastChild();        Node    thenBlock    =    tryBlock.getLastChild();    Node  elseBlock  =  tryBlock.getLastChild();  Node  thenBlock  =  tryBlock.getLastChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	29	None	add
468	[BUG]  [BUGGY]          Node    elseBlock    =    tryBlock.getLastChild();    Node  thenBlock  =  tryBlock.getLastChild();  Node  elseBlock  =  tryBlock.getLastChild();  Node  finallyBlock  =  tryBlock.getLastChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Node    elseBlock    =    tryBlock.getLastChild();    Node  thenBlock  =  tryBlock.getLastChild();  Node  elseBlock  =  tryBlock.getLastChild();  Node  finallyBlock  =  tryBlock.getLastChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Node        elseBlock        =        tryBlock.getLastChild();        Node    thenBlock    =    tryBlock.getLastChild();    Node  elseBlock  =  tryBlock.getLastChild();  Node  finallyBlock  =  tryBlock.getLastChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	29	None	add
469	[BUG]  [BUGGY]          Node    elseBlock    =    tryBlock.getLastChild();    Node  thenBlock  =  tryBlock.getLastChild();  Node  elseBlock  =  tryBlock.getLastChild();  Node  alsoBlock  =  tryBlock.getLastChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Node    elseBlock    =    tryBlock.getLastChild();    Node  thenBlock  =  tryBlock.getLastChild();  Node  elseBlock  =  tryBlock.getLastChild();  Node  alsoBlock  =  tryBlock.getLastChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Node        elseBlock        =        tryBlock.getLastChild();        Node    thenBlock    =    tryBlock.getLastChild();    Node  elseBlock  =  tryBlock.getLastChild();  Node  alsoBlock  =  tryBlock.getLastChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	29	None	add
470	[BUG]  [BUGGY]          Node    elseBlock    =    tryBlock.getLastChild();    Node  thenBlock  =  tryBlock.getLastChild();  Node  elseBlock  =  tryBlock.getLastChild();  Node  nextBlock  =  tryBlock.getLastChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Node    elseBlock    =    tryBlock.getLastChild();    Node  thenBlock  =  tryBlock.getLastChild();  Node  elseBlock  =  tryBlock.getLastChild();  Node  nextBlock  =  tryBlock.getLastChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Node        elseBlock        =        tryBlock.getLastChild();        Node    thenBlock    =    tryBlock.getLastChild();    Node  elseBlock  =  tryBlock.getLastChild();  Node  nextBlock  =  tryBlock.getLastChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	29	None	add
471	[BUG]  [BUGGY]          Node    elseBlock    =    tryBlock.getLastChild();    Node  thenBlock  =  tryBlock.getLastChild();  Node  elseBlock  =  tryBlock.getLastChild();  Node  typeBlock  =  typeBlock.getLastChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]            AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Node    elseBlock    =    tryBlock.getLastChild();    Node  thenBlock  =  tryBlock.getLastChild();  Node  elseBlock  =  tryBlock.getLastChild();  Node  typeBlock  =  typeBlock.getLastChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Node        elseBlock        =        tryBlock.getLastChild();        Node    thenBlock    =    tryBlock.getLastChild();    Node  elseBlock  =  tryBlock.getLastChild();  Node  typeBlock  =  typeBlock.getLastChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	29	None	add
472	[BUG]  [BUGGY]          Node    elseBlock    =    tryBlock.getLastChild();    Node  thenBlock  =  tryBlock.getLastChild();  Node  elseBlock  =  tryBlock.getLastChild();  Node  thenBlock  =  tryBlock.getLastChild();  Preconditions.checkState(thenBlock!=  null);  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]              AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Node    elseBlock    =    tryBlock.getLastChild();    Node  thenBlock  =  tryBlock.getLastChild();  Node  elseBlock  =  tryBlock.getLastChild();  Node  thenBlock  =  tryBlock.getLastChild();  Preconditions.checkState(thenBlock!=  null);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Node        elseBlock        =        tryBlock.getLastChild();        Node    thenBlock    =    tryBlock.getLastChild();    Node  elseBlock  =  tryBlock.getLastChild();  Node  thenBlock  =  tryBlock.getLastChild();  Preconditions.checkState(thenBlock!=  null);	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	29	None	add
473	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchNodes(c,  n);  [CE]  cannot  find  symbol  c  [FE]            AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchNodes(c,  n);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchNodes(c,  n);	  Node    allCatchNodes    =    NodeUtil.getCatchNodes(n);    	non-compiled	[CE]  cannot  find  symbol  c	72	None	replace
474	[BUG]  [BUGGY]  Node  allCatchNodes  =  tryBlock.getLastChild();  Node  allCatchNodes  =  tryBlock.getLastChild();  [CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    RuntimeException    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  tryBlock.getLastChild();  Node  allCatchNodes  =  tryBlock.getLastChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node    allCatchNodes    =    tryBlock.getLastChild();    Node  allCatchNodes  =  tryBlock.getLastChild();	  	non-compiled	[CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	123	None	add
475	[BUG]  [BUGGY]  Node  allCatchNodes  =  tryBlock.getLastChild();  Node  allSatchNodes  =  tryBlock.getLastChild();  [CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      RuntimeException    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  tryBlock.getLastChild();  Node  allSatchNodes  =  tryBlock.getLastChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node    allCatchNodes    =    tryBlock.getLastChild();    Node  allSatchNodes  =  tryBlock.getLastChild();	  	non-compiled	[CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	123	None	add
476	[BUG]  [BUGGY]  Node  allCatchNodes  =  tryBlock.getLastChild();  Node  allCatchNodes  =  attemptBlock.getLastChild();  [CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        RuntimeException    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  tryBlock.getLastChild();  Node  allCatchNodes  =  attemptBlock.getLastChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node    allCatchNodes    =    tryBlock.getLastChild();    Node  allCatchNodes  =  attemptBlock.getLastChild();	  	non-compiled	[CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	123	None	add
477	[BUG]  [BUGGY]  Node  allCatchNodes  =  tryBlock.getLastChild();  Node  wholeCatchNodes  =  tryBlock.getLastChild();  [CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          RuntimeException    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  tryBlock.getLastChild();  Node  wholeCatchNodes  =  tryBlock.getLastChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node    allCatchNodes    =    tryBlock.getLastChild();    Node  wholeCatchNodes  =  tryBlock.getLastChild();	  	non-compiled	[CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	123	None	add
478	[BUG]  [BUGGY]  Node  allCatchNodes  =  tryBlock.getLastChild();  Node  allBatchNodes  =  tryBlock.getLastChild();  [CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]            RuntimeException    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  tryBlock.getLastChild();  Node  allBatchNodes  =  tryBlock.getLastChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node    allCatchNodes    =    tryBlock.getLastChild();    Node  allBatchNodes  =  tryBlock.getLastChild();	  	non-compiled	[CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	123	None	add
479	[BUG]  [BUGGY]  Node  allCatchNodes  =  n.getLastChild();  Node  allCatchNodes  =  n.getLastChild();  [CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  n.getLastChild();  Node  allCatchNodes  =  n.getLastChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node    allCatchNodes    =    n.getLastChild();    Node  allCatchNodes  =  n.getLastChild();	  	non-compiled	[CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	178	None	add
480	[BUG]  [BUGGY]  Node  allCatchNodes  =  n.getLastChild();  Node  allSatchNodes  =  n.getLastChild();  [CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  n.getLastChild();  Node  allSatchNodes  =  n.getLastChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node    allCatchNodes    =    n.getLastChild();    Node  allSatchNodes  =  n.getLastChild();	  	non-compiled	[CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	178	None	add
481	[BUG]  [BUGGY]  Node  allCatchNodes  =  n.getLastChild();  Node  ALLCatchNodes  =  n.getLastChild();  [CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  n.getLastChild();  Node  ALLCatchNodes  =  n.getLastChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node    allCatchNodes    =    n.getLastChild();    Node  ALLCatchNodes  =  n.getLastChild();	  	non-compiled	[CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	178	None	add
482	[BUG]  [BUGGY]  Node  allCatchNodes  =  n.getLastChild();  Node  allCatchNodes  =  n.getLastChild());  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  n.getLastChild();  Node  allCatchNodes  =  n.getLastChild());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node    allCatchNodes    =    n.getLastChild();    Node  allCatchNodes  =  n.getLastChild());	  	non-compiled	[CE]  ';'  expected	178	None	add
483	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.hasCatchHandler(c));  [CE]  cannot  find  symbol  c  [FE]          AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(NodeUtil.hasCatchHandler(c));  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(NodeUtil.hasCatchHandler(c));	          Node    c    =    tryBlock.getNext();    Node    c    =    tryBlock.getNext();    Preconditions.checkState(NodeUtil.hasCatchHandler(c));    	non-compiled	[CE]  cannot  find  symbol  c	66	None	replace
484	[BUG]  [BUGGY]  Node  c  =  tryBlock.getFirstChild();  Preconditions.checkState(NodeUtil.hasCatchHandler(c));  [CE]  cannot  find  symbol  allCatchNodes  [FE]            AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  c  =  tryBlock.getFirstChild();  Preconditions.checkState(NodeUtil.hasCatchHandler(c));  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  c  =  tryBlock.getFirstChild();  Preconditions.checkState(NodeUtil.hasCatchHandler(c));	          Node    c    =    tryBlock.getNext();    Node    c    =    tryBlock.getNext();    Preconditions.checkState(NodeUtil.hasCatchHandler(c));    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	66	None	replace
485	[BUG]  [BUGGY]  Node  allCatchNodes  =  tryBlock.nextChild();  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  tryBlock.nextChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  tryBlock.nextChild();	  Node    allCatchNodes    =    tryBlock.getLastChild();    	non-compiled	[CE]  cannot  find  symbol	124	None	replace
486	[BUG]  [BUGGY]  Preconditions.checkState(n.isFunction()  &&  tryBlock.isTree());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(n.isFunction()  &&  tryBlock.isTree());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(n.isFunction()  &&  tryBlock.isTree());	  Preconditions.checkState(n.isFunction());    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
487	[BUG]  [BUGGY]  Preconditions.checkState(n.isFunction()  &&  tryBlock.isExitType());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(n.isFunction()  &&  tryBlock.isExitType());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(n.isFunction()  &&  tryBlock.isExitType());	  Preconditions.checkState(n.isFunction());    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
488	[BUG]  [BUGGY]  n.removeChild(tryBlock);  tryNode.removeChild(tryBlock);  [CE]  cannot  find  symbol  tryNode  [FE]          RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  n.removeChild(tryBlock);  tryNode.removeChild(tryBlock);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	n.removeChild(tryBlock);  tryNode.removeChild(tryBlock);	          n.removeChild(tryBlock);    node.removeChild(tryBlock);    	non-compiled	[CE]  cannot  find  symbol  tryNode	113	None	replace
489	[BUG]  [BUGGY]  Node  elseBlock  =  tryBlock!=  null?  tryBlock.getOwnerChild()  :  null;  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  tryBlock!=  null?  tryBlock.getOwnerChild()  :  null;  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  tryBlock!=  null?  tryBlock.getOwnerChild()  :  null;	  Node    elseBlock    =    tryBlock.getOwnerChild();    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
490	[BUG]  [BUGGY]  Node  elseBlock  =  tryBlock!=  null?  tryBlock.getOwnerChild()  :  tryBlock;  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  tryBlock!=  null?  tryBlock.getOwnerChild()  :  tryBlock;  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  tryBlock!=  null?  tryBlock.getOwnerChild()  :  tryBlock;	  Node    elseBlock    =    tryBlock.getOwnerChild();    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
491	[BUG]  [BUGGY]  Preconditions.checkState(tree.isTree(),  n);  [CE]  cannot  find  symbol  tree  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(tree.isTree(),  n);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(tree.isTree(),  n);	  Preconditions.checkState(n.isTree(),    tryBlock);    	non-compiled	[CE]  cannot  find  symbol  tree	171	None	replace
492	[BUG]  [BUGGY]  Preconditions.checkState(tries.isTree(),  n);  [CE]  cannot  find  symbol  tries  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(tries.isTree(),  n);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(tries.isTree(),  n);	  Preconditions.checkState(n.isTree(),    tryBlock);    	non-compiled	[CE]  cannot  find  symbol  tries	171	None	replace
493	[BUG]  [BUGGY]  Preconditions.checkState(testBlock.isTree(),  n);  [CE]  cannot  find  symbol  testBlock  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(testBlock.isTree(),  n);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(testBlock.isTree(),  n);	  Preconditions.checkState(n.isTree(),    tryBlock);    	non-compiled	[CE]  cannot  find  symbol  testBlock	171	None	replace
494	[BUG]  [BUGGY]  Preconditions.checkArgument(!tryBlock.isTry());  [CE]  cannot  find  symbol  allCatchNodes  [FE]          AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkArgument(!tryBlock.isTry());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkArgument(!tryBlock.isTry());	  Preconditions.checkArgument(tryBlock.isTry());    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	134	None	replace
495	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.hasCatchHandler(n));  [CE]  cannot  find  symbol  allCatchNodes  [FE]        AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(!NodeUtil.hasCatchHandler(n));  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(!NodeUtil.hasCatchHandler(n));	          Node    c    =    tryBlock.getNext();    Node    c    =    tryBlock.getNext();    Preconditions.checkState(!NodeUtil.hasCatchHandler(c));    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	119	None	replace
496	[BUG]  [BUGGY]  Node  elseBlock  =  tryBlock.getParent();  Preconditions.checkState(tryBlock!=  null);  [CE]  cannot  find  symbol  allCatchNodes  [FE]    AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  tryBlock.getParent();  Preconditions.checkState(tryBlock!=  null);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  tryBlock.getParent();  Preconditions.checkState(tryBlock!=  null);	          Node    elseBlock    =    tryBlock.getNext();    Preconditions.checkState(tryBlock!=    null);    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	140	None	replace
497	[BUG]  [BUGGY]          Node    elseBlock    =    tryBlock.getFirstChild();    Node  thenBlock  =  tryBlock.getFirstChild();  Node  elseBlock  =  tryBlock.getFirstChild();  Node  elseBlock  =  tryBlock.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Node    elseBlock    =    tryBlock.getFirstChild();    Node  thenBlock  =  tryBlock.getFirstChild();  Node  elseBlock  =  tryBlock.getFirstChild();  Node  elseBlock  =  tryBlock.getFirstChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Node        elseBlock        =        tryBlock.getFirstChild();        Node    thenBlock    =    tryBlock.getFirstChild();    Node  elseBlock  =  tryBlock.getFirstChild();  Node  elseBlock  =  tryBlock.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	9	None	add
498	[BUG]  [BUGGY]  NodeUtil.removeChild(tryBlock);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]              RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  NodeUtil.removeChild(tryBlock);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	NodeUtil.removeChild(tryBlock);	          n.removeChild(tryBlock);    NodeUtil.removeChild(tryBlock);    	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	95	None	replace
499	[BUG]  [BUGGY]  n.removeChild(tryBlock,  labelName);  NodeUtil.removeChild(tryBlock);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  n.removeChild(tryBlock,  labelName);  NodeUtil.removeChild(tryBlock);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	n.removeChild(tryBlock,  labelName);  NodeUtil.removeChild(tryBlock);	          n.removeChild(tryBlock);    NodeUtil.removeChild(tryBlock);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	95	None	replace
500	[BUG]  [BUGGY]  Preconditions.checkState(tries.isTree()  &&  n.isTree());  [CE]  cannot  find  symbol  tries  [FE]            AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(tries.isTree()  &&  n.isTree());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(tries.isTree()  &&  n.isTree());	  Preconditions.checkState(n.isTree()    &&    tryBlock.isTree());    	non-compiled	[CE]  cannot  find  symbol  tries	57	None	replace
501	[BUG]  [BUGGY]  Preconditions.checkState(testBlock.isTree()  &&  tryBlock.isTree());  [CE]  cannot  find  symbol  testBlock  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(testBlock.isTree()  &&  tryBlock.isTree());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(testBlock.isTree()  &&  tryBlock.isTree());	  Preconditions.checkState(n.isTree()    &&    tryBlock.isTree());    	non-compiled	[CE]  cannot  find  symbol  testBlock	57	None	replace
502	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(tryBlock,  node);  [CE]  cannot  find  symbol  node  [FE]                      AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(tryBlock,  node);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(tryBlock,  node);	  Node    allCatchNodes    =    NodeUtil.getAllCatchNodes(c,    tryBlock);    	non-compiled	[CE]  cannot  find  symbol  node	38	None	replace
503	[BUG]  [BUGGY]          Node    elseBlock    =    tryBlock.getNext();    Node  anotherBlock  =  tryBlock.getNext();  Node  thenBlock  =  tryBlock.getNext();  Node  anotherBlock  =  tryBlock.getNext();  [CE]  variable  anotherBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Node    elseBlock    =    tryBlock.getNext();    Node  anotherBlock  =  tryBlock.getNext();  Node  thenBlock  =  tryBlock.getNext();  Node  anotherBlock  =  tryBlock.getNext();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Node        elseBlock        =        tryBlock.getNext();        Node    anotherBlock    =    tryBlock.getNext();    Node  thenBlock  =  tryBlock.getNext();  Node  anotherBlock  =  tryBlock.getNext();	  	non-compiled	[CE]  variable  anotherBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	44	None	add
504	[BUG]  [BUGGY]  Node  elseBlock  =  tryBlock.getNext();  Node  anotherBlock  =  tryBlock.getLastChild();  [CE]  cannot  find  symbol  allCatchNodes  [FE]    AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  tryBlock.getNext();  Node  anotherBlock  =  tryBlock.getLastChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  tryBlock.getNext();  Node  anotherBlock  =  tryBlock.getLastChild();	          Node    elseBlock    =    tryBlock.getLastChild();    Node    anotherBlock    =    tryBlock.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	32	None	replace
505	[BUG]  [BUGGY]  Node  elseBlock  =  tryBlock.getLastChild();  Node  anotherBlock  =  tryBlock.getFirstChild();  [CE]  cannot  find  symbol  allCatchNodes  [FE]      AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  tryBlock.getLastChild();  Node  anotherBlock  =  tryBlock.getFirstChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  tryBlock.getLastChild();  Node  anotherBlock  =  tryBlock.getFirstChild();	          Node    elseBlock    =    tryBlock.getLastChild();    Node    anotherBlock    =    tryBlock.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	32	None	replace
506	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(tryBlock,  null);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(tryBlock,  null);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(tryBlock,  null);	  Node    allCatchNodes    =    NodeUtil.getAllCatchNodes(n,    tryBlock);    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
507	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(tryBucket);  [CE]  cannot  find  symbol  tryBucket  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(tryBucket);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(tryBucket);	  Node    allCatchNodes    =    NodeUtil.getAllCatchNodes(c);    	non-compiled	[CE]  cannot  find  symbol  tryBucket	98	None	replace
508	[BUG]  [BUGGY]  Node  c  =  tryBlock!=  null?  tryBlock.getNext()  :  null;  node  c  =  tryBlock.getNext();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  c  =  tryBlock!=  null?  tryBlock.getNext()  :  null;  node  c  =  tryBlock.getNext();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  c  =  tryBlock!=  null?  tryBlock.getNext()  :  null;  node  c  =  tryBlock.getNext();	          Node    c    =    tryBlock.getNext();    node    c    =    tryBlock.getNext();    	non-compiled	[CE]  cannot  find  symbol	155	None	replace
509	[BUG]  [BUGGY]  Node  c  =  tryBlock  ==  null?  tryBlock.getNext()  :  null;  node  c  =  tryBlock.getNext();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  c  =  tryBlock  ==  null?  tryBlock.getNext()  :  null;  node  c  =  tryBlock.getNext();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  c  =  tryBlock  ==  null?  tryBlock.getNext()  :  null;  node  c  =  tryBlock.getNext();	          Node    c    =    tryBlock.getNext();    node    c    =    tryBlock.getNext();    	non-compiled	[CE]  cannot  find  symbol	155	None	replace
510	[BUG]  [BUGGY]  Node  c  =  tryBlock!=  null?  tryBlock.getNext()  :  null;  [CE]  cannot  find  symbol  allCatchNodes  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  c  =  tryBlock!=  null?  tryBlock.getNext()  :  null;  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  c  =  tryBlock!=  null?  tryBlock.getNext()  :  null;	          Node    c    =    tryBlock.getNext();    node    c    =    tryBlock.getNext();    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	155	None	replace
511	[BUG]  [BUGGY]  NodeUtil.checkState(tryBlock.isTree());  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  NodeUtil.checkState(tryBlock.isTree());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	NodeUtil.checkState(tryBlock.isTree());	          Preconditions.checkState(n.isTry());    Preconditions.checkState(n.isTry());    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
512	[BUG]  [BUGGY]  Preconditions.checkNotNull(tryBlock);  [CE]  cannot  find  symbol  allCatchNodes  [FE]      AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkNotNull(tryBlock);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkNotNull(tryBlock);	          Preconditions.checkState(n.isTry());    Preconditions.checkState(n.isTry());    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	100	None	replace
513	[BUG]  [BUGGY]          Node    c    =    tryBlock.getNext();    c  =  tryBlock.getNext();  node  c  =  tryBlock.getNext();  c  =  tryBlock.getNext();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Node    c    =    tryBlock.getNext();    c  =  tryBlock.getNext();  node  c  =  tryBlock.getNext();  c  =  tryBlock.getNext();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Node        c        =        tryBlock.getNext();        c    =    tryBlock.getNext();    node  c  =  tryBlock.getNext();  c  =  tryBlock.getNext();	  	non-compiled	[CE]  cannot  find  symbol	157	None	add
514	[BUG]  [BUGGY]          Node    elseBlock    =    tryBlock.getLastChild();    Node  anotherBlock  =  tryBlock.getLastChild();  Node  thenBlock  =  tryBlock.getLastChild();  Node  anotherBlock  =  tryBlock.getLastChild();  [CE]  variable  anotherBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Node    elseBlock    =    tryBlock.getLastChild();    Node  anotherBlock  =  tryBlock.getLastChild();  Node  thenBlock  =  tryBlock.getLastChild();  Node  anotherBlock  =  tryBlock.getLastChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Node        elseBlock        =        tryBlock.getLastChild();        Node    anotherBlock    =    tryBlock.getLastChild();    Node  thenBlock  =  tryBlock.getLastChild();  Node  anotherBlock  =  tryBlock.getLastChild();	  	non-compiled	[CE]  variable  anotherBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	31	None	add
515	[BUG]  [BUGGY]  tryMinimizeExits(tryBlock.removeChild(n));  [CE]  'void'  type  not  allowed  here  [FE]        RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  tryMinimizeExits(tryBlock.removeChild(n));  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	tryMinimizeExits(tryBlock.removeChild(n));	  n.removeChild(testBlock());    	non-compiled	[CE]  'void'  type  not  allowed  here	172	None	replace
516	[BUG]  [BUGGY]  NodeUtil.removeChild(n,  tryBlock());  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  NodeUtil.removeChild(n,  tryBlock());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	NodeUtil.removeChild(n,  tryBlock());	  n.removeChild(testBlock());    	non-compiled	[CE]  cannot  find  symbol	172	None	replace
517	[BUG]  [BUGGY]  NodeUtil.removeChild(n,  testBlock());  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  NodeUtil.removeChild(n,  testBlock());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	NodeUtil.removeChild(n,  testBlock());	  n.removeChild(testBlock());    	non-compiled	[CE]  cannot  find  symbol	172	None	replace
518	[BUG]  [BUGGY]  Node  elseBlock  =  tryBlock!=  null?  tryBlock.getNext()  :  null;  Node  otherBlock  =  tryBlock.getNext();  [CE]  cannot  find  symbol  allCatchNodes  [FE]    AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  tryBlock!=  null?  tryBlock.getNext()  :  null;  Node  otherBlock  =  tryBlock.getNext();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  tryBlock!=  null?  tryBlock.getNext()  :  null;  Node  otherBlock  =  tryBlock.getNext();	          Node    elseBlock    =    tryBlock.getNext();    Node    otherBlock    =    tryBlock.getNext();    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	41	None	replace
519	[BUG]  [BUGGY]  n.removeChild(tryBlock);  NodeUtil.removeChild(n,  tryMinimizeExits);  [CE]  cannot  find  symbol  tryMinimizeExits  [FE]                  RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  n.removeChild(tryBlock);  NodeUtil.removeChild(n,  tryMinimizeExits);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	n.removeChild(tryBlock);  NodeUtil.removeChild(n,  tryMinimizeExits);	          n.removeChild(tryBlock);    NodeUtil.removeChild(n);    	non-compiled	[CE]  cannot  find  symbol  tryMinimizeExits	97	None	replace
520	[BUG]  [BUGGY]  n.removeChild(tryBlock);  NodeUtil.removeChild(n,  tryBlock);  [CE]  cannot  find  symbol  allCatchNodes  [FE]                    RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  n.removeChild(tryBlock);  NodeUtil.removeChild(n,  tryBlock);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	n.removeChild(tryBlock);  NodeUtil.removeChild(n,  tryBlock);	          n.removeChild(tryBlock);    NodeUtil.removeChild(n);    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	97	None	replace
521	[BUG]  [BUGGY]  Preconditions.checkState(tryBlock.isExit());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(tryBlock.isExit());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(tryBlock.isExit());	  Preconditions.checkState(n.isExit());    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
522	[BUG]  [BUGGY]  Node  elseBlock  =  n.getFirstChild();  Node  otherBlock  =  n.getLastChild();  [CE]  cannot  find  symbol  allCatchNodes  [FE]    AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  n.getFirstChild();  Node  otherBlock  =  n.getLastChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  n.getFirstChild();  Node  otherBlock  =  n.getLastChild();	          Node    elseBlock    =    n.getFirstChild();    Node    otherBlock    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	129	None	replace
523	[BUG]  [BUGGY]  Node  allCatchNodes  =  n.getLastChild();  Node  allCatchNodes  =  n.getLastChild();  Preconditions.checkState(allCatchNodes.hasOneChild());  [CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  n.getLastChild();  Node  allCatchNodes  =  n.getLastChild();  Preconditions.checkState(allCatchNodes.hasOneChild());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node    allCatchNodes    =    n.getLastChild();    Node  allCatchNodes  =  n.getLastChild();  Preconditions.checkState(allCatchNodes.hasOneChild());	  	non-compiled	[CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	178	None	add
524	[BUG]  [BUGGY]  Node  allCatchNodes  =  n.getLastChild();  Node  allCatchNodes  =  n.getLastChild();  preconditions.checkState(allCatchNodes.hasOneChild());  [CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  n.getLastChild();  Node  allCatchNodes  =  n.getLastChild();  preconditions.checkState(allCatchNodes.hasOneChild());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node    allCatchNodes    =    n.getLastChild();    Node  allCatchNodes  =  n.getLastChild();  preconditions.checkState(allCatchNodes.hasOneChild());	  	non-compiled	[CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	178	None	add
525	[BUG]  [BUGGY]  Node  allCatchNodes  =  n.getLastChild();  Node  allCatchNodes  =  n.getLastChild();  Preconditions.checkState(AllCatchNodes.hasOneChild());  [CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  n.getLastChild();  Node  allCatchNodes  =  n.getLastChild();  Preconditions.checkState(AllCatchNodes.hasOneChild());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node    allCatchNodes    =    n.getLastChild();    Node  allCatchNodes  =  n.getLastChild();  Preconditions.checkState(AllCatchNodes.hasOneChild());	  	non-compiled	[CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	178	None	add
526	[BUG]  [BUGGY]  Node  allCatchNodes  =  n.getLastChild();  Node  allCatchNodes  =  n.getLastChild();  preconditions.checkState(AllCatchNodes.hasOneChild());  [CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  n.getLastChild();  Node  allCatchNodes  =  n.getLastChild();  preconditions.checkState(AllCatchNodes.hasOneChild());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node    allCatchNodes    =    n.getLastChild();    Node  allCatchNodes  =  n.getLastChild();  preconditions.checkState(AllCatchNodes.hasOneChild());	  	non-compiled	[CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	178	None	add
527	[BUG]  [BUGGY]  Node  elseBlock  =  tryBlock.removeLastChild();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  tryBlock.removeLastChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  tryBlock.removeLastChild();	  Node    elseBlock    =    tryBlock.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol	137	None	replace
528	[BUG]  [BUGGY]  Node  elseBlock  =  tryBlock.replaceChild(n,  tryBlock);  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  tryBlock.replaceChild(n,  tryBlock);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  tryBlock.replaceChild(n,  tryBlock);	  Node    elseBlock    =    tryBlock.removeFirstChild();    	non-compiled	[CE]  incompatible  types	137	None	replace
529	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchNodes(tryBlock,  n,  exitType);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchNodes(tryBlock,  n,  exitType);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchNodes(tryBlock,  n,  exitType);	  Node    allCatchNodes    =    NodeUtil.getCatchNodes(tryBlock,    n);    	non-compiled	[CE]  cannot  find  symbol	122	None	replace
530	[BUG]  [BUGGY]  Node  elseBlock  =  tryBlock.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  tryBlock.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  tryBlock.getFirstChild();  Node  elseBlock  =  n.getFirstChild();	          Node    elseBlock    =    n.getFirstChild();    Node    elseBlock    =    n.getFirstChild();    Preconditions.checkState(anythingCatchNodes.hasOneChild());    	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	78	None	replace
531	[BUG]  [BUGGY]  Preconditions.checkState(anythingCatchNodes.hasOneChild());  [CE]  cannot  find  symbol  anythingCatchNodes  [FE]            AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(anythingCatchNodes.hasOneChild());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(anythingCatchNodes.hasOneChild());	          Node    elseBlock    =    n.getFirstChild();    Node    elseBlock    =    n.getFirstChild();    Preconditions.checkState(anythingCatchNodes.hasOneChild());    	non-compiled	[CE]  cannot  find  symbol  anythingCatchNodes	78	None	replace
532	[BUG]  [BUGGY]  Node  c  =  tryBlock.removeLastChild();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  c  =  tryBlock.removeLastChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  c  =  tryBlock.removeLastChild();	  Node    c    =    tryBlock.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol	181	None	replace
533	[BUG]  [BUGGY]  Node  c  =  tryBlock.replaceChild(n,  tryBlock.getLastChild());  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  c  =  tryBlock.replaceChild(n,  tryBlock.getLastChild());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  c  =  tryBlock.replaceChild(n,  tryBlock.getLastChild());	  Node    c    =    tryBlock.removeFirstChild();    	non-compiled	[CE]  incompatible  types	181	None	replace
534	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isExitBlock(tryBlock,  n),  falseBlock);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(NodeUtil.isExitBlock(tryBlock,  n),  falseBlock);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(NodeUtil.isExitBlock(tryBlock,  n),  falseBlock);	  Preconditions.checkState(NodeUtil.isExitBlock(tryBlock,    n));    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
535	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isExitBlock(n)||  tryBlock!=  null);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(NodeUtil.isExitBlock(n)||  tryBlock!=  null);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(NodeUtil.isExitBlock(n)||  tryBlock!=  null);	  Preconditions.checkState(NodeUtil.isExitBlock(n),    tryBlock);    	non-compiled	[CE]  cannot  find  symbol	168	None	replace
536	[BUG]  [BUGGY]  Node  n  =  tryBlock.replaceChild(n,  falseBlock);  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  n  =  tryBlock.replaceChild(n,  falseBlock);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  n  =  tryBlock.replaceChild(n,  falseBlock);	  Node    n    =    tryBlock.removeFirstChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	180	None	replace
537	[BUG]  [BUGGY]  Node  allCatchNodes  =  tryBlock.getFirstChild();  Node  allCatchNodes  =  tryBlock.getFirstChild();  if(NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  tryBlock.getFirstChild();  Node  allCatchNodes  =  tryBlock.getFirstChild();  if(NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node    allCatchNodes    =    tryBlock.getFirstChild();    Node  allCatchNodes  =  tryBlock.getFirstChild();  if(NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());	  	non-compiled	[CE]  illegal  start  of  expression	63	None	add
538	[BUG]  [BUGGY]  Node  allCatchNodes  =  tryBlock.getFirstChild();  Node  allCatchNodes  =  tryBlock.getFirstChild();  if(NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  allCatchNodes  =  tryBlock.getFirstChild();  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  tryBlock.getFirstChild();  Node  allCatchNodes  =  tryBlock.getFirstChild();  if(NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  allCatchNodes  =  tryBlock.getFirstChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node    allCatchNodes    =    tryBlock.getFirstChild();    Node  allCatchNodes  =  tryBlock.getFirstChild();  if(NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  allCatchNodes  =  tryBlock.getFirstChild();	  	non-compiled	[CE]  illegal  start  of  expression	63	None	add
539	[BUG]  [BUGGY]  Node  allCatchNodes  =  tryBlock.getFirstChild();  Node  allCatchNodes  =  tryBlock.getFirstChild();  if(NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  allCatchNodes  =  tryBlock.getLastChild();  [CE]  illegal  start  of  expression  [FE]        RuntimeException    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  tryBlock.getFirstChild();  Node  allCatchNodes  =  tryBlock.getFirstChild();  if(NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  allCatchNodes  =  tryBlock.getLastChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node    allCatchNodes    =    tryBlock.getFirstChild();    Node  allCatchNodes  =  tryBlock.getFirstChild();  if(NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  allCatchNodes  =  tryBlock.getLastChild();	  	non-compiled	[CE]  illegal  start  of  expression	63	None	add
540	[BUG]  [BUGGY]  Node  allCatchNodes  =  tryBlock.getFirstChild();  Node  allCatchNodes  =  tryBlock.getFirstChild();  if(NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  allCatchNodes  =  tryBlock.getLastChild  [CE]  ';'  expected  [FE]          RuntimeException    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  tryBlock.getFirstChild();  Node  allCatchNodes  =  tryBlock.getFirstChild();  if(NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  allCatchNodes  =  tryBlock.getLastChild  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node    allCatchNodes    =    tryBlock.getFirstChild();    Node  allCatchNodes  =  tryBlock.getFirstChild();  if(NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  allCatchNodes  =  tryBlock.getLastChild	  	non-compiled	[CE]  ';'  expected	63	None	add
541	[BUG]  [BUGGY]  Node  allCatchNodes  =  tryBlock.getFirstChild();  Node  allCatchNodes  =  tryBlock.getFirstChild();  if(NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  allCatchNodes  =  tryBlock.getLastChil  [CE]  ';'  expected  [FE]            RuntimeException    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  tryBlock.getFirstChild();  Node  allCatchNodes  =  tryBlock.getFirstChild();  if(NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  allCatchNodes  =  tryBlock.getLastChil  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node    allCatchNodes    =    tryBlock.getFirstChild();    Node  allCatchNodes  =  tryBlock.getFirstChild();  if(NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  allCatchNodes  =  tryBlock.getLastChil	  	non-compiled	[CE]  ';'  expected	63	None	add
542	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock,  labelName,  n);  [CE]  method  getCatchBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock,  labelName,  n);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock,  labelName,  n);	  Node    allCatchNodes    =    NodeUtil.getCatchBlock(c,    tryBlock,    n);    	non-compiled	[CE]  method  getCatchBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;	56	None	replace
543	[BUG]  [BUGGY]  Preconditions.checkState(n.hasChildren());  [CE]  cannot  find  symbol  allCatchNodes  [FE]        AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(n.hasChildren());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(n.hasChildren());	  Preconditions.checkState(n.hasOneChild());    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	176	None	replace
544	[BUG]  [BUGGY]  Preconditions.checkState(tree.hasOneChild());  [CE]  cannot  find  symbol  tree  [FE]          AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(tree.hasOneChild());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(tree.hasOneChild());	  Preconditions.checkState(n.hasOneChild());    	non-compiled	[CE]  cannot  find  symbol  tree	176	None	replace
545	[BUG]  [BUGGY]  n.removeChild(chooser,  labelName);  [CE]  cannot  find  symbol  chooser  [FE]        RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  n.removeChild(chooser,  labelName);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	n.removeChild(chooser,  labelName);	  n.removeChild(labelName);    	non-compiled	[CE]  cannot  find  symbol  chooser	1	None	replace
546	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(tryBlock,  n,  exitType);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(tryBlock,  n,  exitType);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchHandler(tryBlock,  n,  exitType);	  Node    allCatchNodes    =    NodeUtil.getCatchHandler(tryBlock,    n);    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
547	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(tryBlock,  n,  falseBlock);  [CE]  cannot  find  symbol  falseBlock  [FE]                      AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(tryBlock,  n,  falseBlock);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchHandler(tryBlock,  n,  falseBlock);	  Node    allCatchNodes    =    NodeUtil.getCatchHandler(tryBlock,    n);    	non-compiled	[CE]  cannot  find  symbol  falseBlock	106	None	replace
548	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(testNodes,  exitType,  tryBlock);  [CE]  cannot  find  symbol  testNodes  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(testNodes,  exitType,  tryBlock);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(testNodes,  exitType,  tryBlock);	  Node    allCatchNodes    =    NodeUtil.getAllCatchNodes(exitType,    tryBlock);    	non-compiled	[CE]  cannot  find  symbol  testNodes	177	None	replace
549	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(triesBlock,  exitType);  [CE]  cannot  find  symbol  triesBlock  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(triesBlock,  exitType);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(triesBlock,  exitType);	  Node    allCatchNodes    =    NodeUtil.getAllCatchNodes(exitType,    tryBlock);    	non-compiled	[CE]  cannot  find  symbol  triesBlock	177	None	replace
550	[BUG]  [BUGGY]  Node  elseBlock  =  tryBlock.getNext(),  labelName  +  1;  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  tryBlock.getNext(),  labelName  +  1;  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  tryBlock.getNext(),  labelName  +  1;	  Node    elseBlock    =    tryBlock.getNext(),    labelName);    	non-compiled	[CE]  ';'  expected	47	None	replace
551	[BUG]  [BUGGY]  Node  elseBlock  =  tryBlock.getParent(),  labelName);  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  tryBlock.getParent(),  labelName);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  tryBlock.getParent(),  labelName);	  Node    elseBlock    =    tryBlock.getNext(),    labelName);    	non-compiled	[CE]  ';'  expected	47	None	replace
552	[BUG]  [BUGGY]  Node  c  =  tryBlock!=  null?  tryBlock.getCatch()  :  null;  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  c  =  tryBlock!=  null?  tryBlock.getCatch()  :  null;  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  c  =  tryBlock!=  null?  tryBlock.getCatch()  :  null;	  Node    c    =    tryBlock.getCatch();    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
553	[BUG]  [BUGGY]  Node  c  =  tryBlock.cloneTree();  [CE]  cannot  find  symbol  allCatchNodes  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  c  =  tryBlock.cloneTree();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  c  =  tryBlock.cloneTree();	  Node    c    =    tryBlock.getCatch();    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	20	None	replace
554	[BUG]  [BUGGY]  Node  c  =  tryBlock!=  null?  tryBlock.getCatch()  :  falseBlock;  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  c  =  tryBlock!=  null?  tryBlock.getCatch()  :  falseBlock;  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  c  =  tryBlock!=  null?  tryBlock.getCatch()  :  falseBlock;	  Node    c    =    tryBlock.getCatch();    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
555	[BUG]  [BUGGY]  Preconditions.checkState(labelName.equals(tryBlock));  [CE]  cannot  find  symbol  allCatchNodes  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(labelName.equals(tryBlock));  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(labelName.equals(tryBlock));	          Node    elseBlock    =    n.getFirstChild();    Node    elseBlock    =    n.getFirstChild();    Preconditions.checkState(labelName.equals(tryBlock));    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	82	None	replace
556	[BUG]  [BUGGY]  n.removeChild(tryBlock.getParent());  [CE]  cannot  find  symbol  allCatchNodes  [FE]              RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  n.removeChild(tryBlock.getParent());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	n.removeChild(tryBlock.getParent());	  n.removeChild(tryBlock.getNext());    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	4	None	replace
557	[BUG]  [BUGGY]  Node  c  =  tryBlock.getNext();  AssertionFailedError  <  Node>  c  =  c.getNext();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  c  =  tryBlock.getNext();  AssertionFailedError  <  Node>  c  =  c.getNext();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  c  =  tryBlock.getNext();  AssertionFailedError  <  Node>  c  =  c.getNext();	          Node    c    =    tryBlock.getNext();    AssertionFailedError    <    Node>    c    =    tryBlock.getNext();    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
558	[BUG]  [BUGGY]  Node  elseBlock  =  tryBlock!=  null?  tryBlock.getNext()  :  null;  Node  anotherBlock  =  tryBlock.getNext();  [CE]  cannot  find  symbol  allCatchNodes  [FE]    AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  tryBlock!=  null?  tryBlock.getNext()  :  null;  Node  anotherBlock  =  tryBlock.getNext();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  tryBlock!=  null?  tryBlock.getNext()  :  null;  Node  anotherBlock  =  tryBlock.getNext();	          Node    elseBlock    =    tryBlock.getNext();    Node    anotherBlock    =    tryBlock.getNext();    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	45	None	replace
559	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.findCatchNodes(tryBlock,  n);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.findCatchNodes(tryBlock,  n);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.findCatchNodes(tryBlock,  n);	  Node    allCatchNodes    =    NodeUtil.getCatchNodes(n);    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
560	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock,  falseBlock);  Preconditions.checkState(NodeUtil.hasCatchHandler(allCatchNodes));  [CE]  cannot  find  symbol  falseBlock  [FE]            RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock,  falseBlock);  Preconditions.checkState(NodeUtil.hasCatchHandler(allCatchNodes));  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock,  falseBlock);  Preconditions.checkState(NodeUtil.hasCatchHandler(allCatchNodes));	  Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock);    Preconditions.checkState(NodeUtil.hasCatchHandler(allCatchNodes));    	non-compiled	[CE]  cannot  find  symbol  falseBlock	50	None	replace
561	[BUG]  [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  thenBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  Node  otherBlock  =  n.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  thenBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  Node  otherBlock  =  n.getFirstChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Node        elseBlock        =        n.getFirstChild();        Node    thenBlock    =    n.getFirstChild();    Node  elseBlock  =  n.getFirstChild();  Node  otherBlock  =  n.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	130	None	add
562	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(testNode,  n,  tryBlock);  [CE]  cannot  find  symbol  testNode  [FE]            AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(testNode,  n,  tryBlock);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(testNode,  n,  tryBlock);	  Node    allCatchNodes    =    NodeUtil.getCatchBlock(n,    tryBlock);    	non-compiled	[CE]  cannot  find  symbol  testNode	53	None	replace
563	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(testBlock,  n);  [CE]  cannot  find  symbol  testBlock  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(testBlock,  n);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(testBlock,  n);	  Node    allCatchNodes    =    NodeUtil.getCatchBlock(n,    tryBlock);    	non-compiled	[CE]  cannot  find  symbol  testBlock	53	None	replace
564	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock,  tryBlock);  [CE]  method  getCatchBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]          RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock,  tryBlock);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock,  tryBlock);	  Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock,    falseBlock);    	non-compiled	[CE]  method  getCatchBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;	148	None	replace
565	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock,  stopType);  [CE]  cannot  find  symbol  stopType  [FE]            RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock,  stopType);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock,  stopType);	  Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock,    falseBlock);    	non-compiled	[CE]  cannot  find  symbol  stopType	148	None	replace
566	[BUG]  [BUGGY]  n.removeChild(tryBlock);  Node  n  =  tryBlock.getLastChild();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]            RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  n.removeChild(tryBlock);  Node  n  =  tryBlock.getLastChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	n.removeChild(tryBlock);  Node  n  =  tryBlock.getLastChild();	          n.removeChild(tryBlock);    Node    n    =    tryBlock.getFirstChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	94	None	replace
567	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(tryBlock,  stopType);  [CE]  cannot  find  symbol  stopType  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(tryBlock,  stopType);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(tryBlock,  stopType);	  Node    allCatchNodes    =    NodeUtil.getAllCatchNodes(tryBlock,    falseBlock);    	non-compiled	[CE]  cannot  find  symbol  stopType	111	None	replace
568	[BUG]  [BUGGY]  Node  nextBlock  =  n.getLastChild();  [CE]  cannot  find  symbol  allCatchNodes  [FE]        AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  nextBlock  =  n.getLastChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  nextBlock  =  n.getLastChild();	  Node    elseBlock    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	16	None	replace
569	[BUG]  [BUGGY]          Node    elseBlock    =    tryBlock.getLastChild();    Node  otherBlock  =  tryBlock.getLastChild();  Node  elseBlock  =  tryBlock.getFirstChild();  Node  otherBlock  =  tryBlock.getLastChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Node    elseBlock    =    tryBlock.getLastChild();    Node  otherBlock  =  tryBlock.getLastChild();  Node  elseBlock  =  tryBlock.getFirstChild();  Node  otherBlock  =  tryBlock.getLastChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Node        elseBlock        =        tryBlock.getLastChild();        Node    otherBlock    =    tryBlock.getLastChild();    Node  elseBlock  =  tryBlock.getFirstChild();  Node  otherBlock  =  tryBlock.getLastChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	27	None	add
570	[BUG]  [BUGGY]  Node  elseBlock  =  tryBlock.cloneTree(n);  [CE]  method  cloneTree  in  class  Node  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  tryBlock.cloneTree(n);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  tryBlock.cloneTree(n);	  Node    elseBlock    =    tryBlock.cloneTree();    	non-compiled	[CE]  method  cloneTree  in  class  Node  cannot  be  applied  to  given  types;	159	None	replace
571	[BUG]  [BUGGY]  Node  elseBlock  =  tryBlock!=  null?  tryBlock.cloneTree()  :  null;  [CE]  cannot  find  symbol  allCatchNodes  [FE]          AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  tryBlock!=  null?  tryBlock.cloneTree()  :  null;  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  tryBlock!=  null?  tryBlock.cloneTree()  :  null;	  Node    elseBlock    =    tryBlock.cloneTree();    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	159	None	replace
572	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isExitBlock(tryBlock,  exitType),  labelName);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(NodeUtil.isExitBlock(tryBlock,  exitType),  labelName);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(NodeUtil.isExitBlock(tryBlock,  exitType),  labelName);	  Preconditions.checkState(NodeUtil.isExitBlock(tryBlock,    exitType));    	non-compiled	[CE]  cannot  find  symbol	132	None	replace
573	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(triesBlock,  exitType);  [CE]  cannot  find  symbol  triesBlock  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(triesBlock,  exitType);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchHandler(triesBlock,  exitType);	  Node    allCatchNodes    =    NodeUtil.getCatchHandler(n,    exitType);    	non-compiled	[CE]  cannot  find  symbol  triesBlock	151	None	replace
574	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(exitType,  n);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(exitType,  n);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchHandler(exitType,  n);	  Node    allCatchNodes    =    NodeUtil.getCatchHandler(n,    exitType);    	non-compiled	[CE]  cannot  find  symbol	151	None	replace
575	[BUG]  [BUGGY]  Node  c  =  tryBlock.getCatchNodes(false);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  c  =  tryBlock.getCatchNodes(false);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  c  =  tryBlock.getCatchNodes(false);	  Node    c    =    tryBlock.getCatchNodes();    	non-compiled	[CE]  cannot  find  symbol	144	None	replace
576	[BUG]  [BUGGY]  Preconditions.checkState(tries.getType()  ==  Token.EXPR_RESULT);  [CE]  cannot  find  symbol  tries  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(tries.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(tries.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  cannot  find  symbol  tries	25	None	replace
577	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.hasCatchHandler(tryBlock),  exitType,  labelName);  [CE]  no  suitable  method  found  for  checkState(boolean,int,String)  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(NodeUtil.hasCatchHandler(tryBlock),  exitType,  labelName);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(NodeUtil.hasCatchHandler(tryBlock),  exitType,  labelName);	          Node    c    =    tryBlock.getNext();    Node    c    =    tryBlock.getNext();    Preconditions.checkState(NodeUtil.hasCatchHandler(c),    exitType,    labelName);    	non-compiled	[CE]  no  suitable  method  found  for  checkState(boolean,int,String)	68	None	replace
578	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.hasCatchHandler(n),  exitType,  labelName);  [CE]  no  suitable  method  found  for  checkState(boolean,int,String)  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(NodeUtil.hasCatchHandler(n),  exitType,  labelName);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(NodeUtil.hasCatchHandler(n),  exitType,  labelName);	          Node    c    =    tryBlock.getNext();    Node    c    =    tryBlock.getNext();    Preconditions.checkState(NodeUtil.hasCatchHandler(c),    exitType,    labelName);    	non-compiled	[CE]  no  suitable  method  found  for  checkState(boolean,int,String)	68	None	replace
579	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchNodes(tryBlock,  node);  [CE]  cannot  find  symbol  node  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchNodes(tryBlock,  node);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchNodes(tryBlock,  node);	  Node    allCatchNodes    =    NodeUtil.getCatchNodes(n,    tryBlock);    	non-compiled	[CE]  cannot  find  symbol  node	73	None	replace
580	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchNodes(tryBlock,  null);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchNodes(tryBlock,  null);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchNodes(tryBlock,  null);	  Node    allCatchNodes    =    NodeUtil.getCatchNodes(n,    tryBlock);    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
581	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.hasCatchHandler(n));  [CE]  cannot  find  symbol  allCatchNodes  [FE]          AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(NodeUtil.hasCatchHandler(n));  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(NodeUtil.hasCatchHandler(n));	          Node    c    =    tryBlock.getNext();    Node    c    =    tryBlock.getNext();    Preconditions.checkState(NodeUtil.hasCatchHandler(c));    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	66	None	replace
582	[BUG]  [BUGGY]  Node  c  =  tryBlock!=  null?  falseBlock  :  tryBlock.getNext();  [CE]  cannot  find  symbol  falseBlock  [FE]        AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  c  =  tryBlock!=  null?  falseBlock  :  tryBlock.getNext();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  c  =  tryBlock!=  null?  falseBlock  :  tryBlock.getNext();	          Node    c    =    tryBlock.getNext();    Node    c    =    attemptBlock.getNext();    	non-compiled	[CE]  cannot  find  symbol  falseBlock	154	None	replace
583	[BUG]  [BUGGY]          Node    elseBlock    =    tryBlock.getNext();    Preconditions.checkState(tryBlock!=  null);  Node  elseBlock  =  tryBlock.getNext();  Preconditions.checkState(otherBlock!=  null);  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Node    elseBlock    =    tryBlock.getNext();    Preconditions.checkState(tryBlock!=  null);  Node  elseBlock  =  tryBlock.getNext();  Preconditions.checkState(otherBlock!=  null);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Node        elseBlock        =        tryBlock.getNext();        Preconditions.checkState(tryBlock!=    null);    Node  elseBlock  =  tryBlock.getNext();  Preconditions.checkState(otherBlock!=  null);	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	139	None	add
584	[BUG]  [BUGGY]          Node    elseBlock    =    tryBlock.getNext();    Node  thenBlock  =  tryBlock.getNext();  Node  elseBlock  =  tryBlock.getNext();  Node  alsoBlock  =  tryBlock.getNext();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Node    elseBlock    =    tryBlock.getNext();    Node  thenBlock  =  tryBlock.getNext();  Node  elseBlock  =  tryBlock.getNext();  Node  alsoBlock  =  tryBlock.getNext();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Node        elseBlock        =        tryBlock.getNext();        Node    thenBlock    =    tryBlock.getNext();    Node  elseBlock  =  tryBlock.getNext();  Node  alsoBlock  =  tryBlock.getNext();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	42	None	add
585	[BUG]  [BUGGY]          Node    elseBlock    =    tryBlock.getNext();    Node  thenBlock  =  tryBlock.getNext();  Node  elseBlock  =  tryBlock.getNext();  Node  nextBlock  =  tryBlock.getNext();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Node    elseBlock    =    tryBlock.getNext();    Node  thenBlock  =  tryBlock.getNext();  Node  elseBlock  =  tryBlock.getNext();  Node  nextBlock  =  tryBlock.getNext();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Node        elseBlock        =        tryBlock.getNext();        Node    thenBlock    =    tryBlock.getNext();    Node  elseBlock  =  tryBlock.getNext();  Node  nextBlock  =  tryBlock.getNext();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	42	None	add
586	[BUG]  [BUGGY]          Node    elseBlock    =    tryBlock.getNext();    Node  thenBlock  =  tryBlock.getNext();  Node  elseBlock  =  tryBlock.getNext();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Node    elseBlock    =    tryBlock.getNext();    Node  thenBlock  =  tryBlock.getNext();  Node  elseBlock  =  tryBlock.getNext();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Node        elseBlock        =        tryBlock.getNext();        Node    thenBlock    =    tryBlock.getNext();    Node  elseBlock  =  tryBlock.getNext();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	42	None	add
587	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(exitType,  tryBlock);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(exitType,  tryBlock);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchHandler(exitType,  tryBlock);	  Node    allCatchNodes    =    NodeUtil.getCatchHandler(tryBlock,    exitType);    	non-compiled	[CE]  cannot  find  symbol	135	None	replace
588	[BUG]  [BUGGY]  node.removeChild(tryBlock);  Node  n  =  n.getFirstChild();  [CE]  cannot  find  symbol  node  [FE]        RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  node.removeChild(tryBlock);  Node  n  =  n.getFirstChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	node.removeChild(tryBlock);  Node  n  =  n.getFirstChild();	          n.removeChild(tryBlock);    Node    n    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  node	112	None	replace
589	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock,  tryBlock).getLastChild();  [CE]  method  getCatchBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]        RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock,  tryBlock).getLastChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock,  tryBlock).getLastChild();	  Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock);    Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock).getLastChild();    	non-compiled	[CE]  method  getCatchBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;	165	None	replace
590	[BUG]  [BUGGY]  Node  elseBlock  =  tryBlock!=  null?  tryBlock.getNext()  :  null;  node  elseBlock  =  tryBlock.getNext();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  tryBlock!=  null?  tryBlock.getNext()  :  null;  node  elseBlock  =  tryBlock.getNext();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  tryBlock!=  null?  tryBlock.getNext()  :  null;  node  elseBlock  =  tryBlock.getNext();	          Node    elseBlock    =    tryBlock.getNext();    node    elseBlock    =    tryBlock.getNext();    	non-compiled	[CE]  cannot  find  symbol	138	None	replace
591	[BUG]  [BUGGY]  Node  elseBlock  =  tryBlock  ==  null?  tryBlock.getNext()  :  null;  node  elseBlock  =  tryBlock.getNext();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  tryBlock  ==  null?  tryBlock.getNext()  :  null;  node  elseBlock  =  tryBlock.getNext();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  tryBlock  ==  null?  tryBlock.getNext()  :  null;  node  elseBlock  =  tryBlock.getNext();	          Node    elseBlock    =    tryBlock.getNext();    node    elseBlock    =    tryBlock.getNext();    	non-compiled	[CE]  cannot  find  symbol	138	None	replace
592	[BUG]  [BUGGY]  Node  elseBlock  =  tryBlock.getNext();  if(elseBlock!=  null)  {  elseBlock  =  tryBlock.getNext();  }  [CE]  cannot  find  symbol  allCatchNodes  [FE]            AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  tryBlock.getNext();  if(elseBlock!=  null)  {  elseBlock  =  tryBlock.getNext();  }  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  tryBlock.getNext();  if(elseBlock!=  null)  {  elseBlock  =  tryBlock.getNext();  }	          Node    elseBlock    =    tryBlock.getNext();    node    elseBlock    =    tryBlock.getNext();    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	138	None	replace
593	[BUG]  [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  otherBlock  =  n.getFirstChild();  Node  elseBlock  =  tryBlock.getFirstChild();  Node  otherBlock  =  n.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  otherBlock  =  n.getFirstChild();  Node  elseBlock  =  tryBlock.getFirstChild();  Node  otherBlock  =  n.getFirstChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Node        elseBlock        =        n.getFirstChild();        Node    otherBlock    =    n.getFirstChild();    Node  elseBlock  =  tryBlock.getFirstChild();  Node  otherBlock  =  n.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	128	None	add
594	[BUG]  [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  otherBlock  =  n.getFirstChild();  Node  elseBlock  =  node.getFirstChild();  Node  otherBlock  =  n.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  otherBlock  =  n.getFirstChild();  Node  elseBlock  =  node.getFirstChild();  Node  otherBlock  =  n.getFirstChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Node        elseBlock        =        n.getFirstChild();        Node    otherBlock    =    n.getFirstChild();    Node  elseBlock  =  node.getFirstChild();  Node  otherBlock  =  n.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	128	None	add
595	[BUG]  [BUGGY]  Preconditions.checkState(labelName.isTree(),  exitType);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(labelName.isTree(),  exitType);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(labelName.isTree(),  exitType);	  Preconditions.checkState(n.isTree(),    exitType);    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
596	[BUG]  [BUGGY]  Preconditions.checkState(exitType.isTree(),  n);  [CE]  int  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(exitType.isTree(),  n);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(exitType.isTree(),  n);	  Preconditions.checkState(n.isTree(),    exitType);    	non-compiled	[CE]  int  cannot  be  dereferenced	58	None	replace
597	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock);  Node  allSatchNodes  =  NodeUtil.getCatchBlock(tryBlock,  exitType);  [CE]  method  getCatchBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]          RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock);  Node  allSatchNodes  =  NodeUtil.getCatchBlock(tryBlock,  exitType);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock);  Node  allSatchNodes  =  NodeUtil.getCatchBlock(tryBlock,  exitType);	  Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock);    Node    allSatchNodes    =    NodeUtil.getCatchBlock(tryBlock);    	non-compiled	[CE]  method  getCatchBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;	49	None	replace
598	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n,  labelName,  tryBlock);  [CE]  method  getCatchBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n,  labelName,  tryBlock);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(n,  labelName,  tryBlock);	  Node    allCatchNodes    =    NodeUtil.getCatchBlock(labelName,    tryBlock);    	non-compiled	[CE]  method  getCatchBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;	175	None	replace
599	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isExitBlock(testBlock,  tryBlock));  [CE]  cannot  find  symbol  testBlock  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(NodeUtil.isExitBlock(testBlock,  tryBlock));  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(NodeUtil.isExitBlock(testBlock,  tryBlock));	  Preconditions.checkState(NodeUtil.isExitBlock(n,    tryBlock));    	non-compiled	[CE]  cannot  find  symbol  testBlock	167	None	replace
600	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isExitBlock(triesBlock,  n));  [CE]  cannot  find  symbol  triesBlock  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(NodeUtil.isExitBlock(triesBlock,  n));  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(NodeUtil.isExitBlock(triesBlock,  n));	  Preconditions.checkState(NodeUtil.isExitBlock(n,    tryBlock));    	non-compiled	[CE]  cannot  find  symbol  triesBlock	167	None	replace
601	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchNodes(triesBlock,  exitType);  [CE]  cannot  find  symbol  triesBlock  [FE]            AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchNodes(triesBlock,  exitType);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchNodes(triesBlock,  exitType);	  Node    allCatchNodes    =    NodeUtil.getCatchNodes(exitType,    tryBlock);    	non-compiled	[CE]  cannot  find  symbol  triesBlock	162	None	replace
602	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.findCatchNodes(tryBlock,  exitType);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.findCatchNodes(tryBlock,  exitType);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.findCatchNodes(tryBlock,  exitType);	  Node    allCatchNodes    =    NodeUtil.getCatchNodes(exitType,    tryBlock);    	non-compiled	[CE]  cannot  find  symbol	162	None	replace
603	[BUG]  [BUGGY]  Node  allCatchNodes  =  tryBlock.getLastChild();  Preconditions.checkState(tryBlock.getLastChild()  ==  null);  [CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    RuntimeException    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  tryBlock.getLastChild();  Preconditions.checkState(tryBlock.getLastChild()  ==  null);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node    allCatchNodes    =    tryBlock.getLastChild();    Preconditions.checkState(tryBlock.getLastChild()  ==  null);	  	non-compiled	[CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	123	None	add
604	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(testBlock);  [CE]  cannot  find  symbol  testBlock  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(testBlock);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchHandler(testBlock);	  Node    allCatchNodes    =    NodeUtil.getCatchHandler(triesBlock);    	non-compiled	[CE]  cannot  find  symbol  testBlock	116	None	replace
605	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(exitType);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(exitType);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchHandler(exitType);	  Node    allCatchNodes    =    NodeUtil.getCatchHandler(triesBlock);    	non-compiled	[CE]  cannot  find  symbol	116	None	replace
606	[BUG]  [BUGGY]  Node  elseBlock  =  tryBlock.getFirstChild();  Node  elseBlock  =  n.getLastChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  tryBlock.getFirstChild();  Node  elseBlock  =  n.getLastChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  tryBlock.getFirstChild();  Node  elseBlock  =  n.getLastChild();	          Node    elseBlock    =    n.getFirstChild();    Node    elseBlock    =    n.getLastChild();    	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	80	None	replace
607	[BUG]  [BUGGY]  Node  elseBlock  =  tryBlock.getNext();  Node  otherBlock  =  tryBlock.getLastChild();  [CE]  cannot  find  symbol  allCatchNodes  [FE]    AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  tryBlock.getNext();  Node  otherBlock  =  tryBlock.getLastChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  tryBlock.getNext();  Node  otherBlock  =  tryBlock.getLastChild();	          Node    elseBlock    =    tryBlock.getLastChild();    Node    otherBlock    =    tryBlock.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	28	None	replace
608	[BUG]  [BUGGY]  Node  n  =  tryBlock.getPrevious();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                        AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  n  =  tryBlock.getPrevious();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  n  =  tryBlock.getPrevious();	  Node    n    =    tryBlock.getNext()    +    1;    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	89	None	replace
609	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n,  labelName);  [CE]  method  getCatchBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]        RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n,  labelName);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(n,  labelName);	  Node    allCatchNodes    =    NodeUtil.getCatchBlock(labelName);    	non-compiled	[CE]  method  getCatchBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;	160	None	replace
610	[BUG]  [BUGGY]  n.replaceChild(tryBlock,  tryBlock);  [CE]  cannot  find  symbol  allCatchNodes  [FE]          RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  n.replaceChild(tryBlock,  tryBlock);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	n.replaceChild(tryBlock,  tryBlock);	  n.replaceChild(n,    tryBlock);    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	115	None	replace
611	[BUG]  [BUGGY]  n.replaceChild(tryBlock,  null);  [CE]  cannot  find  symbol  allCatchNodes  [FE]            RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  n.replaceChild(tryBlock,  null);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	n.replaceChild(tryBlock,  null);	  n.replaceChild(n,    tryBlock);    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	115	None	replace
612	[BUG]  [BUGGY]  n.replaceChild(tryBlock,  new  Node(labelName));  [CE]  no  suitable  constructor  found  for  Node(String)  [FE]              RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  n.replaceChild(tryBlock,  new  Node(labelName));  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	n.replaceChild(tryBlock,  new  Node(labelName));	  n.replaceChild(n,    tryBlock);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(String)	115	None	replace
613	[BUG]  [BUGGY]  n.replaceChild(tryBlock,  node);  [CE]  cannot  find  symbol  node  [FE]                RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  n.replaceChild(tryBlock,  node);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	n.replaceChild(tryBlock,  node);	  n.replaceChild(n,    tryBlock);    	non-compiled	[CE]  cannot  find  symbol  node	115	None	replace
614	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock,  n,  entryType);  [CE]  cannot  find  symbol  entryType  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock,  n,  entryType);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock,  n,  entryType);	  Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock,    n,    escapeType);    	non-compiled	[CE]  cannot  find  symbol  entryType	118	None	replace
615	[BUG]  [BUGGY]  Node  elseBlock  =  tryBlock.getNext();  Node  elseBlock  =  otherBlock.getNext();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  tryBlock.getNext();  Node  elseBlock  =  otherBlock.getNext();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  tryBlock.getNext();  Node  elseBlock  =  otherBlock.getNext();	          Node    elseBlock    =    tryBlock.getNext();    Node    elseBlock    =    tryBlock.getNext();    }    	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	46	None	replace
616	[BUG]  [BUGGY]  Node  elseBlock  =  tryBlock!=  null?  tryBlock.getNext()  :  tryBlock.getNext();  [CE]  cannot  find  symbol  allCatchNodes  [FE]        AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  tryBlock!=  null?  tryBlock.getNext()  :  tryBlock.getNext();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  tryBlock!=  null?  tryBlock.getNext()  :  tryBlock.getNext();	          Node    elseBlock    =    tryBlock.getNext();    Node    elseBlock    =    tryBlock.getNext();    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	39	None	replace
617	[BUG]  [BUGGY]  Node  elseBlock  =  tryBlock  ==  null?  tryBlock.getNext()  :  null;  [CE]  cannot  find  symbol  allCatchNodes  [FE]          AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  tryBlock  ==  null?  tryBlock.getNext()  :  null;  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  tryBlock  ==  null?  tryBlock.getNext()  :  null;	          Node    elseBlock    =    tryBlock.getNext();    Node    elseBlock    =    tryBlock.getNext();    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	39	None	replace
618	[BUG]  [BUGGY]          Node    elseBlock    =    tryBlock.getLastChild();    Node  thenBlock  =  tryBlock.getLastChild();  Node  elseBlock  =  tryBlock.getLastChild();  Node  elseBlock  =  tryBlock.getLastChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Node    elseBlock    =    tryBlock.getLastChild();    Node  thenBlock  =  tryBlock.getLastChild();  Node  elseBlock  =  tryBlock.getLastChild();  Node  elseBlock  =  tryBlock.getLastChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Node        elseBlock        =        tryBlock.getLastChild();        Node    thenBlock    =    tryBlock.getLastChild();    Node  elseBlock  =  tryBlock.getLastChild();  Node  elseBlock  =  tryBlock.getLastChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	29	None	add
619	[BUG]  [BUGGY]          Node    elseBlock    =    tryBlock.getLastChild();    Node  thenBlock  =  tryBlock.getLastChild();  Node  elseBlock  =  tryBlock.getLastChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Node    elseBlock    =    tryBlock.getLastChild();    Node  thenBlock  =  tryBlock.getLastChild();  Node  elseBlock  =  tryBlock.getLastChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Node        elseBlock        =        tryBlock.getLastChild();        Node    thenBlock    =    tryBlock.getLastChild();    Node  elseBlock  =  tryBlock.getLastChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	29	None	add
620	[BUG]  [BUGGY]  Node  elseBlock  =  tryBlock!=  null?  tryBlock.next()  :  tryBlock;  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  tryBlock!=  null?  tryBlock.next()  :  tryBlock;  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  tryBlock!=  null?  tryBlock.next()  :  tryBlock;	  Node    elseBlock    =    tryBlock.next();    	non-compiled	[CE]  cannot  find  symbol	141	None	replace
621	[BUG]  [BUGGY]  Node  elseBlock  =  tryBlock!=  null?  tryBlock.next()  :  null;  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  tryBlock!=  null?  tryBlock.next()  :  null;  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  tryBlock!=  null?  tryBlock.next()  :  null;	  Node    elseBlock    =    tryBlock.next();    	non-compiled	[CE]  cannot  find  symbol	141	None	replace
622	[BUG]  [BUGGY]  Node  c  =  n.removeChild(tryBlock);  [CE]  incompatible  types  [FE]            RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  c  =  n.removeChild(tryBlock);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  c  =  n.removeChild(tryBlock);	  n.removeChild(c);    	non-compiled	[CE]  incompatible  types	3	None	replace
623	[BUG]  [BUGGY]  n.removeChild(tryNode);  [CE]  cannot  find  symbol  tryNode  [FE]              RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  n.removeChild(tryNode);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	n.removeChild(tryNode);	  n.removeChild(c);    	non-compiled	[CE]  cannot  find  symbol  tryNode	3	None	replace
624	[BUG]  [BUGGY]          n.removeChild(tryBlock);    n.removeChild(tryBlock);  n.replaceChild(tryBlock);  n.removeChild(tryBlock);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]    RuntimeException    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          n.removeChild(tryBlock);    n.removeChild(tryBlock);  n.replaceChild(tryBlock);  n.removeChild(tryBlock);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                n.removeChild(tryBlock);        n.removeChild(tryBlock);    n.replaceChild(tryBlock);  n.removeChild(tryBlock);	  	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	91	None	add
625	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock,  n).getFirstChild();  [CE]  method  getCatchBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]          RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock,  n).getFirstChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock,  n).getFirstChild();	  Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock);    Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock).getFirstChild();    	non-compiled	[CE]  method  getCatchBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;	166	None	replace
626	[BUG]  [BUGGY]  Node  elseBlock  =  tryBlock.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  Preconditions.checkState(allCatchNodes.hasOneChild());  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]            AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  tryBlock.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  Preconditions.checkState(allCatchNodes.hasOneChild());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  tryBlock.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  Preconditions.checkState(allCatchNodes.hasOneChild());	          Node    elseBlock    =    n.getFirstChild();    Node    elseBlock    =    n.getFirstChild();    Preconditions.checkState(allCatchNodes.hasOneChild());    	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	79	None	replace
627	[BUG]  [BUGGY]  Node  c  =  tryBlock  ==  null?  null  :  tryBlock.getNext();  [CE]  cannot  find  symbol  allCatchNodes  [FE]        AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  c  =  tryBlock  ==  null?  null  :  tryBlock.getNext();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  c  =  tryBlock  ==  null?  null  :  tryBlock.getNext();	          Node    c    =    tryBlock.getNext();    Node    c    =    tryBlock.getNext();    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	65	None	replace
628	[BUG]  [BUGGY]  Node  elseBlock  =  tryBlock.getNext(),  tryBlock.getNext();  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  tryBlock.getNext(),  tryBlock.getNext();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  tryBlock.getNext(),  tryBlock.getNext();	          Node    elseBlock    =    tryBlock.getNext();    Node    elseBlock    =    attemptBlock.getNext();    	non-compiled	[CE]  ';'  expected	163	None	replace
629	[BUG]  [BUGGY]  Node  n  =  tryBlock.getfirstChild();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  n  =  tryBlock.getfirstChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  n  =  tryBlock.getfirstChild();	  Node    n    =    tryBlock.getLastChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	87	None	replace
630	[BUG]  [BUGGY]  Node  elseBlock  =  tryBlock!=  null?  tryBlock.getLastChild()  :  tryBlock.getLastChild();  [CE]  cannot  find  symbol  allCatchNodes  [FE]        AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  tryBlock!=  null?  tryBlock.getLastChild()  :  tryBlock.getLastChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  tryBlock!=  null?  tryBlock.getLastChild()  :  tryBlock.getLastChild();	          Node    elseBlock    =    tryBlock.getLastChild();    node    elseBlock    =    tryBlock.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	108	None	replace
631	[BUG]  [BUGGY]  Node  elseBlock  =  tryBlock.getLastChild();  if(elseBlock!=  null)  {  elseBlock  =  tryBlock.getLastChild();  }  [CE]  cannot  find  symbol  allCatchNodes  [FE]          AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  tryBlock.getLastChild();  if(elseBlock!=  null)  {  elseBlock  =  tryBlock.getLastChild();  }  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  tryBlock.getLastChild();  if(elseBlock!=  null)  {  elseBlock  =  tryBlock.getLastChild();  }	          Node    elseBlock    =    tryBlock.getLastChild();    node    elseBlock    =    tryBlock.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	108	None	replace
632	[BUG]  [BUGGY]  Node  elseBlock  =  n.getLastChild();  node  elseBlock  =  tryBlock.getLastChild();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  n.getLastChild();  node  elseBlock  =  tryBlock.getLastChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  n.getLastChild();  node  elseBlock  =  tryBlock.getLastChild();	          Node    elseBlock    =    tryBlock.getLastChild();    node    elseBlock    =    tryBlock.getLastChild();    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
633	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(tryBlock,  node);  [CE]  cannot  find  symbol  node  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(tryBlock,  node);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchHandler(tryBlock,  node);	  Node    allCatchNodes    =    NodeUtil.getCatchHandler(n,    tryBlock);    	non-compiled	[CE]  cannot  find  symbol  node	85	None	replace
634	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(testBlock,  tryBlock);  [CE]  cannot  find  symbol  testBlock  [FE]                      AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(testBlock,  tryBlock);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchHandler(testBlock,  tryBlock);	  Node    allCatchNodes    =    NodeUtil.getCatchHandler(n,    tryBlock);    	non-compiled	[CE]  cannot  find  symbol  testBlock	85	None	replace
635	[BUG]  [BUGGY]  Preconditions.checkState(tryBlock.isTry());  NodeUtil.checkState(n.isTry());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(tryBlock.isTry());  NodeUtil.checkState(n.isTry());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(tryBlock.isTry());  NodeUtil.checkState(n.isTry());	          Preconditions.checkState(n.isTry());    NodeUtil.checkState(n.isTry());    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
636	[BUG]  [BUGGY]  Preconditions.checkState(n.isTry(),  tryBlock.isTry());  [CE]  cannot  find  symbol  allCatchNodes  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(n.isTry(),  tryBlock.isTry());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(n.isTry(),  tryBlock.isTry());	          Preconditions.checkState(n.isTry());    NodeUtil.checkState(n.isTry());    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	105	None	replace
637	[BUG]  [BUGGY]  Preconditions.checkState(tryBlock.isTry());  Node  n  =  tryBlock.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(tryBlock.isTry());  Node  n  =  tryBlock.getFirstChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(tryBlock.isTry());  Node  n  =  tryBlock.getFirstChild();	          Preconditions.checkState(n.isTry());    Node    n    =    tryBlock.getFirstChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	145	None	replace
638	[BUG]  [BUGGY]  Node  elseBlock  =  tryBlock!=  null?  tryBlock.getFirstChild()  :  tryBlock.getFirstChild();  [CE]  cannot  find  symbol  allCatchNodes  [FE]        AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  tryBlock!=  null?  tryBlock.getFirstChild()  :  tryBlock.getFirstChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  tryBlock!=  null?  tryBlock.getFirstChild()  :  tryBlock.getFirstChild();	          Node    elseBlock    =    tryBlock.getFirstChild();    node    elseBlock    =    tryBlock.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	149	None	replace
639	[BUG]  [BUGGY]  Node  elseBlock  =  tryBlock.getFirstChild();  if(elseBlock!=  null)  {  elseBlock  =  tryBlock.getFirstChild();  }  [CE]  cannot  find  symbol  allCatchNodes  [FE]          AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  tryBlock.getFirstChild();  if(elseBlock!=  null)  {  elseBlock  =  tryBlock.getFirstChild();  }  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  tryBlock.getFirstChild();  if(elseBlock!=  null)  {  elseBlock  =  tryBlock.getFirstChild();  }	          Node    elseBlock    =    tryBlock.getFirstChild();    node    elseBlock    =    tryBlock.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	149	None	replace
640	[BUG]  [BUGGY]  Node  elseBlock  =  n.getFirstChild();  node  elseBlock  =  tryBlock.getFirstChild();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  n.getFirstChild();  node  elseBlock  =  tryBlock.getFirstChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  n.getFirstChild();  node  elseBlock  =  tryBlock.getFirstChild();	          Node    elseBlock    =    tryBlock.getFirstChild();    node    elseBlock    =    tryBlock.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	149	None	replace
641	[BUG]  [BUGGY]  Node  c  =  tryBlock.node();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  c  =  tryBlock.node();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  c  =  tryBlock.node();	  Node    c    =    tryBlock.getCurrentNode();    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
642	[BUG]  [BUGGY]  Node  c  =  tryBlock.getNextNode();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  c  =  tryBlock.getNextNode();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  c  =  tryBlock.getNextNode();	  Node    c    =    tryBlock.getCurrentNode();    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
643	[BUG]  [BUGGY]  Node  elseBlock  =  tryBlock!=  null?  tryBlock.getNext()  :  null;  Node  thenBlock  =  tryBlock.getNext();  [CE]  cannot  find  symbol  allCatchNodes  [FE]    AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  tryBlock!=  null?  tryBlock.getNext()  :  null;  Node  thenBlock  =  tryBlock.getNext();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  tryBlock!=  null?  tryBlock.getNext()  :  null;  Node  thenBlock  =  tryBlock.getNext();	          Node    elseBlock    =    tryBlock.getNext();    Node    thenBlock    =    tryBlock.getNext();    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	43	None	replace
644	[BUG]  [BUGGY]  Preconditions.checkState(tries.isTree()  ||  n.isTree());  [CE]  cannot  find  symbol  tries  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(tries.isTree()  ||  n.isTree());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(tries.isTree()  ||  n.isTree());	  Preconditions.checkState(n.isTree()    ||    tryBlock.isTree());    	non-compiled	[CE]  cannot  find  symbol  tries	60	None	replace
645	[BUG]  [BUGGY]  Preconditions.checkState(tree.isTree()  ||  tryBlock.isTree());  [CE]  cannot  find  symbol  tree  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(tree.isTree()  ||  tryBlock.isTree());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(tree.isTree()  ||  tryBlock.isTree());	  Preconditions.checkState(n.isTree()    ||    tryBlock.isTree());    	non-compiled	[CE]  cannot  find  symbol  tree	60	None	replace
646	[BUG]  [BUGGY]          Node    elseBlock    =    tryBlock.getNext();    Node  otherBlock  =  tryBlock.getNext();  Node  elseBlock  =  tryBlock.getNext();  Node  otherBlock  =  TryBlock.getNext();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Node    elseBlock    =    tryBlock.getNext();    Node  otherBlock  =  tryBlock.getNext();  Node  elseBlock  =  tryBlock.getNext();  Node  otherBlock  =  TryBlock.getNext();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Node        elseBlock        =        tryBlock.getNext();        Node    otherBlock    =    tryBlock.getNext();    Node  elseBlock  =  tryBlock.getNext();  Node  otherBlock  =  TryBlock.getNext();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	40	None	add
647	[BUG]  [BUGGY]  n.addChildToFront(tryBlock,  falseBlock);  [CE]  cannot  find  symbol  falseBlock  [FE]        RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  n.addChildToFront(tryBlock,  falseBlock);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	n.addChildToFront(tryBlock,  falseBlock);	  n.addChildToFront(tryBlock);    	non-compiled	[CE]  cannot  find  symbol  falseBlock	114	None	replace
648	[BUG]  [BUGGY]  n.removeChildToFront(tryBlock);  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  n.removeChildToFront(tryBlock);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	n.removeChildToFront(tryBlock);	  n.addChildToFront(tryBlock);    	non-compiled	[CE]  cannot  find  symbol	114	None	replace
649	[BUG]  [BUGGY]  Node  elseBlock  =  tryBlock!=  null?  tryBlock.getParent()  :  null;  [CE]  cannot  find  symbol  allCatchNodes  [FE]          AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  tryBlock!=  null?  tryBlock.getParent()  :  null;  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  tryBlock!=  null?  tryBlock.getParent()  :  null;	  Node    elseBlock    =    tryBlock.getParent();    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	17	None	replace
650	[BUG]  [BUGGY]  Node  c  =  tryBlock.getCatch();  c  =  tryBlock.getNext();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  c  =  tryBlock.getCatch();  c  =  tryBlock.getNext();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  c  =  tryBlock.getCatch();  c  =  tryBlock.getNext();	          Node    c    =    tryBlock.getNext();    c    =    tryBlock.getNext();    	non-compiled	[CE]  cannot  find  symbol	158	None	replace
651	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(tryBlock,  n,  exitType);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(tryBlock,  n,  exitType);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(tryBlock,  n,  exitType);	  Node    allCatchNodes    =    NodeUtil.getAllCatchNodes(tryBlock,    n);    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
652	[BUG]  [BUGGY]  Preconditions.checkState(n.isTry());  Node  elseBlock  =  no.getFirstChild();  [CE]  cannot  find  symbol  no  [FE]          AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(n.isTry());  Node  elseBlock  =  no.getFirstChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(n.isTry());  Node  elseBlock  =  no.getFirstChild();	          Node    elseBlock    =    n.getFirstChild();    Node    elseBlock    =    no.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  no	153	None	replace
653	[BUG]  [BUGGY]  n.removeChild(tryBlock);  NodeUtil.removeChild(n,  exitType);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]                  RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  n.removeChild(tryBlock);  NodeUtil.removeChild(n,  exitType);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	n.removeChild(tryBlock);  NodeUtil.removeChild(n,  exitType);	          n.removeChild(tryBlock);    NodeUtil.removeChild(n);    	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	97	None	replace
654	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock,  exitType,  n);  [CE]  method  getCatchBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock,  exitType,  n);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock,  exitType,  n);	  Node    allCatchNodes    =    NodeUtil.getCatchBlock(c,    tryBlock,    n);    	non-compiled	[CE]  method  getCatchBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;	56	None	replace
655	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock,  endType,  n);  [CE]  cannot  find  symbol  endType  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock,  endType,  n);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock,  endType,  n);	  Node    allCatchNodes    =    NodeUtil.getCatchBlock(c,    tryBlock,    n);    	non-compiled	[CE]  cannot  find  symbol  endType	56	None	replace
656	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock,  null,  n);  [CE]  method  getCatchBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock,  null,  n);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock,  null,  n);	  Node    allCatchNodes    =    NodeUtil.getCatchBlock(c,    tryBlock,    n);    	non-compiled	[CE]  method  getCatchBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;	56	None	replace
657	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isExitBlock(n)||  tryBlock.isExitBlock());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(NodeUtil.isExitBlock(n)||  tryBlock.isExitBlock());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(NodeUtil.isExitBlock(n)||  tryBlock.isExitBlock());	  Preconditions.checkState(NodeUtil.isExitBlock(n),    tryBlock);    	non-compiled	[CE]  cannot  find  symbol	168	None	replace
658	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isExitBlock(n),  exitType,  tryBlock);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(NodeUtil.isExitBlock(n),  exitType,  tryBlock);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(NodeUtil.isExitBlock(n),  exitType,  tryBlock);	  Preconditions.checkState(NodeUtil.isExitBlock(n),    tryBlock);    	non-compiled	[CE]  cannot  find  symbol	168	None	replace
659	[BUG]  [BUGGY]  Preconditions.checkState(n.isTree());  Node  elseBlock  =  n.getLastChild();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(n.isTree());  Node  elseBlock  =  n.getLastChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(n.isTree());  Node  elseBlock  =  n.getLastChild();	          Node    elseBlock    =    n.getFirstChild();    Node    elseBlock    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
660	[BUG]  [BUGGY]  n  =  tryBlock.getFirstChild();  Preconditions.checkState(n.isTry());  [CE]  cannot  find  symbol  allCatchNodes  [FE]          AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  n  =  tryBlock.getFirstChild();  Preconditions.checkState(n.isTry());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	n  =  tryBlock.getFirstChild();  Preconditions.checkState(n.isTry());	          Preconditions.checkState(n.isTry());    Node    n    =    tryBlock.getFirstChild();    Preconditions.checkState(n.isTry());    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	101	None	replace
661	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  tryBlock.removeFirstChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	add	Node  allCatchNodes  =  tryBlock.removeFirstChild();	  Node    allCatchNodes    =    n.getFirstChild();    	compilable	  [FE]  RuntimeException  	126	6	replace
662	[BUG]  [BUGGY]  Node  allCatchNodes  =  tryBlock.removeFirstChild();  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  tryBlock.removeFirstChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  tryBlock.removeFirstChild();	  Node    allCatchNodes    =    n.getFirstChild();    	compilable	  [FE]  RuntimeException  	126	6	replace
663	[BUG]  [BUGGY]  Node  c  =  tryBlock.getNext();  Preconditions.checkState(NodeUtil.isCatchHandler(c),  exitType,  labelName);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  c  =  tryBlock.getNext();  Preconditions.checkState(NodeUtil.isCatchHandler(c),  exitType,  labelName);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  c  =  tryBlock.getNext();  Preconditions.checkState(NodeUtil.isCatchHandler(c),  exitType,  labelName);	          Node    c    =    tryBlock.getNext();    Node    c    =    tryBlock.getNext();    Preconditions.checkState(NodeUtil.hasCatchHandler(c),    exitType,    labelName);    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
664	[BUG]  [BUGGY]  Node  elseBlock  =  tryBlock.getNext();  node  elseBlock  =  anotherBlock.getNext();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  tryBlock.getNext();  node  elseBlock  =  anotherBlock.getNext();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  tryBlock.getNext();  node  elseBlock  =  anotherBlock.getNext();	          Node    elseBlock    =    tryBlock.getNext();    node    elseBlock    =    tryBlock.getNext();    	non-compiled	[CE]  cannot  find  symbol	138	None	replace
665	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock));  [CE]  ';'  expected  [FE]                RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock));  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock));	  Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock);    Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock));    	non-compiled	[CE]  ';'  expected	52	None	replace
666	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n,  tryBlock);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock));  [CE]  ';'  expected  [FE]                  RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n,  tryBlock);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock));  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(n,  tryBlock);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock));	  Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock);    Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock));    	non-compiled	[CE]  ';'  expected	52	None	replace
667	[BUG]  [BUGGY]  Node  allCatchNodes  =  n.getFirstChild();  Node  allCatchNodes  =  null.getFirstChild();  [CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  n.getFirstChild();  Node  allCatchNodes  =  null.getFirstChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node    allCatchNodes    =    n.getFirstChild();    Node  allCatchNodes  =  null.getFirstChild();	  	non-compiled	[CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	125	None	add
668	[BUG]  [BUGGY]  Node  allCatchNodes  =  n.getFirstChild();  Node  allCatchNodes  =  no.getFirstChild();  [CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  n.getFirstChild();  Node  allCatchNodes  =  no.getFirstChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node    allCatchNodes    =    n.getFirstChild();    Node  allCatchNodes  =  no.getFirstChild();	  	non-compiled	[CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	125	None	add
669	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isExitBlock(n)&&  exitType);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(NodeUtil.isExitBlock(n)&&  exitType);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(NodeUtil.isExitBlock(n)&&  exitType);	  Preconditions.checkState(NodeUtil.isExitBlock(tryBlock),    exitType);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
670	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isExitBlock(n)||  tryBlock),  exitType);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(NodeUtil.isExitBlock(n)||  tryBlock),  exitType);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(NodeUtil.isExitBlock(n)||  tryBlock),  exitType);	  Preconditions.checkState(NodeUtil.isExitBlock(tryBlock),    exitType);    	non-compiled	[CE]  ';'  expected	15	None	replace
671	[BUG]  [BUGGY]          Node    elseBlock    =    tryBlock.getLastChild();    Node  thenBlock  =  tryBlock.getLastChild();  Node  elseBlock  =  tryBlock.getLastChild();  Node  triedBlock  =  tryBlock.getLastChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Node    elseBlock    =    tryBlock.getLastChild();    Node  thenBlock  =  tryBlock.getLastChild();  Node  elseBlock  =  tryBlock.getLastChild();  Node  triedBlock  =  tryBlock.getLastChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Node        elseBlock        =        tryBlock.getLastChild();        Node    thenBlock    =    tryBlock.getLastChild();    Node  elseBlock  =  tryBlock.getLastChild();  Node  triedBlock  =  tryBlock.getLastChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	29	None	add
672	[BUG]  [BUGGY]          Node    elseBlock    =    tryBlock.getLastChild();    Node  thenBlock  =  tryBlock.getLastChild();  Node  elseBlock  =  tryBlock.getLastChild();  Node  toBlock  =  tryBlock.getLastChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Node    elseBlock    =    tryBlock.getLastChild();    Node  thenBlock  =  tryBlock.getLastChild();  Node  elseBlock  =  tryBlock.getLastChild();  Node  toBlock  =  tryBlock.getLastChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Node        elseBlock        =        tryBlock.getLastChild();        Node    thenBlock    =    tryBlock.getLastChild();    Node  elseBlock  =  tryBlock.getLastChild();  Node  toBlock  =  tryBlock.getLastChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	29	None	add
673	[BUG]  [BUGGY]          Node    elseBlock    =    tryBlock.getLastChild();    Node  thenBlock  =  tryBlock.getLastChild();  Node  elseBlock  =  tryBlock.getLastChild();  Node  thenBlock  =  triedBlock.getLastChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Node    elseBlock    =    tryBlock.getLastChild();    Node  thenBlock  =  tryBlock.getLastChild();  Node  elseBlock  =  tryBlock.getLastChild();  Node  thenBlock  =  triedBlock.getLastChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Node        elseBlock        =        tryBlock.getLastChild();        Node    thenBlock    =    tryBlock.getLastChild();    Node  elseBlock  =  tryBlock.getLastChild();  Node  thenBlock  =  triedBlock.getLastChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	29	None	add
674	[BUG]  [BUGGY]  Node  c  =  tryBlock!=  null?  tryBlock.getNext()  :  null;  Preconditions.checkState(NodeUtil.hasFailedCatchHandler(c));  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  c  =  tryBlock!=  null?  tryBlock.getNext()  :  null;  Preconditions.checkState(NodeUtil.hasFailedCatchHandler(c));  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  c  =  tryBlock!=  null?  tryBlock.getNext()  :  null;  Preconditions.checkState(NodeUtil.hasFailedCatchHandler(c));	          Node    c    =    tryBlock.getNext();    Node    c    =    tryBlock.getNext();    Preconditions.checkState(NodeUtil.hasFailedCatchHandler(c));    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
675	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  tryBlock.cloneTree();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	add	Node  allCatchNodes  =  tryBlock.cloneTree();	  Node    allCatchNodes    =    tryBlock.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	64	6	replace
676	[BUG]  [BUGGY]  Node  allCatchNodes  =  tryBlock.cloneTree();  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  tryBlock.cloneTree();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  tryBlock.cloneTree();	  Node    allCatchNodes    =    tryBlock.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	64	6	replace
677	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  tryBlock.removeChildren();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	add	Node  allCatchNodes  =  tryBlock.removeChildren();	  Node    allCatchNodes    =    tryBlock.getFirstChild();    	compilable	  [FE]  RuntimeException  	64	6	replace
678	[BUG]  [BUGGY]  Node  allCatchNodes  =  tryBlock.removeChildren();  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  tryBlock.removeChildren();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  tryBlock.removeChildren();	  Node    allCatchNodes    =    tryBlock.getFirstChild();    	compilable	  [FE]  RuntimeException  	64	6	replace
679	[BUG]  [BUGGY]  tryBlock.removeChild(n);  [CE]  cannot  find  symbol  allCatchNodes  [FE]        RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  tryBlock.removeChild(n);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	tryBlock.removeChild(n);	  n.removeChild(testBlock());    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	172	None	replace
680	[BUG]  [BUGGY]  node.removeChild(testBlock());  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  node.removeChild(testBlock());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	node.removeChild(testBlock());	  n.removeChild(testBlock());    	non-compiled	[CE]  cannot  find  symbol	172	None	replace
681	[BUG]  [BUGGY]  Node  elseBlock  =  tryBlock!=  null?  tryBlock.getLastChild()  :  tryBlock.getFirstChild();  [CE]  cannot  find  symbol  allCatchNodes  [FE]    AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  tryBlock!=  null?  tryBlock.getLastChild()  :  tryBlock.getFirstChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  tryBlock!=  null?  tryBlock.getLastChild()  :  tryBlock.getFirstChild();	          Node    elseBlock    =    tryBlock.getLastChild();    Node    otherBlock    =    tryBlock.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	28	None	replace
682	[BUG]  [BUGGY]  n.replaceChild(testBlock(n,  tryBlock));  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  n.replaceChild(testBlock(n,  tryBlock));  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	n.replaceChild(testBlock(n,  tryBlock));	  n.replaceChild(n,    tryBlock);    	non-compiled	[CE]  cannot  find  symbol	115	None	replace
683	[BUG]  [BUGGY]  n.replaceChild(testNode(n,  tryBlock));  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  n.replaceChild(testNode(n,  tryBlock));  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	n.replaceChild(testNode(n,  tryBlock));	  n.replaceChild(n,    tryBlock);    	non-compiled	[CE]  cannot  find  symbol	115	None	replace
684	[BUG]  [BUGGY]  Preconditions.checkState(trimBlock.isTree(),  n);  [CE]  cannot  find  symbol  trimBlock  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(trimBlock.isTree(),  n);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(trimBlock.isTree(),  n);	  Preconditions.checkState(n.isTree(),    tryBlock);    	non-compiled	[CE]  cannot  find  symbol  trimBlock	171	None	replace
685	[BUG]  [BUGGY]  Node  stopNode  =  tryBlock.removeChild(n);  [CE]  incompatible  types  [FE]          RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  stopNode  =  tryBlock.removeChild(n);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  stopNode  =  tryBlock.removeChild(n);	          n.removeChild(tryBlock);    node.removeChild(tryBlock);    	non-compiled	[CE]  incompatible  types	113	None	replace
686	[BUG]  [BUGGY]  Node  n  =  tryBlock.removeChild(n);  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]            RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  n  =  tryBlock.removeChild(n);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  n  =  tryBlock.removeChild(n);	          n.removeChild(tryBlock);    node.removeChild(tryBlock);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	113	None	replace
687	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n,  tryBlock);  Preconditions.checkState(NodeUtil.hasCatchHandler(tryBlock));  [CE]  method  getCatchBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]        RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n,  tryBlock);  Preconditions.checkState(NodeUtil.hasCatchHandler(tryBlock));  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(n,  tryBlock);  Preconditions.checkState(NodeUtil.hasCatchHandler(tryBlock));	  Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock);    Preconditions.checkState(NodeUtil.hasCatchHandler(tryBlock));    	non-compiled	[CE]  method  getCatchBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;	142	None	replace
688	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(labelName);  Preconditions.checkState(NodeUtil.hasCatchHandler(tryBlock));  [CE]  method  getCatchBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]          RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(labelName);  Preconditions.checkState(NodeUtil.hasCatchHandler(tryBlock));  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(labelName);  Preconditions.checkState(NodeUtil.hasCatchHandler(tryBlock));	  Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock);    Preconditions.checkState(NodeUtil.hasCatchHandler(tryBlock));    	non-compiled	[CE]  method  getCatchBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;	142	None	replace
689	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchNodes(n,  labelName,  tryBlock);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchNodes(n,  labelName,  tryBlock);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchNodes(n,  labelName,  tryBlock);	  Node    allCatchNodes    =    NodeUtil.getCatchNodes(labelName,    tryBlock);    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
690	[BUG]  [BUGGY]  Node  c  =  tryBlock!=  null?  tryBlock.getNext()  :  null;  Preconditions.checkState(c!=  null);  [CE]  cannot  find  symbol  allCatchNodes  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  c  =  tryBlock!=  null?  tryBlock.getNext()  :  null;  Preconditions.checkState(c!=  null);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  c  =  tryBlock!=  null?  tryBlock.getNext()  :  null;  Preconditions.checkState(c!=  null);	          Node    c    =    tryBlock.getNext();    Node    c    =    tryBlock.getNext();    Preconditions.checkState(c!=    null);    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	70	None	replace
691	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(tryBlock,  allCatchNodes);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(tryBlock,  allCatchNodes);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(tryBlock,  allCatchNodes);	  Node    allCatchNodes    =    NodeUtil.getAllCatchNodes(c,    tryBlock);    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
692	[BUG]  [BUGGY]  Node  elseBlock  =  tryBlock.getNext();  Node  thenBlock  =  thenBlock!=  null?  tryBlock.getNext()  :  null;  [CE]  cannot  find  symbol  allCatchNodes  [FE]    AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  tryBlock.getNext();  Node  thenBlock  =  thenBlock!=  null?  tryBlock.getNext()  :  null;  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  tryBlock.getNext();  Node  thenBlock  =  thenBlock!=  null?  tryBlock.getNext()  :  null;	          Node    elseBlock    =    tryBlock.getNext();    Node    thenBlock    =    tryBlock.getNext();    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	43	None	replace
693	[BUG]  [BUGGY]  Node  elseBlock  =  tryBlock  ==  null?  tryBlock.getNext()  :  null;  Node  thenBlock  =  tryBlock.getNext();  [CE]  cannot  find  symbol  allCatchNodes  [FE]      AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  tryBlock  ==  null?  tryBlock.getNext()  :  null;  Node  thenBlock  =  tryBlock.getNext();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  tryBlock  ==  null?  tryBlock.getNext()  :  null;  Node  thenBlock  =  tryBlock.getNext();	          Node    elseBlock    =    tryBlock.getNext();    Node    thenBlock    =    tryBlock.getNext();    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	43	None	replace
694	[BUG]  [BUGGY]  Node  n  =  node.getFirstChild();  Preconditions.checkState(n.isTry());  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  n  =  node.getFirstChild();  Preconditions.checkState(n.isTry());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  n  =  node.getFirstChild();  Preconditions.checkState(n.isTry());	          Preconditions.checkState(n.isTry());    Node    n    =    n.getFirstChild();    Preconditions.checkState(n.isTry());    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	104	None	replace
695	[BUG]  [BUGGY]  Node  c  =  tryBlock!=  null?  tryBlock.getNext()  :  null;  Preconditions.checkState(NodeUtil.hasCatchHandler(c));  [CE]  cannot  find  symbol  allCatchNodes  [FE]          AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  c  =  tryBlock!=  null?  tryBlock.getNext()  :  null;  Preconditions.checkState(NodeUtil.hasCatchHandler(c));  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  c  =  tryBlock!=  null?  tryBlock.getNext()  :  null;  Preconditions.checkState(NodeUtil.hasCatchHandler(c));	          Node    c    =    tryBlock.getNext();    Node    c    =    tryBlock.getNext();    Preconditions.checkState(NodeUtil.hasCatchHandler(c));    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	66	None	replace
696	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(testCode,  exitType,  tryBlock);  [CE]  cannot  find  symbol  testCode  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(testCode,  exitType,  tryBlock);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(testCode,  exitType,  tryBlock);	  Node    allCatchNodes    =    NodeUtil.getAllCatchNodes(exitType,    tryBlock);    	non-compiled	[CE]  cannot  find  symbol  testCode	177	None	replace
697	[BUG]  [BUGGY]  Node  c  =  n.getFirstChild();  [CE]  cannot  find  symbol  allCatchNodes  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  c  =  n.getFirstChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  c  =  n.getFirstChild();	  Node    c    =    tryBlock.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	21	None	replace
698	[BUG]  [BUGGY]          Node    elseBlock    =    tryBlock.getFirstChild();    Node  thenBlock  =  tryBlock.getFirstChild();  Node  elseBlock  =  tryBlock.getFirstChild();  Node  triedBlock  =  tryBlock.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Node    elseBlock    =    tryBlock.getFirstChild();    Node  thenBlock  =  tryBlock.getFirstChild();  Node  elseBlock  =  tryBlock.getFirstChild();  Node  triedBlock  =  tryBlock.getFirstChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Node        elseBlock        =        tryBlock.getFirstChild();        Node    thenBlock    =    tryBlock.getFirstChild();    Node  elseBlock  =  tryBlock.getFirstChild();  Node  triedBlock  =  tryBlock.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	9	None	add
699	[BUG]  [BUGGY]  Node  otherBlock  =  n.getFirstChild();  [CE]  cannot  find  symbol  allCatchNodes  [FE]    AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  otherBlock  =  n.getFirstChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  otherBlock  =  n.getFirstChild();	          Node    elseBlock    =    n.getFirstChild();    Node    otherBlock    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	129	None	replace
700	[BUG]  [BUGGY]  Node  c  =  tryBlock!=  null?  tryBlock.getNext()  :  null;  Preconditions.checkState(!NodeUtil.hasCatchHandler(c));  [CE]  cannot  find  symbol  allCatchNodes  [FE]        AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  c  =  tryBlock!=  null?  tryBlock.getNext()  :  null;  Preconditions.checkState(!NodeUtil.hasCatchHandler(c));  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  c  =  tryBlock!=  null?  tryBlock.getNext()  :  null;  Preconditions.checkState(!NodeUtil.hasCatchHandler(c));	          Node    c    =    tryBlock.getNext();    Node    c    =    tryBlock.getNext();    Preconditions.checkState(!NodeUtil.hasCatchHandler(c));    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	119	None	replace
701	[BUG]  [BUGGY]  Node  elseBlock  =  tryBlock  ==  null?  tryBlock.getFirstChild()  :  tryBlock.getFirstChild();  [CE]  cannot  find  symbol  allCatchNodes  [FE]        AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  tryBlock  ==  null?  tryBlock.getFirstChild()  :  tryBlock.getFirstChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  tryBlock  ==  null?  tryBlock.getFirstChild()  :  tryBlock.getFirstChild();	          Node    elseBlock    =    tryBlock.getFirstChild();    node    elseBlock    =    tryBlock.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	149	None	replace
702	[BUG]  [BUGGY]  Node  elseBlock  =  tryBlock!=  null?  tryBlock.getFirstChild()  :  null;  [CE]  cannot  find  symbol  allCatchNodes  [FE]          AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  tryBlock!=  null?  tryBlock.getFirstChild()  :  null;  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  tryBlock!=  null?  tryBlock.getFirstChild()  :  null;	          Node    elseBlock    =    tryBlock.getFirstChild();    node    elseBlock    =    tryBlock.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	149	None	replace
703	[BUG]  [BUGGY]  Node  allCatchNodes  =  tryBlock.getFirstChild();  Node  allCatchNodes  =  tryBlock.getFirstChild();  if(NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Iterator  <  Node>  allCatchNodes  =  allCatchNodes.iterator();  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  tryBlock.getFirstChild();  Node  allCatchNodes  =  tryBlock.getFirstChild();  if(NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Iterator  <  Node>  allCatchNodes  =  allCatchNodes.iterator();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node    allCatchNodes    =    tryBlock.getFirstChild();    Node  allCatchNodes  =  tryBlock.getFirstChild();  if(NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Iterator  <  Node>  allCatchNodes  =  allCatchNodes.iterator();	  	non-compiled	[CE]  illegal  start  of  expression	63	None	add
704	[BUG]  [BUGGY]  Node  allCatchNodes  =  tryBlock.getFirstChild();  Node  allCatchNodes  =  tryBlock.getFirstChild();  if(NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Iterator  <  Node>  allCatchNodes  =  allCatchNodes.iterator();  }  [CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      RuntimeException    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  tryBlock.getFirstChild();  Node  allCatchNodes  =  tryBlock.getFirstChild();  if(NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Iterator  <  Node>  allCatchNodes  =  allCatchNodes.iterator();  }  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node    allCatchNodes    =    tryBlock.getFirstChild();    Node  allCatchNodes  =  tryBlock.getFirstChild();  if(NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Iterator  <  Node>  allCatchNodes  =  allCatchNodes.iterator();  }	  	non-compiled	[CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	63	None	add
705	[BUG]  [BUGGY]  Node  allCatchNodes  =  tryBlock.getFirstChild();  Node  allCatchNodes  =  tryBlock.getFirstChild();  if(NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  }  [CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        RuntimeException    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  tryBlock.getFirstChild();  Node  allCatchNodes  =  tryBlock.getFirstChild();  if(NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  }  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node    allCatchNodes    =    tryBlock.getFirstChild();    Node  allCatchNodes  =  tryBlock.getFirstChild();  if(NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  }	  	non-compiled	[CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	63	None	add
706	[BUG]  [BUGGY]  Node  allCatchNodes  =  tryBlock.getFirstChild();  Node  allCatchNodes  =  tryBlock.getFirstChild();  if(NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Iterator  <  Node>  allCatchNodes  =  allCatchNodes.  [CE]  ';'  expected  [FE]          RuntimeException    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  tryBlock.getFirstChild();  Node  allCatchNodes  =  tryBlock.getFirstChild();  if(NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Iterator  <  Node>  allCatchNodes  =  allCatchNodes.  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node    allCatchNodes    =    tryBlock.getFirstChild();    Node  allCatchNodes  =  tryBlock.getFirstChild();  if(NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Iterator  <  Node>  allCatchNodes  =  allCatchNodes.	  	non-compiled	[CE]  ';'  expected	63	None	add
707	[BUG]  [BUGGY]  Node  elseBlock  =  tryBlock!=  null?  tryBlock.getLastChild()  :  null;  [CE]  cannot  find  symbol  allCatchNodes  [FE]        AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  tryBlock!=  null?  tryBlock.getLastChild()  :  null;  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  tryBlock!=  null?  tryBlock.getLastChild()  :  null;	          Node    elseBlock    =    tryBlock.getLastChild();    Node    elseBlock    =    tryBlock.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	26	None	replace
708	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  cannot  find  symbol  allCatchNodes  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	25	None	replace
709	[BUG]  [BUGGY]  Node  elseBlock  =  tryBlock!=  null?  tryBlock.getFirstChild()  :  attemptBlock.getFirstChild();  [CE]  cannot  find  symbol  attemptBlock  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  tryBlock!=  null?  tryBlock.getFirstChild()  :  attemptBlock.getFirstChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  tryBlock!=  null?  tryBlock.getFirstChild()  :  attemptBlock.getFirstChild();	          Node    elseBlock    =    tryBlock.getFirstChild();    Node    elseBlock    =    attemptBlock.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  attemptBlock	11	None	replace
710	[BUG]  [BUGGY]  Node  elseBlock  =  n.getFirstChild();  Preconditions.checkState(anyCatchNodes.hasOneChild());  [CE]  cannot  find  symbol  anyCatchNodes  [FE]            AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  n.getFirstChild();  Preconditions.checkState(anyCatchNodes.hasOneChild());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  n.getFirstChild();  Preconditions.checkState(anyCatchNodes.hasOneChild());	          Node    elseBlock    =    n.getFirstChild();    Node    elseBlock    =    n.getFirstChild();    Preconditions.checkState(allCatchNodes.hasOneChild());    	non-compiled	[CE]  cannot  find  symbol  anyCatchNodes	79	None	replace
711	[BUG]  [BUGGY]  Node  elseBlock  =  node.getFirstChild();  Preconditions.checkState(allCatchNodes.hasOneChild());  [CE]  cannot  find  symbol  node  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  node.getFirstChild();  Preconditions.checkState(allCatchNodes.hasOneChild());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  node.getFirstChild();  Preconditions.checkState(allCatchNodes.hasOneChild());	          Node    elseBlock    =    n.getFirstChild();    Node    elseBlock    =    n.getFirstChild();    Preconditions.checkState(allCatchNodes.hasOneChild());    	non-compiled	[CE]  cannot  find  symbol  node	79	None	replace
712	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  Preconditions.checkState(allCatchNodes.hasOneChild());  [CE]  cannot  find  symbol  allCatchNodes  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  Preconditions.checkState(allCatchNodes.hasOneChild());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  allCatchNodes.getFirstChild();  Preconditions.checkState(allCatchNodes.hasOneChild());	          Node    elseBlock    =    n.getFirstChild();    Node    elseBlock    =    n.getFirstChild();    Preconditions.checkState(allCatchNodes.hasOneChild());    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	79	None	replace
713	[BUG]  [BUGGY]  Node  elseBlock  =  tryBlock!=  null?  tryBlock.getFirstChild()  :  triedBlock.getFirstChild();  [CE]  cannot  find  symbol  triedBlock  [FE]        AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  tryBlock!=  null?  tryBlock.getFirstChild()  :  triedBlock.getFirstChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  tryBlock!=  null?  tryBlock.getFirstChild()  :  triedBlock.getFirstChild();	          Node    elseBlock    =    tryBlock.getFirstChild();    Node    elseBlock    =    triedBlock.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  triedBlock	169	None	replace
714	[BUG]  [BUGGY]  n.removeChild(tryBlock.cloneTree(),  exitType);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]          RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  n.removeChild(tryBlock.cloneTree(),  exitType);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	n.removeChild(tryBlock.cloneTree(),  exitType);	  n.removeChild(tryBlock.cloneTree());    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	2	None	replace
715	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  n.removeFirstChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	add	Node  allCatchNodes  =  n.removeFirstChild();	  Node    allCatchNodes    =    n.getLastChild();    	compilable	  [FE]  IllegalStateException  	179	6	replace
716	[BUG]  [BUGGY]  Node  allCatchNodes  =  n.removeFirstChild();  [FE]  IllegalStateException  [FE]    AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  n.removeFirstChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  n.removeFirstChild();	  Node    allCatchNodes    =    n.getLastChild();    	compilable	  [FE]  IllegalStateException  	179	6	replace
717	[BUG]  [BUGGY]  Preconditions.checkState(exitType.isExit());  [CE]  int  cannot  be  dereferenced  [FE]          AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(exitType.isExit());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(exitType.isExit());	  Preconditions.checkState(n.isExit());    	non-compiled	[CE]  int  cannot  be  dereferenced	23	None	replace
718	[BUG]  [BUGGY]  Node  c  =  n.getLastChild();  [CE]  cannot  find  symbol  allCatchNodes  [FE]          AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  c  =  n.getLastChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  c  =  n.getLastChild();	  Node    c    =    tryBlock.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	19	None	replace
719	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(tryBlock,  escapeType);  [CE]  cannot  find  symbol  escapeType  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(tryBlock,  escapeType);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(tryBlock,  escapeType);	  Node    allCatchNodes    =    NodeUtil.getAllCatchNodes(tryBlock,    falseBlock);    	non-compiled	[CE]  cannot  find  symbol  escapeType	111	None	replace
720	[BUG]  [BUGGY]  Preconditions.checkState(n.isTree()  ||  n.isExit());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(n.isTree()  ||  n.isExit());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(n.isTree()  ||  n.isExit());	  Preconditions.checkState(n.isTree()    ||    n.isTree());    	non-compiled	[CE]  cannot  find  symbol	170	None	replace
721	[BUG]  [BUGGY]  Preconditions.checkState(n.isTree()  ||  n.isType());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(n.isTree()  ||  n.isType());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(n.isTree()  ||  n.isType());	  Preconditions.checkState(n.isTree()    ||    n.isTree());    	non-compiled	[CE]  cannot  find  symbol	170	None	replace
722	[BUG]  [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  thenBlock  =  n.getFirstChild();  Node  elseBlock  =  null.getFirstChild();  Node  thenBlock  =  n.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  thenBlock  =  n.getFirstChild();  Node  elseBlock  =  null.getFirstChild();  Node  thenBlock  =  n.getFirstChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Node        elseBlock        =        n.getFirstChild();        Node    thenBlock    =    n.getFirstChild();    Node  elseBlock  =  null.getFirstChild();  Node  thenBlock  =  n.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	130	None	add
723	[BUG]  [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  thenBlock  =  n.getFirstChild();  Node  elseBlock  =  node.getFirstChild();  Node  thenBlock  =  n.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  thenBlock  =  n.getFirstChild();  Node  elseBlock  =  node.getFirstChild();  Node  thenBlock  =  n.getFirstChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Node        elseBlock        =        n.getFirstChild();        Node    thenBlock    =    n.getFirstChild();    Node  elseBlock  =  node.getFirstChild();  Node  thenBlock  =  n.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	130	None	add
724	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(exitType,  tryBlock);  [CE]  method  getCatchBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]        RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(exitType,  tryBlock);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(exitType,  tryBlock);	  Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock,    exitType);    	non-compiled	[CE]  method  getCatchBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;	147	None	replace
725	[BUG]  [BUGGY]  n.removeChild(labelName);  NodeUtil.removeChild(tryBlock);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]              RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  n.removeChild(labelName);  NodeUtil.removeChild(tryBlock);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	n.removeChild(labelName);  NodeUtil.removeChild(tryBlock);	          n.removeChild(tryBlock);    NodeUtil.removeChild(tryBlock);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	95	None	replace
726	[BUG]  [BUGGY]  n.removeChild(tryBlock,  tryBlock);  NodeUtil.removeChild(tryBlock,  tryBlock);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  n.removeChild(tryBlock,  tryBlock);  NodeUtil.removeChild(tryBlock,  tryBlock);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	n.removeChild(tryBlock,  tryBlock);  NodeUtil.removeChild(tryBlock,  tryBlock);	          n.removeChild(tryBlock);    NodeUtil.removeChild(tryBlock);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	95	None	replace
727	[BUG]  [BUGGY]  n.removeChild(tryBlock,  labelName);  NodeUtil.removeChild(tryBlock,  tryMinimizeExits);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  n.removeChild(tryBlock,  labelName);  NodeUtil.removeChild(tryBlock,  tryMinimizeExits);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	n.removeChild(tryBlock,  labelName);  NodeUtil.removeChild(tryBlock,  tryMinimizeExits);	          n.removeChild(tryBlock);    NodeUtil.removeChild(tryBlock);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	95	None	replace
728	[BUG]  [BUGGY]  Node  elseBlock  =  n.getfirstChild();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  n.getfirstChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  n.getfirstChild();	          Node    elseBlock    =    n.getFirstChild();    Node    elseBlock    =    n.getfirstChild();    	non-compiled	[CE]  cannot  find  symbol	127	None	replace
729	[BUG]  [BUGGY]  Node  elseBlock  =  tryBlock  ==  null?  tryBlock.getLastChild()  :  tryBlock.getLastChild();  [CE]  cannot  find  symbol  allCatchNodes  [FE]        AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  tryBlock  ==  null?  tryBlock.getLastChild()  :  tryBlock.getLastChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  tryBlock  ==  null?  tryBlock.getLastChild()  :  tryBlock.getLastChild();	          Node    elseBlock    =    tryBlock.getLastChild();    node    elseBlock    =    tryBlock.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	108	None	replace
730	[BUG]  [BUGGY]  Node  elseBlock  =  tryBlock.getFirstChild();  node  elseBlock  =  tryBlock.getLastChild();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  tryBlock.getFirstChild();  node  elseBlock  =  tryBlock.getLastChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  tryBlock.getFirstChild();  node  elseBlock  =  tryBlock.getLastChild();	          Node    elseBlock    =    tryBlock.getLastChild();    node    elseBlock    =    tryBlock.getLastChild();    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
731	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock,  escapeType);  [CE]  cannot  find  symbol  escapeType  [FE]          RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock,  escapeType);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(tryBlock,  escapeType);	  Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock,    falseBlock);    	non-compiled	[CE]  cannot  find  symbol  escapeType	148	None	replace
732	[BUG]  [BUGGY]  n.removeChild(testBlock(tryBlock));  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  n.removeChild(testBlock(tryBlock));  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	n.removeChild(testBlock(tryBlock));	  n.removeChild(t);    	non-compiled	[CE]  cannot  find  symbol	173	None	replace
733	[BUG]  [BUGGY]  n.removeChild(exitType);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]            RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  n.removeChild(exitType);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	n.removeChild(exitType);	  n.removeChild(t);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	173	None	replace
734	[BUG]  [BUGGY]  Preconditions.checkState(n.isTry());  NodeUtil.checkState(n,  tryBlock.isTry());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(n.isTry());  NodeUtil.checkState(n,  tryBlock.isTry());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(n.isTry());  NodeUtil.checkState(n,  tryBlock.isTry());	          Preconditions.checkState(n.isTry());    NodeUtil.checkState(n.isTry());    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
735	[BUG]  [BUGGY]  Node  c  =  tryBlock  ==  null?  tryBlock.getNext()  :  null;  [CE]  cannot  find  symbol  allCatchNodes  [FE]        AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  c  =  tryBlock  ==  null?  tryBlock.getNext()  :  null;  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  c  =  tryBlock  ==  null?  tryBlock.getNext()  :  null;	          Node    c    =    tryBlock.getNext();    Node    c    =    attemptBlock.getNext();    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	154	None	replace
736	[BUG]  [BUGGY]  Preconditions.checkState(trimBlock.isTree()  &&  tryBlock.isTree());  [CE]  cannot  find  symbol  trimBlock  [FE]            AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(trimBlock.isTree()  &&  tryBlock.isTree());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(trimBlock.isTree()  &&  tryBlock.isTree());	  Preconditions.checkState(n.isTree()    &&    tryBlock.isTree());    	non-compiled	[CE]  cannot  find  symbol  trimBlock	57	None	replace
737	[BUG]  [BUGGY]  Preconditions.checkState(tv.isTree()  &&  tryBlock.isTree());  [CE]  cannot  find  symbol  tv  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(tv.isTree()  &&  tryBlock.isTree());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(tv.isTree()  &&  tryBlock.isTree());	  Preconditions.checkState(n.isTree()    &&    tryBlock.isTree());    	non-compiled	[CE]  cannot  find  symbol  tv	57	None	replace
738	[BUG]  [BUGGY]  n  =  tryBlock.getNext();  Preconditions.checkState(n.isTry());  [CE]  cannot  find  symbol  allCatchNodes  [FE]            AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  n  =  tryBlock.getNext();  Preconditions.checkState(n.isTry());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	n  =  tryBlock.getNext();  Preconditions.checkState(n.isTry());	          Preconditions.checkState(n.isTry());    Node    n    =    tryBlock.getNext();    Preconditions.checkState(n.isTry());    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	102	None	replace
739	[BUG]  [BUGGY]          Node    elseBlock    =    tryBlock.getLastChild();    Node  otherBlock  =  tryBlock.getLastChild();  Node  elseBlock  =  triedBlock.getLastChild();  Node  otherBlock  =  tryBlock.getLastChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Node    elseBlock    =    tryBlock.getLastChild();    Node  otherBlock  =  tryBlock.getLastChild();  Node  elseBlock  =  triedBlock.getLastChild();  Node  otherBlock  =  tryBlock.getLastChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Node        elseBlock        =        tryBlock.getLastChild();        Node    otherBlock    =    tryBlock.getLastChild();    Node  elseBlock  =  triedBlock.getLastChild();  Node  otherBlock  =  tryBlock.getLastChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	27	None	add
740	[BUG]  [BUGGY]  Node  elseBlock  =  n.getFirstChild();  Preconditions.checkState(otherBlock.hasOneChild());  [CE]  cannot  find  symbol  otherBlock  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  n.getFirstChild();  Preconditions.checkState(otherBlock.hasOneChild());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  n.getFirstChild();  Preconditions.checkState(otherBlock.hasOneChild());	          Node    elseBlock    =    n.getFirstChild();    Node    elseBlock    =    n.getFirstChild();    Preconditions.checkState(alwaysBlock.hasOneChild());    	non-compiled	[CE]  cannot  find  symbol  otherBlock	81	None	replace
741	[BUG]  [BUGGY]  Node  elseBlock  =  n.getFirstChild();  Preconditions.checkState(altsBlock.hasOneChild());  [CE]  cannot  find  symbol  altsBlock  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  n.getFirstChild();  Preconditions.checkState(altsBlock.hasOneChild());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  n.getFirstChild();  Preconditions.checkState(altsBlock.hasOneChild());	          Node    elseBlock    =    n.getFirstChild();    Node    elseBlock    =    n.getFirstChild();    Preconditions.checkState(alwaysBlock.hasOneChild());    	non-compiled	[CE]  cannot  find  symbol  altsBlock	81	None	replace
742	[BUG]  [BUGGY]  Node  allCatchNodes  =  tryBlock.getLastChild();  Node  allCatchNodes  =  triedBlock.getLastChild();  [CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    RuntimeException    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  tryBlock.getLastChild();  Node  allCatchNodes  =  triedBlock.getLastChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node    allCatchNodes    =    tryBlock.getLastChild();    Node  allCatchNodes  =  triedBlock.getLastChild();	  	non-compiled	[CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	123	None	add
743	[BUG]  [BUGGY]  Node  allCatchNodes  =  tryBlock.getLastChild();  Node  allCatchNodes  =  tryBlock.getFirstChild();  [CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      RuntimeException    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  tryBlock.getLastChild();  Node  allCatchNodes  =  tryBlock.getFirstChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node    allCatchNodes    =    tryBlock.getLastChild();    Node  allCatchNodes  =  tryBlock.getFirstChild();	  	non-compiled	[CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	123	None	add
744	[BUG]  [BUGGY]  Preconditions.checkState(testBlock.isTree()  ||  tryBlock.isTree());  [CE]  cannot  find  symbol  testBlock  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(testBlock.isTree()  ||  tryBlock.isTree());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(testBlock.isTree()  ||  tryBlock.isTree());	  Preconditions.checkState(n.isTree()    ||    tryBlock.isTree());    	non-compiled	[CE]  cannot  find  symbol  testBlock	60	None	replace
745	[BUG]  [BUGGY]  Node  elseBlock  =  tryBlock.getNext();  Preconditions.checkState(otherBlock!=  null);  [CE]  cannot  find  symbol  otherBlock  [FE]    AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  tryBlock.getNext();  Preconditions.checkState(otherBlock!=  null);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  tryBlock.getNext();  Preconditions.checkState(otherBlock!=  null);	          Node    elseBlock    =    tryBlock.getNext();    Node    otherBlock    =    tryBlock.getNext();    	non-compiled	[CE]  cannot  find  symbol  otherBlock	41	None	replace
746	[BUG]  [BUGGY]  Node  c  =  tryBlock.replaceChild(n,  tryBlock.getFirstChild());  [CE]  incompatible  types  [FE]        AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  c  =  tryBlock.replaceChild(n,  tryBlock.getFirstChild());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  c  =  tryBlock.replaceChild(n,  tryBlock.getFirstChild());	  Node    c    =    tryBlock.removeFirstChild();    	non-compiled	[CE]  incompatible  types	181	None	replace
747	[BUG]  [BUGGY]  Node  allCatchNodes  =  n.getLastChild();  Node  allCatchNodes  =  no.getLastChild();  [CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  n.getLastChild();  Node  allCatchNodes  =  no.getLastChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node    allCatchNodes    =    n.getLastChild();    Node  allCatchNodes  =  no.getLastChild();	  	non-compiled	[CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	178	None	add
748	[BUG]  [BUGGY]  Node  allCatchNodes  =  n.getLastChild();  Node  allCatchNodes  =  null.getLastChild();  [CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  n.getLastChild();  Node  allCatchNodes  =  null.getLastChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node    allCatchNodes    =    n.getLastChild();    Node  allCatchNodes  =  null.getLastChild();	  	non-compiled	[CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	178	None	add
749	[BUG]  [BUGGY]  Node  allCatchNodes  =  n.getLastChild();  Node  allCatchNodes  =  n.getFirstChild();  [CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  n.getLastChild();  Node  allCatchNodes  =  n.getFirstChild();  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node    allCatchNodes    =    n.getLastChild();    Node  allCatchNodes  =  n.getFirstChild();	  	non-compiled	[CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	178	None	add
750	[BUG]  [BUGGY]  Node  c  =  tryBlock.removeCatch();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  c  =  tryBlock.removeCatch();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  c  =  tryBlock.removeCatch();	  Node    c    =    tryBlock.getCatch();    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
751	[BUG]  [BUGGY]  Node  elseBlock  =  n.getFirstChild();  Node  thenBlock  =  thenBlock.getFirstChild();  [CE]  cannot  find  symbol  allCatchNodes  [FE]    AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  n.getFirstChild();  Node  thenBlock  =  thenBlock.getFirstChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  n.getFirstChild();  Node  thenBlock  =  thenBlock.getFirstChild();	          Node    elseBlock    =    n.getFirstChild();    Node    thenBlock    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	131	None	replace
752	[BUG]  [BUGGY]  Node  c  =  labelName.getNext();  Preconditions.checkState(NodeUtil.hasCatchHandler(c));  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  c  =  labelName.getNext();  Preconditions.checkState(NodeUtil.hasCatchHandler(c));  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  c  =  labelName.getNext();  Preconditions.checkState(NodeUtil.hasCatchHandler(c));	          Node    c    =    tryBlock.getNext();    Node    c    =    tryBlock.getNext();    Preconditions.checkState(NodeUtil.hasCatchHandler(labelName));    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
753	[BUG]  [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  otherBlock  =  n.getFirstChild();  Node  elseBlock  =  null.getFirstChild();  Node  otherBlock  =  n.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  otherBlock  =  n.getFirstChild();  Node  elseBlock  =  null.getFirstChild();  Node  otherBlock  =  n.getFirstChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Node        elseBlock        =        n.getFirstChild();        Node    otherBlock    =    n.getFirstChild();    Node  elseBlock  =  null.getFirstChild();  Node  otherBlock  =  n.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	128	None	add
754	[BUG]  [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  otherBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  Node  otherBlock  =  no.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  otherBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  Node  otherBlock  =  no.getFirstChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Node        elseBlock        =        n.getFirstChild();        Node    otherBlock    =    n.getFirstChild();    Node  elseBlock  =  n.getFirstChild();  Node  otherBlock  =  no.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	128	None	add
755	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isExitBlock(labelName,  tryBlock));  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(NodeUtil.isExitBlock(labelName,  tryBlock));  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(NodeUtil.isExitBlock(labelName,  tryBlock));	  Preconditions.checkState(NodeUtil.isExitBlock(tryBlock,    n));    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
756	[BUG]  [BUGGY]  Node  elseBlock  =  n.getFirstChild();  Preconditions.checkState(otherCatchNodes.hasOneChild());  [CE]  cannot  find  symbol  otherCatchNodes  [FE]          AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  n.getFirstChild();  Preconditions.checkState(otherCatchNodes.hasOneChild());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  n.getFirstChild();  Preconditions.checkState(otherCatchNodes.hasOneChild());	          Node    elseBlock    =    n.getFirstChild();    Node    elseBlock    =    n.getFirstChild();    Preconditions.checkState(anythingCatchNodes.hasOneChild());    	non-compiled	[CE]  cannot  find  symbol  otherCatchNodes	78	None	replace
757	[BUG]  [BUGGY]  Node  elseBlock  =  node.getFirstChild();  Preconditions.checkState(anythingCatchNodes.hasOneChild());  [CE]  cannot  find  symbol  node  [FE]            AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  node.getFirstChild();  Preconditions.checkState(anythingCatchNodes.hasOneChild());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  node.getFirstChild();  Preconditions.checkState(anythingCatchNodes.hasOneChild());	          Node    elseBlock    =    n.getFirstChild();    Node    elseBlock    =    n.getFirstChild();    Preconditions.checkState(anythingCatchNodes.hasOneChild());    	non-compiled	[CE]  cannot  find  symbol  node	78	None	replace
758	[BUG]  [BUGGY]  Node  elseBlock  =  n.getFirstChild();  Preconditions.checkState(nothingCatchNodes.hasOneChild());  [CE]  cannot  find  symbol  nothingCatchNodes  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  n.getFirstChild();  Preconditions.checkState(nothingCatchNodes.hasOneChild());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  n.getFirstChild();  Preconditions.checkState(nothingCatchNodes.hasOneChild());	          Node    elseBlock    =    n.getFirstChild();    Node    elseBlock    =    n.getFirstChild();    Preconditions.checkState(anythingCatchNodes.hasOneChild());    	non-compiled	[CE]  cannot  find  symbol  nothingCatchNodes	78	None	replace
759	[BUG]  [BUGGY]  Node  otherBlock  =  tryBlock.getFirstChild();  [CE]  cannot  find  symbol  allCatchNodes  [FE]    AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  otherBlock  =  tryBlock.getFirstChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  otherBlock  =  tryBlock.getFirstChild();	          Node    elseBlock    =    tryBlock.getFirstChild();    Node    otherBlock    =    tryBlock.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	8	None	replace
760	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          n.removeChild(tryBlock);    n.removeChild(tryBlock);  n.addChildToBack(tryBlock);  n.removeChild(tryBlock);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	add	                n.removeChild(tryBlock);        n.removeChild(tryBlock);    n.addChildToBack(tryBlock);  n.removeChild(tryBlock);	  	compilable	  [FE]  RuntimeException  	91	6	add
761	[BUG]  [BUGGY]          n.removeChild(tryBlock);    n.removeChild(tryBlock);  n.addChildToBack(tryBlock);  n.removeChild(tryBlock);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          n.removeChild(tryBlock);    n.removeChild(tryBlock);  n.addChildToBack(tryBlock);  n.removeChild(tryBlock);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                n.removeChild(tryBlock);        n.removeChild(tryBlock);    n.addChildToBack(tryBlock);  n.removeChild(tryBlock);	  	compilable	  [FE]  RuntimeException  	91	6	add
762	[BUG]  [BUGGY]  Preconditions.checkState(tree.isTry());  [CE]  cannot  find  symbol  tree  [FE]        AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(tree.isTry());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(tree.isTry());	  Preconditions.checkState(tryBlock.isTry());    	non-compiled	[CE]  cannot  find  symbol  tree	22	None	replace
763	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.isTry());  [CE]  cannot  find  symbol  allCatchNodes  [FE]          AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(allCatchNodes.isTry());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(allCatchNodes.isTry());	  Preconditions.checkState(tryBlock.isTry());    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	22	None	replace
764	[BUG]  [BUGGY]          Node    elseBlock    =    tryBlock.getNext();    Node  anotherBlock  =  tryBlock.getNext();  Node  elseBlock  =  triedBlock.getNext();  Node  anotherBlock  =  tryBlock.getNext();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Node    elseBlock    =    tryBlock.getNext();    Node  anotherBlock  =  tryBlock.getNext();  Node  elseBlock  =  triedBlock.getNext();  Node  anotherBlock  =  tryBlock.getNext();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Node        elseBlock        =        tryBlock.getNext();        Node    anotherBlock    =    tryBlock.getNext();    Node  elseBlock  =  triedBlock.getNext();  Node  anotherBlock  =  tryBlock.getNext();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	44	None	add
765	[BUG]  [BUGGY]          Node    elseBlock    =    tryBlock.getNext();    Node  anotherBlock  =  tryBlock.getNext();  Node  elseBlock  =  startType.getNext();  Node  anotherBlock  =  tryBlock.getNext();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Node    elseBlock    =    tryBlock.getNext();    Node  anotherBlock  =  tryBlock.getNext();  Node  elseBlock  =  startType.getNext();  Node  anotherBlock  =  tryBlock.getNext();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Node        elseBlock        =        tryBlock.getNext();        Node    anotherBlock    =    tryBlock.getNext();    Node  elseBlock  =  startType.getNext();  Node  anotherBlock  =  tryBlock.getNext();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	44	None	add
766	[BUG]  [BUGGY]  Node  elseBlock  =  tryBlock.getNext()?  tryBlock.getNext()  :  null;  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  tryBlock.getNext()?  tryBlock.getNext()  :  null;  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  tryBlock.getNext()?  tryBlock.getNext()  :  null;	          Node    elseBlock    =    tryBlock.getNext();    Node    elseBlock    =    triedBlock.getNext();    	non-compiled	[CE]  incompatible  types	164	None	replace
767	[BUG]  [BUGGY]  Node  elseBlock  =  tryBlock.getNext()  &&  tryBlock.getNext();  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]        AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  tryBlock.getNext()  &&  tryBlock.getNext();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  tryBlock.getNext()  &&  tryBlock.getNext();	          Node    elseBlock    =    tryBlock.getNext();    Node    elseBlock    =    attemptBlock.getNext();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	163	None	replace
768	[BUG]  [BUGGY]  Node  elseBlock  =  tryBlock.getFirstChild();  Node  thenBlock  =  thenBlock!=  null?  tryBlock.getFirstChild()  :  null;  [CE]  cannot  find  symbol  allCatchNodes  [FE]    AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  tryBlock.getFirstChild();  Node  thenBlock  =  thenBlock!=  null?  tryBlock.getFirstChild()  :  null;  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  tryBlock.getFirstChild();  Node  thenBlock  =  thenBlock!=  null?  tryBlock.getFirstChild()  :  null;	          Node    elseBlock    =    tryBlock.getFirstChild();    Node    thenBlock    =    tryBlock.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	10	None	replace
769	[BUG]  [BUGGY]  Node  elseBlock  =  tryBlock.getFirstChild();  Node  thenBlock  =  thenBlock.getNext();  [CE]  cannot  find  symbol  allCatchNodes  [FE]      AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  tryBlock.getFirstChild();  Node  thenBlock  =  thenBlock.getNext();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  tryBlock.getFirstChild();  Node  thenBlock  =  thenBlock.getNext();	          Node    elseBlock    =    tryBlock.getFirstChild();    Node    thenBlock    =    tryBlock.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	10	None	replace
770	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n,  tryBlock);  Preconditions.checkState(NodeUtil.hasCatchHandler(allCatchNodes));  [CE]  method  getCatchBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]            RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n,  tryBlock);  Preconditions.checkState(NodeUtil.hasCatchHandler(allCatchNodes));  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(n,  tryBlock);  Preconditions.checkState(NodeUtil.hasCatchHandler(allCatchNodes));	  Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock);    Preconditions.checkState(NodeUtil.hasCatchHandler(allCatchNodes));    	non-compiled	[CE]  method  getCatchBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;	50	None	replace
771	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(labelName);  Preconditions.checkState(NodeUtil.hasCatchHandler(allCatchNodes));  [CE]  method  getCatchBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]              RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(labelName);  Preconditions.checkState(NodeUtil.hasCatchHandler(allCatchNodes));  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(labelName);  Preconditions.checkState(NodeUtil.hasCatchHandler(allCatchNodes));	  Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock);    Preconditions.checkState(NodeUtil.hasCatchHandler(allCatchNodes));    	non-compiled	[CE]  method  getCatchBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;	50	None	replace
772	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchNodes(n);  Preconditions.checkState(NodeUtil.hasCatchHandler(allCatchNodes));  [CE]  cannot  find  symbol  [FE]                RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchNodes(n);  Preconditions.checkState(NodeUtil.hasCatchHandler(allCatchNodes));  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchNodes(n);  Preconditions.checkState(NodeUtil.hasCatchHandler(allCatchNodes));	  Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock);    Preconditions.checkState(NodeUtil.hasCatchHandler(allCatchNodes));    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
773	[BUG]  [BUGGY]  Node  elseBlock  =  n.getFirstChild();  Preconditions.checkState(labelName.equals(exitType));  [CE]  cannot  find  symbol  allCatchNodes  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  n.getFirstChild();  Preconditions.checkState(labelName.equals(exitType));  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  n.getFirstChild();  Preconditions.checkState(labelName.equals(exitType));	          Node    elseBlock    =    n.getFirstChild();    Node    elseBlock    =    n.getFirstChild();    Preconditions.checkState(labelName.equals(tryBlock));    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	82	None	replace
774	[BUG]  [BUGGY]  Preconditions.checkState(labelName.equals(n));  [CE]  cannot  find  symbol  allCatchNodes  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(labelName.equals(n));  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(labelName.equals(n));	          Node    elseBlock    =    n.getFirstChild();    Node    elseBlock    =    n.getFirstChild();    Preconditions.checkState(labelName.equals(tryBlock));    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	82	None	replace
775	[BUG]  [BUGGY]  Preconditions.checkArgument(n.isTree()  ||  n.isTree());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkArgument(n.isTree()  ||  n.isTree());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkArgument(n.isTree()  ||  n.isTree());	  Preconditions.checkArgument(n.isTree());    	non-compiled	[CE]  cannot  find  symbol	133	None	replace
776	[BUG]  [BUGGY]          Node    elseBlock    =    tryBlock.getLastChild();    Node  anotherBlock  =  tryBlock.getLastChild();  Node  elseBlock  =  triedBlock.getLastChild();  Node  anotherBlock  =  tryBlock.getLastChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Node    elseBlock    =    tryBlock.getLastChild();    Node  anotherBlock  =  tryBlock.getLastChild();  Node  elseBlock  =  triedBlock.getLastChild();  Node  anotherBlock  =  tryBlock.getLastChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Node        elseBlock        =        tryBlock.getLastChild();        Node    anotherBlock    =    tryBlock.getLastChild();    Node  elseBlock  =  triedBlock.getLastChild();  Node  anotherBlock  =  tryBlock.getLastChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	31	None	add
777	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(n,  exitType,  tryBlock);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(n,  exitType,  tryBlock);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchHandler(n,  exitType,  tryBlock);	  Node    allCatchNodes    =    NodeUtil.getCatchHandler(n,    tryBlock);    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
778	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(tryBlock,  null);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchHandler(tryBlock,  null);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchHandler(tryBlock,  null);	  Node    allCatchNodes    =    NodeUtil.getCatchHandler(n,    tryBlock);    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
779	[BUG]  [BUGGY]  Preconditions.checkState(n.isTree());  n  =  tryBlock.getFirstChild();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(n.isTree());  n  =  tryBlock.getFirstChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(n.isTree());  n  =  tryBlock.getFirstChild();	          Preconditions.checkState(n.isTry());    Node    n    =    tryBlock.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	145	None	replace
780	[BUG]  [BUGGY]  Preconditions.checkArgument(n.isTry());  Node  n  =  tryBlock.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkArgument(n.isTry());  Node  n  =  tryBlock.getFirstChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkArgument(n.isTry());  Node  n  =  tryBlock.getFirstChild();	          Preconditions.checkState(n.isTry());    Node    n    =    tryBlock.getFirstChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	145	None	replace
781	[BUG]  [BUGGY]  n.removeChild(labelName);  Node  n  =  n.getFirstChild();  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]        RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  n.removeChild(labelName);  Node  n  =  n.getFirstChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	n.removeChild(labelName);  Node  n  =  n.getFirstChild();	          n.removeChild(tryBlock);    Node    n    =    n.getFirstChild();    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	112	None	replace
782	[BUG]  [BUGGY]  Preconditions.checkState(trimBlock.isTree(),  n.isTree());  [CE]  cannot  find  symbol  trimBlock  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(trimBlock.isTree(),  n.isTree());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(trimBlock.isTree(),  n.isTree());	  Preconditions.checkState(n.isTree(),    tryBlock.isTree());    	non-compiled	[CE]  cannot  find  symbol  trimBlock	59	None	replace
783	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  Node  allBatchNodes  =  NodeUtil.getCatchBlock(tryBlock);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	add	Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  Node  allBatchNodes  =  NodeUtil.getCatchBlock(tryBlock);	  Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock);    Node    allBatchNodes    =    NodeUtil.getCatchBlock(tryBlock);    	compilable	  [FE]  RuntimeException  	51	6	replace
784	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  Node  allBatchNodes  =  NodeUtil.getCatchBlock(tryBlock);  [FE]  RuntimeException  [FE]              RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  Node  allBatchNodes  =  NodeUtil.getCatchBlock(tryBlock);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  Node  allBatchNodes  =  NodeUtil.getCatchBlock(tryBlock);	  Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock);    Node    allBatchNodes    =    NodeUtil.getCatchBlock(tryBlock);    	compilable	  [FE]  RuntimeException  	51	6	replace
785	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n,  tryBlock);  Node  allBatchNodes  =  NodeUtil.getCatchBlock(tryBlock);  [CE]  method  getCatchBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]                RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n,  tryBlock);  Node  allBatchNodes  =  NodeUtil.getCatchBlock(tryBlock);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(n,  tryBlock);  Node  allBatchNodes  =  NodeUtil.getCatchBlock(tryBlock);	  Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock);    Node    allBatchNodes    =    NodeUtil.getCatchBlock(tryBlock);    	non-compiled	[CE]  method  getCatchBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;	51	None	replace
786	[BUG]  [BUGGY]          Node    c    =    tryBlock.getNext();    c  =  tryBlock.getNext();  Node  c  =  startNode.getNext();  c  =  startNode.getNext();  [CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Node    c    =    tryBlock.getNext();    c  =  tryBlock.getNext();  Node  c  =  startNode.getNext();  c  =  startNode.getNext();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Node        c        =        tryBlock.getNext();        c    =    tryBlock.getNext();    Node  c  =  startNode.getNext();  c  =  startNode.getNext();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	157	None	add
787	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(c,  labelName,  tryBlock);  [CE]  cannot  find  symbol  c  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(c,  labelName,  tryBlock);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(c,  labelName,  tryBlock);	  Node    allCatchNodes    =    NodeUtil.getCatchBlock(labelName,    tryBlock);    	non-compiled	[CE]  cannot  find  symbol  c	175	None	replace
788	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  Node  allSatchNodes  =  NodeUtil.getCatchBlock(tryBlock);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	add	Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  Node  allSatchNodes  =  NodeUtil.getCatchBlock(tryBlock);	  Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock);    Node    allSatchNodes    =    NodeUtil.getCatchBlock(tryBlock);    	compilable	  [FE]  RuntimeException  	49	6	replace
789	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  Node  allSatchNodes  =  NodeUtil.getCatchBlock(tryBlock);  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  Node  allSatchNodes  =  NodeUtil.getCatchBlock(tryBlock);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  Node  allSatchNodes  =  NodeUtil.getCatchBlock(tryBlock);	  Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock);    Node    allSatchNodes    =    NodeUtil.getCatchBlock(tryBlock);    	compilable	  [FE]  RuntimeException  	49	6	replace
790	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n,  tryBlock);  Node  allSatchNodes  =  NodeUtil.getCatchBlock(tryBlock);  [CE]  method  getCatchBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]            RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n,  tryBlock);  Node  allSatchNodes  =  NodeUtil.getCatchBlock(tryBlock);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(n,  tryBlock);  Node  allSatchNodes  =  NodeUtil.getCatchBlock(tryBlock);	  Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock);    Node    allSatchNodes    =    NodeUtil.getCatchBlock(tryBlock);    	non-compiled	[CE]  method  getCatchBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;	49	None	replace
791	[BUG]  [BUGGY]  AssertionFailedError  <  Node>  c  =  tryBlock.getNext();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  AssertionFailedError  <  Node>  c  =  tryBlock.getNext();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	AssertionFailedError  <  Node>  c  =  tryBlock.getNext();	          Node    c    =    tryBlock.getNext();    AssertionFailedError    <    Node>    c    =    tryBlock.getNext();    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
792	[BUG]  [BUGGY]  Node  c  =  tryBlock.getNext();  AssertionFailedError  <  Node>  c  =  this.tryBlock.getNext();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  c  =  tryBlock.getNext();  AssertionFailedError  <  Node>  c  =  this.tryBlock.getNext();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  c  =  tryBlock.getNext();  AssertionFailedError  <  Node>  c  =  this.tryBlock.getNext();	          Node    c    =    tryBlock.getNext();    AssertionFailedError    <    Node>    c    =    tryBlock.getNext();    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
793	[BUG]  [BUGGY]  Node  elseBlock  =  tryBlock.getNext();  Preconditions.checkState(n.isTree());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  elseBlock  =  tryBlock.getNext();  Preconditions.checkState(n.isTree());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  elseBlock  =  tryBlock.getNext();  Preconditions.checkState(n.isTree());	          Node    elseBlock    =    tryBlock.getNext();    Node    elseBlock    =    tryBlock.getNext();    }    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
794	[BUG]  [BUGGY]          Node    elseBlock    =    tryBlock.getNext();    Node  otherBlock  =  tryBlock.getNext();  Node  elseBlock  =  triedBlock.getNext();  Node  otherBlock  =  tryBlock.getNext();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Node    elseBlock    =    tryBlock.getNext();    Node  otherBlock  =  tryBlock.getNext();  Node  elseBlock  =  triedBlock.getNext();  Node  otherBlock  =  tryBlock.getNext();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Node        elseBlock        =        tryBlock.getNext();        Node    otherBlock    =    tryBlock.getNext();    Node  elseBlock  =  triedBlock.getNext();  Node  otherBlock  =  tryBlock.getNext();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	40	None	add
795	[BUG]  [BUGGY]          Node    elseBlock    =    tryBlock.getNext();    Node  otherBlock  =  tryBlock.getNext();  Node  elseBlock  =  startType.getNext();  Node  otherBlock  =  tryBlock.getNext();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Node    elseBlock    =    tryBlock.getNext();    Node  otherBlock  =  tryBlock.getNext();  Node  elseBlock  =  startType.getNext();  Node  otherBlock  =  tryBlock.getNext();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Node        elseBlock        =        tryBlock.getNext();        Node    otherBlock    =    tryBlock.getNext();    Node  elseBlock  =  startType.getNext();  Node  otherBlock  =  tryBlock.getNext();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	40	None	add
796	[BUG]  [BUGGY]  Preconditions.checkState(n.isTree());  Node  elseBlock  =  n.getFirstChild();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Preconditions.checkState(n.isTree());  Node  elseBlock  =  n.getFirstChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Preconditions.checkState(n.isTree());  Node  elseBlock  =  n.getFirstChild();	          Node    elseBlock    =    n.getFirstChild();    Node    elseBlock    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
797	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(catchNode,  n,  exitType);  [CE]  cannot  find  symbol  catchNode  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(catchNode,  n,  exitType);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchBlock(catchNode,  n,  exitType);	  Node    allCatchNodes    =    NodeUtil.getCatchBlock(tryBlock,    n,    exitType);    	non-compiled	[CE]  cannot  find  symbol  catchNode	55	None	replace
798	[BUG]  [BUGGY]  n.removeChild(labelName,  startNode);  [CE]  cannot  find  symbol  startNode  [FE]        RuntimeException      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  n.removeChild(labelName,  startNode);  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	n.removeChild(labelName,  startNode);	  n.removeChild(labelName);    	non-compiled	[CE]  cannot  find  symbol  startNode	1	None	replace
799	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchNodes(testNode,  exitType,  tryBlock);  [CE]  cannot  find  symbol  testNode  [FE]            AssertionFailedError      [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchNodes(testNode,  exitType,  tryBlock);  [BUGGY]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	Node  allCatchNodes  =  NodeUtil.getCatchNodes(testNode,  exitType,  tryBlock);	  Node    allCatchNodes    =    NodeUtil.getCatchNodes(exitType,    tryBlock);    	non-compiled	[CE]  cannot  find  symbol  testNode	162	None	replace
800	[BUG]  [BUGGY]          Preconditions.checkState(n.isTry());    Preconditions.checkState(n.isTry());  Node  n  =  tryBlock.getNext();  Preconditions.checkState(n.isTry());  Preconditions.checkState(n.isTry());  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Preconditions.checkState(n.isTry());    Preconditions.checkState(n.isTry());  Node  n  =  tryBlock.getNext();  Preconditions.checkState(n.isTry());  Preconditions.checkState(n.isTry());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Preconditions.checkState(n.isTry());        Preconditions.checkState(n.isTry());    Node  n  =  tryBlock.getNext();  Preconditions.checkState(n.isTry());  Preconditions.checkState(n.isTry());	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	99	None	add
801	[BUG]  [BUGGY]          Preconditions.checkState(n.isTry());    Preconditions.checkState(n.isTry());  Node  n  =  tryBlock.getFirstChild();  Preconditions.checkState(n.isTry());  Preconditions.checkState(n.isTry());  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Preconditions.checkState(n.isTry());    Preconditions.checkState(n.isTry());  Node  n  =  tryBlock.getFirstChild();  Preconditions.checkState(n.isTry());  Preconditions.checkState(n.isTry());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Preconditions.checkState(n.isTry());        Preconditions.checkState(n.isTry());    Node  n  =  tryBlock.getFirstChild();  Preconditions.checkState(n.isTry());  Preconditions.checkState(n.isTry());	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	99	None	add
802	[BUG]  [BUGGY]          Preconditions.checkState(n.isTry());    Preconditions.checkState(n.isTry());  Preconditions.checkState(t.isTry());  Preconditions.checkState(t.isTry());  [CE]  cannot  find  symbol  t  [FE]        AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Preconditions.checkState(n.isTry());    Preconditions.checkState(n.isTry());  Preconditions.checkState(t.isTry());  Preconditions.checkState(t.isTry());  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Preconditions.checkState(n.isTry());        Preconditions.checkState(n.isTry());    Preconditions.checkState(t.isTry());  Preconditions.checkState(t.isTry());	  	non-compiled	[CE]  cannot  find  symbol  t	99	None	add
803	[BUG]  [BUGGY]          Node    elseBlock    =    tryBlock.getFirstChild();    Node  otherBlock  =  tryBlock.getFirstChild();  Node  elseBlock  =  triedBlock.getFirstChild();  Node  otherBlock  =  tryBlock.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Node    elseBlock    =    tryBlock.getFirstChild();    Node  otherBlock  =  tryBlock.getFirstChild();  Node  elseBlock  =  triedBlock.getFirstChild();  Node  otherBlock  =  tryBlock.getFirstChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Node        elseBlock        =        tryBlock.getFirstChild();        Node    otherBlock    =    tryBlock.getFirstChild();    Node  elseBlock  =  triedBlock.getFirstChild();  Node  otherBlock  =  tryBlock.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	7	None	add
804	[BUG]  [BUGGY]          Node    elseBlock    =    tryBlock.getFirstChild();    Node  otherBlock  =  tryBlock.getFirstChild();  Node  elseBlock  =  startType.getFirstChild();  Node  otherBlock  =  tryBlock.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      AssertionFailedError    [CONTEXT]      if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);      [BUGGY]          Node    elseBlock    =    tryBlock.getFirstChild();    Node  otherBlock  =  tryBlock.getFirstChild();  Node  elseBlock  =  startType.getFirstChild();  Node  otherBlock  =  tryBlock.getFirstChild();  [BUGGY]      Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	                Node        elseBlock        =        tryBlock.getFirstChild();        Node    otherBlock    =    tryBlock.getFirstChild();    Node  elseBlock  =  startType.getFirstChild();  Node  otherBlock  =  tryBlock.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	7	None	add
