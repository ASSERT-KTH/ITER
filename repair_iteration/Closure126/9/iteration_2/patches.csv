bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Node  finallyBlock  =  n.getLastChild();  [CE]  illegal  start  of  type  [FE]          RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Node  finallyBlock  =  n.getLastChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  finallyBlock  =  n.getLastChild();	  if(NodeUtil.hasFinally(n)&&    NodeUtil.hasFinally(n.getFirstChild()))    {    if(NodeUtil.hasFinally(n)&&    NodeUtil.hasFinally(n.getLastChild()))    {    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
2	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(n.getFirstChild()))  {  [CE]  ';'  expected  [FE]            RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(n.getFirstChild()))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(n.getFirstChild()))  {	  if(NodeUtil.hasFinally(n)&&    NodeUtil.hasFinally(n.getFirstChild()))    {    if(NodeUtil.hasFinally(n)&&    NodeUtil.hasFinally(n.getLastChild()))    {    	non-compiled	[CE]  ';'  expected	81	None	replace
3	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.getFirstChild()  ==  null);  Node  c  =  allCatchNodes.getFirstChild();  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(allCatchNodes.getFirstChild()  ==  null);  Node  c  =  allCatchNodes.getFirstChild();  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(allCatchNodes.getFirstChild()  ==  null);  Node  c  =  allCatchNodes.getFirstChild();	          Node    c    =    allCatchNodes.getFirstChild();    Node    c    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
4	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  c  =  allCatchNodes.getFirstChild();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  c  =  allCatchNodes.getFirstChild();  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(allCatchNodes.hasOneChild());  Node  c  =  allCatchNodes.getFirstChild();	          Node    c    =    allCatchNodes.getFirstChild();    Node    c    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
5	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.getFirstChild()!=  null);  Node  c  =  allCatchNodes.getFirstChild();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(allCatchNodes.getFirstChild()!=  null);  Node  c  =  allCatchNodes.getFirstChild();  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(allCatchNodes.getFirstChild()!=  null);  Node  c  =  allCatchNodes.getFirstChild();	          Node    c    =    allCatchNodes.getFirstChild();    Node    c    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
6	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.getFirstChild()  ==  n);  Node  c  =  allCatchNodes.getFirstChild();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(allCatchNodes.getFirstChild()  ==  n);  Node  c  =  allCatchNodes.getFirstChild();  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(allCatchNodes.getFirstChild()  ==  n);  Node  c  =  allCatchNodes.getFirstChild();	          Node    c    =    allCatchNodes.getFirstChild();    Node    c    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
7	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(catchNode)&&  NodeUtil.hasFinally(n.getLastChild()))  {  [CE]  cannot  find  symbol  catchNode  [FE]          RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.hasFinally(catchNode)&&  NodeUtil.hasFinally(n.getLastChild()))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(catchNode)&&  NodeUtil.hasFinally(n.getLastChild()))  {	  if(NodeUtil.hasFinally(catchNode)&&    NodeUtil.hasFinally(n.getFirstChild()))    {    	non-compiled	[CE]  cannot  find  symbol  catchNode	67	None	replace
8	[BUG]  [BUGGY]  Node  n  =  allCatchNodes.get(i  +  1);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Node  n  =  allCatchNodes.get(i  +  1);  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  n  =  allCatchNodes.get(i  +  1);	  Node    n    =    allCatchNodes.get(i);    	non-compiled	[CE]  illegal  start  of  type	150	None	replace
9	[BUG]  [BUGGY]  Node  n  =  allCatchNodes.get(i,  catchNode);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Node  n  =  allCatchNodes.get(i,  catchNode);  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  n  =  allCatchNodes.get(i,  catchNode);	  Node    n    =    allCatchNodes.get(i);    	non-compiled	[CE]  illegal  start  of  type	150	None	replace
10	[BUG]  [BUGGY]  if(NodeUtil.isFinally(callNode)&&  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  cannot  find  symbol  callNode  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isFinally(callNode)&&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isFinally(callNode)&&  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.isFinally(catchNode)&&    NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol  callNode	108	None	replace
11	[BUG]  [BUGGY]  if(NodeUtil.isFinally(catchNode)||  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  cannot  find  symbol  catchNode  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isFinally(catchNode)||  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isFinally(catchNode)||  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.isFinally(catchNode)&&    NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol  catchNode	108	None	replace
12	[BUG]  [BUGGY]  Node  n  =  catchNodes.getFirstChild();  Preconditions.checkState(n.hasOneChild());  [CE]  illegal  start  of  type  [FE]                RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Node  n  =  catchNodes.getFirstChild();  Preconditions.checkState(n.hasOneChild());  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  n  =  catchNodes.getFirstChild();  Preconditions.checkState(n.hasOneChild());	          Preconditions.checkState(n.hasOneChild());    Node    n    =    catchNodes.getFirstChild();    Preconditions.checkState(n.hasOneChild());    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
13	[BUG]  [BUGGY]  n  =  catchNodes.getFirstChild();  Preconditions.checkState(n.hasOneChild());  [CE]  illegal  start  of  type  [FE]                  RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  n  =  catchNodes.getFirstChild();  Preconditions.checkState(n.hasOneChild());  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	n  =  catchNodes.getFirstChild();  Preconditions.checkState(n.hasOneChild());	          Preconditions.checkState(n.hasOneChild());    Node    n    =    catchNodes.getFirstChild();    Preconditions.checkState(n.hasOneChild());    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
14	[BUG]  [BUGGY]  if(NodeUtil.isFinally(allCatchNodes)||  NodeUtil.hasFinally(n.getFirstChild()))  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isFinally(allCatchNodes)||  NodeUtil.hasFinally(n.getFirstChild()))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isFinally(allCatchNodes)||  NodeUtil.hasFinally(n.getFirstChild()))  {	  if(NodeUtil.isFinally(n)||    NodeUtil.hasFinally(n.getFirstChild()))    {    	non-compiled	[CE]  cannot  find  symbol	172	None	replace
15	[BUG]  [BUGGY]  if(NodeUtil.isFinally(n)||  NodeUtil.hasFinally(n,  catchNode.getFirstChild()))  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isFinally(n)||  NodeUtil.hasFinally(n,  catchNode.getFirstChild()))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isFinally(n)||  NodeUtil.hasFinally(n,  catchNode.getFirstChild()))  {	  if(NodeUtil.isFinally(n)||    NodeUtil.hasFinally(n.getFirstChild()))    {    	non-compiled	[CE]  cannot  find  symbol	172	None	replace
16	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(callNode)&&  NodeUtil.isLabelHandler(n))  {  [CE]  cannot  find  symbol  callNode  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.hasFinally(callNode)&&  NodeUtil.isLabelHandler(n))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(callNode)&&  NodeUtil.isLabelHandler(n))  {	  if(NodeUtil.hasFinally(catchNode)&&    NodeUtil.isLabelHandler(n))    {    	non-compiled	[CE]  cannot  find  symbol  callNode	35	None	replace
17	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(catchNode)||  NodeUtil.isLabelHandler(n))  {  [CE]  cannot  find  symbol  catchNode  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.hasFinally(catchNode)||  NodeUtil.isLabelHandler(n))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(catchNode)||  NodeUtil.isLabelHandler(n))  {	  if(NodeUtil.hasFinally(catchNode)&&    NodeUtil.isLabelHandler(n))    {    	non-compiled	[CE]  cannot  find  symbol  catchNode	35	None	replace
18	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(n))  {  Node  elseBlock  =  allCatchNodes.getFirstChild();  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(n))  {  Node  elseBlock  =  allCatchNodes.getFirstChild();  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(n))  {  Node  elseBlock  =  allCatchNodes.getFirstChild();  tryMinimizeExits(elseBlock,  exitType,  labelName);  }	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    elseBlock    =    allCatchNodes.getFirstChild();    if(NodeUtil.hasFinally(n))    {    Node    elseBlock    =    allCatchNodes.getFirstChild();    tryMinimizeExits(elseBlock,    exitType,    labelName);    }    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
19	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(n))  {  Node  elseBlock  =  allCatchNodes.getFirstChild();  tryMinimizeExits(elseBlock,  exitType,  label  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(n))  {  Node  elseBlock  =  allCatchNodes.getFirstChild();  tryMinimizeExits(elseBlock,  exitType,  label  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(n))  {  Node  elseBlock  =  allCatchNodes.getFirstChild();  tryMinimizeExits(elseBlock,  exitType,  label	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    elseBlock    =    allCatchNodes.getFirstChild();    if(NodeUtil.hasFinally(n))    {    Node    elseBlock    =    allCatchNodes.getFirstChild();    tryMinimizeExits(elseBlock,    exitType,    labelName);    }    	non-compiled	[CE]  ')'  expected	112	None	replace
20	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(n))  {  Node  elseBlock  =  allCatchNodes.getFirstChild();  tryMinimizeExits(elseBlock,  exitType,  labelName  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(n))  {  Node  elseBlock  =  allCatchNodes.getFirstChild();  tryMinimizeExits(elseBlock,  exitType,  labelName  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(n))  {  Node  elseBlock  =  allCatchNodes.getFirstChild();  tryMinimizeExits(elseBlock,  exitType,  labelName	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    elseBlock    =    allCatchNodes.getFirstChild();    if(NodeUtil.hasFinally(n))    {    Node    elseBlock    =    allCatchNodes.getFirstChild();    tryMinimizeExits(elseBlock,    exitType,    labelName);    }    	non-compiled	[CE]  ')'  expected	112	None	replace
21	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(n))  {  Node  elseBlock  =  allCatchNodes.getFirstChild();  tryMinimizeExits(labelName,  exitType,  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(n))  {  Node  elseBlock  =  allCatchNodes.getFirstChild();  tryMinimizeExits(labelName,  exitType,  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(n))  {  Node  elseBlock  =  allCatchNodes.getFirstChild();  tryMinimizeExits(labelName,  exitType,	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    elseBlock    =    allCatchNodes.getFirstChild();    if(NodeUtil.hasFinally(n))    {    Node    elseBlock    =    allCatchNodes.getFirstChild();    tryMinimizeExits(elseBlock,    exitType,    labelName);    }    	non-compiled	[CE]  ')'  expected	112	None	replace
22	[BUG]  [BUGGY]  Preconditions.checkState(n.isFunction()  &&  catchNode.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  type  [FE]        RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(n.isFunction()  &&  catchNode.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(n.isFunction()  &&  catchNode.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.isFunction());    	non-compiled	[CE]  illegal  start  of  type	148	None	replace
23	[BUG]  [BUGGY]  Preconditions.checkState(n.isFunction()  &&  catchNode.getFirstChild().getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  type  [FE]          RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(n.isFunction()  &&  catchNode.getFirstChild().getType()  ==  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(n.isFunction()  &&  catchNode.getFirstChild().getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.isFunction());    	non-compiled	[CE]  illegal  start  of  type	148	None	replace
24	[BUG]  [BUGGY]  Preconditions.checkState(n.isFunction()  &&  catchNode.getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  type  [FE]            RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(n.isFunction()  &&  catchNode.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(n.isFunction()  &&  catchNode.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(n.isFunction());    	non-compiled	[CE]  illegal  start  of  type	148	None	replace
25	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)||  NodeUtil.isExpressionNode(n))  {  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isExpressionNode(n)||  NodeUtil.isExpressionNode(n))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isExpressionNode(n)||  NodeUtil.isExpressionNode(n))  {	  if(NodeUtil.isExpressionNode(n))    {    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
26	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isExpressionNode(allCatchNodes))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isExpressionNode(allCatchNodes))  {	  if(NodeUtil.isExpressionNode(n))    {    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
27	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]                RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isExpressionNode(n)&&  NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(NodeUtil.isExpressionNode(n))    {    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
28	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  n.getFirstChild().getType()  ==  Token.EXPR_RESULT)  {  [CE]  cannot  find  symbol  [FE]                  RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  n.getFirstChild().getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isExpressionNode(n)&&  n.getFirstChild().getType()  ==  Token.EXPR_RESULT)  {	  if(NodeUtil.isExpressionNode(n))    {    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
29	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  NodeUtil.isExpressionNode(n))  {  [CE]  cannot  find  symbol  [FE]                    RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  NodeUtil.isExpressionNode(n))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isExpressionNode(n)&&  NodeUtil.isExpressionNode(n))  {	  if(NodeUtil.isExpressionNode(n))    {    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
30	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(n))  {  Node  elseBlock  =  allCatchNodes.getFirstChild();  tryMinimizeExits(otherBlock,  exitType,  labelName);  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(n))  {  Node  elseBlock  =  allCatchNodes.getFirstChild();  tryMinimizeExits(otherBlock,  exitType,  labelName);  }  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(n))  {  Node  elseBlock  =  allCatchNodes.getFirstChild();  tryMinimizeExits(otherBlock,  exitType,  labelName);  }	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    elseBlock    =    allCatchNodes.getFirstChild();    if(NodeUtil.hasFinally(n))    {    Node    elseBlock    =    allCatchNodes.getFirstChild();    tryMinimizeExits(otherBlock,    exitType,    labelName);    }    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
31	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(n))  {  Node  elseBlock  =  allCatchNodes.getFirstChild();  tryMinimizeExits(otherBlock,  exitType,  label  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(n))  {  Node  elseBlock  =  allCatchNodes.getFirstChild();  tryMinimizeExits(otherBlock,  exitType,  label  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(n))  {  Node  elseBlock  =  allCatchNodes.getFirstChild();  tryMinimizeExits(otherBlock,  exitType,  label	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    elseBlock    =    allCatchNodes.getFirstChild();    if(NodeUtil.hasFinally(n))    {    Node    elseBlock    =    allCatchNodes.getFirstChild();    tryMinimizeExits(otherBlock,    exitType,    labelName);    }    	non-compiled	[CE]  ')'  expected	115	None	replace
32	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(n))  {  Node  elseBlock  =  allCatchNodes.getFirstChild();  tryMinimizeExits(otherBlock,  exitType,  labelName  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(n))  {  Node  elseBlock  =  allCatchNodes.getFirstChild();  tryMinimizeExits(otherBlock,  exitType,  labelName  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(n))  {  Node  elseBlock  =  allCatchNodes.getFirstChild();  tryMinimizeExits(otherBlock,  exitType,  labelName	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    elseBlock    =    allCatchNodes.getFirstChild();    if(NodeUtil.hasFinally(n))    {    Node    elseBlock    =    allCatchNodes.getFirstChild();    tryMinimizeExits(otherBlock,    exitType,    labelName);    }    	non-compiled	[CE]  ')'  expected	115	None	replace
33	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(n))  {  Node  elseBlock  =  allCatchNodes.  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(n))  {  Node  elseBlock  =  allCatchNodes.  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(allCatchNodes.hasOneChild());  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(n))  {  Node  elseBlock  =  allCatchNodes.	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    elseBlock    =    allCatchNodes.getFirstChild();    if(NodeUtil.hasFinally(n))    {    Node    elseBlock    =    allCatchNodes.getFirstChild();    tryMinimizeExits(otherBlock,    exitType,    labelName);    }    	non-compiled	[CE]  ';'  expected	115	None	replace
34	[BUG]  [BUGGY]  if(NodeUtil.isName(n)&&  NodeUtil.hasFinally(allCatchNodes.getFirstChild()))  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isName(n)&&  NodeUtil.hasFinally(allCatchNodes.getFirstChild()))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isName(n)&&  NodeUtil.hasFinally(allCatchNodes.getFirstChild()))  {	  if(NodeUtil.isName(n)&&    NodeUtil.hasFinally(n.getFirstChild()))    {    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
35	[BUG]  [BUGGY]  if(NodeUtil.isName(n)&&  NodeUtil.hasFinally(n,  allCatchNodes.getFirstChild()))  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isName(n)&&  NodeUtil.hasFinally(n,  allCatchNodes.getFirstChild()))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isName(n)&&  NodeUtil.hasFinally(n,  allCatchNodes.getFirstChild()))  {	  if(NodeUtil.isName(n)&&    NodeUtil.hasFinally(n.getFirstChild()))    {    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
36	[BUG]  [BUGGY]  if(NodeUtil.isName(n)&&  NodeUtil.hasFinally(n,  catchNode.getFirstChild()))  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isName(n)&&  NodeUtil.hasFinally(n,  catchNode.getFirstChild()))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isName(n)&&  NodeUtil.hasFinally(n,  catchNode.getFirstChild()))  {	  if(NodeUtil.isName(n)&&    NodeUtil.hasFinally(n.getFirstChild()))    {    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
37	[BUG]  [BUGGY]  if(NodeUtil.isName(n)&&  NodeUtil.hasFinally(n.getLastChild()))  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isName(n)&&  NodeUtil.hasFinally(n.getLastChild()))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isName(n)&&  NodeUtil.hasFinally(n.getLastChild()))  {	  if(NodeUtil.isName(n)&&    NodeUtil.hasFinally(n.getFirstChild()))    {    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
38	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(n))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	add	if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(n))  {	  if(NodeUtil.hasFinally(allCatchNodes)||    NodeUtil.hasFinally(n))    {    	compilable	  [FE]  RuntimeException  	118	6	replace
39	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(n))  {  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(n))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(n))  {	  if(NodeUtil.hasFinally(allCatchNodes)||    NodeUtil.hasFinally(n))    {    	compilable	  [FE]  RuntimeException  	118	6	replace
40	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(catchNode))  {  [CE]  cannot  find  symbol  catchNode  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(catchNode))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(catchNode))  {	  if(NodeUtil.hasFinally(allCatchNodes)||    NodeUtil.hasFinally(n))    {    	non-compiled	[CE]  cannot  find  symbol  catchNode	118	None	replace
41	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(callNodes)||  NodeUtil.hasFinally(n))  {  [CE]  cannot  find  symbol  callNodes  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.hasFinally(callNodes)||  NodeUtil.hasFinally(n))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(callNodes)||  NodeUtil.hasFinally(n))  {	  if(NodeUtil.hasFinally(allCatchNodes)||    NodeUtil.hasFinally(n))    {    	non-compiled	[CE]  cannot  find  symbol  callNodes	118	None	replace
42	[BUG]  [BUGGY]  Preconditions.checkState(n.hasFinally()  &&  catchNode.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  type  [FE]            RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(n.hasFinally()  &&  catchNode.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(n.hasFinally()  &&  catchNode.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.hasFinally());    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
43	[BUG]  [BUGGY]  Preconditions.checkState(n.hasFinally()  &&  catchNode.getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  type  [FE]              RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(n.hasFinally()  &&  catchNode.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(n.hasFinally()  &&  catchNode.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(n.hasFinally());    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
44	[BUG]  [BUGGY]  Preconditions.checkState(n.hasFinally()  &&  catchNode.getType()  ==  Token.NAME);  [CE]  illegal  start  of  type  [FE]                RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(n.hasFinally()  &&  catchNode.getType()  ==  Token.NAME);  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(n.hasFinally()  &&  catchNode.getType()  ==  Token.NAME);	  Preconditions.checkState(n.hasFinally());    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
45	[BUG]  [BUGGY]  Preconditions.checkState(n.hasFinally()  &&  catchNode.getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  type  [FE]                  RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(n.hasFinally()  &&  catchNode.getType()  ==  Token.BLOCK);  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(n.hasFinally()  &&  catchNode.getType()  ==  Token.BLOCK);	  Preconditions.checkState(n.hasFinally());    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
46	[BUG]  [BUGGY]  if(NodeUtil.isName(n)&&  NodeUtil.hasFinally(n))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isName(n)&&  NodeUtil.hasFinally(n))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isName(n)&&  NodeUtil.hasFinally(n))  {	  if(NodeUtil.isName(node)&&    NodeUtil.hasFinally(node))    {    	non-compiled	[CE]  cannot  find  symbol	143	None	replace
47	[BUG]  [BUGGY]  if(NodeUtil.isName(c)&&  NodeUtil.hasFinally(c))  {  [CE]  cannot  find  symbol  c  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isName(c)&&  NodeUtil.hasFinally(c))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isName(c)&&  NodeUtil.hasFinally(c))  {	  if(NodeUtil.isName(node)&&    NodeUtil.hasFinally(node))    {    	non-compiled	[CE]  cannot  find  symbol  c	143	None	replace
48	[BUG]  [BUGGY]  if(NodeUtil.isName(catchNode)&&  NodeUtil.hasFinally(catchNode))  {  [CE]  cannot  find  symbol  catchNode  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isName(catchNode)&&  NodeUtil.hasFinally(catchNode))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isName(catchNode)&&  NodeUtil.hasFinally(catchNode))  {	  if(NodeUtil.isName(node)&&    NodeUtil.hasFinally(node))    {    	non-compiled	[CE]  cannot  find  symbol  catchNode	143	None	replace
49	[BUG]  [BUGGY]  if(NodeUtil.isName(callNode)&&  NodeUtil.hasFinally(callNode))  {  [CE]  cannot  find  symbol  callNode  [FE]                    AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isName(callNode)&&  NodeUtil.hasFinally(callNode))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isName(callNode)&&  NodeUtil.hasFinally(callNode))  {	  if(NodeUtil.isName(node)&&    NodeUtil.hasFinally(node))    {    	non-compiled	[CE]  cannot  find  symbol  callNode	143	None	replace
50	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild()!=  null);  [CE]  illegal  start  of  type  [FE]        RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(n.getFirstChild()!=  null);  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(n.getFirstChild()!=  null);	  Preconditions.checkState(n.getFirstChild()    ==    null);    	non-compiled	[CE]  illegal  start  of  type	162	None	replace
51	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.getFirstChild()  ==  null);  [CE]  illegal  start  of  type  [FE]          RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(allCatchNodes.getFirstChild()  ==  null);  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(allCatchNodes.getFirstChild()  ==  null);	  Preconditions.checkState(n.getFirstChild()    ==    null);    	non-compiled	[CE]  illegal  start  of  type	162	None	replace
52	[BUG]  [BUGGY]  Preconditions.checkState(n.getLastChild()  ==  null);  [CE]  illegal  start  of  type  [FE]            RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(n.getLastChild()  ==  null);  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(n.getLastChild()  ==  null);	  Preconditions.checkState(n.getFirstChild()    ==    null);    	non-compiled	[CE]  illegal  start  of  type	162	None	replace
53	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.getFirstChild()!=  null);  [CE]  illegal  start  of  type  [FE]              RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(allCatchNodes.getFirstChild()!=  null);  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(allCatchNodes.getFirstChild()!=  null);	  Preconditions.checkState(n.getFirstChild()    ==    null);    	non-compiled	[CE]  illegal  start  of  type	162	None	replace
54	[BUG]  [BUGGY]  Node  c  =  catchNode.getNext();  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Node  c  =  catchNode.getNext();  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  c  =  catchNode.getNext();	  Node    c    =    catchNode.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
55	[BUG]  [BUGGY]  Node  c  =  catchNodes.getLastChild();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Node  c  =  catchNodes.getLastChild();  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  c  =  catchNodes.getLastChild();	  Node    c    =    catchNodes.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
56	[BUG]  [BUGGY]  Node  c  =  catchNodes.getNext();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Node  c  =  catchNodes.getNext();  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  c  =  catchNodes.getNext();	  Node    c    =    catchNodes.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
57	[BUG]  [BUGGY]  Preconditions.checkState(catchNode.isFinally());  [CE]  illegal  start  of  type  [FE]          RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(catchNode.isFinally());  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(catchNode.isFinally());	  Preconditions.checkState(catchNode.isLabel());    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
58	[BUG]  [BUGGY]  Preconditions.checkState(!catchNode.isLabel());  [CE]  illegal  start  of  type  [FE]            RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(!catchNode.isLabel());  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(!catchNode.isLabel());	  Preconditions.checkState(catchNode.isLabel());    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
59	[BUG]  [BUGGY]  Preconditions.checkState(catchNode.isFunction());  [CE]  illegal  start  of  type  [FE]              RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(catchNode.isFunction());  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(catchNode.isFunction());	  Preconditions.checkState(catchNode.isLabel());    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
60	[BUG]  [BUGGY]  If(NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(n.getFirstChild()))  {  [CE]  ';'  expected  [FE]            RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  If(NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(n.getFirstChild()))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	If(NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(n.getFirstChild()))  {	  if(NodeUtil.hasFinally(n)&&    NodeUtil.hasFinally(n.getFirstChild()))    {    If(NodeUtil.hasFinally(n)&&    NodeUtil.hasFinally(n.getFirstChild()))    {    	non-compiled	[CE]  ';'  expected	82	None	replace
61	[BUG]  [BUGGY]  If(NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(n.getLastChild()))  {  [CE]  ';'  expected  [FE]              RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  If(NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(n.getLastChild()))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	If(NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(n.getLastChild()))  {	  if(NodeUtil.hasFinally(n)&&    NodeUtil.hasFinally(n.getFirstChild()))    {    If(NodeUtil.hasFinally(n)&&    NodeUtil.hasFinally(n.getFirstChild()))    {    	non-compiled	[CE]  ';'  expected	82	None	replace
62	[BUG]  [BUGGY]  if(NodeUtil.isFinally(catchNode))  {  [CE]  cannot  find  symbol  catchNode  [FE]          RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isFinally(catchNode))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isFinally(catchNode))  {	  if(NodeUtil.isFinally(n))    {    	non-compiled	[CE]  cannot  find  symbol  catchNode	63	None	replace
63	[BUG]  [BUGGY]  if(NodeUtil.isFinally(n)&&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isFinally(n)&&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isFinally(n)&&  NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(NodeUtil.isFinally(n))    {    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
64	[BUG]  [BUGGY]  if(NodeUtil.isFinally(n)||  NodeUtil.isExpressionNode(n))  {  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isFinally(n)||  NodeUtil.isExpressionNode(n))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isFinally(n)||  NodeUtil.isExpressionNode(n))  {	  if(NodeUtil.isFinally(n))    {    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
65	[BUG]  [BUGGY]  if(NodeUtil.isFinally(n)||  NodeUtil.isFinally(n))  {  [CE]  cannot  find  symbol  [FE]                RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isFinally(n)||  NodeUtil.isFinally(n))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isFinally(n)||  NodeUtil.isFinally(n))  {	  if(NodeUtil.isFinally(n))    {    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
66	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(n))  {  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(n))  {  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(n))  {	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    elseBlock    =    allCatchNodes.getFirstChild();    if(NodeUtil.hasFinally(n))    {    Node    elseBlock    =    allCatchNodes.getFirstChild();    tryMinimizeExits(elseBlock,    exitType,    labelName    	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	113	None	replace
67	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(n))  {  tryMinimizeExits(elseBlock,  exitType,  labelName  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(n))  {  tryMinimizeExits(elseBlock,  exitType,  labelName  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(n))  {  tryMinimizeExits(elseBlock,  exitType,  labelName	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    elseBlock    =    allCatchNodes.getFirstChild();    if(NodeUtil.hasFinally(n))    {    Node    elseBlock    =    allCatchNodes.getFirstChild();    tryMinimizeExits(elseBlock,    exitType,    labelName    	non-compiled	[CE]  ')'  expected	113	None	replace
68	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(n))  {  Node  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(n))  {  Node  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(n))  {  Node	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    elseBlock    =    allCatchNodes.getFirstChild();    if(NodeUtil.hasFinally(n))    {    Node    elseBlock    =    allCatchNodes.getFirstChild();    tryMinimizeExits(elseBlock,    exitType,    labelName    	non-compiled	[CE]  ';'  expected	113	None	replace
69	[BUG]  [BUGGY]  if(NodeUtil.isFinally(catchNode)&&  NodeUtil.hasFinally(n,  catchNode.getFirstChild()))  {  [CE]  cannot  find  symbol  catchNode  [FE]                    AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isFinally(catchNode)&&  NodeUtil.hasFinally(n,  catchNode.getFirstChild()))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isFinally(catchNode)&&  NodeUtil.hasFinally(n,  catchNode.getFirstChild()))  {	  if(NodeUtil.isFinally(n)&&    NodeUtil.hasFinally(n,    catchNode.getFirstChild()))    {    	non-compiled	[CE]  cannot  find  symbol  catchNode	95	None	replace
70	[BUG]  [BUGGY]  if(NodeUtil.isFinally(n)&&  NodeUtil.hasFinally(catchNode,  n.getFirstChild()))  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isFinally(n)&&  NodeUtil.hasFinally(catchNode,  n.getFirstChild()))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isFinally(n)&&  NodeUtil.hasFinally(catchNode,  n.getFirstChild()))  {	  if(NodeUtil.isFinally(n)&&    NodeUtil.hasFinally(n,    catchNode.getFirstChild()))    {    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
71	[BUG]  [BUGGY]  if(NodeUtil.isFinally(callNode)&&  NodeUtil.hasFinally(n,  catchNode.getFirstChild()))  {  [CE]  cannot  find  symbol  callNode  [FE]                        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isFinally(callNode)&&  NodeUtil.hasFinally(n,  catchNode.getFirstChild()))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isFinally(callNode)&&  NodeUtil.hasFinally(n,  catchNode.getFirstChild()))  {	  if(NodeUtil.isFinally(n)&&    NodeUtil.hasFinally(n,    catchNode.getFirstChild()))    {    	non-compiled	[CE]  cannot  find  symbol  callNode	95	None	replace
72	[BUG]  [BUGGY]  if(NodeUtil.isFinally(allCatchNodes)&&  NodeUtil.hasFinally(n,  catchNode.getFirstChild()))  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isFinally(allCatchNodes)&&  NodeUtil.hasFinally(n,  catchNode.getFirstChild()))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isFinally(allCatchNodes)&&  NodeUtil.hasFinally(n,  catchNode.getFirstChild()))  {	  if(NodeUtil.isFinally(n)&&    NodeUtil.hasFinally(n,    catchNode.getFirstChild()))    {    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
73	[BUG]  [BUGGY]  if(NodeUtil.isFinally(catchNode)&&  NodeUtil.hasFinally(n,  node.getFirstChild()))  {  [CE]  cannot  find  symbol  catchNode  [FE]                            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isFinally(catchNode)&&  NodeUtil.hasFinally(n,  node.getFirstChild()))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isFinally(catchNode)&&  NodeUtil.hasFinally(n,  node.getFirstChild()))  {	  if(NodeUtil.isFinally(n)&&    NodeUtil.hasFinally(n,    catchNode.getFirstChild()))    {    	non-compiled	[CE]  cannot  find  symbol  catchNode	95	None	replace
74	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(catchNode)&&  NodeUtil.hasFinally(n))  {  [CE]  cannot  find  symbol  catchNode  [FE]        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.hasFinally(catchNode)&&  NodeUtil.hasFinally(n))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(catchNode)&&  NodeUtil.hasFinally(n))  {	  if(NodeUtil.hasFinally(catchNode)||    NodeUtil.hasFinally(n))    {    	non-compiled	[CE]  cannot  find  symbol  catchNode	19	None	replace
75	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(catchNode))  {  [CE]  cannot  find  symbol  catchNode  [FE]          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(catchNode))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(catchNode))  {	  if(NodeUtil.hasFinally(catchNode)||    NodeUtil.hasFinally(n))    {    	non-compiled	[CE]  cannot  find  symbol  catchNode	19	None	replace
76	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild()!=  exitType);  [CE]  illegal  start  of  type  [FE]        RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(n.getFirstChild()!=  exitType);  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(n.getFirstChild()!=  exitType);	  Preconditions.checkState(n.getFirstChild());    	non-compiled	[CE]  illegal  start  of  type	152	None	replace
77	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  catchNode);  [CE]  illegal  start  of  type  [FE]          RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  catchNode);  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(n.getFirstChild()  ==  catchNode);	  Preconditions.checkState(n.getFirstChild());    	non-compiled	[CE]  illegal  start  of  type	152	None	replace
78	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  exitType);  [CE]  illegal  start  of  type  [FE]            RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  exitType);  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(n.getFirstChild()  ==  exitType);	  Preconditions.checkState(n.getFirstChild());    	non-compiled	[CE]  illegal  start  of  type	152	None	replace
79	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild()!=  catchNode);  [CE]  illegal  start  of  type  [FE]              RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(n.getFirstChild()!=  catchNode);  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(n.getFirstChild()!=  catchNode);	  Preconditions.checkState(n.getFirstChild());    	non-compiled	[CE]  illegal  start  of  type	152	None	replace
80	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(catchNode)&&  NodeUtil.isLabelHandler(n,  exitType))  {  [CE]  cannot  find  symbol  catchNode  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.hasFinally(catchNode)&&  NodeUtil.isLabelHandler(n,  exitType))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(catchNode)&&  NodeUtil.isLabelHandler(n,  exitType))  {	  if(NodeUtil.hasFinally(n)&&    NodeUtil.isLabelHandler(n,    exitType))    {    	non-compiled	[CE]  cannot  find  symbol  catchNode	156	None	replace
81	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.isLabelHandler(n,  exitType))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.isLabelHandler(n,  exitType))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.isLabelHandler(n,  exitType))  {	  if(NodeUtil.hasFinally(n)&&    NodeUtil.isLabelHandler(n,    exitType))    {    	non-compiled	[CE]  cannot  find  symbol	156	None	replace
82	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(n)&&  NodeUtil.isLabelHandler(n,  labelName))  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.hasFinally(n)&&  NodeUtil.isLabelHandler(n,  labelName))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(n)&&  NodeUtil.isLabelHandler(n,  labelName))  {	  if(NodeUtil.hasFinally(n)&&    NodeUtil.isLabelHandler(n,    exitType))    {    	non-compiled	[CE]  cannot  find  symbol	156	None	replace
83	[BUG]  [BUGGY]  if(NodeUtil.isLabelHandler(n)&&  NodeUtil.hasFinally(n,  exitType))  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isLabelHandler(n)&&  NodeUtil.hasFinally(n,  exitType))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isLabelHandler(n)&&  NodeUtil.hasFinally(n,  exitType))  {	  if(NodeUtil.hasFinally(n)&&    NodeUtil.isLabelHandler(n,    exitType))    {    	non-compiled	[CE]  cannot  find  symbol	156	None	replace
84	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(n)&&  NodeUtil.isLabelHandler(n,  catchNode,  exitType))  {  [CE]  cannot  find  symbol  catchNode  [FE]                    AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.hasFinally(n)&&  NodeUtil.isLabelHandler(n,  catchNode,  exitType))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(n)&&  NodeUtil.isLabelHandler(n,  catchNode,  exitType))  {	  if(NodeUtil.hasFinally(n)&&    NodeUtil.isLabelHandler(n,    exitType))    {    	non-compiled	[CE]  cannot  find  symbol  catchNode	156	None	replace
85	[BUG]  [BUGGY]  Node  n  =  catchNodes.getFirstChild();  Preconditions.checkState(n.isLabel());  [CE]  illegal  start  of  type  [FE]          RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Node  n  =  catchNodes.getFirstChild();  Preconditions.checkState(n.isLabel());  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  n  =  catchNodes.getFirstChild();  Preconditions.checkState(n.isLabel());	          Preconditions.checkState(n.isLabel());    Node    n    =    catchNodes.getFirstChild();    Preconditions.checkState(n.isLabel());    	non-compiled	[CE]  illegal  start  of  type	147	None	replace
86	[BUG]  [BUGGY]  n  =  catchNodes.getFirstChild();  Preconditions.checkState(n.isLabel());  [CE]  illegal  start  of  type  [FE]            RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  n  =  catchNodes.getFirstChild();  Preconditions.checkState(n.isLabel());  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	n  =  catchNodes.getFirstChild();  Preconditions.checkState(n.isLabel());	          Preconditions.checkState(n.isLabel());    Node    n    =    catchNodes.getFirstChild();    Preconditions.checkState(n.isLabel());    	non-compiled	[CE]  illegal  start  of  type	147	None	replace
87	[BUG]  [BUGGY]  Preconditions.checkState(catchNodes.isLabel());  Node  n  =  catchNodes.getFirstChild();  Preconditions.checkState(n.isLabel());  [CE]  illegal  start  of  type  [FE]              RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(catchNodes.isLabel());  Node  n  =  catchNodes.getFirstChild();  Preconditions.checkState(n.isLabel());  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(catchNodes.isLabel());  Node  n  =  catchNodes.getFirstChild();  Preconditions.checkState(n.isLabel());	          Preconditions.checkState(n.isLabel());    Node    n    =    catchNodes.getFirstChild();    Preconditions.checkState(n.isLabel());    	non-compiled	[CE]  illegal  start  of  type	147	None	replace
88	[BUG]  [BUGGY]  NodeUtil.checkLabel(n.isLabel());  [CE]  illegal  start  of  type  [FE]                RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  NodeUtil.checkLabel(n.isLabel());  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	NodeUtil.checkLabel(n.isLabel());	          Preconditions.checkState(n.isLabel());    NodeUtil.checkLabel(n.isLabel());    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
89	[BUG]  [BUGGY]  Preconditions.checkState(labelName.isLabel());  NodeUtil.checkLabel(n.isLabel());  [CE]  illegal  start  of  type  [FE]                  RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(labelName.isLabel());  NodeUtil.checkLabel(n.isLabel());  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(labelName.isLabel());  NodeUtil.checkLabel(n.isLabel());	          Preconditions.checkState(n.isLabel());    NodeUtil.checkLabel(n.isLabel());    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
90	[BUG]  [BUGGY]  Preconditions.checkState(n.isLabel(),  c.isLabel());  NodeUtil.checkLabel(n.isLabel());  [CE]  illegal  start  of  type  [FE]                    RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(n.isLabel(),  c.isLabel());  NodeUtil.checkLabel(n.isLabel());  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(n.isLabel(),  c.isLabel());  NodeUtil.checkLabel(n.isLabel());	          Preconditions.checkState(n.isLabel());    NodeUtil.checkLabel(n.isLabel());    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
91	[BUG]  [BUGGY]  Preconditions.checkState(n.isLabel());  NodeUtil.checkLabel(n,  n.isLabel());  [CE]  illegal  start  of  type  [FE]                      RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(n.isLabel());  NodeUtil.checkLabel(n,  n.isLabel());  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(n.isLabel());  NodeUtil.checkLabel(n,  n.isLabel());	          Preconditions.checkState(n.isLabel());    NodeUtil.checkLabel(n.isLabel());    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
92	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  if(NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  if(NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(allCatchNodes)||    NodeUtil.hasFinally(allCatchNodes))    {    if(NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {	  	non-compiled	[CE]  illegal  start  of  expression	61	None	add
93	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  If(NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  If(NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(allCatchNodes)||    NodeUtil.hasFinally(allCatchNodes))    {    If(NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {	  	non-compiled	[CE]  ';'  expected	61	None	add
94	[BUG]  [BUGGY]  Node  c  =  allCatchNodes.getFirstChild();  AssertionFailedError  c  =  c.getFirstChild();  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Node  c  =  allCatchNodes.getFirstChild();  AssertionFailedError  c  =  c.getFirstChild();  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  c  =  allCatchNodes.getFirstChild();  AssertionFailedError  c  =  c.getFirstChild();	          Node    c    =    allCatchNodes.getFirstChild();    AssertionFailedError    c    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
95	[BUG]  [BUGGY]  AssertionFailedError  c  =  allCatchNodes.getFirstChild();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  AssertionFailedError  c  =  allCatchNodes.getFirstChild();  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	AssertionFailedError  c  =  allCatchNodes.getFirstChild();	          Node    c    =    allCatchNodes.getFirstChild();    AssertionFailedError    c    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
96	[BUG]  [BUGGY]  Node  c  =  allCatchNodes.getFirstChild();  AssertionFailedError  c  =  n.getFirstChild();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Node  c  =  allCatchNodes.getFirstChild();  AssertionFailedError  c  =  n.getFirstChild();  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  c  =  allCatchNodes.getFirstChild();  AssertionFailedError  c  =  n.getFirstChild();	          Node    c    =    allCatchNodes.getFirstChild();    AssertionFailedError    c    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
97	[BUG]  [BUGGY]  Node  c  =  allCatchNodes.getFirstChild();  AssertionFailedError  c  =  this.allCatchNodes.getFirstChild();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Node  c  =  allCatchNodes.getFirstChild();  AssertionFailedError  c  =  this.allCatchNodes.getFirstChild();  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  c  =  allCatchNodes.getFirstChild();  AssertionFailedError  c  =  this.allCatchNodes.getFirstChild();	          Node    c    =    allCatchNodes.getFirstChild();    AssertionFailedError    c    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
98	[BUG]  [BUGGY]  Preconditions.checkState(n.hasOneChild());  Node  n  =  catchNodes.getLastChild();  [CE]  illegal  start  of  type  [FE]          RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(n.hasOneChild());  Node  n  =  catchNodes.getLastChild();  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(n.hasOneChild());  Node  n  =  catchNodes.getLastChild();	          Preconditions.checkState(n.hasOneChild());    Node    n    =    catchNodes.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
99	[BUG]  [BUGGY]  Preconditions.checkState(n.hasChildren());  Node  n  =  catchNodes.getFirstChild();  [CE]  illegal  start  of  type  [FE]            RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(n.hasChildren());  Node  n  =  catchNodes.getFirstChild();  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(n.hasChildren());  Node  n  =  catchNodes.getFirstChild();	          Preconditions.checkState(n.hasOneChild());    Node    n    =    catchNodes.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
100	[BUG]  [BUGGY]  Preconditions.checkState(n.hasOneChild());  n  =  catchNodes.getFirstChild();  [CE]  illegal  start  of  type  [FE]              RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(n.hasOneChild());  n  =  catchNodes.getFirstChild();  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(n.hasOneChild());  n  =  catchNodes.getFirstChild();	          Preconditions.checkState(n.hasOneChild());    Node    n    =    catchNodes.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
101	[BUG]  [BUGGY]  Node  n  =  caughtNodes.getLastChild();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Node  n  =  caughtNodes.getLastChild();  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  n  =  caughtNodes.getLastChild();	  Node    n    =    caughtNodes.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	168	None	replace
102	[BUG]  [BUGGY]  Preconditions.checkState(n.isLabel());  Node  n  =  catchNode.getLastChild();  [CE]  illegal  start  of  type  [FE]              RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(n.isLabel());  Node  n  =  catchNode.getLastChild();  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(n.isLabel());  Node  n  =  catchNode.getLastChild();	          Preconditions.checkState(n.isLabel());    Node    n    =    catchNode.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
103	[BUG]  [BUGGY]  Preconditions.checkState(c.isLabel());  Node  n  =  catchNode.getFirstChild();  [CE]  illegal  start  of  type  [FE]                RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(c.isLabel());  Node  n  =  catchNode.getFirstChild();  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(c.isLabel());  Node  n  =  catchNode.getFirstChild();	          Preconditions.checkState(n.isLabel());    Node    n    =    catchNode.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
104	[BUG]  [BUGGY]  n  =  catchNodes.getLastChild();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  n  =  catchNodes.getLastChild();  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	n  =  catchNodes.getLastChild();	  n    =    catchNodes.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
105	[BUG]  [BUGGY]  Node  n  =  catchNode.getFirstChild();  Preconditions.checkState(n.isLabel());  [CE]  illegal  start  of  type  [FE]        RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Node  n  =  catchNode.getFirstChild();  Preconditions.checkState(n.isLabel());  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  n  =  catchNode.getFirstChild();  Preconditions.checkState(n.isLabel());	          Preconditions.checkState(n.isLabel());    Node    n    =    catchNode.getFirstChild();    Preconditions.checkState(n.isLabel());    	non-compiled	[CE]  illegal  start  of  type	177	None	replace
106	[BUG]  [BUGGY]  Preconditions.checkState(catchNode.isLabel());  Node  n  =  catchNode.getFirstChild();  Preconditions.checkState(n.isLabel());  [CE]  illegal  start  of  type  [FE]          RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(catchNode.isLabel());  Node  n  =  catchNode.getFirstChild();  Preconditions.checkState(n.isLabel());  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(catchNode.isLabel());  Node  n  =  catchNode.getFirstChild();  Preconditions.checkState(n.isLabel());	          Preconditions.checkState(n.isLabel());    Node    n    =    catchNode.getFirstChild();    Preconditions.checkState(n.isLabel());    	non-compiled	[CE]  illegal  start  of  type	177	None	replace
107	[BUG]  [BUGGY]  n  =  catchNode.getFirstChild();  Preconditions.checkState(n.isLabel());  [CE]  illegal  start  of  type  [FE]            RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  n  =  catchNode.getFirstChild();  Preconditions.checkState(n.isLabel());  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	n  =  catchNode.getFirstChild();  Preconditions.checkState(n.isLabel());	          Preconditions.checkState(n.isLabel());    Node    n    =    catchNode.getFirstChild();    Preconditions.checkState(n.isLabel());    	non-compiled	[CE]  illegal  start  of  type	177	None	replace
108	[BUG]  [BUGGY]  if(NodeUtil.isName(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isName(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isName(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.isName(allCatchNodes)&&    NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
109	[BUG]  [BUGGY]  if(NodeUtil.isName(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isName(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isName(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.isName(allCatchNodes)&&    NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
110	[BUG]  [BUGGY]  if(NodeUtil.isFunction(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isFunction(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isFunction(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.isName(allCatchNodes)&&    NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
111	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(n.getFirstChild()))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	add	if(NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(n.getFirstChild()))  {	  if(NodeUtil.hasFinally(allCatchNodes)&&    NodeUtil.hasFinally(n.getFirstChild()))    {    	compilable	  [FE]  RuntimeException  	138	6	replace
112	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(n.getFirstChild()))  {  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(n.getFirstChild()))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(n.getFirstChild()))  {	  if(NodeUtil.hasFinally(allCatchNodes)&&    NodeUtil.hasFinally(n.getFirstChild()))    {    	compilable	  [FE]  RuntimeException  	138	6	replace
113	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(catchNodes)&&  NodeUtil.hasFinally(n.getFirstChild()))  {  [CE]  cannot  find  symbol  catchNodes  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.hasFinally(catchNodes)&&  NodeUtil.hasFinally(n.getFirstChild()))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(catchNodes)&&  NodeUtil.hasFinally(n.getFirstChild()))  {	  if(NodeUtil.hasFinally(allCatchNodes)&&    NodeUtil.hasFinally(n.getFirstChild()))    {    	non-compiled	[CE]  cannot  find  symbol  catchNodes	138	None	replace
114	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(n.getLastChild()))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	add	if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(n.getLastChild()))  {	  if(NodeUtil.hasFinally(allCatchNodes)&&    NodeUtil.hasFinally(n.getFirstChild()))    {    	compilable	  [FE]  RuntimeException  	138	6	replace
115	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(n.getLastChild()))  {  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(n.getLastChild()))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(n.getLastChild()))  {	  if(NodeUtil.hasFinally(allCatchNodes)&&    NodeUtil.hasFinally(n.getFirstChild()))    {    	compilable	  [FE]  RuntimeException  	138	6	replace
116	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.hasChildren());  [CE]  illegal  start  of  type  [FE]        RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(allCatchNodes.hasChildren());  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(allCatchNodes.hasChildren());	  Preconditions.checkState(n.hasChildren());    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
117	[BUG]  [BUGGY]  Preconditions.checkState(n.hasChildren(),  exitType);  [CE]  illegal  start  of  type  [FE]          RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(n.hasChildren(),  exitType);  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(n.hasChildren(),  exitType);	  Preconditions.checkState(n.hasChildren());    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
118	[BUG]  [BUGGY]  Preconditions.checkState(n.hasChildren()  ||  n.hasChildren());  [CE]  illegal  start  of  type  [FE]            RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(n.hasChildren()  ||  n.hasChildren());  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(n.hasChildren()  ||  n.hasChildren());	  Preconditions.checkState(n.hasChildren());    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
119	[BUG]  [BUGGY]  Preconditions.checkState(n.hasChildren(),  catchNode.getFirstChild());  [CE]  illegal  start  of  type  [FE]              RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(n.hasChildren(),  catchNode.getFirstChild());  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(n.hasChildren(),  catchNode.getFirstChild());	  Preconditions.checkState(n.hasChildren());    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
120	[BUG]  [BUGGY]  Node  c  =  allCatchNodes.getFirstChild();  System.arraycopy(c,  0,  tryMinimizeExits(c,  exitType,  labelName));  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Node  c  =  allCatchNodes.getFirstChild();  System.arraycopy(c,  0,  tryMinimizeExits(c,  exitType,  labelName));  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  c  =  allCatchNodes.getFirstChild();  System.arraycopy(c,  0,  tryMinimizeExits(c,  exitType,  labelName));	          Node    c    =    allCatchNodes.getFirstChild();    Node    c    =    allCatchNodes.getFirstChild();    System.arraycopy(c,    0,    tryMinimizeExits(c,    exitType,    labelName));    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
121	[BUG]  [BUGGY]  Node  n  =  allCatchNodes.getFirstChild();  Node  c  =  allCatchNodes.getFirstChild();  System.arraycopy(c,  0,  tryMinimizeExits(n,  exitType,  labelName));  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Node  n  =  allCatchNodes.getFirstChild();  Node  c  =  allCatchNodes.getFirstChild();  System.arraycopy(c,  0,  tryMinimizeExits(n,  exitType,  labelName));  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  n  =  allCatchNodes.getFirstChild();  Node  c  =  allCatchNodes.getFirstChild();  System.arraycopy(c,  0,  tryMinimizeExits(n,  exitType,  labelName));	          Node    c    =    allCatchNodes.getFirstChild();    Node    c    =    allCatchNodes.getFirstChild();    System.arraycopy(c,    0,    tryMinimizeExits(c,    exitType,    labelName));    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
122	[BUG]  [BUGGY]  n  =  allCatchNodes.getFirstChild();  Node  c  =  allCatchNodes.getFirstChild();  System.arraycopy(c,  0,  tryMinimizeExits(c,  exitType,  labelName));  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  n  =  allCatchNodes.getFirstChild();  Node  c  =  allCatchNodes.getFirstChild();  System.arraycopy(c,  0,  tryMinimizeExits(c,  exitType,  labelName));  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	n  =  allCatchNodes.getFirstChild();  Node  c  =  allCatchNodes.getFirstChild();  System.arraycopy(c,  0,  tryMinimizeExits(c,  exitType,  labelName));	          Node    c    =    allCatchNodes.getFirstChild();    Node    c    =    allCatchNodes.getFirstChild();    System.arraycopy(c,    0,    tryMinimizeExits(c,    exitType,    labelName));    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
123	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.getFirstChild()  ==  exitType);  Node  c  =  allCatchNodes.getFirstChild();  System.arraycopy(c,  0,  tryMinimizeExits(c,  exitType,  labelName));  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(allCatchNodes.getFirstChild()  ==  exitType);  Node  c  =  allCatchNodes.getFirstChild();  System.arraycopy(c,  0,  tryMinimizeExits(c,  exitType,  labelName));  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(allCatchNodes.getFirstChild()  ==  exitType);  Node  c  =  allCatchNodes.getFirstChild();  System.arraycopy(c,  0,  tryMinimizeExits(c,  exitType,  labelName));	          Node    c    =    allCatchNodes.getFirstChild();    Node    c    =    allCatchNodes.getFirstChild();    System.arraycopy(c,    0,    tryMinimizeExits(c,    exitType,    labelName));    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
124	[BUG]  [BUGGY]  if(NodeUtil.isName(n)&&  NodeUtil.hasFinally(catchNode))  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isName(n)&&  NodeUtil.hasFinally(catchNode))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isName(n)&&  NodeUtil.hasFinally(catchNode))  {	  if(NodeUtil.isName(n)&&    NodeUtil.hasFinally(node))    {    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
125	[BUG]  [BUGGY]  if(NodeUtil.isName(n)&&  NodeUtil.hasFinally(node,  labelName))  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isName(n)&&  NodeUtil.hasFinally(node,  labelName))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isName(n)&&  NodeUtil.hasFinally(node,  labelName))  {	  if(NodeUtil.isName(n)&&    NodeUtil.hasFinally(node))    {    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
126	[BUG]  [BUGGY]  if(NodeUtil.isName(labelName)&&  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isName(labelName)&&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isName(labelName)&&  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.isName(n)&&    NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	165	None	replace
127	[BUG]  [BUGGY]  if(NodeUtil.isName(allCatchNodes)&&  NodeUtil.hasFinally(n))  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isName(allCatchNodes)&&  NodeUtil.hasFinally(n))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isName(allCatchNodes)&&  NodeUtil.hasFinally(n))  {	  if(NodeUtil.isName(n)&&    NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	165	None	replace
128	[BUG]  [BUGGY]  if(NodeUtil.isName(c)&&  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  cannot  find  symbol  c  [FE]                    AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isName(c)&&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isName(c)&&  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.isName(n)&&    NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol  c	165	None	replace
129	[BUG]  [BUGGY]  if(NodeUtil.isFinally(allCatchNodes)&&  NodeUtil.isLabelHandler(n))  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isFinally(allCatchNodes)&&  NodeUtil.isLabelHandler(n))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isFinally(allCatchNodes)&&  NodeUtil.isLabelHandler(n))  {	  if(NodeUtil.isFinally(n)&&    NodeUtil.isLabelHandler(n))    {    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
130	[BUG]  [BUGGY]  if(NodeUtil.isFinally(c)&&  NodeUtil.isLabelHandler(n))  {  [CE]  cannot  find  symbol  c  [FE]                    AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isFinally(c)&&  NodeUtil.isLabelHandler(n))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isFinally(c)&&  NodeUtil.isLabelHandler(n))  {	  if(NodeUtil.isFinally(n)&&    NodeUtil.isLabelHandler(n))    {    	non-compiled	[CE]  cannot  find  symbol  c	37	None	replace
131	[BUG]  [BUGGY]  if(NodeUtil.isFinally(catchNode)&&  NodeUtil.isLabelHandler(n))  {  [CE]  cannot  find  symbol  catchNode  [FE]                      AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isFinally(catchNode)&&  NodeUtil.isLabelHandler(n))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isFinally(catchNode)&&  NodeUtil.isLabelHandler(n))  {	  if(NodeUtil.isFinally(n)&&    NodeUtil.isLabelHandler(n))    {    	non-compiled	[CE]  cannot  find  symbol  catchNode	37	None	replace
132	[BUG]  [BUGGY]  if(NodeUtil.isFinally(n)&&  NodeUtil.isLabelHandler(catchNode))  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isFinally(n)&&  NodeUtil.isLabelHandler(catchNode))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isFinally(n)&&  NodeUtil.isLabelHandler(catchNode))  {	  if(NodeUtil.isFinally(n)&&    NodeUtil.isLabelHandler(n))    {    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
133	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.isTree());  [CE]  illegal  start  of  type  [FE]          RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(allCatchNodes.isTree());  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(allCatchNodes.isTree());	  Preconditions.checkState(n.isTree());    	non-compiled	[CE]  illegal  start  of  type	149	None	replace
134	[BUG]  [BUGGY]  Preconditions.checkState(n.isTree()  ||  n.isLabel());  [CE]  illegal  start  of  type  [FE]            RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(n.isTree()  ||  n.isLabel());  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(n.isTree()  ||  n.isLabel());	  Preconditions.checkState(n.isTree());    	non-compiled	[CE]  illegal  start  of  type	149	None	replace
135	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.isLabel());  Node  n  =  allCatchNodes.getFirstChild();  [CE]  illegal  start  of  type  [FE]          RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(allCatchNodes.isLabel());  Node  n  =  allCatchNodes.getFirstChild();  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(allCatchNodes.isLabel());  Node  n  =  allCatchNodes.getFirstChild();	          Preconditions.checkState(n.isLabel());    Node    n    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
136	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.getFirstChild());  Node  n  =  allCatchNodes.getFirstChild();  [CE]  illegal  start  of  type  [FE]            RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(allCatchNodes.getFirstChild());  Node  n  =  allCatchNodes.getFirstChild();  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(allCatchNodes.getFirstChild());  Node  n  =  allCatchNodes.getFirstChild();	          Preconditions.checkState(n.isLabel());    Node    n    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
137	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.getFirstChild()  ==  null);  Node  n  =  allCatchNodes.getFirstChild();  [CE]  illegal  start  of  type  [FE]              RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(allCatchNodes.getFirstChild()  ==  null);  Node  n  =  allCatchNodes.getFirstChild();  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(allCatchNodes.getFirstChild()  ==  null);  Node  n  =  allCatchNodes.getFirstChild();	          Preconditions.checkState(n.isLabel());    Node    n    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
138	[BUG]  [BUGGY]  NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  not  a  statement  [FE]        RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.hasFinally(n)||    NodeUtil.hasFinally(allCatchNodes))    {    NodeUtil.hasFinally(n)||    NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  not  a  statement	122	None	replace
139	[BUG]  [BUGGY]  NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  not  a  statement  [FE]          RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.hasFinally(n)||    NodeUtil.hasFinally(allCatchNodes))    {    NodeUtil.hasFinally(n)||    NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  not  a  statement	122	None	replace
140	[BUG]  [BUGGY]  NodeUtil.hasFinally(c)||  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  not  a  statement  [FE]            RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  NodeUtil.hasFinally(c)||  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	NodeUtil.hasFinally(c)||  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.hasFinally(n)||    NodeUtil.hasFinally(allCatchNodes))    {    NodeUtil.hasFinally(n)||    NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  not  a  statement	122	None	replace
141	[BUG]  [BUGGY]  NodeUtil.hasFinally(catchNode)||  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  not  a  statement  [FE]              RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  NodeUtil.hasFinally(catchNode)||  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	NodeUtil.hasFinally(catchNode)||  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.hasFinally(n)||    NodeUtil.hasFinally(allCatchNodes))    {    NodeUtil.hasFinally(n)||    NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  not  a  statement	122	None	replace
142	[BUG]  [BUGGY]  if(NodeUtil.isName(labelName)||  NodeUtil.hasFinally(n))  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isName(labelName)||  NodeUtil.hasFinally(n))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isName(labelName)||  NodeUtil.hasFinally(n))  {	  if(NodeUtil.isName(n)||    NodeUtil.hasFinally(n))    {    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
143	[BUG]  [BUGGY]  if(NodeUtil.isName(n)||  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isName(n)||  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isName(n)||  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.isName(n)||    NodeUtil.hasFinally(n))    {    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
144	[BUG]  [BUGGY]  if(NodeUtil.isName(n)||  NodeUtil.hasFinally(catchNode))  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isName(n)||  NodeUtil.hasFinally(catchNode))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isName(n)||  NodeUtil.hasFinally(catchNode))  {	  if(NodeUtil.isName(n)||    NodeUtil.hasFinally(n))    {    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
145	[BUG]  [BUGGY]  Node  n  =  allCatchNodes.getFirstChild();  Preconditions.checkState(n.isLabel());  [CE]  illegal  start  of  type  [FE]        RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Node  n  =  allCatchNodes.getFirstChild();  Preconditions.checkState(n.isLabel());  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  n  =  allCatchNodes.getFirstChild();  Preconditions.checkState(n.isLabel());	          Preconditions.checkState(n.isLabel());    Node    n    =    allCatchNodes.getFirstChild();    Preconditions.checkState(n.isLabel());    	non-compiled	[CE]  illegal  start  of  type	146	None	replace
146	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  n  =  allCatchNodes.getFirstChild();  Preconditions.checkState(n.isLabel());  [CE]  illegal  start  of  type  [FE]          RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  n  =  allCatchNodes.getFirstChild();  Preconditions.checkState(n.isLabel());  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(allCatchNodes.hasOneChild());  Node  n  =  allCatchNodes.getFirstChild();  Preconditions.checkState(n.isLabel());	          Preconditions.checkState(n.isLabel());    Node    n    =    allCatchNodes.getFirstChild();    Preconditions.checkState(n.isLabel());    	non-compiled	[CE]  illegal  start  of  type	146	None	replace
147	[BUG]  [BUGGY]  n  =  allCatchNodes.getFirstChild();  Preconditions.checkState(n.isLabel());  [CE]  illegal  start  of  type  [FE]            RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  n  =  allCatchNodes.getFirstChild();  Preconditions.checkState(n.isLabel());  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	n  =  allCatchNodes.getFirstChild();  Preconditions.checkState(n.isLabel());	          Preconditions.checkState(n.isLabel());    Node    n    =    allCatchNodes.getFirstChild();    Preconditions.checkState(n.isLabel());    	non-compiled	[CE]  illegal  start  of  type	146	None	replace
148	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.getFirstChild()  ==  null);  Node  n  =  allCatchNodes.getFirstChild();  Preconditions.checkState(n.isLabel());  [CE]  illegal  start  of  type  [FE]              RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(allCatchNodes.getFirstChild()  ==  null);  Node  n  =  allCatchNodes.getFirstChild();  Preconditions.checkState(n.isLabel());  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(allCatchNodes.getFirstChild()  ==  null);  Node  n  =  allCatchNodes.getFirstChild();  Preconditions.checkState(n.isLabel());	          Preconditions.checkState(n.isLabel());    Node    n    =    allCatchNodes.getFirstChild();    Preconditions.checkState(n.isLabel());    	non-compiled	[CE]  illegal  start  of  type	146	None	replace
149	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.hasFinally(allCatchNodes));  [CE]  illegal  start  of  type  [FE]                  RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(NodeUtil.hasFinally(allCatchNodes));  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(NodeUtil.hasFinally(allCatchNodes));	  if(NodeUtil.hasFinally(allCatchNodes))    {    if(NodeUtil.hasFinally(allCatchNodes))    <    Node    finallyBlock    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
150	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.hasFinally(allCatchNodes))  <  Node  finallyBlock  =  n.getLastChild();  [CE]  not  a  statement  [FE]                    RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(NodeUtil.hasFinally(allCatchNodes))  <  Node  finallyBlock  =  n.getLastChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(NodeUtil.hasFinally(allCatchNodes))  <  Node  finallyBlock  =  n.getLastChild();	  if(NodeUtil.hasFinally(allCatchNodes))    {    if(NodeUtil.hasFinally(allCatchNodes))    <    Node    finallyBlock    =    n.getLastChild();    	non-compiled	[CE]  not  a  statement	33	None	replace
151	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  <  Node  finallyBlock  =  n.getLastChild();  [CE]  not  a  statement  [FE]                      RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  <  Node  finallyBlock  =  n.getLastChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  <  Node  finallyBlock  =  n.getLastChild();	  if(NodeUtil.hasFinally(allCatchNodes))    {    if(NodeUtil.hasFinally(allCatchNodes))    <    Node    finallyBlock    =    n.getLastChild();    	non-compiled	[CE]  not  a  statement	33	None	replace
152	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  Node  finallyBlock  =  n.getLastChild();  [CE]  ';'  expected  [FE]                        RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  Node  finallyBlock  =  n.getLastChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  Node  finallyBlock  =  n.getLastChild();	  if(NodeUtil.hasFinally(allCatchNodes))    {    if(NodeUtil.hasFinally(allCatchNodes))    <    Node    finallyBlock    =    n.getLastChild();    	non-compiled	[CE]  ';'  expected	33	None	replace
153	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT);  [CE]  illegal  start  of  type  [FE]          RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT);  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
154	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  type  [FE]            RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
155	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  catchNode.getFirstChild());  [CE]  illegal  start  of  type  [FE]              RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  catchNode.getFirstChild());  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  catchNode.getFirstChild());	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
156	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()!=  Token.EXPR_RESULT);  [CE]  illegal  start  of  type  [FE]                RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()!=  Token.EXPR_RESULT);  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()!=  Token.EXPR_RESULT);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
157	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(callNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  cannot  find  symbol  callNodes  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.hasFinally(callNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(callNodes)||  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.hasFinally(allCatchNodes)||    NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol  callNodes	62	None	replace
158	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(n))  {  Node  elseBlock  =  allCatchNodes.getFirstChild();  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(n))  {  Node  elseBlock  =  allCatchNodes.getFirstChild();  }  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(n))  {  Node  elseBlock  =  allCatchNodes.getFirstChild();  }	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    elseBlock    =    allCatchNodes.getFirstChild();    if(NodeUtil.hasFinally(n))    {    Node    elseBlock    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
159	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(n))  {  Node  elseBlock  =  allCatchNodes.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(n))  {  Node  elseBlock  =  allCatchNodes.getFirstChild();  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(n))  {  Node  elseBlock  =  allCatchNodes.getFirstChild();	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    elseBlock    =    allCatchNodes.getFirstChild();    if(NodeUtil.hasFinally(n))    {    Node    elseBlock    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	114	None	replace
160	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(n))  {  Node  elseBlock  =  allCatchNodes.getFirstCh  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(n))  {  Node  elseBlock  =  allCatchNodes.getFirstCh  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(allCatchNodes.hasOneChild());  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(n))  {  Node  elseBlock  =  allCatchNodes.getFirstCh	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    elseBlock    =    allCatchNodes.getFirstChild();    if(NodeUtil.hasFinally(n))    {    Node    elseBlock    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  ';'  expected	114	None	replace
161	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(n))  {  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(n))  {  Node  elseBlock  =  allCatchNodes.getFirstCh  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.hasFinally(n))  {  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(n))  {  Node  elseBlock  =  allCatchNodes.getFirstCh  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(n))  {  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(n))  {  Node  elseBlock  =  allCatchNodes.getFirstCh	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    elseBlock    =    allCatchNodes.getFirstChild();    if(NodeUtil.hasFinally(n))    {    Node    elseBlock    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  ';'  expected	114	None	replace
162	[BUG]  [BUGGY]  if(NodeUtil.isFinally(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]        RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isFinally(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isFinally(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.hasFinally(catchNodes)||    NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	130	None	replace
163	[BUG]  [BUGGY]  Node  n  =  catchNode.getFirstChild();  Preconditions.checkState(n.hasOneChild());  [CE]  illegal  start  of  type  [FE]              RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Node  n  =  catchNode.getFirstChild();  Preconditions.checkState(n.hasOneChild());  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  n  =  catchNode.getFirstChild();  Preconditions.checkState(n.hasOneChild());	          Preconditions.checkState(n.hasOneChild());    Node    n    =    catchNode.getFirstChild();    Preconditions.checkState(n.hasOneChild());    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
164	[BUG]  [BUGGY]  n  =  catchNode.getFirstChild();  Preconditions.checkState(n.hasOneChild());  [CE]  illegal  start  of  type  [FE]                RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  n  =  catchNode.getFirstChild();  Preconditions.checkState(n.hasOneChild());  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	n  =  catchNode.getFirstChild();  Preconditions.checkState(n.hasOneChild());	          Preconditions.checkState(n.hasOneChild());    Node    n    =    catchNode.getFirstChild();    Preconditions.checkState(n.hasOneChild());    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
165	[BUG]  [BUGGY]  Node  elseBlock  =  catchNode.getNext(),  falseBlock);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Node  elseBlock  =  catchNode.getNext(),  falseBlock);  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  elseBlock  =  catchNode.getNext(),  falseBlock);	  Node    elseBlock    =    catchNode.getNext();    	non-compiled	[CE]  ';'  expected	41	None	replace
166	[BUG]  [BUGGY]  if(NodeUtil.isFinally(labelName)&&  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isFinally(labelName)&&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isFinally(labelName)&&  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.isFinally(c)&&    NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
167	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getLastChild();  Node  anotherBlock  =  allCatchNodes.getFirstChild();  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Node  elseBlock  =  allCatchNodes.getLastChild();  Node  anotherBlock  =  allCatchNodes.getFirstChild();  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  elseBlock  =  allCatchNodes.getLastChild();  Node  anotherBlock  =  allCatchNodes.getFirstChild();	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    anotherBlock    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
168	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  anotherBlock  =  allCatchNodes.getLastChild();  [CE]  illegal  start  of  type  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  anotherBlock  =  allCatchNodes.getLastChild();  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  anotherBlock  =  allCatchNodes.getLastChild();	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    anotherBlock    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
169	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  anotherBlock  =  allCatchNodes.getFirstChild();  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  anotherBlock  =  allCatchNodes.getFirstChild();  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(allCatchNodes.hasOneChild());  Node  anotherBlock  =  allCatchNodes.getFirstChild();	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    anotherBlock    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
170	[BUG]  [BUGGY]  Node  elseBlock  =  catchNodes.getLastChild();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Node  elseBlock  =  catchNodes.getLastChild();  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  elseBlock  =  catchNodes.getLastChild();	  Node    elseBlock    =    catchNodes.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
171	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.getFirstChild()  ==  null);  Node  c  =  allCatchNodes.getLastChild();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(allCatchNodes.getFirstChild()  ==  null);  Node  c  =  allCatchNodes.getLastChild();  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(allCatchNodes.getFirstChild()  ==  null);  Node  c  =  allCatchNodes.getLastChild();	          Node    c    =    allCatchNodes.getFirstChild();    Node    c    =    allCatchNodes.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
172	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.getFirstChild()!=  null);  Node  c  =  allCatchNodes.getLastChild();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(allCatchNodes.getFirstChild()!=  null);  Node  c  =  allCatchNodes.getLastChild();  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(allCatchNodes.getFirstChild()!=  null);  Node  c  =  allCatchNodes.getLastChild();	          Node    c    =    allCatchNodes.getFirstChild();    Node    c    =    allCatchNodes.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
173	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  c  =  allCatchNodes.getLastChild();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  c  =  allCatchNodes.getLastChild();  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(allCatchNodes.hasOneChild());  Node  c  =  allCatchNodes.getLastChild();	          Node    c    =    allCatchNodes.getFirstChild();    Node    c    =    allCatchNodes.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
174	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  ';'  expected  [FE]              RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.hasFinally(allCatchNodes))    {    if(NodeUtil.hasFinally(allCatchNodes)&&    NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  ';'  expected	31	None	replace
175	[BUG]  [BUGGY]  If(NodeUtil.hasFinally(allCatchNodes))  {  [CE]  ';'  expected  [FE]                RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  If(NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	If(NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.hasFinally(allCatchNodes))    {    If(NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  ';'  expected	32	None	replace
176	[BUG]  [BUGGY]  If(NodeUtil.hasFinally(catchNodes))  {  [CE]  ';'  expected  [FE]                  RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  If(NodeUtil.hasFinally(catchNodes))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	If(NodeUtil.hasFinally(catchNodes))  {	  if(NodeUtil.hasFinally(allCatchNodes))    {    If(NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  ';'  expected	32	None	replace
177	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isExpressionNode(n)&&  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.isExpressionNode(n)&&    NodeUtil.hasFinally(node))    {    	non-compiled	[CE]  cannot  find  symbol	164	None	replace
178	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  NodeUtil.hasFinally(catchNode))  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  NodeUtil.hasFinally(catchNode))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isExpressionNode(n)&&  NodeUtil.hasFinally(catchNode))  {	  if(NodeUtil.isExpressionNode(n)&&    NodeUtil.hasFinally(node))    {    	non-compiled	[CE]  cannot  find  symbol	164	None	replace
179	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  NodeUtil.hasFinally(node,  labelName))  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  NodeUtil.hasFinally(node,  labelName))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isExpressionNode(n)&&  NodeUtil.hasFinally(node,  labelName))  {	  if(NodeUtil.isExpressionNode(n)&&    NodeUtil.hasFinally(node))    {    	non-compiled	[CE]  cannot  find  symbol	164	None	replace
180	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  NodeUtil.hasFinally(node)||  NodeUtil.hasFinally(node))  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  NodeUtil.hasFinally(node)||  NodeUtil.hasFinally(node))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isExpressionNode(n)&&  NodeUtil.hasFinally(node)||  NodeUtil.hasFinally(node))  {	  if(NodeUtil.isExpressionNode(n)&&    NodeUtil.hasFinally(node))    {    	non-compiled	[CE]  cannot  find  symbol	164	None	replace
181	[BUG]  [BUGGY]  NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(n))  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(n))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(n))  {	  if(NodeUtil.hasFinally(n)||    NodeUtil.hasFinally(n))    {    NodeUtil.hasFinally(n)||    NodeUtil.hasFinally(n))    {    	non-compiled	[CE]  not  a  statement	10	None	replace
182	[BUG]  [BUGGY]  NodeUtil.hasFinally(catchNode)||  NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(n))  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  NodeUtil.hasFinally(catchNode)||  NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(n))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	NodeUtil.hasFinally(catchNode)||  NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(n))  {	  if(NodeUtil.hasFinally(n)||    NodeUtil.hasFinally(n))    {    NodeUtil.hasFinally(n)||    NodeUtil.hasFinally(n))    {    	non-compiled	[CE]  not  a  statement	10	None	replace
183	[BUG]  [BUGGY]  NodeUtil.hasFinally(callNode)||  NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(n))  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  NodeUtil.hasFinally(callNode)||  NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(n))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	NodeUtil.hasFinally(callNode)||  NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(n))  {	  if(NodeUtil.hasFinally(n)||    NodeUtil.hasFinally(n))    {    NodeUtil.hasFinally(n)||    NodeUtil.hasFinally(n))    {    	non-compiled	[CE]  not  a  statement	10	None	replace
184	[BUG]  [BUGGY]  NodeUtil.isFinally(n)||  NodeUtil.hasFinally(n))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  NodeUtil.isFinally(n)||  NodeUtil.hasFinally(n))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	NodeUtil.isFinally(n)||  NodeUtil.hasFinally(n))  {	  if(NodeUtil.hasFinally(n)||    NodeUtil.hasFinally(n))    {    NodeUtil.hasFinally(n)||    NodeUtil.hasFinally(n))    {    	non-compiled	[CE]  not  a  statement	10	None	replace
185	[BUG]  [BUGGY]  Node  n  =  allCatchNodes.get(c,  exitType);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Node  n  =  allCatchNodes.get(c,  exitType);  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  n  =  allCatchNodes.get(c,  exitType);	  Node    n    =    allCatchNodes.get(c);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
186	[BUG]  [BUGGY]  Node  n  =  allCatchNodes.get(c,  catchNode);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Node  n  =  allCatchNodes.get(c,  catchNode);  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  n  =  allCatchNodes.get(c,  catchNode);	  Node    n    =    allCatchNodes.get(c);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
187	[BUG]  [BUGGY]  Node  n  =  allCatchNodes.get(labelName);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Node  n  =  allCatchNodes.get(labelName);  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  n  =  allCatchNodes.get(labelName);	  Node    n    =    allCatchNodes.get(c);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
188	[BUG]  [BUGGY]  Node  finallyBlock  =  catchNode.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  [CE]  illegal  start  of  type  [FE]            RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Node  finallyBlock  =  catchNode.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  finallyBlock  =  catchNode.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);	  if(NodeUtil.hasFinally(allCatchNodes))    {    Node    finallyBlock    =    n.getLastChild();    tryMinimizeExits(finallyBlock,    exitType,    labelName);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
189	[BUG]  [BUGGY]  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  [CE]  illegal  start  of  type  [FE]              RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);	  if(NodeUtil.hasFinally(allCatchNodes))    {    Node    finallyBlock    =    n.getLastChild();    tryMinimizeExits(finallyBlock,    exitType,    labelName);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
190	[BUG]  [BUGGY]  Node  finallyBlock  =  catchNode.getLastChild();  [CE]  illegal  start  of  type  [FE]                RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Node  finallyBlock  =  catchNode.getLastChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  finallyBlock  =  catchNode.getLastChild();	  if(NodeUtil.hasFinally(allCatchNodes))    {    Node    finallyBlock    =    n.getLastChild();    tryMinimizeExits(finallyBlock,    exitType,    labelName);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
191	[BUG]  [BUGGY]  Node  finallyBlock  =  n.getFirstChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  [CE]  illegal  start  of  type  [FE]                  RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Node  finallyBlock  =  n.getFirstChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  finallyBlock  =  n.getFirstChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);	  if(NodeUtil.hasFinally(allCatchNodes))    {    Node    finallyBlock    =    n.getLastChild();    tryMinimizeExits(finallyBlock,    exitType,    labelName);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
192	[BUG]  [BUGGY]  Node  elseBlock  =  n.getLastChild();  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Node  elseBlock  =  n.getLastChild();  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  elseBlock  =  n.getLastChild();	  Node    elseBlock    =    allCatchNodes.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
193	[BUG]  [BUGGY]  Node  finallyBlock  =  allCatchNodes.getLastChild();  [CE]  illegal  start  of  type  [FE]        RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Node  finallyBlock  =  allCatchNodes.getLastChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  finallyBlock  =  allCatchNodes.getLastChild();	  if(NodeUtil.hasFinally(allCatchNodes))    {    Node    finallyBlock    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	141	None	replace
194	[BUG]  [BUGGY]  Node  finallyBlock  =  allCatchNodes.getFirstChild();  [CE]  illegal  start  of  type  [FE]          RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Node  finallyBlock  =  allCatchNodes.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  finallyBlock  =  allCatchNodes.getFirstChild();	  if(NodeUtil.hasFinally(allCatchNodes))    {    Node    finallyBlock    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	141	None	replace
195	[BUG]  [BUGGY]  Node  finallyBlock  =  n.getFirstChild();  [CE]  illegal  start  of  type  [FE]            RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Node  finallyBlock  =  n.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  finallyBlock  =  n.getFirstChild();	  if(NodeUtil.hasFinally(allCatchNodes))    {    Node    finallyBlock    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	141	None	replace
196	[BUG]  [BUGGY]  Node  nextBlock  =  n.getFirstChild();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Node  nextBlock  =  n.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  nextBlock  =  n.getFirstChild();	  Node    nextBlock    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	131	None	replace
197	[BUG]  [BUGGY]  Node  nextBlock  =  allCatchNodes.getLastChild();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Node  nextBlock  =  allCatchNodes.getLastChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  nextBlock  =  allCatchNodes.getLastChild();	  Node    nextBlock    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	131	None	replace
198	[BUG]  [BUGGY]  Node  nextBlock  =  catchNode.getFirstChild();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Node  nextBlock  =  catchNode.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  nextBlock  =  catchNode.getFirstChild();	  Node    nextBlock    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	131	None	replace
199	[BUG]  [BUGGY]  Node  nextBlock  =  n.getLastChild();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Node  nextBlock  =  n.getLastChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  nextBlock  =  n.getLastChild();	  Node    nextBlock    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	131	None	replace
200	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  [CE]  illegal  start  of  type  [FE]          RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(allCatchNodes.hasOneChild());	  Preconditions.checkArgument(n.hasOneChild());    	non-compiled	[CE]  illegal  start  of  type	163	None	replace
201	[BUG]  [BUGGY]  Preconditions.checkState(catchNode.hasOneChild());  [CE]  illegal  start  of  type  [FE]            RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(catchNode.hasOneChild());  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(catchNode.hasOneChild());	  Preconditions.checkArgument(n.hasOneChild());    	non-compiled	[CE]  illegal  start  of  type	163	None	replace
202	[BUG]  [BUGGY]  Preconditions.checkState(catchNodes.hasOneChild());  [CE]  illegal  start  of  type  [FE]              RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(catchNodes.hasOneChild());  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(catchNodes.hasOneChild());	  Preconditions.checkArgument(n.hasOneChild());    	non-compiled	[CE]  illegal  start  of  type	163	None	replace
203	[BUG]  [BUGGY]  if(NodeUtil.isCatchHandler(n)&&  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isCatchHandler(n)&&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isCatchHandler(n)&&  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.isCatchHandler(n)||    NodeUtil.hasFinally(n))    {    	non-compiled	[CE]  cannot  find  symbol	176	None	replace
204	[BUG]  [BUGGY]  if(NodeUtil.isCatchHandler(n)||  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isCatchHandler(n)||  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isCatchHandler(n)||  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.isCatchHandler(n)||    NodeUtil.hasFinally(n))    {    	non-compiled	[CE]  cannot  find  symbol	176	None	replace
205	[BUG]  [BUGGY]  if(NodeUtil.isCatchHandler(n)&&  NodeUtil.hasFinally(n))  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isCatchHandler(n)&&  NodeUtil.hasFinally(n))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isCatchHandler(n)&&  NodeUtil.hasFinally(n))  {	  if(NodeUtil.isCatchHandler(n)||    NodeUtil.hasFinally(n))    {    	non-compiled	[CE]  cannot  find  symbol	176	None	replace
206	[BUG]  [BUGGY]  if(NodeUtil.isCatchHandler(allCatchNodes)||  NodeUtil.hasFinally(n))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isCatchHandler(allCatchNodes)||  NodeUtil.hasFinally(n))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isCatchHandler(allCatchNodes)||  NodeUtil.hasFinally(n))  {	  if(NodeUtil.isCatchHandler(n)||    NodeUtil.hasFinally(n))    {    	non-compiled	[CE]  cannot  find  symbol	176	None	replace
207	[BUG]  [BUGGY]  if(NodeUtil.isCatchHandler(catchNode)||  NodeUtil.hasFinally(n))  {  [CE]  cannot  find  symbol  catchNode  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isCatchHandler(catchNode)||  NodeUtil.hasFinally(n))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isCatchHandler(catchNode)||  NodeUtil.hasFinally(n))  {	  if(NodeUtil.isCatchHandler(n)||    NodeUtil.hasFinally(n))    {    	non-compiled	[CE]  cannot  find  symbol  catchNode	176	None	replace
208	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]        RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isExpressionNode(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isExpressionNode(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.isExpressionNode(n)||    NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	160	None	replace
209	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(c)||  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  cannot  find  symbol  c  [FE]          RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isExpressionNode(c)||  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isExpressionNode(c)||  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.isExpressionNode(n)||    NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol  c	160	None	replace
210	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(callNode)||  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  cannot  find  symbol  callNode  [FE]            RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isExpressionNode(callNode)||  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isExpressionNode(callNode)||  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.isExpressionNode(n)||    NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol  callNode	160	None	replace
211	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  NodeUtil.hasFinally(allCatchNodes.getFirstChild()))  {  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  NodeUtil.hasFinally(allCatchNodes.getFirstChild()))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isExpressionNode(n)&&  NodeUtil.hasFinally(allCatchNodes.getFirstChild()))  {	  if(NodeUtil.isExpressionNode(n)&&    NodeUtil.hasFinally(n.getFirstChild()))    {    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
212	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  NodeUtil.hasFinally(n,  catchNode.getFirstChild()))  {  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  NodeUtil.hasFinally(n,  catchNode.getFirstChild()))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isExpressionNode(n)&&  NodeUtil.hasFinally(n,  catchNode.getFirstChild()))  {	  if(NodeUtil.isExpressionNode(n)&&    NodeUtil.hasFinally(n.getFirstChild()))    {    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
213	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  NodeUtil.hasFinally(n,  allCatchNodes.getFirstChild()))  {  [CE]  cannot  find  symbol  [FE]                RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  NodeUtil.hasFinally(n,  allCatchNodes.getFirstChild()))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isExpressionNode(n)&&  NodeUtil.hasFinally(n,  allCatchNodes.getFirstChild()))  {	  if(NodeUtil.isExpressionNode(n)&&    NodeUtil.hasFinally(n.getFirstChild()))    {    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
214	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  NodeUtil.hasFinally(catchNode.getFirstChild()))  {  [CE]  cannot  find  symbol  [FE]                  RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  NodeUtil.hasFinally(catchNode.getFirstChild()))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isExpressionNode(n)&&  NodeUtil.hasFinally(catchNode.getFirstChild()))  {	  if(NodeUtil.isExpressionNode(n)&&    NodeUtil.hasFinally(n.getFirstChild()))    {    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
215	[BUG]  [BUGGY]  if(NodeUtil.isFinally(allCatchNodes)&&  NodeUtil.hasFinally(n,  allCatchNodes.getFirstChild()))  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isFinally(allCatchNodes)&&  NodeUtil.hasFinally(n,  allCatchNodes.getFirstChild()))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isFinally(allCatchNodes)&&  NodeUtil.hasFinally(n,  allCatchNodes.getFirstChild()))  {	  if(NodeUtil.isFinally(n)&&    NodeUtil.hasFinally(n,    allCatchNodes.getFirstChild()))    {    	non-compiled	[CE]  cannot  find  symbol	139	None	replace
216	[BUG]  [BUGGY]  if(NodeUtil.isFinally(allCatchNodes)&&  NodeUtil.hasFinally(n,  n.getFirstChild()))  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isFinally(allCatchNodes)&&  NodeUtil.hasFinally(n,  n.getFirstChild()))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isFinally(allCatchNodes)&&  NodeUtil.hasFinally(n,  n.getFirstChild()))  {	  if(NodeUtil.isFinally(n)&&    NodeUtil.hasFinally(n,    allCatchNodes.getFirstChild()))    {    	non-compiled	[CE]  cannot  find  symbol	139	None	replace
217	[BUG]  [BUGGY]  if(NodeUtil.isFinally(n)&&  NodeUtil.hasFinally(allCatchNodes,  n.getFirstChild()))  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isFinally(n)&&  NodeUtil.hasFinally(allCatchNodes,  n.getFirstChild()))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isFinally(n)&&  NodeUtil.hasFinally(allCatchNodes,  n.getFirstChild()))  {	  if(NodeUtil.isFinally(n)&&    NodeUtil.hasFinally(n,    allCatchNodes.getFirstChild()))    {    	non-compiled	[CE]  cannot  find  symbol	139	None	replace
218	[BUG]  [BUGGY]  if(NodeUtil.isFinally(allCatchNodes)&&  NodeUtil.hasFinally(n,  node.getFirstChild()))  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isFinally(allCatchNodes)&&  NodeUtil.hasFinally(n,  node.getFirstChild()))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isFinally(allCatchNodes)&&  NodeUtil.hasFinally(n,  node.getFirstChild()))  {	  if(NodeUtil.isFinally(n)&&    NodeUtil.hasFinally(n,    allCatchNodes.getFirstChild()))    {    	non-compiled	[CE]  cannot  find  symbol	139	None	replace
219	[BUG]  [BUGGY]  if(NodeUtil.isName(allCatchNodes)&&  NodeUtil.hasFinally(n,  allCatchNodes.getFirstChild()))  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isName(allCatchNodes)&&  NodeUtil.hasFinally(n,  allCatchNodes.getFirstChild()))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isName(allCatchNodes)&&  NodeUtil.hasFinally(n,  allCatchNodes.getFirstChild()))  {	  if(NodeUtil.isFinally(n)&&    NodeUtil.hasFinally(n,    allCatchNodes.getFirstChild()))    {    	non-compiled	[CE]  cannot  find  symbol	139	None	replace
220	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(n))  {  if(NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(n))  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(n))  {  if(NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(n))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(allCatchNodes)||    NodeUtil.hasFinally(n))    {    if(NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(n))  {	  	non-compiled	[CE]  illegal  start  of  expression	117	None	add
221	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(n))  {  If(NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(n))  {  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(n))  {  If(NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(n))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(allCatchNodes)||    NodeUtil.hasFinally(n))    {    If(NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(n))  {	  	non-compiled	[CE]  ';'  expected	117	None	add
222	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(n))  {  if(NodeUtil.isFinally(allCatchNodes)||  NodeUtil.hasFinally(n))  {  [CE]  illegal  start  of  expression  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(n))  {  if(NodeUtil.isFinally(allCatchNodes)||  NodeUtil.hasFinally(n))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(allCatchNodes)||    NodeUtil.hasFinally(n))    {    if(NodeUtil.isFinally(allCatchNodes)||  NodeUtil.hasFinally(n))  {	  	non-compiled	[CE]  illegal  start  of  expression	117	None	add
223	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(callNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  cannot  find  symbol  callNodes  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.hasFinally(callNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(callNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.hasFinally(allCatchNodes)&&    NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol  callNodes	110	None	replace
224	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(catchNodes)&&  NodeUtil.hasFinally(catchNodes))  {  [CE]  cannot  find  symbol  catchNodes  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.hasFinally(catchNodes)&&  NodeUtil.hasFinally(catchNodes))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(catchNodes)&&  NodeUtil.hasFinally(catchNodes))  {	  if(NodeUtil.hasFinally(allCatchNodes)&&    NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol  catchNodes	110	None	replace
225	[BUG]  [BUGGY]  Node  c  =  allCatchNodes.getChildCount()  -  1;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Node  c  =  allCatchNodes.getChildCount()  -  1;  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  c  =  allCatchNodes.getChildCount()  -  1;	  Node    c    =    allCatchNodes.getChildCount();    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
226	[BUG]  [BUGGY]  Node  c  =  catchNode.getChildCount();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Node  c  =  catchNode.getChildCount();  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  c  =  catchNode.getChildCount();	  Node    c    =    allCatchNodes.getChildCount();    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
227	[BUG]  [BUGGY]  Node  c  =  allCatchNodes.getChildCount()  +  1;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Node  c  =  allCatchNodes.getChildCount()  +  1;  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  c  =  allCatchNodes.getChildCount()  +  1;	  Node    c    =    allCatchNodes.getChildCount();    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
228	[BUG]  [BUGGY]  Node  finallyBlock  =  catchNode.getFirstChild();  [CE]  illegal  start  of  type  [FE]          RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Node  finallyBlock  =  catchNode.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  finallyBlock  =  catchNode.getFirstChild();	  if(NodeUtil.hasFinally(allCatchNodes))    {    Node    finallyBlock    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	142	None	replace
229	[BUG]  [BUGGY]  Node  finallyBlock  =  catchNodes.getFirstChild();  [CE]  illegal  start  of  type  [FE]            RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Node  finallyBlock  =  catchNodes.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  finallyBlock  =  catchNodes.getFirstChild();	  if(NodeUtil.hasFinally(allCatchNodes))    {    Node    finallyBlock    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	142	None	replace
230	[BUG]  [BUGGY]          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  anotherBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  anotherBlock  =  allCatchNodes.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  anotherBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  anotherBlock  =  allCatchNodes.getFirstChild();  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	                Node        elseBlock        =        allCatchNodes.getFirstChild();        Node    anotherBlock    =    allCatchNodes.getFirstChild();    Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  anotherBlock  =  allCatchNodes.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	17	None	add
231	[BUG]  [BUGGY]          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  anotherBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  anotherBlock  =  allCatchNodes.getLastChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  anotherBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  anotherBlock  =  allCatchNodes.getLastChild();  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	                Node        elseBlock        =        allCatchNodes.getFirstChild();        Node    anotherBlock    =    allCatchNodes.getFirstChild();    Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  anotherBlock  =  allCatchNodes.getLastChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	17	None	add
232	[BUG]  [BUGGY]          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  anotherBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  otherBlock.getFirstChild();  Node  anotherBlock  =  allCatchNodes.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  anotherBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  otherBlock.getFirstChild();  Node  anotherBlock  =  allCatchNodes.getFirstChild();  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	                Node        elseBlock        =        allCatchNodes.getFirstChild();        Node    anotherBlock    =    allCatchNodes.getFirstChild();    Node  elseBlock  =  otherBlock.getFirstChild();  Node  anotherBlock  =  allCatchNodes.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	17	None	add
233	[BUG]  [BUGGY]          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  anotherBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getLastChild();  Node  anotherBlock  =  allCatchNodes.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  anotherBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getLastChild();  Node  anotherBlock  =  allCatchNodes.getFirstChild();  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	                Node        elseBlock        =        allCatchNodes.getFirstChild();        Node    anotherBlock    =    allCatchNodes.getFirstChild();    Node  elseBlock  =  allCatchNodes.getLastChild();  Node  anotherBlock  =  allCatchNodes.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	17	None	add
234	[BUG]  [BUGGY]          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  anotherBlock  =  allCatchNodes.getFirstChild();  Node  otherBlock  =  allCatchNodes.getFirstChild();  Node  anotherBlock  =  allCatchNodes.getFirstChild();  [CE]  variable  anotherBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]            AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  anotherBlock  =  allCatchNodes.getFirstChild();  Node  otherBlock  =  allCatchNodes.getFirstChild();  Node  anotherBlock  =  allCatchNodes.getFirstChild();  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	                Node        elseBlock        =        allCatchNodes.getFirstChild();        Node    anotherBlock    =    allCatchNodes.getFirstChild();    Node  otherBlock  =  allCatchNodes.getFirstChild();  Node  anotherBlock  =  allCatchNodes.getFirstChild();	  	non-compiled	[CE]  variable  anotherBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	17	None	add
235	[BUG]  [BUGGY]  Node  elseBlock  =  catchNodes.getParent();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Node  elseBlock  =  catchNodes.getParent();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  elseBlock  =  catchNodes.getParent();	  Node    elseBlock    =    catchNode.getParent();    	non-compiled	[CE]  illegal  start  of  type	157	None	replace
236	[BUG]  [BUGGY]  Node  n  =  allCatchNodes.getFirstChild();  Preconditions.checkState(n.hasOneChild());  [CE]  illegal  start  of  type  [FE]            RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Node  n  =  allCatchNodes.getFirstChild();  Preconditions.checkState(n.hasOneChild());  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  n  =  allCatchNodes.getFirstChild();  Preconditions.checkState(n.hasOneChild());	          Preconditions.checkState(n.hasOneChild());    Node    n    =    allCatchNodes.getFirstChild();    Preconditions.checkState(n.hasOneChild());    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
237	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  n  =  allCatchNodes.getFirstChild();  Preconditions.checkState(n.hasOneChild());  [CE]  illegal  start  of  type  [FE]              RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  n  =  allCatchNodes.getFirstChild();  Preconditions.checkState(n.hasOneChild());  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(allCatchNodes.hasOneChild());  Node  n  =  allCatchNodes.getFirstChild();  Preconditions.checkState(n.hasOneChild());	          Preconditions.checkState(n.hasOneChild());    Node    n    =    allCatchNodes.getFirstChild();    Preconditions.checkState(n.hasOneChild());    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
238	[BUG]  [BUGGY]  n  =  allCatchNodes.getFirstChild();  Preconditions.checkState(n.hasOneChild());  [CE]  illegal  start  of  type  [FE]                RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  n  =  allCatchNodes.getFirstChild();  Preconditions.checkState(n.hasOneChild());  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	n  =  allCatchNodes.getFirstChild();  Preconditions.checkState(n.hasOneChild());	          Preconditions.checkState(n.hasOneChild());    Node    n    =    allCatchNodes.getFirstChild();    Preconditions.checkState(n.hasOneChild());    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
239	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(n.getLastChild()))  {  if(NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(n.getLastChild()))  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(n.getLastChild()))  {  if(NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(n.getLastChild()))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(n)&&    NodeUtil.hasFinally(n.getLastChild()))    {    if(NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(n.getLastChild()))  {	  	non-compiled	[CE]  illegal  start  of  expression	135	None	add
240	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(n.getLastChild()))  {  If(NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(n.getLastChild()))  {  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(n.getLastChild()))  {  If(NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(n.getLastChild()))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(n)&&    NodeUtil.hasFinally(n.getLastChild()))    {    If(NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(n.getLastChild()))  {	  	non-compiled	[CE]  ';'  expected	135	None	add
241	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(n.getLastChild()))  {  if(NodeUtil.hasFinally(n)&&  nodeUtil.hasFinally(n.getLastChild()))  {  [CE]  illegal  start  of  expression  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(n.getLastChild()))  {  if(NodeUtil.hasFinally(n)&&  nodeUtil.hasFinally(n.getLastChild()))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(n)&&    NodeUtil.hasFinally(n.getLastChild()))    {    if(NodeUtil.hasFinally(n)&&  nodeUtil.hasFinally(n.getLastChild()))  {	  	non-compiled	[CE]  illegal  start  of  expression	135	None	add
242	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(n.getLastChild()))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  [CE]  illegal  start  of  expression  [FE]          RuntimeException    [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(n.getLastChild()))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(n)&&    NodeUtil.hasFinally(n.getLastChild()))    {    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);	  	non-compiled	[CE]  illegal  start  of  expression	135	None	add
243	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(catchNode)&&  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  cannot  find  symbol  catchNode  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.hasFinally(catchNode)&&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(catchNode)&&  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.hasFinally(n)&&    NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol  catchNode	77	None	replace
244	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(c)&&  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  cannot  find  symbol  c  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.hasFinally(c)&&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(c)&&  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.hasFinally(n)&&    NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol  c	77	None	replace
245	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(callNode)&&  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  cannot  find  symbol  callNode  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.hasFinally(callNode)&&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(callNode)&&  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.hasFinally(n)&&    NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol  callNode	77	None	replace
246	[BUG]  [BUGGY]  NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(n.getFirstChild()))  {  [CE]  not  a  statement  [FE]        RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(n.getFirstChild()))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(n.getFirstChild()))  {	  if(NodeUtil.hasFinally(n)&&    NodeUtil.hasFinally(n.getFirstChild()))    {    NodeUtil.hasFinally(n)&&    NodeUtil.hasFinally(n.getFirstChild()))    {    	non-compiled	[CE]  not  a  statement	123	None	replace
247	[BUG]  [BUGGY]  NodeUtil.hasFinally(catchNode)&&  NodeUtil.hasFinally(n.getFirstChild()))  {  [CE]  not  a  statement  [FE]          RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  NodeUtil.hasFinally(catchNode)&&  NodeUtil.hasFinally(n.getFirstChild()))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	NodeUtil.hasFinally(catchNode)&&  NodeUtil.hasFinally(n.getFirstChild()))  {	  if(NodeUtil.hasFinally(n)&&    NodeUtil.hasFinally(n.getFirstChild()))    {    NodeUtil.hasFinally(n)&&    NodeUtil.hasFinally(n.getFirstChild()))    {    	non-compiled	[CE]  not  a  statement	123	None	replace
248	[BUG]  [BUGGY]  NodeUtil.isFinally(n)&&  NodeUtil.hasFinally(n.getFirstChild()))  {  [CE]  not  a  statement  [FE]            RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  NodeUtil.isFinally(n)&&  NodeUtil.hasFinally(n.getFirstChild()))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	NodeUtil.isFinally(n)&&  NodeUtil.hasFinally(n.getFirstChild()))  {	  if(NodeUtil.hasFinally(n)&&    NodeUtil.hasFinally(n.getFirstChild()))    {    NodeUtil.hasFinally(n)&&    NodeUtil.hasFinally(n.getFirstChild()))    {    	non-compiled	[CE]  not  a  statement	123	None	replace
249	[BUG]  [BUGGY]  NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(n.getLastChild()))  {  [CE]  not  a  statement  [FE]              RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(n.getLastChild()))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(n.getLastChild()))  {	  if(NodeUtil.hasFinally(n)&&    NodeUtil.hasFinally(n.getFirstChild()))    {    NodeUtil.hasFinally(n)&&    NodeUtil.hasFinally(n.getFirstChild()))    {    	non-compiled	[CE]  not  a  statement	123	None	replace
250	[BUG]  [BUGGY]  Node  n  =  allNodes.getLastChild();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Node  n  =  allNodes.getLastChild();  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  n  =  allNodes.getLastChild();	  Node    n    =    allNodes.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
251	[BUG]  [BUGGY]  if(NodeUtil.isFinally(n)||  NodeUtil.hasFinally(catchNode))  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isFinally(n)||  NodeUtil.hasFinally(catchNode))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isFinally(n)||  NodeUtil.hasFinally(catchNode))  {	  if(NodeUtil.isFinally(n)||    NodeUtil.hasFinally(node))    {    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
252	[BUG]  [BUGGY]  if(NodeUtil.isFinally(node)||  NodeUtil.hasFinally(node))  {  [CE]  cannot  find  symbol  node  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isFinally(node)||  NodeUtil.hasFinally(node))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isFinally(node)||  NodeUtil.hasFinally(node))  {	  if(NodeUtil.isFinally(n)||    NodeUtil.hasFinally(node))    {    	non-compiled	[CE]  cannot  find  symbol  node	70	None	replace
253	[BUG]  [BUGGY]  if(NodeUtil.isName(n)||  NodeUtil.hasFinally(node))  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isName(n)||  NodeUtil.hasFinally(node))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isName(n)||  NodeUtil.hasFinally(node))  {	  if(NodeUtil.isFinally(n)||    NodeUtil.hasFinally(node))    {    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
254	[BUG]  [BUGGY]  Preconditions.checkState(n.isFinally()  &&  catchNode.getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  type  [FE]        RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(n.isFinally()  &&  catchNode.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(n.isFinally()  &&  catchNode.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(n.isFinally());    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
255	[BUG]  [BUGGY]  Preconditions.checkState(n.isFinally()  &&  catchNode.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  type  [FE]          RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(n.isFinally()  &&  catchNode.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(n.isFinally()  &&  catchNode.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.isFinally());    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
256	[BUG]  [BUGGY]  Preconditions.checkState(n.isFinally()  ||  catchNode.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  type  [FE]            RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(n.isFinally()  ||  catchNode.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(n.isFinally()  ||  catchNode.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.isFinally());    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
257	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  elseBlock  =  allCatchNodes.getFirstChild();  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  elseBlock  =  allCatchNodes.getFirstChild();  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(allCatchNodes.hasOneChild());  Node  elseBlock  =  allCatchNodes.getFirstChild();	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    elseBlock    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
258	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.getFirstChild()  ==  null);  Node  elseBlock  =  allCatchNodes.getFirstChild();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(allCatchNodes.getFirstChild()  ==  null);  Node  elseBlock  =  allCatchNodes.getFirstChild();  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(allCatchNodes.getFirstChild()  ==  null);  Node  elseBlock  =  allCatchNodes.getFirstChild();	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    elseBlock    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
259	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.getFirstChild()!=  null);  Node  elseBlock  =  allCatchNodes.getFirstChild();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(allCatchNodes.getFirstChild()!=  null);  Node  elseBlock  =  allCatchNodes.getFirstChild();  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(allCatchNodes.getFirstChild()!=  null);  Node  elseBlock  =  allCatchNodes.getFirstChild();	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    elseBlock    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
260	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.getFirstChild()  ==  n);  Node  elseBlock  =  allCatchNodes.getFirstChild();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(allCatchNodes.getFirstChild()  ==  n);  Node  elseBlock  =  allCatchNodes.getFirstChild();  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(allCatchNodes.getFirstChild()  ==  n);  Node  elseBlock  =  allCatchNodes.getFirstChild();	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    elseBlock    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
261	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  thenBlock  =  allCatchNodes.getLastChild();  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  thenBlock  =  allCatchNodes.getLastChild();  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  thenBlock  =  allCatchNodes.getLastChild();	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    thenBlock    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
262	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getLastChild();  Node  thenBlock  =  allCatchNodes.getFirstChild();  [CE]  illegal  start  of  type  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Node  elseBlock  =  allCatchNodes.getLastChild();  Node  thenBlock  =  allCatchNodes.getFirstChild();  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  elseBlock  =  allCatchNodes.getLastChild();  Node  thenBlock  =  allCatchNodes.getFirstChild();	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    thenBlock    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
263	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  thenBlock  =  allCatchNodes.getFirstChild();  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  thenBlock  =  allCatchNodes.getFirstChild();  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(allCatchNodes.hasOneChild());  Node  thenBlock  =  allCatchNodes.getFirstChild();	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    thenBlock    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
264	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(allCatchNodes)&&    NodeUtil.hasFinally(allCatchNodes))    {    if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {	  	non-compiled	[CE]  illegal  start  of  expression	109	None	add
265	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  If(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  If(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(allCatchNodes)&&    NodeUtil.hasFinally(allCatchNodes))    {    If(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {	  	non-compiled	[CE]  ';'  expected	109	None	add
266	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  [CE]  illegal  start  of  expression  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(allCatchNodes)&&    NodeUtil.hasFinally(allCatchNodes))    {    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);	  	non-compiled	[CE]  illegal  start  of  expression	109	None	add
267	[BUG]  [BUGGY]  Node  c  =  allCatchNodes.getFirstChild();  System.arraycopy(c,  0,  tryMinimizeExits(c,  exitType,  labelName);  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Node  c  =  allCatchNodes.getFirstChild();  System.arraycopy(c,  0,  tryMinimizeExits(c,  exitType,  labelName);  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  c  =  allCatchNodes.getFirstChild();  System.arraycopy(c,  0,  tryMinimizeExits(c,  exitType,  labelName);	          Node    c    =    allCatchNodes.getFirstChild();    Node    c    =    allCatchNodes.getFirstChild();    System.arraycopy(c,    0,    tryMinimizeExits(c,    exitType,    labelName);    	non-compiled	[CE]  ')'  expected	133	None	replace
268	[BUG]  [BUGGY]  n  =  allCatchNodes.getFirstChild();  Node  c  =  allCatchNodes.getFirstChild();  System.arraycopy(c,  0,  tryMinimizeExits(c,  exitType,  labelName);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  n  =  allCatchNodes.getFirstChild();  Node  c  =  allCatchNodes.getFirstChild();  System.arraycopy(c,  0,  tryMinimizeExits(c,  exitType,  labelName);  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	n  =  allCatchNodes.getFirstChild();  Node  c  =  allCatchNodes.getFirstChild();  System.arraycopy(c,  0,  tryMinimizeExits(c,  exitType,  labelName);	          Node    c    =    allCatchNodes.getFirstChild();    Node    c    =    allCatchNodes.getFirstChild();    System.arraycopy(c,    0,    tryMinimizeExits(c,    exitType,    labelName);    	non-compiled	[CE]  ')'  expected	133	None	replace
269	[BUG]  [BUGGY]  Node  c  =  allCatchNodes.getFirstChild();  Node  c  =  allCatchNodes.getLastChild();  System.arraycopy(c,  0,  tryMinimizeExits(c,  exitType,  labelName);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Node  c  =  allCatchNodes.getFirstChild();  Node  c  =  allCatchNodes.getLastChild();  System.arraycopy(c,  0,  tryMinimizeExits(c,  exitType,  labelName);  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  c  =  allCatchNodes.getFirstChild();  Node  c  =  allCatchNodes.getLastChild();  System.arraycopy(c,  0,  tryMinimizeExits(c,  exitType,  labelName);	          Node    c    =    allCatchNodes.getFirstChild();    Node    c    =    allCatchNodes.getFirstChild();    System.arraycopy(c,    0,    tryMinimizeExits(c,    exitType,    labelName);    	non-compiled	[CE]  ')'  expected	133	None	replace
270	[BUG]  [BUGGY]  if(NodeUtil.isFinally(allCatchNodes)&&  NodeUtil.hasFinally(catchNode.getFirstChild()))  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isFinally(allCatchNodes)&&  NodeUtil.hasFinally(catchNode.getFirstChild()))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isFinally(allCatchNodes)&&  NodeUtil.hasFinally(catchNode.getFirstChild()))  {	  if(NodeUtil.isFinally(allCatchNodes)&&    NodeUtil.hasFinally(n.getFirstChild()))    {    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
271	[BUG]  [BUGGY]  if(NodeUtil.isFinally(allCatchNodes)&&  NodeUtil.hasFinally(n.getLastChild()))  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isFinally(allCatchNodes)&&  NodeUtil.hasFinally(n.getLastChild()))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isFinally(allCatchNodes)&&  NodeUtil.hasFinally(n.getLastChild()))  {	  if(NodeUtil.isFinally(allCatchNodes)&&    NodeUtil.hasFinally(n.getFirstChild()))    {    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
272	[BUG]  [BUGGY]          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  otherBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  otherBlock  =  allCatchNodes.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  otherBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  otherBlock  =  allCatchNodes.getFirstChild();  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	                Node        elseBlock        =        allCatchNodes.getFirstChild();        Node    otherBlock    =    allCatchNodes.getFirstChild();    Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  otherBlock  =  allCatchNodes.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	13	None	add
273	[BUG]  [BUGGY]          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  otherBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  otherBlock  =  allCatchNodes.getLastChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  otherBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  otherBlock  =  allCatchNodes.getLastChild();  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	                Node        elseBlock        =        allCatchNodes.getFirstChild();        Node    otherBlock    =    allCatchNodes.getFirstChild();    Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  otherBlock  =  allCatchNodes.getLastChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	13	None	add
274	[BUG]  [BUGGY]          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  otherBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getLastChild();  Node  otherBlock  =  allCatchNodes.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  otherBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getLastChild();  Node  otherBlock  =  allCatchNodes.getFirstChild();  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	                Node        elseBlock        =        allCatchNodes.getFirstChild();        Node    otherBlock    =    allCatchNodes.getFirstChild();    Node  elseBlock  =  allCatchNodes.getLastChild();  Node  otherBlock  =  allCatchNodes.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	13	None	add
275	[BUG]  [BUGGY]          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  otherBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  anyCatchNodes.getFirstChild();  Node  otherBlock  =  allCatchNodes.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  otherBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  anyCatchNodes.getFirstChild();  Node  otherBlock  =  allCatchNodes.getFirstChild();  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	                Node        elseBlock        =        allCatchNodes.getFirstChild();        Node    otherBlock    =    allCatchNodes.getFirstChild();    Node  elseBlock  =  anyCatchNodes.getFirstChild();  Node  otherBlock  =  allCatchNodes.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	13	None	add
276	[BUG]  [BUGGY]          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  otherBlock  =  allCatchNodes.getFirstChild();  Node  otherBlock  =  allCatchNodes.getFirstChild();  Node  otherBlock  =  allCatchNodes.getFirstChild();  [CE]  variable  otherBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]            AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  otherBlock  =  allCatchNodes.getFirstChild();  Node  otherBlock  =  allCatchNodes.getFirstChild();  Node  otherBlock  =  allCatchNodes.getFirstChild();  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	                Node        elseBlock        =        allCatchNodes.getFirstChild();        Node    otherBlock    =    allCatchNodes.getFirstChild();    Node  otherBlock  =  allCatchNodes.getFirstChild();  Node  otherBlock  =  allCatchNodes.getFirstChild();	  	non-compiled	[CE]  variable  otherBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	13	None	add
277	[BUG]  [BUGGY]  if(NodeUtil.isName(n)&&  NodeUtil.hasFinally(n,  n.getFirstChild()))  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isName(n)&&  NodeUtil.hasFinally(n,  n.getFirstChild()))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isName(n)&&  NodeUtil.hasFinally(n,  n.getFirstChild()))  {	  if(NodeUtil.isFinally(n)&&    NodeUtil.hasFinally(n,    n.getFirstChild()))    {    	non-compiled	[CE]  cannot  find  symbol	140	None	replace
278	[BUG]  [BUGGY]  if(NodeUtil.isFinally(n)&&  NodeUtil.hasFinally(n,  n.getLastChild()))  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isFinally(n)&&  NodeUtil.hasFinally(n,  n.getLastChild()))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isFinally(n)&&  NodeUtil.hasFinally(n,  n.getLastChild()))  {	  if(NodeUtil.isFinally(n)&&    NodeUtil.hasFinally(n,    n.getFirstChild()))    {    	non-compiled	[CE]  cannot  find  symbol	140	None	replace
279	[BUG]  [BUGGY]  if(NodeUtil.isFinally(n)||  NodeUtil.hasFinally(n))  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isFinally(n)||  NodeUtil.hasFinally(n))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isFinally(n)||  NodeUtil.hasFinally(n))  {	  if(NodeUtil.isFinally(n)&&    NodeUtil.hasFinally(n))    {    	non-compiled	[CE]  cannot  find  symbol	119	None	replace
280	[BUG]  [BUGGY]  Preconditions.checkState(n.isExit()  &&  catchNode.getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  type  [FE]        RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(n.isExit()  &&  catchNode.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(n.isExit()  &&  catchNode.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(n.isExit());    	non-compiled	[CE]  illegal  start  of  type	175	None	replace
281	[BUG]  [BUGGY]  Preconditions.checkState(n.isExit()  &&  catchNode.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  type  [FE]          RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(n.isExit()  &&  catchNode.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(n.isExit()  &&  catchNode.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.isExit());    	non-compiled	[CE]  illegal  start  of  type	175	None	replace
282	[BUG]  [BUGGY]  If(NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  ';'  expected  [FE]          RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  If(NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	If(NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.hasFinally(n)||    NodeUtil.hasFinally(allCatchNodes))    {    If(NodeUtil.hasFinally(n)||    NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  ';'  expected	40	None	replace
283	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(c)||  NodeUtil.hasFinally(allCatchNodes))  {  If(NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  ';'  expected  [FE]            RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.hasFinally(c)||  NodeUtil.hasFinally(allCatchNodes))  {  If(NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(c)||  NodeUtil.hasFinally(allCatchNodes))  {  If(NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.hasFinally(n)||    NodeUtil.hasFinally(allCatchNodes))    {    If(NodeUtil.hasFinally(n)||    NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  ';'  expected	40	None	replace
284	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(c)||  NodeUtil.hasFinally(allCatchNodes))  {  If(NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(allCatchNodes)  [CE]  ')'  expected  [FE]              RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.hasFinally(c)||  NodeUtil.hasFinally(allCatchNodes))  {  If(NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(allCatchNodes)  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(c)||  NodeUtil.hasFinally(allCatchNodes))  {  If(NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(allCatchNodes)	  if(NodeUtil.hasFinally(n)||    NodeUtil.hasFinally(allCatchNodes))    {    If(NodeUtil.hasFinally(n)||    NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  ')'  expected	40	None	replace
285	[BUG]  [BUGGY]  Context.checkState(NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  ';'  expected  [FE]                RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Context.checkState(NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Context.checkState(NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.hasFinally(n)||    NodeUtil.hasFinally(allCatchNodes))    {    If(NodeUtil.hasFinally(n)||    NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  ';'  expected	40	None	replace
286	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(n))  {  if(NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(n))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(n))  {  if(NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(n))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(n)&&    NodeUtil.hasFinally(n))    {    if(NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(n))  {	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
287	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(n))  {  If(NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(n))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(n))  {  If(NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(n))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(n)&&    NodeUtil.hasFinally(n))    {    If(NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(n))  {	  	non-compiled	[CE]  ';'  expected	20	None	add
288	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(n)&&    NodeUtil.hasFinally(n))    {    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
289	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(n))  {  NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(n))  {  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(n))  {  NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(n))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(n)&&    NodeUtil.hasFinally(n))    {    NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(n))  {	  	non-compiled	[CE]  not  a  statement	20	None	add
290	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(n)&&    NodeUtil.hasFinally(n))    {    Node  finallyBlock  =  n.getLastChild();	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
291	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.isName(n,  allCatchNodes.getFirstChild()))  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.isName(n,  allCatchNodes.getFirstChild()))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.isName(n,  allCatchNodes.getFirstChild()))  {	  if(NodeUtil.hasFinally(n)&&    NodeUtil.isName(n,    allCatchNodes.getFirstChild()))    {    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
292	[BUG]  [BUGGY]  if(NodeUtil.isFinally(allCatchNodes)&&  NodeUtil.isName(n,  allCatchNodes.getFirstChild()))  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isFinally(allCatchNodes)&&  NodeUtil.isName(n,  allCatchNodes.getFirstChild()))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isFinally(allCatchNodes)&&  NodeUtil.isName(n,  allCatchNodes.getFirstChild()))  {	  if(NodeUtil.hasFinally(n)&&    NodeUtil.isName(n,    allCatchNodes.getFirstChild()))    {    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
293	[BUG]  [BUGGY]  if(NodeUtil.isName(allCatchNodes)&&  NodeUtil.hasFinally(n)&&  NodeUtil.isName(n,  allCatchNodes.getFirstChild()))  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isName(allCatchNodes)&&  NodeUtil.hasFinally(n)&&  NodeUtil.isName(n,  allCatchNodes.getFirstChild()))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isName(allCatchNodes)&&  NodeUtil.hasFinally(n)&&  NodeUtil.isName(n,  allCatchNodes.getFirstChild()))  {	  if(NodeUtil.hasFinally(n)&&    NodeUtil.isName(n,    allCatchNodes.getFirstChild()))    {    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
294	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.isName(n,  node.getFirstChild()))  {  [CE]  cannot  find  symbol  node  [FE]                        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.isName(n,  node.getFirstChild()))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.isName(n,  node.getFirstChild()))  {	  if(NodeUtil.hasFinally(n)&&    NodeUtil.isName(n,    allCatchNodes.getFirstChild()))    {    	non-compiled	[CE]  cannot  find  symbol  node	51	None	replace
295	[BUG]  [BUGGY]  if(NodeUtil.isFinally(allCatchNodes)&&  NodeUtil.isName(n,  node.getFirstChild()))  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isFinally(allCatchNodes)&&  NodeUtil.isName(n,  node.getFirstChild()))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isFinally(allCatchNodes)&&  NodeUtil.isName(n,  node.getFirstChild()))  {	  if(NodeUtil.hasFinally(n)&&    NodeUtil.isName(n,    allCatchNodes.getFirstChild()))    {    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
296	[BUG]  [BUGGY]  NodeUtil.checkState(n.isLabel());  [CE]  illegal  start  of  type  [FE]            RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  NodeUtil.checkState(n.isLabel());  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	NodeUtil.checkState(n.isLabel());	          Preconditions.checkState(n.isLabel());    NodeUtil.checkState(n.isLabel());    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
297	[BUG]  [BUGGY]  Preconditions.checkState(labelName.isLabel());  NodeUtil.checkState(n.isLabel());  [CE]  illegal  start  of  type  [FE]              RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(labelName.isLabel());  NodeUtil.checkState(n.isLabel());  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(labelName.isLabel());  NodeUtil.checkState(n.isLabel());	          Preconditions.checkState(n.isLabel());    NodeUtil.checkState(n.isLabel());    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
298	[BUG]  [BUGGY]  Preconditions.checkState(n.isLabel(),  c.isLabel());  NodeUtil.checkState(n.isLabel());  [CE]  illegal  start  of  type  [FE]                RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(n.isLabel(),  c.isLabel());  NodeUtil.checkState(n.isLabel());  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(n.isLabel(),  c.isLabel());  NodeUtil.checkState(n.isLabel());	          Preconditions.checkState(n.isLabel());    NodeUtil.checkState(n.isLabel());    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
299	[BUG]  [BUGGY]  Preconditions.checkState(n.isLabel(),  n.isLabel());  [CE]  illegal  start  of  type  [FE]                  RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(n.isLabel(),  n.isLabel());  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(n.isLabel(),  n.isLabel());	          Preconditions.checkState(n.isLabel());    NodeUtil.checkState(n.isLabel());    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
300	[BUG]  [BUGGY]  Node  c  =  allCatchNodes.get(catchNode);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Node  c  =  allCatchNodes.get(catchNode);  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  c  =  allCatchNodes.get(catchNode);	  Node    c    =    allCatchNodes.get(0);    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
301	[BUG]  [BUGGY]  Node  c  =  allCatchNodes.get(1);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Node  c  =  allCatchNodes.get(1);  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  c  =  allCatchNodes.get(1);	  Node    c    =    allCatchNodes.get(0);    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
302	[BUG]  [BUGGY]  Node  c  =  allCatchNodes.get(n);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Node  c  =  allCatchNodes.get(n);  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  c  =  allCatchNodes.get(n);	  Node    c    =    allCatchNodes.get(0);    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
303	[BUG]  [BUGGY]  if(NodeUtil.isFinally(catchNodes))  {  [CE]  cannot  find  symbol  catchNodes  [FE]          RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isFinally(catchNodes))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isFinally(catchNodes))  {	  if(NodeUtil.hasFinally(allCatchNodes))    {    if(NodeUtil.isFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol  catchNodes	29	None	replace
304	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(n.getFirstChild()));  [CE]  illegal  start  of  type  [FE]        RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(n.getFirstChild()));  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(n.getFirstChild()));	  if(NodeUtil.hasFinally(n)&&    NodeUtil.hasFinally(n.getFirstChild()))    {    if(NodeUtil.hasFinally(n)&&    NodeUtil.hasFinally(n.getFirstChild()))    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
305	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(allCatchNodes))  {  if(NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(allCatchNodes))  {  if(NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(n)&&    NodeUtil.hasFinally(allCatchNodes))    {    if(NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(allCatchNodes))  {	  	non-compiled	[CE]  illegal  start  of  expression	76	None	add
306	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(allCatchNodes))  {  If(NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(allCatchNodes))  {  If(NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(n)&&    NodeUtil.hasFinally(allCatchNodes))    {    If(NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(allCatchNodes))  {	  	non-compiled	[CE]  ';'  expected	76	None	add
307	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(allCatchNodes))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  [CE]  illegal  start  of  expression  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(allCatchNodes))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(n)&&    NodeUtil.hasFinally(allCatchNodes))    {    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);	  	non-compiled	[CE]  illegal  start  of  expression	76	None	add
308	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(labelName)&&  NodeUtil.isLabelHandler(n))  {  [CE]  method  hasFinally  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.hasFinally(labelName)&&  NodeUtil.isLabelHandler(n))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(labelName)&&  NodeUtil.isLabelHandler(n))  {	  if(NodeUtil.hasFinally(c)&&    NodeUtil.isLabelHandler(n))    {    	non-compiled	[CE]  method  hasFinally  in  class  NodeUtil  cannot  be  applied  to  given  types;	36	None	replace
309	[BUG]  [BUGGY]  Node  n  =  allCatchNodes.cloneTree();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Node  n  =  allCatchNodes.cloneTree();  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  n  =  allCatchNodes.cloneTree();	  Node    n    =    catchNode.cloneTree();    	non-compiled	[CE]  illegal  start  of  type	174	None	replace
310	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(n.getFirstChild()))  {  if(NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(n.getFirstChild()))  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(n.getFirstChild()))  {  if(NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(n.getFirstChild()))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(n)||    NodeUtil.hasFinally(n.getFirstChild()))    {    if(NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(n.getFirstChild()))  {	  	non-compiled	[CE]  illegal  start  of  expression	65	None	add
311	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(n.getFirstChild()))  {  if(NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(n.getLastChild()))  {  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(n.getFirstChild()))  {  if(NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(n.getLastChild()))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(n)||    NodeUtil.hasFinally(n.getFirstChild()))    {    if(NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(n.getLastChild()))  {	  	non-compiled	[CE]  illegal  start  of  expression	65	None	add
312	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(n.getFirstChild()))  {  If(NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(n.getFirstChild()))  {  [CE]  ';'  expected  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(n.getFirstChild()))  {  If(NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(n.getFirstChild()))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(n)||    NodeUtil.hasFinally(n.getFirstChild()))    {    If(NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(n.getFirstChild()))  {	  	non-compiled	[CE]  ';'  expected	65	None	add
313	[BUG]  [BUGGY]  Node  n  =  allCatchNodes.removeFirstChild();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Node  n  =  allCatchNodes.removeFirstChild();  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  n  =  allCatchNodes.removeFirstChild();	  Node    n    =    catchNodes.removeFirstChild();    	non-compiled	[CE]  illegal  start  of  type	167	None	replace
314	[BUG]  [BUGGY]  Node  n  =  catchNodes.getParent();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Node  n  =  catchNodes.getParent();  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  n  =  catchNodes.getParent();	  Node    n    =    catchNodes.getNext();    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
315	[BUG]  [BUGGY]          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  thenBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  thenBlock  =  allCatchNodes.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  thenBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  thenBlock  =  allCatchNodes.getFirstChild();  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	                Node        elseBlock        =        allCatchNodes.getFirstChild();        Node    thenBlock    =    allCatchNodes.getFirstChild();    Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  thenBlock  =  allCatchNodes.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	15	None	add
316	[BUG]  [BUGGY]          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  thenBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  thenBlock  =  allCatchNodes.getLastChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  thenBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  thenBlock  =  allCatchNodes.getLastChild();  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	                Node        elseBlock        =        allCatchNodes.getFirstChild();        Node    thenBlock    =    allCatchNodes.getFirstChild();    Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  thenBlock  =  allCatchNodes.getLastChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	15	None	add
317	[BUG]  [BUGGY]          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  thenBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getLastChild();  Node  thenBlock  =  allCatchNodes.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  thenBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getLastChild();  Node  thenBlock  =  allCatchNodes.getFirstChild();  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	                Node        elseBlock        =        allCatchNodes.getFirstChild();        Node    thenBlock    =    allCatchNodes.getFirstChild();    Node  elseBlock  =  allCatchNodes.getLastChild();  Node  thenBlock  =  allCatchNodes.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	15	None	add
318	[BUG]  [BUGGY]          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  thenBlock  =  allCatchNodes.getFirstChild();  Node  otherBlock  =  allCatchNodes.getFirstChild();  Node  thenBlock  =  allCatchNodes.getFirstChild();  [CE]  variable  thenBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  thenBlock  =  allCatchNodes.getFirstChild();  Node  otherBlock  =  allCatchNodes.getFirstChild();  Node  thenBlock  =  allCatchNodes.getFirstChild();  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	                Node        elseBlock        =        allCatchNodes.getFirstChild();        Node    thenBlock    =    allCatchNodes.getFirstChild();    Node  otherBlock  =  allCatchNodes.getFirstChild();  Node  thenBlock  =  allCatchNodes.getFirstChild();	  	non-compiled	[CE]  variable  thenBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	15	None	add
319	[BUG]  [BUGGY]          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  thenBlock  =  allCatchNodes.getFirstChild();  Node  anotherBlock  =  allCatchNodes.getFirstChild();  Node  thenBlock  =  allCatchNodes.getFirstChild();  [CE]  variable  thenBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]            AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  thenBlock  =  allCatchNodes.getFirstChild();  Node  anotherBlock  =  allCatchNodes.getFirstChild();  Node  thenBlock  =  allCatchNodes.getFirstChild();  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	                Node        elseBlock        =        allCatchNodes.getFirstChild();        Node    thenBlock    =    allCatchNodes.getFirstChild();    Node  anotherBlock  =  allCatchNodes.getFirstChild();  Node  thenBlock  =  allCatchNodes.getFirstChild();	  	non-compiled	[CE]  variable  thenBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	15	None	add
320	[BUG]  [BUGGY]  Node  n  =  allCatchNodes.get(callNode);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Node  n  =  allCatchNodes.get(callNode);  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  n  =  allCatchNodes.get(callNode);	  Node    n    =    allCatchNodes.get(n);    	non-compiled	[CE]  illegal  start  of  type	173	None	replace
321	[BUG]  [BUGGY]  Node  n  =  allCatchNodes.get(t);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Node  n  =  allCatchNodes.get(t);  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  n  =  allCatchNodes.get(t);	  Node    n    =    allCatchNodes.get(n);    	non-compiled	[CE]  illegal  start  of  type	173	None	replace
322	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(n,  labelName))  {  [CE]  method  hasFinally  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.hasFinally(n,  labelName))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(n,  labelName))  {	  if(NodeUtil.hasFinally(labelName))    {    	non-compiled	[CE]  method  hasFinally  in  class  NodeUtil  cannot  be  applied  to  given  types;	55	None	replace
323	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(labelName,  catchNode))  {  [CE]  cannot  find  symbol  catchNode  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.hasFinally(labelName,  catchNode))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(labelName,  catchNode))  {	  if(NodeUtil.hasFinally(labelName))    {    	non-compiled	[CE]  cannot  find  symbol  catchNode	55	None	replace
324	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(labelName,  exitType))  {  [CE]  method  hasFinally  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.hasFinally(labelName,  exitType))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(labelName,  exitType))  {	  if(NodeUtil.hasFinally(labelName))    {    	non-compiled	[CE]  method  hasFinally  in  class  NodeUtil  cannot  be  applied  to  given  types;	55	None	replace
325	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(catchNode,  labelName))  {  [CE]  cannot  find  symbol  catchNode  [FE]                      AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.hasFinally(catchNode,  labelName))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(catchNode,  labelName))  {	  if(NodeUtil.hasFinally(labelName))    {    	non-compiled	[CE]  cannot  find  symbol  catchNode	55	None	replace
326	[BUG]  [BUGGY]  if(NodeUtil.isFinally(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes.getFirstChild()))  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isFinally(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes.getFirstChild()))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isFinally(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes.getFirstChild()))  {	  if(NodeUtil.isFinally(n)&&    NodeUtil.hasFinally(allCatchNodes.getFirstChild()))    {    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
327	[BUG]  [BUGGY]  if(NodeUtil.isName(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes.getFirstChild()))  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isName(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes.getFirstChild()))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isName(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes.getFirstChild()))  {	  if(NodeUtil.isFinally(n)&&    NodeUtil.hasFinally(allCatchNodes.getFirstChild()))    {    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
328	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes.getFirstChild()))  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isExpressionNode(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes.getFirstChild()))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isExpressionNode(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes.getFirstChild()))  {	  if(NodeUtil.isFinally(n)&&    NodeUtil.hasFinally(allCatchNodes.getFirstChild()))    {    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
329	[BUG]  [BUGGY]  if(NodeUtil.isFinally(allCatchNodes)||  NodeUtil.hasCatchHandler(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isFinally(allCatchNodes)||  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isFinally(allCatchNodes)||  NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(NodeUtil.isFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
330	[BUG]  [BUGGY]  if(NodeUtil.isFinally(allCatchNodes)||  NodeUtil.isExpressionNode(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isFinally(allCatchNodes)||  NodeUtil.isExpressionNode(allCatchNodes))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isFinally(allCatchNodes)||  NodeUtil.isExpressionNode(allCatchNodes))  {	  if(NodeUtil.isFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
331	[BUG]  [BUGGY]  if(NodeUtil.isFinally(allCatchNodes)&&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isFinally(allCatchNodes)&&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isFinally(allCatchNodes)&&  NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(NodeUtil.isFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
332	[BUG]  [BUGGY]  if(NodeUtil.isFinally(allCatchNodes)&&  NodeUtil.hasFinally(catchNode))  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isFinally(allCatchNodes)&&  NodeUtil.hasFinally(catchNode))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isFinally(allCatchNodes)&&  NodeUtil.hasFinally(catchNode))  {	  if(NodeUtil.isFinally(allCatchNodes)&&    NodeUtil.hasFinally(n))    {    	non-compiled	[CE]  cannot  find  symbol	103	None	replace
333	[BUG]  [BUGGY]  if(NodeUtil.isFinally(allCatchNodes)&&  NodeUtil.hasFinally(labelName))  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isFinally(allCatchNodes)&&  NodeUtil.hasFinally(labelName))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isFinally(allCatchNodes)&&  NodeUtil.hasFinally(labelName))  {	  if(NodeUtil.isFinally(allCatchNodes)&&    NodeUtil.hasFinally(n))    {    	non-compiled	[CE]  cannot  find  symbol	103	None	replace
334	[BUG]  [BUGGY]  if(NodeUtil.isFinally(allCatchNodes)&&  NodeUtil.hasFinally(catchNode,  n))  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isFinally(allCatchNodes)&&  NodeUtil.hasFinally(catchNode,  n))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isFinally(allCatchNodes)&&  NodeUtil.hasFinally(catchNode,  n))  {	  if(NodeUtil.isFinally(allCatchNodes)&&    NodeUtil.hasFinally(n))    {    	non-compiled	[CE]  cannot  find  symbol	103	None	replace
335	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.isAll());  [CE]  illegal  start  of  type  [FE]              RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(allCatchNodes.isAll());  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(allCatchNodes.isAll());	  Preconditions.checkState(n.isAll());    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
336	[BUG]  [BUGGY]  Preconditions.checkState(n.isAll()  &&  catchNode.getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  type  [FE]                RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(n.isAll()  &&  catchNode.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(n.isAll()  &&  catchNode.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(n.isAll());    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
337	[BUG]  [BUGGY]  Preconditions.checkState(n.isAll()  &&  catchNode.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  type  [FE]                  RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(n.isAll()  &&  catchNode.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(n.isAll()  &&  catchNode.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.isAll());    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
338	[BUG]  [BUGGY]  Preconditions.checkState(catchNode.isAll());  [CE]  illegal  start  of  type  [FE]                    RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(catchNode.isAll());  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(catchNode.isAll());	  Preconditions.checkState(n.isAll());    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
339	[BUG]  [BUGGY]  if(NodeUtil.isFinally(n)&&  NodeUtil.isName(n,  allCatchNodes.getFirstChild()))  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isFinally(n)&&  NodeUtil.isName(n,  allCatchNodes.getFirstChild()))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isFinally(n)&&  NodeUtil.isName(n,  allCatchNodes.getFirstChild()))  {	  if(NodeUtil.isFinally(n)&&    NodeUtil.isName(n.getFirstChild()))    {    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
340	[BUG]  [BUGGY]  if(NodeUtil.isFinally(allCatchNodes)&&  NodeUtil.isName(n.getFirstChild()))  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isFinally(allCatchNodes)&&  NodeUtil.isName(n.getFirstChild()))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isFinally(allCatchNodes)&&  NodeUtil.isName(n.getFirstChild()))  {	  if(NodeUtil.isFinally(n)&&    NodeUtil.isName(n.getFirstChild()))    {    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
341	[BUG]  [BUGGY]  if(NodeUtil.isFinally(n)&&  NodeUtil.isName(n.getLastChild()))  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isFinally(n)&&  NodeUtil.isName(n.getLastChild()))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isFinally(n)&&  NodeUtil.isName(n.getLastChild()))  {	  if(NodeUtil.isFinally(n)&&    NodeUtil.isName(n.getFirstChild()))    {    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
342	[BUG]  [BUGGY]  if(NodeUtil.isName(n)&&  NodeUtil.isFinally(n.getFirstChild()))  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isName(n)&&  NodeUtil.isFinally(n.getFirstChild()))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isName(n)&&  NodeUtil.isFinally(n.getFirstChild()))  {	  if(NodeUtil.isFinally(n)&&    NodeUtil.isName(n.getFirstChild()))    {    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
343	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(n))  {  Node  elseBlock  =  allCatchNodes.getFirstChild();  tryMinimizeExits(exitType,  labelName);  }  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(n))  {  Node  elseBlock  =  allCatchNodes.getFirstChild();  tryMinimizeExits(exitType,  labelName);  }  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(n))  {  Node  elseBlock  =  allCatchNodes.getFirstChild();  tryMinimizeExits(exitType,  labelName);  }	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    elseBlock    =    allCatchNodes.getFirstChild();    if(NodeUtil.hasFinally(n))    {    Node    elseBlock    =    allCatchNodes.getFirstChild();    tryMinimizeExits(exitType,    labelName);    }    	non-compiled	[CE]  illegal  start  of  type	171	None	replace
344	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(n))  {  Node  elseBlock  =  allCatchNodes.getFirstChild();  tryMinimizeExits(exitType,  label  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(n))  {  Node  elseBlock  =  allCatchNodes.getFirstChild();  tryMinimizeExits(exitType,  label  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(n))  {  Node  elseBlock  =  allCatchNodes.getFirstChild();  tryMinimizeExits(exitType,  label	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    elseBlock    =    allCatchNodes.getFirstChild();    if(NodeUtil.hasFinally(n))    {    Node    elseBlock    =    allCatchNodes.getFirstChild();    tryMinimizeExits(exitType,    labelName);    }    	non-compiled	[CE]  ')'  expected	171	None	replace
345	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(n))  {  Node  elseBlock  =  allCatchNodes.getFirstChild();  tryMinimizeExits(exitType,  labelName  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(n))  {  Node  elseBlock  =  allCatchNodes.getFirstChild();  tryMinimizeExits(exitType,  labelName  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(n))  {  Node  elseBlock  =  allCatchNodes.getFirstChild();  tryMinimizeExits(exitType,  labelName	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    elseBlock    =    allCatchNodes.getFirstChild();    if(NodeUtil.hasFinally(n))    {    Node    elseBlock    =    allCatchNodes.getFirstChild();    tryMinimizeExits(exitType,    labelName);    }    	non-compiled	[CE]  ')'  expected	171	None	replace
346	[BUG]  [BUGGY]  Node  n  =  allCatchNodes.getFirstChild();  tryMinimizeExits(n.hasOneChild());  [CE]  illegal  start  of  type  [FE]        RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Node  n  =  allCatchNodes.getFirstChild();  tryMinimizeExits(n.hasOneChild());  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  n  =  allCatchNodes.getFirstChild();  tryMinimizeExits(n.hasOneChild());	          Preconditions.checkState(n.hasOneChild());    Node    n    =    allCatchNodes.getFirstChild();    tryMinimizeExits(n.hasOneChild());    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
347	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  n  =  allCatchNodes.getFirstChild();  tryMinimizeExits(n.hasOneChild());  [CE]  illegal  start  of  type  [FE]          RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  n  =  allCatchNodes.getFirstChild();  tryMinimizeExits(n.hasOneChild());  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(allCatchNodes.hasOneChild());  Node  n  =  allCatchNodes.getFirstChild();  tryMinimizeExits(n.hasOneChild());	          Preconditions.checkState(n.hasOneChild());    Node    n    =    allCatchNodes.getFirstChild();    tryMinimizeExits(n.hasOneChild());    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
348	[BUG]  [BUGGY]  n  =  allCatchNodes.getFirstChild();  tryMinimizeExits(n.hasOneChild());  [CE]  illegal  start  of  type  [FE]            RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  n  =  allCatchNodes.getFirstChild();  tryMinimizeExits(n.hasOneChild());  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	n  =  allCatchNodes.getFirstChild();  tryMinimizeExits(n.hasOneChild());	          Preconditions.checkState(n.hasOneChild());    Node    n    =    allCatchNodes.getFirstChild();    tryMinimizeExits(n.hasOneChild());    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
349	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.isLabel());  Node  n  =  catchNodes.getFirstChild();  [CE]  illegal  start  of  type  [FE]                  RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(allCatchNodes.isLabel());  Node  n  =  catchNodes.getFirstChild();  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(allCatchNodes.isLabel());  Node  n  =  catchNodes.getFirstChild();	          Preconditions.checkState(n.isLabel());    Node    n    =    catchNodes.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
350	[BUG]  [BUGGY]  Preconditions.checkState(n.isLabel());  Node  n  =  catchNodes.getLastChild();  [CE]  illegal  start  of  type  [FE]                    RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(n.isLabel());  Node  n  =  catchNodes.getLastChild();  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(n.isLabel());  Node  n  =  catchNodes.getLastChild();	          Preconditions.checkState(n.isLabel());    Node    n    =    catchNodes.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
351	[BUG]  [BUGGY]  Preconditions.checkState(n.isLabel());  Node  c  =  catchNodes.getFirstChild();  [CE]  illegal  start  of  type  [FE]                      RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(n.isLabel());  Node  c  =  catchNodes.getFirstChild();  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(n.isLabel());  Node  c  =  catchNodes.getFirstChild();	          Preconditions.checkState(n.isLabel());    Node    n    =    catchNodes.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
352	[BUG]  [BUGGY]  Node  c  =  allCatchNodes.getFirstChild();  Preconditions.checkState(c!=  null);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Node  c  =  allCatchNodes.getFirstChild();  Preconditions.checkState(c!=  null);  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  c  =  allCatchNodes.getFirstChild();  Preconditions.checkState(c!=  null);	          Node    c    =    allCatchNodes.getFirstChild();    Node    c    =    allCatchNodes.getFirstChild();    Preconditions.checkState(c!=    null);    	non-compiled	[CE]  illegal  start  of  type	153	None	replace
353	[BUG]  [BUGGY]  Node  c  =  allCatchNodes.getFirstChild();  Preconditions.checkState(c  ==  null);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Node  c  =  allCatchNodes.getFirstChild();  Preconditions.checkState(c  ==  null);  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  c  =  allCatchNodes.getFirstChild();  Preconditions.checkState(c  ==  null);	          Node    c    =    allCatchNodes.getFirstChild();    Node    c    =    allCatchNodes.getFirstChild();    Preconditions.checkState(c!=    null);    	non-compiled	[CE]  illegal  start  of  type	153	None	replace
354	[BUG]  [BUGGY]  Node  n  =  allCatchNodes.getfirstChild();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Node  n  =  allCatchNodes.getfirstChild();  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  n  =  allCatchNodes.getfirstChild();	  Node    n    =    allCatchNodes.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
355	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(labelName)||  NodeUtil.hasFinally(n))  {  [CE]  method  hasFinally  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.hasFinally(labelName)||  NodeUtil.hasFinally(n))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(labelName)||  NodeUtil.hasFinally(n))  {	  if(NodeUtil.hasFinally(catchNodes)||    NodeUtil.hasFinally(n))    {    	non-compiled	[CE]  method  hasFinally  in  class  NodeUtil  cannot  be  applied  to  given  types;	23	None	replace
356	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.isLabelHandler(catchNode))  {  [CE]  cannot  find  symbol  catchNode  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.isLabelHandler(catchNode))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.isLabelHandler(catchNode))  {	  if(NodeUtil.hasFinally(allCatchNodes)&&    NodeUtil.isLabelHandler(n))    {    	non-compiled	[CE]  cannot  find  symbol  catchNode	34	None	replace
357	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.isLabelHandler(labelName))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.isLabelHandler(labelName))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.isLabelHandler(labelName))  {	  if(NodeUtil.hasFinally(allCatchNodes)&&    NodeUtil.isLabelHandler(n))    {    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
358	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.isLabelHandler(n))  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.isLabelHandler(n))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.isLabelHandler(n))  {	  if(NodeUtil.hasFinally(allCatchNodes)&&    NodeUtil.isLabelHandler(n))    {    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
359	[BUG]  [BUGGY]  NodeUtil.checkState(n.hasOneChild());  [CE]  illegal  start  of  type  [FE]                  RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  NodeUtil.checkState(n.hasOneChild());  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	NodeUtil.checkState(n.hasOneChild());	          Preconditions.checkState(n.hasOneChild());    NodeUtil.checkState(n.hasOneChild());    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
360	[BUG]  [BUGGY]  Preconditions.checkState(n.hasOneChild(),  n.hasOneChild());  [CE]  illegal  start  of  type  [FE]                    RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(n.hasOneChild(),  n.hasOneChild());  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(n.hasOneChild(),  n.hasOneChild());	          Preconditions.checkState(n.hasOneChild());    NodeUtil.checkState(n.hasOneChild());    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
361	[BUG]  [BUGGY]  Preconditions.checkState(n.hasChildren());  NodeUtil.checkState(n.hasOneChild());  [CE]  illegal  start  of  type  [FE]                      RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(n.hasChildren());  NodeUtil.checkState(n.hasOneChild());  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(n.hasChildren());  NodeUtil.checkState(n.hasOneChild());	          Preconditions.checkState(n.hasOneChild());    NodeUtil.checkState(n.hasOneChild());    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
362	[BUG]  [BUGGY]  Preconditions.checkState(n.getOneChild());  NodeUtil.checkState(n.hasOneChild());  [CE]  illegal  start  of  type  [FE]                        RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(n.getOneChild());  NodeUtil.checkState(n.hasOneChild());  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(n.getOneChild());  NodeUtil.checkState(n.hasOneChild());	          Preconditions.checkState(n.hasOneChild());    NodeUtil.checkState(n.hasOneChild());    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
363	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(n))  {  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(n))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(n))  {	  if(NodeUtil.hasFinally(n)||    NodeUtil.hasFinally(n))    {    if(NodeUtil.hasFinally(n)||    NodeUtil.hasFinally(n))    {    	non-compiled	[CE]  ';'  expected	8	None	replace
364	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(catchNode)||  NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(n))  {  [CE]  cannot  find  symbol  catchNode  [FE]          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.hasFinally(catchNode)||  NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(n))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(catchNode)||  NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(n))  {	  if(NodeUtil.hasFinally(n)||    NodeUtil.hasFinally(n))    {    if(NodeUtil.hasFinally(n)||    NodeUtil.hasFinally(n))    {    	non-compiled	[CE]  cannot  find  symbol  catchNode	8	None	replace
365	[BUG]  [BUGGY]  If(NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(n))  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  If(NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(n))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	If(NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(n))  {	  if(NodeUtil.hasFinally(n)||    NodeUtil.hasFinally(n))    {    If(NodeUtil.hasFinally(n)||    NodeUtil.hasFinally(n))    {    	non-compiled	[CE]  ';'  expected	9	None	replace
366	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(catchNode)||  NodeUtil.hasFinally(n))  {  If(NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(n))  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.hasFinally(catchNode)||  NodeUtil.hasFinally(n))  {  If(NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(n))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(catchNode)||  NodeUtil.hasFinally(n))  {  If(NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(n))  {	  if(NodeUtil.hasFinally(n)||    NodeUtil.hasFinally(n))    {    If(NodeUtil.hasFinally(n)||    NodeUtil.hasFinally(n))    {    	non-compiled	[CE]  ';'  expected	9	None	replace
367	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(catchNodes)||  NodeUtil.hasFinally(n))  {  If(NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(n))  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.hasFinally(catchNodes)||  NodeUtil.hasFinally(n))  {  If(NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(n))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(catchNodes)||  NodeUtil.hasFinally(n))  {  If(NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(n))  {	  if(NodeUtil.hasFinally(n)||    NodeUtil.hasFinally(n))    {    If(NodeUtil.hasFinally(n)||    NodeUtil.hasFinally(n))    {    	non-compiled	[CE]  ';'  expected	9	None	replace
368	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(n.getFirstChild()))  {  if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(n.getFirstChild()))  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(n.getFirstChild()))  {  if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(n.getFirstChild()))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(allCatchNodes)&&    NodeUtil.hasFinally(n.getFirstChild()))    {    if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(n.getFirstChild()))  {	  	non-compiled	[CE]  illegal  start  of  expression	137	None	add
369	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(n.getFirstChild()))  {  if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(n.getLastChild()))  {  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(n.getFirstChild()))  {  if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(n.getLastChild()))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(allCatchNodes)&&    NodeUtil.hasFinally(n.getFirstChild()))    {    if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(n.getLastChild()))  {	  	non-compiled	[CE]  illegal  start  of  expression	137	None	add
370	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(n.getFirstChild()))  {  If(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(n.getFirstChild()))  {  [CE]  ';'  expected  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(n.getFirstChild()))  {  If(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(n.getFirstChild()))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(allCatchNodes)&&    NodeUtil.hasFinally(n.getFirstChild()))    {    If(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(n.getFirstChild()))  {	  	non-compiled	[CE]  ';'  expected	137	None	add
371	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(n.getFirstChild()))  {  if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(n.getfirstChild()))  {  [CE]  illegal  start  of  expression  [FE]          RuntimeException    [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(n.getFirstChild()))  {  if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(n.getfirstChild()))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(allCatchNodes)&&    NodeUtil.hasFinally(n.getFirstChild()))    {    if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(n.getfirstChild()))  {	  	non-compiled	[CE]  illegal  start  of  expression	137	None	add
372	[BUG]  [BUGGY]  n  =  allCatchNodes.getLastChild();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  n  =  allCatchNodes.getLastChild();  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	n  =  allCatchNodes.getLastChild();	  n    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
373	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(callNode)&&  NodeUtil.hasFinally(n))  {  [CE]  cannot  find  symbol  callNode  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.hasFinally(callNode)&&  NodeUtil.hasFinally(n))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(callNode)&&  NodeUtil.hasFinally(n))  {	  if(NodeUtil.hasFinally(n)&&    NodeUtil.hasFinally(n))    {    	non-compiled	[CE]  cannot  find  symbol  callNode	21	None	replace
374	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  NodeUtil.hasFinally(n))  {  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  NodeUtil.hasFinally(n))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isExpressionNode(n)&&  NodeUtil.hasFinally(n))  {	  if(NodeUtil.hasFinally(n)&&    NodeUtil.hasFinally(n))    {    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
375	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(catchNode)&&  NodeUtil.hasFinally(catchNode))  {  [CE]  cannot  find  symbol  catchNode  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.hasFinally(catchNode)&&  NodeUtil.hasFinally(catchNode))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(catchNode)&&  NodeUtil.hasFinally(catchNode))  {	  if(NodeUtil.hasFinally(n)&&    NodeUtil.hasFinally(n))    {    	non-compiled	[CE]  cannot  find  symbol  catchNode	21	None	replace
376	[BUG]  [BUGGY]  Preconditions.checkState(n.isNode());  [CE]  illegal  start  of  type  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(n.isNode());  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(n.isNode());	          Preconditions.checkState(n.isLabel());    Preconditions.checkState(n.isLabel());    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
377	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  otherBlock  =  allCatchNodes.getLastChild();  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  otherBlock  =  allCatchNodes.getLastChild();  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  otherBlock  =  allCatchNodes.getLastChild();	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    otherBlock    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
378	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getLastChild();  Node  otherBlock  =  allCatchNodes.getFirstChild();  [CE]  illegal  start  of  type  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Node  elseBlock  =  allCatchNodes.getLastChild();  Node  otherBlock  =  allCatchNodes.getFirstChild();  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  elseBlock  =  allCatchNodes.getLastChild();  Node  otherBlock  =  allCatchNodes.getFirstChild();	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    otherBlock    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
379	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  otherBlock  =  allCatchNodes.getFirstChild();  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  otherBlock  =  allCatchNodes.getFirstChild();  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(allCatchNodes.hasOneChild());  Node  otherBlock  =  allCatchNodes.getFirstChild();	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    otherBlock    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
380	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.isName(n,  catchNode.getFirstChild()))  {  [CE]  cannot  find  symbol  catchNode  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.isName(n,  catchNode.getFirstChild()))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.isName(n,  catchNode.getFirstChild()))  {	  if(NodeUtil.hasFinally(allCatchNodes)&&    NodeUtil.isName(n.getFirstChild()))    {    	non-compiled	[CE]  cannot  find  symbol  catchNode	49	None	replace
381	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.isName(n.getLastChild()))  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.isName(n.getLastChild()))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.isName(n.getLastChild()))  {	  if(NodeUtil.hasFinally(allCatchNodes)&&    NodeUtil.isName(n.getFirstChild()))    {    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
382	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.getFirstChild()  ==  null);  Node  elseBlock  =  allCatchNodes.getLastChild();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(allCatchNodes.getFirstChild()  ==  null);  Node  elseBlock  =  allCatchNodes.getLastChild();  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(allCatchNodes.getFirstChild()  ==  null);  Node  elseBlock  =  allCatchNodes.getLastChild();	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    elseBlock    =    allCatchNodes.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
383	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.getFirstChild()!=  null);  Node  elseBlock  =  allCatchNodes.getLastChild();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(allCatchNodes.getFirstChild()!=  null);  Node  elseBlock  =  allCatchNodes.getLastChild();  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(allCatchNodes.getFirstChild()!=  null);  Node  elseBlock  =  allCatchNodes.getLastChild();	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    elseBlock    =    allCatchNodes.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
384	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.getFirstChild()  ==  n);  Node  elseBlock  =  allCatchNodes.getLastChild();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(allCatchNodes.getFirstChild()  ==  n);  Node  elseBlock  =  allCatchNodes.getLastChild();  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(allCatchNodes.getFirstChild()  ==  n);  Node  elseBlock  =  allCatchNodes.getLastChild();	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    elseBlock    =    allCatchNodes.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
385	[BUG]  [BUGGY]  if(NodeUtil.isLabelName(n)&&  NodeUtil.hasFinally(allCatchNodes.getFirstChild()))  {  [CE]  cannot  find  symbol  [FE]        RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isLabelName(n)&&  NodeUtil.hasFinally(allCatchNodes.getFirstChild()))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isLabelName(n)&&  NodeUtil.hasFinally(allCatchNodes.getFirstChild()))  {	  if(NodeUtil.isLabelName(n)&&    NodeUtil.hasFinally(n.getFirstChild()))    {    	non-compiled	[CE]  cannot  find  symbol	155	None	replace
386	[BUG]  [BUGGY]  if(NodeUtil.isLabelName(allCatchNodes)&&  NodeUtil.hasFinally(n.getFirstChild()))  {  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isLabelName(allCatchNodes)&&  NodeUtil.hasFinally(n.getFirstChild()))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isLabelName(allCatchNodes)&&  NodeUtil.hasFinally(n.getFirstChild()))  {	  if(NodeUtil.isLabelName(n)&&    NodeUtil.hasFinally(n.getFirstChild()))    {    	non-compiled	[CE]  cannot  find  symbol	155	None	replace
387	[BUG]  [BUGGY]  if(NodeUtil.isLabelName(n)&&  NodeUtil.hasFinally(n,  allCatchNodes.getFirstChild()))  {  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isLabelName(n)&&  NodeUtil.hasFinally(n,  allCatchNodes.getFirstChild()))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isLabelName(n)&&  NodeUtil.hasFinally(n,  allCatchNodes.getFirstChild()))  {	  if(NodeUtil.isLabelName(n)&&    NodeUtil.hasFinally(n.getFirstChild()))    {    	non-compiled	[CE]  cannot  find  symbol	155	None	replace
388	[BUG]  [BUGGY]  if(NodeUtil.isLabelName(n)&&  NodeUtil.hasFinally(n,  catchNode.getFirstChild()))  {  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isLabelName(n)&&  NodeUtil.hasFinally(n,  catchNode.getFirstChild()))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isLabelName(n)&&  NodeUtil.hasFinally(n,  catchNode.getFirstChild()))  {	  if(NodeUtil.isLabelName(n)&&    NodeUtil.hasFinally(n.getFirstChild()))    {    	non-compiled	[CE]  cannot  find  symbol	155	None	replace
389	[BUG]  [BUGGY]  Node  n  =  allCatchNodes.get(2);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Node  n  =  allCatchNodes.get(2);  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  n  =  allCatchNodes.get(2);	  Node    n    =    allCatchNodes.get(1);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
390	[BUG]  [BUGGY]  if(NodeUtil.isLabelHandler(n)&&  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isLabelHandler(n)&&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isLabelHandler(n)&&  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.isLabelHandler(n)&&    NodeUtil.hasFinally(n))    {    	non-compiled	[CE]  cannot  find  symbol	125	None	replace
391	[BUG]  [BUGGY]  if(NodeUtil.isLabelHandler(allCatchNodes)&&  NodeUtil.hasFinally(n))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isLabelHandler(allCatchNodes)&&  NodeUtil.hasFinally(n))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isLabelHandler(allCatchNodes)&&  NodeUtil.hasFinally(n))  {	  if(NodeUtil.isLabelHandler(n)&&    NodeUtil.hasFinally(n))    {    	non-compiled	[CE]  cannot  find  symbol	125	None	replace
392	[BUG]  [BUGGY]  if(NodeUtil.isLabelHandler(n)&&  NodeUtil.hasFinally(catchNodes))  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isLabelHandler(n)&&  NodeUtil.hasFinally(catchNodes))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isLabelHandler(n)&&  NodeUtil.hasFinally(catchNodes))  {	  if(NodeUtil.isLabelHandler(n)&&    NodeUtil.hasFinally(n))    {    	non-compiled	[CE]  cannot  find  symbol	125	None	replace
393	[BUG]  [BUGGY]  if(NodeUtil.isLabelHandler(n)&&  NodeUtil.hasFinally(catchNode))  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isLabelHandler(n)&&  NodeUtil.hasFinally(catchNode))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isLabelHandler(n)&&  NodeUtil.hasFinally(catchNode))  {	  if(NodeUtil.isLabelHandler(n)&&    NodeUtil.hasFinally(n))    {    	non-compiled	[CE]  cannot  find  symbol	125	None	replace
394	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(n.getLastChild()))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	add	if(NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(n.getLastChild()))  {	  if(NodeUtil.hasFinally(n)&&    NodeUtil.hasFinally(n.getLastChild()))    {    	compilable	  [FE]  RuntimeException  	136	6	replace
395	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(n.getLastChild()))  {  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(n.getLastChild()))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(n.getLastChild()))  {	  if(NodeUtil.hasFinally(n)&&    NodeUtil.hasFinally(n.getLastChild()))    {    	compilable	  [FE]  RuntimeException  	136	6	replace
396	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  NodeUtil.hasFinally(n.getLastChild()))  {  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  NodeUtil.hasFinally(n.getLastChild()))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isExpressionNode(n)&&  NodeUtil.hasFinally(n.getLastChild()))  {	  if(NodeUtil.hasFinally(n)&&    NodeUtil.hasFinally(n.getLastChild()))    {    	non-compiled	[CE]  cannot  find  symbol	136	None	replace
397	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(n.getFirstChild()))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  [CE]  ';'  expected  [FE]                RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(n.getFirstChild()))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(n.getFirstChild()))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);	  if(NodeUtil.hasFinally(n)&&    NodeUtil.hasFinally(n.getFirstChild()))    {    Node    finallyBlock    =    n.getLastChild();    tryMinimizeExits(finallyBlock,    exitType,    labelName);    	non-compiled	[CE]  ';'  expected	84	None	replace
398	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.hasFinally(catchNode)&&  NodeUtil.hasFinally(n.getFirstChild()))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  [CE]  ';'  expected  [FE]                  RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(NodeUtil.hasFinally(catchNode)&&  NodeUtil.hasFinally(n.getFirstChild()))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(NodeUtil.hasFinally(catchNode)&&  NodeUtil.hasFinally(n.getFirstChild()))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);	  if(NodeUtil.hasFinally(n)&&    NodeUtil.hasFinally(n.getFirstChild()))    {    Node    finallyBlock    =    n.getLastChild();    tryMinimizeExits(finallyBlock,    exitType,    labelName);    	non-compiled	[CE]  ';'  expected	84	None	replace
399	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.hasFinally(catchNode)&&  NodeUtil.hasFinally(n.getFirstChild()))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  [CE]  ';'  expected  [FE]                    RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(NodeUtil.hasFinally(catchNode)&&  NodeUtil.hasFinally(n.getFirstChild()))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(NodeUtil.hasFinally(catchNode)&&  NodeUtil.hasFinally(n.getFirstChild()))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }	  if(NodeUtil.hasFinally(n)&&    NodeUtil.hasFinally(n.getFirstChild()))    {    Node    finallyBlock    =    n.getLastChild();    tryMinimizeExits(finallyBlock,    exitType,    labelName);    	non-compiled	[CE]  ';'  expected	84	None	replace
400	[BUG]  [BUGGY]  if(NodeUtil.isFinally(n)||  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]        RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isFinally(n)||  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isFinally(n)||  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.hasFinally(n)||    NodeUtil.hasFinally(allCatchNodes))    {    if(NodeUtil.isFinally(n)||    NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	161	None	replace
401	[BUG]  [BUGGY]  if(NodeUtil.isFinally(c)||  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  cannot  find  symbol  c  [FE]          RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isFinally(c)||  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isFinally(c)||  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.hasFinally(n)||    NodeUtil.hasFinally(allCatchNodes))    {    if(NodeUtil.isFinally(n)||    NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol  c	161	None	replace
402	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(catchNode)&&  NodeUtil.isName(n,  catchNode.getFirstChild()))  {  [CE]  cannot  find  symbol  catchNode  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.hasFinally(catchNode)&&  NodeUtil.isName(n,  catchNode.getFirstChild()))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(catchNode)&&  NodeUtil.isName(n,  catchNode.getFirstChild()))  {	  if(NodeUtil.hasFinally(n)&&    NodeUtil.isName(n,    catchNode.getFirstChild()))    {    	non-compiled	[CE]  cannot  find  symbol  catchNode	151	None	replace
403	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(n)&&  NodeUtil.isName(n,  catchNode.getLastChild()))  {  [CE]  cannot  find  symbol  catchNode  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.hasFinally(n)&&  NodeUtil.isName(n,  catchNode.getLastChild()))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(n)&&  NodeUtil.isName(n,  catchNode.getLastChild()))  {	  if(NodeUtil.hasFinally(n)&&    NodeUtil.isName(n,    catchNode.getFirstChild()))    {    	non-compiled	[CE]  cannot  find  symbol  catchNode	151	None	replace
404	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(n)&&  NodeUtil.isName(catchNode,  n.getFirstChild()))  {  [CE]  cannot  find  symbol  catchNode  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.hasFinally(n)&&  NodeUtil.isName(catchNode,  n.getFirstChild()))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(n)&&  NodeUtil.isName(catchNode,  n.getFirstChild()))  {	  if(NodeUtil.hasFinally(n)&&    NodeUtil.isName(n,    catchNode.getFirstChild()))    {    	non-compiled	[CE]  cannot  find  symbol  catchNode	151	None	replace
405	[BUG]  [BUGGY]  if(NodeUtil.isFinally(catchNode)&&  NodeUtil.hasFinally(catchNode))  {  [CE]  cannot  find  symbol  catchNode  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isFinally(catchNode)&&  NodeUtil.hasFinally(catchNode))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isFinally(catchNode)&&  NodeUtil.hasFinally(catchNode))  {	  if(NodeUtil.isFinally(n)&&    NodeUtil.hasFinally(catchNode))    {    	non-compiled	[CE]  cannot  find  symbol  catchNode	71	None	replace
406	[BUG]  [BUGGY]  if(NodeUtil.isFinally(catchNode)&&  NodeUtil.hasFinally(n))  {  [CE]  cannot  find  symbol  catchNode  [FE]                    AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isFinally(catchNode)&&  NodeUtil.hasFinally(n))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isFinally(catchNode)&&  NodeUtil.hasFinally(n))  {	  if(NodeUtil.isFinally(n)&&    NodeUtil.hasFinally(catchNode))    {    	non-compiled	[CE]  cannot  find  symbol  catchNode	71	None	replace
407	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkState(n.isLabel());  Preconditions.checkState(n.isLabel());  Preconditions.checkState(n.isLabel());  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	add	                Preconditions.checkState(n.isLabel());        Preconditions.checkState(n.isLabel());    Preconditions.checkState(n.isLabel());  Preconditions.checkState(n.isLabel());	  	compilable	  [FE]  RuntimeException  	42	6	add
408	[BUG]  [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkState(n.isLabel());  Preconditions.checkState(n.isLabel());  Preconditions.checkState(n.isLabel());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkState(n.isLabel());  Preconditions.checkState(n.isLabel());  Preconditions.checkState(n.isLabel());  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	                Preconditions.checkState(n.isLabel());        Preconditions.checkState(n.isLabel());    Preconditions.checkState(n.isLabel());  Preconditions.checkState(n.isLabel());	  	compilable	  [FE]  RuntimeException  	42	6	add
409	[BUG]  [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkState(n.isLabel());  Node  n  =  allCatchNodes.getFirstChild();  Preconditions.checkState(n.isLabel());  Preconditions.checkState(n.isLabel());  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkState(n.isLabel());  Node  n  =  allCatchNodes.getFirstChild();  Preconditions.checkState(n.isLabel());  Preconditions.checkState(n.isLabel());  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	                Preconditions.checkState(n.isLabel());        Preconditions.checkState(n.isLabel());    Node  n  =  allCatchNodes.getFirstChild();  Preconditions.checkState(n.isLabel());  Preconditions.checkState(n.isLabel());	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	42	None	add
410	[BUG]  [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkState(n.isLabel());  Node  n  =  allCatchNodes.getFirstChild();  Preconditions.checkState(n.isLabel());  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkState(n.isLabel());  Node  n  =  allCatchNodes.getFirstChild();  Preconditions.checkState(n.isLabel());  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	                Preconditions.checkState(n.isLabel());        Preconditions.checkState(n.isLabel());    Node  n  =  allCatchNodes.getFirstChild();  Preconditions.checkState(n.isLabel());	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	42	None	add
411	[BUG]  [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkState(n.isLabel());  Node  n  =  allCatchNodes.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          RuntimeException    [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkState(n.isLabel());  Node  n  =  allCatchNodes.getFirstChild();  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	                Preconditions.checkState(n.isLabel());        Preconditions.checkState(n.isLabel());    Node  n  =  allCatchNodes.getFirstChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	42	None	add
412	[BUG]  [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkState(n.isLabel());  Preconditions.checkState(catchNode.isLabel());  Preconditions.checkState(n.isLabel());  [CE]  cannot  find  symbol  catchNode  [FE]            RuntimeException    [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkState(n.isLabel());  Preconditions.checkState(catchNode.isLabel());  Preconditions.checkState(n.isLabel());  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	                Preconditions.checkState(n.isLabel());        Preconditions.checkState(n.isLabel());    Preconditions.checkState(catchNode.isLabel());  Preconditions.checkState(n.isLabel());	  	non-compiled	[CE]  cannot  find  symbol  catchNode	42	None	add
413	[BUG]  [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkState(n.isLabel());  Node  n  =  allCatchNodes.get(0);  Preconditions.checkState(n.isLabel());  Preconditions.checkState(n.isLabel());  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]              RuntimeException    [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkState(n.isLabel());  Node  n  =  allCatchNodes.get(0);  Preconditions.checkState(n.isLabel());  Preconditions.checkState(n.isLabel());  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	                Preconditions.checkState(n.isLabel());        Preconditions.checkState(n.isLabel());    Node  n  =  allCatchNodes.get(0);  Preconditions.checkState(n.isLabel());  Preconditions.checkState(n.isLabel());	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	42	None	add
414	[BUG]  [BUGGY]  if(NodeUtil.isFinally(callNode)&&  NodeUtil.hasFinally(callNode))  {  [CE]  cannot  find  symbol  callNode  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isFinally(callNode)&&  NodeUtil.hasFinally(callNode))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isFinally(callNode)&&  NodeUtil.hasFinally(callNode))  {	  if(NodeUtil.isFinally(node)&&    NodeUtil.hasFinally(node))    {    	non-compiled	[CE]  cannot  find  symbol  callNode	69	None	replace
415	[BUG]  [BUGGY]  if(NodeUtil.isFinally(allCatchNodes)&&  NodeUtil.hasFinally(node))  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isFinally(allCatchNodes)&&  NodeUtil.hasFinally(node))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isFinally(allCatchNodes)&&  NodeUtil.hasFinally(node))  {	  if(NodeUtil.isFinally(node)&&    NodeUtil.hasFinally(node))    {    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
416	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isExpressionNode(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isExpressionNode(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.isFinally(allCatchNodes)&&    NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
417	[BUG]  [BUGGY]  if(NodeUtil.isFinally(n)&&  NodeUtil.hasFinally(allCatchNodes.getLastChild()))  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isFinally(n)&&  NodeUtil.hasFinally(allCatchNodes.getLastChild()))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isFinally(n)&&  NodeUtil.hasFinally(allCatchNodes.getLastChild()))  {	  if(NodeUtil.isFinally(n)&&    NodeUtil.hasFinally(n.getLastChild()))    {    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
418	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  catchNode);  [CE]  illegal  start  of  type  [FE]            RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  catchNode);  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  catchNode);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
419	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  c);  [CE]  illegal  start  of  type  [FE]              RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  c);  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  c);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
420	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  catchCodeBlock);  [CE]  illegal  start  of  type  [FE]                RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  catchCodeBlock);  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  catchCodeBlock);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
421	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  catchNode.getFirstChild());  [CE]  illegal  start  of  type  [FE]                  RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  catchNode.getFirstChild());  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  catchNode.getFirstChild());	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
422	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  n  =  allCatchNodes.getFirstChild();  [CE]  illegal  start  of  type  [FE]          RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  n  =  allCatchNodes.getFirstChild();  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(allCatchNodes.hasOneChild());  Node  n  =  allCatchNodes.getFirstChild();	          Preconditions.checkState(n.hasOneChild());    Node    n    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
423	[BUG]  [BUGGY]  Preconditions.checkState(n.hasOneChild());  Node  n  =  allCatchNodes.getLastChild();  [CE]  illegal  start  of  type  [FE]            RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(n.hasOneChild());  Node  n  =  allCatchNodes.getLastChild();  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(n.hasOneChild());  Node  n  =  allCatchNodes.getLastChild();	          Preconditions.checkState(n.hasOneChild());    Node    n    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
424	[BUG]  [BUGGY]  Preconditions.checkState(n.hasOneChild());  n  =  allCatchNodes.getFirstChild();  [CE]  illegal  start  of  type  [FE]              RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(n.hasOneChild());  n  =  allCatchNodes.getFirstChild();  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(n.hasOneChild());  n  =  allCatchNodes.getFirstChild();	          Preconditions.checkState(n.hasOneChild());    Node    n    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
425	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(catchNode)||  NodeUtil.hasFinally(n.getFirstChild()))  {  [CE]  cannot  find  symbol  catchNode  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.hasFinally(catchNode)||  NodeUtil.hasFinally(n.getFirstChild()))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(catchNode)||  NodeUtil.hasFinally(n.getFirstChild()))  {	  if(NodeUtil.hasFinally(n)||    NodeUtil.hasFinally(n.getFirstChild()))    {    	non-compiled	[CE]  cannot  find  symbol  catchNode	66	None	replace
426	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]          Preconditions.checkState(n.hasOneChild());    Preconditions.checkState(n.hasOneChild());  Preconditions.checkState(n.hasOneChild());  Preconditions.checkState(n.hasOneChild());  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	add	                Preconditions.checkState(n.hasOneChild());        Preconditions.checkState(n.hasOneChild());    Preconditions.checkState(n.hasOneChild());  Preconditions.checkState(n.hasOneChild());	  	compilable	  [FE]  RuntimeException  	85	6	add
427	[BUG]  [BUGGY]          Preconditions.checkState(n.hasOneChild());    Preconditions.checkState(n.hasOneChild());  Preconditions.checkState(n.hasOneChild());  Preconditions.checkState(n.hasOneChild());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]          Preconditions.checkState(n.hasOneChild());    Preconditions.checkState(n.hasOneChild());  Preconditions.checkState(n.hasOneChild());  Preconditions.checkState(n.hasOneChild());  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	                Preconditions.checkState(n.hasOneChild());        Preconditions.checkState(n.hasOneChild());    Preconditions.checkState(n.hasOneChild());  Preconditions.checkState(n.hasOneChild());	  	compilable	  [FE]  RuntimeException  	85	6	add
428	[BUG]  [BUGGY]          Preconditions.checkState(n.hasOneChild());    Preconditions.checkState(n.hasOneChild());  Node  n  =  allCatchNodes.getFirstChild();  Preconditions.checkState(n.hasOneChild());  Preconditions.checkState(n.hasOneChild());  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]          Preconditions.checkState(n.hasOneChild());    Preconditions.checkState(n.hasOneChild());  Node  n  =  allCatchNodes.getFirstChild();  Preconditions.checkState(n.hasOneChild());  Preconditions.checkState(n.hasOneChild());  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	                Preconditions.checkState(n.hasOneChild());        Preconditions.checkState(n.hasOneChild());    Node  n  =  allCatchNodes.getFirstChild();  Preconditions.checkState(n.hasOneChild());  Preconditions.checkState(n.hasOneChild());	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	85	None	add
429	[BUG]  [BUGGY]          Preconditions.checkState(n.hasOneChild());    Preconditions.checkState(n.hasOneChild());  Node  n  =  allCatchNodes.getFirstChild();  Preconditions.checkState(n.hasOneChild());  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]          Preconditions.checkState(n.hasOneChild());    Preconditions.checkState(n.hasOneChild());  Node  n  =  allCatchNodes.getFirstChild();  Preconditions.checkState(n.hasOneChild());  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	                Preconditions.checkState(n.hasOneChild());        Preconditions.checkState(n.hasOneChild());    Node  n  =  allCatchNodes.getFirstChild();  Preconditions.checkState(n.hasOneChild());	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	85	None	add
430	[BUG]  [BUGGY]          Preconditions.checkState(n.hasOneChild());    Preconditions.checkState(n.hasOneChild());  Node  n  =  allCatchNodes.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          RuntimeException    [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]          Preconditions.checkState(n.hasOneChild());    Preconditions.checkState(n.hasOneChild());  Node  n  =  allCatchNodes.getFirstChild();  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	                Preconditions.checkState(n.hasOneChild());        Preconditions.checkState(n.hasOneChild());    Node  n  =  allCatchNodes.getFirstChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	85	None	add
431	[BUG]  [BUGGY]          Preconditions.checkState(n.hasOneChild());    Preconditions.checkState(n.hasOneChild());  Node  n  =  catchNodes.getFirstChild();  Preconditions.checkState(n.hasOneChild());  Preconditions.checkState(n.hasOneChild());  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]            RuntimeException    [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]          Preconditions.checkState(n.hasOneChild());    Preconditions.checkState(n.hasOneChild());  Node  n  =  catchNodes.getFirstChild();  Preconditions.checkState(n.hasOneChild());  Preconditions.checkState(n.hasOneChild());  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	                Preconditions.checkState(n.hasOneChild());        Preconditions.checkState(n.hasOneChild());    Node  n  =  catchNodes.getFirstChild();  Preconditions.checkState(n.hasOneChild());  Preconditions.checkState(n.hasOneChild());	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	85	None	add
432	[BUG]  [BUGGY]          Preconditions.checkState(n.hasOneChild());    Preconditions.checkState(n.hasOneChild());  Node  n  =  catchNode.getFirstChild();  Preconditions.checkState(n.hasOneChild());  Preconditions.checkState(n.hasOneChild());  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]              RuntimeException    [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]          Preconditions.checkState(n.hasOneChild());    Preconditions.checkState(n.hasOneChild());  Node  n  =  catchNode.getFirstChild();  Preconditions.checkState(n.hasOneChild());  Preconditions.checkState(n.hasOneChild());  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	                Preconditions.checkState(n.hasOneChild());        Preconditions.checkState(n.hasOneChild());    Node  n  =  catchNode.getFirstChild();  Preconditions.checkState(n.hasOneChild());  Preconditions.checkState(n.hasOneChild());	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	85	None	add
433	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(n))  {  NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(n))  {  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(n))  {  NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(n))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(allCatchNodes)||    NodeUtil.hasFinally(n))    {    NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(n))  {	  	non-compiled	[CE]  not  a  statement	117	None	add
434	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(n.getFirstChild())||  NodeUtil.hasFinally(n.getFirstChild()))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	add	if(NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(n.getFirstChild())||  NodeUtil.hasFinally(n.getFirstChild()))  {	  if(NodeUtil.hasFinally(n)&&    NodeUtil.hasFinally(n.getFirstChild()))    {    if(NodeUtil.hasFinally(n)&&    NodeUtil.hasFinally(n.getFirstChild()))    {    	compilable	  [FE]  RuntimeException  	80	6	replace
435	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(n.getFirstChild())||  NodeUtil.hasFinally(n.getFirstChild()))  {  [FE]  RuntimeException  [FE]        RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(n.getFirstChild())||  NodeUtil.hasFinally(n.getFirstChild()))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(n.getFirstChild())||  NodeUtil.hasFinally(n.getFirstChild()))  {	  if(NodeUtil.hasFinally(n)&&    NodeUtil.hasFinally(n.getFirstChild()))    {    if(NodeUtil.hasFinally(n)&&    NodeUtil.hasFinally(n.getFirstChild()))    {    	compilable	  [FE]  RuntimeException  	80	6	replace
436	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(  catchNode))  {  [CE]  cannot  find  symbol  catchNode  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.hasFinally(  catchNode))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(  catchNode))  {	  if(NodeUtil.hasFinally(callNodes))    {    	non-compiled	[CE]  cannot  find  symbol  catchNode	154	None	replace
437	[BUG]  [BUGGY]  if(NodeUtil.isFinally(allCatchNodes)&&  NodeUtil.isName(n,  catchNode.getFirstChild()))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isFinally(allCatchNodes)&&  NodeUtil.isName(n,  catchNode.getFirstChild()))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isFinally(allCatchNodes)&&  NodeUtil.isName(n,  catchNode.getFirstChild()))  {	  if(NodeUtil.hasFinally(allCatchNodes)&&    NodeUtil.isName(n.getFirstChild()))    {    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
438	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.isName(catchNode.getFirstChild()))  {  [CE]  cannot  find  symbol  catchNode  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.isName(catchNode.getFirstChild()))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.isName(catchNode.getFirstChild()))  {	  if(NodeUtil.hasFinally(allCatchNodes)&&    NodeUtil.isName(n.getFirstChild()))    {    	non-compiled	[CE]  cannot  find  symbol  catchNode	49	None	replace
439	[BUG]  [BUGGY]  if(NodeUtil.isLabelHandler(n)&&  NodeUtil.hasFinally(node))  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isLabelHandler(n)&&  NodeUtil.hasFinally(node))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isLabelHandler(n)&&  NodeUtil.hasFinally(node))  {	  if(NodeUtil.isLabelHandler(n)&&    NodeUtil.hasFinally(n))    {    	non-compiled	[CE]  cannot  find  symbol	125	None	replace
440	[BUG]  [BUGGY]  if(NodeUtil.isLabelHandler(n)&&  NodeUtil.hasFinally(cloneTree(n)))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isLabelHandler(n)&&  NodeUtil.hasFinally(cloneTree(n)))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isLabelHandler(n)&&  NodeUtil.hasFinally(cloneTree(n)))  {	  if(NodeUtil.isLabelHandler(n)&&    NodeUtil.hasFinally(n))    {    	non-compiled	[CE]  cannot  find  symbol	125	None	replace
441	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(n))  {  Node  elseBlock  =  allCatchNodes.getFirstChild();  tryMinimizeExits(elseBlock,  exitType  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(n))  {  Node  elseBlock  =  allCatchNodes.getFirstChild();  tryMinimizeExits(elseBlock,  exitType  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(n))  {  Node  elseBlock  =  allCatchNodes.getFirstChild();  tryMinimizeExits(elseBlock,  exitType	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    elseBlock    =    allCatchNodes.getFirstChild();    if(NodeUtil.hasFinally(n))    {    Node    elseBlock    =    allCatchNodes.getFirstChild();    tryMinimizeExits(elseBlock,    exitType,    labelName);    }    	non-compiled	[CE]  ')'  expected	112	None	replace
442	[BUG]  [BUGGY]  if(NodeUtil.isFinally(n)&&  NodeUtil.hasFinally(catchNode,  node.getFirstChild()))  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isFinally(n)&&  NodeUtil.hasFinally(catchNode,  node.getFirstChild()))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isFinally(n)&&  NodeUtil.hasFinally(catchNode,  node.getFirstChild()))  {	  if(NodeUtil.isFinally(n)&&    NodeUtil.hasFinally(n,    catchNode.getFirstChild()))    {    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
443	[BUG]  [BUGGY]  Preconditions.checkState(n.isAll()  &&  NodeUtil.hasFinally(n));  [CE]  illegal  start  of  type  [FE]              RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(n.isAll()  &&  NodeUtil.hasFinally(n));  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(n.isAll()  &&  NodeUtil.hasFinally(n));	  Preconditions.checkState(n.isAll());    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
444	[BUG]  [BUGGY]  if(NodeUtil.isFinally(allCatchNodes)||  n.getType()  ==  Token.FUNCTION)  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isFinally(allCatchNodes)||  n.getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isFinally(allCatchNodes)||  n.getType()  ==  Token.FUNCTION)  {	  if(NodeUtil.isFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
445	[BUG]  [BUGGY]  if(NodeUtil.isFinally(allCatchNodes)||  n.getType()  ==  Token.BLOCK)  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isFinally(allCatchNodes)||  n.getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isFinally(allCatchNodes)||  n.getType()  ==  Token.BLOCK)  {	  if(NodeUtil.isFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
446	[BUG]  [BUGGY]  Preconditions.checkState(n.isFinally()  ||  n.isLabel());  [CE]  illegal  start  of  type  [FE]        RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(n.isFinally()  ||  n.isLabel());  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(n.isFinally()  ||  n.isLabel());	  Preconditions.checkState(n.isFinally());    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
447	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.isFinally());  [CE]  illegal  start  of  type  [FE]          RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(allCatchNodes.isFinally());  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(allCatchNodes.isFinally());	  Preconditions.checkState(n.isFinally());    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
448	[BUG]  [BUGGY]  Preconditions.checkState(n.isFinally()  ||  catchNode.isLabel());  [CE]  illegal  start  of  type  [FE]            RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(n.isFinally()  ||  catchNode.isLabel());  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(n.isFinally()  ||  catchNode.isLabel());	  Preconditions.checkState(n.isFinally());    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
449	[BUG]  [BUGGY]          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  thenBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  finallyBlock  =  allCatchNodes.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  thenBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  finallyBlock  =  allCatchNodes.getFirstChild();  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	                Node        elseBlock        =        allCatchNodes.getFirstChild();        Node    thenBlock    =    allCatchNodes.getFirstChild();    Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  finallyBlock  =  allCatchNodes.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	15	None	add
450	[BUG]  [BUGGY]          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  thenBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getfirstChild();  Node  thenBlock  =  allCatchNodes.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  thenBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getfirstChild();  Node  thenBlock  =  allCatchNodes.getFirstChild();  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	                Node        elseBlock        =        allCatchNodes.getFirstChild();        Node    thenBlock    =    allCatchNodes.getFirstChild();    Node  elseBlock  =  allCatchNodes.getfirstChild();  Node  thenBlock  =  allCatchNodes.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	15	None	add
451	[BUG]  [BUGGY]  Node  c  =  n.getLastChild();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Node  c  =  n.getLastChild();  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  c  =  n.getLastChild();	  Node    c    =    catchNode.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
452	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  ';'  expected  [FE]              RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.hasFinally(allCatchNodes))    {    if(NodeUtil.hasFinally(allCatchNodes)&&    NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  ';'  expected	31	None	replace
453	[BUG]  [BUGGY]  if(NodeUtil.isFinally(n)&&  NodeUtil.hasFinally(n,  catchNode.getLastChild()))  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isFinally(n)&&  NodeUtil.hasFinally(n,  catchNode.getLastChild()))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isFinally(n)&&  NodeUtil.hasFinally(n,  catchNode.getLastChild()))  {	  if(NodeUtil.isFinally(n)&&    NodeUtil.hasFinally(n.getLastChild()))    {    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
454	[BUG]  [BUGGY]  if(NodeUtil.isFinally(n)&&  NodeUtil.hasFinally(n,  allCatchNodes.getLastChild()))  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isFinally(n)&&  NodeUtil.hasFinally(n,  allCatchNodes.getLastChild()))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isFinally(n)&&  NodeUtil.hasFinally(n,  allCatchNodes.getLastChild()))  {	  if(NodeUtil.isFinally(n)&&    NodeUtil.hasFinally(n.getLastChild()))    {    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
455	[BUG]  [BUGGY]  Preconditions.checkArgument(n.hasOneChild()  &&  NodeUtil.hasFinally(n));  [CE]  illegal  start  of  type  [FE]          RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkArgument(n.hasOneChild()  &&  NodeUtil.hasFinally(n));  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkArgument(n.hasOneChild()  &&  NodeUtil.hasFinally(n));	  Preconditions.checkArgument(n.hasOneChild());    	non-compiled	[CE]  illegal  start  of  type	163	None	replace
456	[BUG]  [BUGGY]  Preconditions.checkArgument(n.hasOneChild()  &&  NodeUtil.isFinally(n));  [CE]  illegal  start  of  type  [FE]            RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkArgument(n.hasOneChild()  &&  NodeUtil.isFinally(n));  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkArgument(n.hasOneChild()  &&  NodeUtil.isFinally(n));	  Preconditions.checkArgument(n.hasOneChild());    	non-compiled	[CE]  illegal  start  of  type	163	None	replace
457	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.getFirstChild()  ==  null);  Node  c  =  allCatchNodes.getFirstChild();  System.arraycopy(c,  0,  tryMinimizeExits(c,  exitType,  labelName));  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(allCatchNodes.getFirstChild()  ==  null);  Node  c  =  allCatchNodes.getFirstChild();  System.arraycopy(c,  0,  tryMinimizeExits(c,  exitType,  labelName));  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(allCatchNodes.getFirstChild()  ==  null);  Node  c  =  allCatchNodes.getFirstChild();  System.arraycopy(c,  0,  tryMinimizeExits(c,  exitType,  labelName));	          Node    c    =    allCatchNodes.getFirstChild();    Node    c    =    allCatchNodes.getFirstChild();    System.arraycopy(c,    0,    tryMinimizeExits(c,    exitType,    labelName));    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
458	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.getFirstChild()  ==  n);  Node  c  =  allCatchNodes.getFirstChild();  System.arraycopy(c,  0,  tryMinimizeExits(c,  exitType,  labelName));  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(allCatchNodes.getFirstChild()  ==  n);  Node  c  =  allCatchNodes.getFirstChild();  System.arraycopy(c,  0,  tryMinimizeExits(c,  exitType,  labelName));  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(allCatchNodes.getFirstChild()  ==  n);  Node  c  =  allCatchNodes.getFirstChild();  System.arraycopy(c,  0,  tryMinimizeExits(c,  exitType,  labelName));	          Node    c    =    allCatchNodes.getFirstChild();    Node    c    =    allCatchNodes.getFirstChild();    System.arraycopy(c,    0,    tryMinimizeExits(c,    exitType,    labelName));    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
459	[BUG]  [BUGGY]  System.arraycopy(labelName,  0,  tryMinimizeExits(allCatchNodes.getFirstChild(),  exitType,  labelName));  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  System.arraycopy(labelName,  0,  tryMinimizeExits(allCatchNodes.getFirstChild(),  exitType,  labelName));  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	System.arraycopy(labelName,  0,  tryMinimizeExits(allCatchNodes.getFirstChild(),  exitType,  labelName));	          Node    c    =    allCatchNodes.getFirstChild();    Node    c    =    allCatchNodes.getFirstChild();    System.arraycopy(c,    0,    tryMinimizeExits(c,    exitType,    labelName));    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
460	[BUG]  [BUGGY]  Preconditions.checkState(catchNodes.getFirstChild());  Node  n  =  catchNodes.getFirstChild();  Preconditions.checkState(n.isLabel());  [CE]  illegal  start  of  type  [FE]          RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(catchNodes.getFirstChild());  Node  n  =  catchNodes.getFirstChild();  Preconditions.checkState(n.isLabel());  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(catchNodes.getFirstChild());  Node  n  =  catchNodes.getFirstChild();  Preconditions.checkState(n.isLabel());	          Preconditions.checkState(n.isLabel());    Node    n    =    catchNodes.getFirstChild();    Preconditions.checkState(n.isLabel());    	non-compiled	[CE]  illegal  start  of  type	147	None	replace
461	[BUG]  [BUGGY]  Node  c  =  allCatchNodes.getfirstChild();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Node  c  =  allCatchNodes.getfirstChild();  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  c  =  allCatchNodes.getfirstChild();	  Node    c    =    allCatchNodes.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
462	[BUG]  [BUGGY]  if(NodeUtil.isName(n)&&  NodeUtil.hasFinally(node)||  NodeUtil.hasFinally(node))  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isName(n)&&  NodeUtil.hasFinally(node)||  NodeUtil.hasFinally(node))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isName(n)&&  NodeUtil.hasFinally(node)||  NodeUtil.hasFinally(node))  {	  if(NodeUtil.isName(n)&&    NodeUtil.hasFinally(node))    {    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
463	[BUG]  [BUGGY]  Node  n  =  anyCatchNodes.getFirstChild();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Node  n  =  anyCatchNodes.getFirstChild();  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  n  =  anyCatchNodes.getFirstChild();	  Node    n    =    this.allCatchNodes.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	166	None	replace
464	[BUG]  [BUGGY]  Preconditions.checkState(n.hasOneChild());  Node  n  =  catchNode.getFirstChild();  [CE]  illegal  start  of  type  [FE]              RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(n.hasOneChild());  Node  n  =  catchNode.getFirstChild();  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(n.hasOneChild());  Node  n  =  catchNode.getFirstChild();	          Preconditions.checkState(n.hasOneChild());    Node    n    =    catchNode.getFirstChild();    Preconditions.checkState(n.hasOneChild());    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
465	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  NodeUtil.hasFinally(n,  n.getFirstChild()))  {  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  NodeUtil.hasFinally(n,  n.getFirstChild()))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isExpressionNode(n)&&  NodeUtil.hasFinally(n,  n.getFirstChild()))  {	  if(NodeUtil.isExpressionNode(n)&&    NodeUtil.hasFinally(n.getFirstChild()))    {    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
466	[BUG]  [BUGGY]  Node  n  =  allCatchNodes.getParent();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Node  n  =  allCatchNodes.getParent();  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  n  =  allCatchNodes.getParent();	  Node    n    =    catchNode.getParent();    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
467	[BUG]  [BUGGY]  Preconditions.checkState(n.isExit()  &&  NodeUtil.hasFinally(n));  [CE]  illegal  start  of  type  [FE]        RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(n.isExit()  &&  NodeUtil.hasFinally(n));  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(n.isExit()  &&  NodeUtil.hasFinally(n));	  Preconditions.checkState(n.isExit());    	non-compiled	[CE]  illegal  start  of  type	175	None	replace
468	[BUG]  [BUGGY]  Preconditions.checkState(n.isExit(),  exitType);  [CE]  illegal  start  of  type  [FE]          RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(n.isExit(),  exitType);  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(n.isExit(),  exitType);	  Preconditions.checkState(n.isExit());    	non-compiled	[CE]  illegal  start  of  type	175	None	replace
469	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(catchNode)||  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  cannot  find  symbol  catchNode  [FE]        RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.isExpressionNode(catchNode)||  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isExpressionNode(catchNode)||  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.isExpressionNode(n)||    NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol  catchNode	160	None	replace
470	[BUG]  [BUGGY]  if(NodeUtil.hasExpressionNode(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.hasExpressionNode(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasExpressionNode(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.isExpressionNode(n)||    NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	160	None	replace
471	[BUG]  [BUGGY]  Node  n  =  catchNodes.cloneTree();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Node  n  =  catchNodes.cloneTree();  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  n  =  catchNodes.cloneTree();	  Node    n    =    catchNode.cloneTree();    	non-compiled	[CE]  illegal  start  of  type	174	None	replace
472	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  exitType);  [CE]  illegal  start  of  type  [FE]          RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  exitType);  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  exitType);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
473	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  type  [FE]            RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(allCatchNodes.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(allCatchNodes.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
474	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  labelName);  [CE]  illegal  start  of  type  [FE]              RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  labelName);  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  labelName);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
475	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.getFirstChild()  ==  null);  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(n))  {  Node  elseBlock  =  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Preconditions.checkState(allCatchNodes.getFirstChild()  ==  null);  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(n))  {  Node  elseBlock  =  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(allCatchNodes.getFirstChild()  ==  null);  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(n))  {  Node  elseBlock  =	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    elseBlock    =    allCatchNodes.getFirstChild();    if(NodeUtil.hasFinally(n))    {    Node    elseBlock    =    allCatchNodes.getFirstChild();    tryMinimizeExits(exitType,    labelName);    }    	non-compiled	[CE]  ';'  expected	171	None	replace
476	[BUG]  [BUGGY]  NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(n))  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(n))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(n))  {	  if(NodeUtil.hasFinally(n)||    NodeUtil.hasFinally(n))    {    NodeUtil.hasFinally(n)||    NodeUtil.hasFinally(n))    {    	non-compiled	[CE]  not  a  statement	10	None	replace
477	[BUG]  [BUGGY]  NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  not  a  statement  [FE]        RuntimeException      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.hasFinally(n)||    NodeUtil.hasFinally(allCatchNodes))    {    NodeUtil.hasFinally(n)||    NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  not  a  statement	122	None	replace
478	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(labelName,  escapeType))  {  [CE]  cannot  find  symbol  escapeType  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.hasFinally(labelName,  escapeType))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(labelName,  escapeType))  {	  if(NodeUtil.hasFinally(labelName))    {    	non-compiled	[CE]  cannot  find  symbol  escapeType	55	None	replace
479	[BUG]  [BUGGY]  Node  n  =  allCatchNodes.get(n.getFirstChild());  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  Node  n  =  allCatchNodes.get(n.getFirstChild());  [BUGGY]      if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  n  =  allCatchNodes.get(n.getFirstChild());	  Node    n    =    allCatchNodes.get(n);    	non-compiled	[CE]  illegal  start  of  type	173	None	replace
480	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }          [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(allCatchNodes)||    NodeUtil.hasFinally(allCatchNodes))    {    NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {	  	non-compiled	[CE]  not  a  statement	61	None	add
