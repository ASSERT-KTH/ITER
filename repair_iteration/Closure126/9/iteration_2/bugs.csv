bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getLastChild();  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  Node  elseBlock  =  allCatchNodes.getLastChild();  [BUGGY]    if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  elseBlock  =  allCatchNodes.getLastChild();	      Node    elseBlock    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
2	[BUG]  [BUGGY]  Node  elseBlock  =  n.getFirstChild();  [CE]  illegal  start  of  type  [FE]      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  Node  elseBlock  =  n.getFirstChild();  [BUGGY]    if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  elseBlock  =  n.getFirstChild();	      Node    elseBlock    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
3	[BUG]  [BUGGY]  Node  elseBlock  =  catchNodes.getFirstChild();  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  Node  elseBlock  =  catchNodes.getFirstChild();  [BUGGY]    if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  elseBlock  =  catchNodes.getFirstChild();	      Node    elseBlock    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
4	[BUG]  [BUGGY]      Node  c  =  allCatchNodes.getFirstChild();  Node  c  =  allCatchNodes.getFirstChild();  [CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]      Node  c  =  allCatchNodes.getFirstChild();  Node  c  =  allCatchNodes.getFirstChild();  [BUGGY]    if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	        Node    c    =    allCatchNodes.getFirstChild();    Node  c  =  allCatchNodes.getFirstChild();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	21	None	add
5	[BUG]  [BUGGY]      Node  c  =  allCatchNodes.getFirstChild();  Node  c  =  allCatchNodes.getLastChild();  [CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]      Node  c  =  allCatchNodes.getFirstChild();  Node  c  =  allCatchNodes.getLastChild();  [BUGGY]    if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	        Node    c    =    allCatchNodes.getFirstChild();    Node  c  =  allCatchNodes.getLastChild();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	21	None	add
6	[BUG]  [BUGGY]      Node  c  =  allCatchNodes.getFirstChild();  Node  n  =  allCatchNodes.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]      Node  c  =  allCatchNodes.getFirstChild();  Node  n  =  allCatchNodes.getFirstChild();  [BUGGY]    if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	        Node    c    =    allCatchNodes.getFirstChild();    Node  n  =  allCatchNodes.getFirstChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	21	None	add
7	[BUG]  [BUGGY]      Node  c  =  allCatchNodes.getFirstChild();  Node  c  =  allCatchNodes.getFirstChild();  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]      Node  c  =  allCatchNodes.getFirstChild();  Node  c  =  allCatchNodes.getFirstChild();  }  [BUGGY]    if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	        Node    c    =    allCatchNodes.getFirstChild();    Node  c  =  allCatchNodes.getFirstChild();  }	  	non-compiled	[CE]  illegal  start  of  type	21	None	add
8	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(n))  {  if(NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(n))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  if(NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(n))  {  if(NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(n))  {  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(n)||    NodeUtil.hasFinally(n))    {    if(NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(n))  {	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
9	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(n))  {  If(NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(n))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  if(NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(n))  {  If(NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(n))  {  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(n)||    NodeUtil.hasFinally(n))    {    If(NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(n))  {	  	non-compiled	[CE]  ';'  expected	4	None	add
10	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(n))  {  NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(n))  {  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  if(NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(n))  {  NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(n))  {  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(n)||    NodeUtil.hasFinally(n))    {    NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(n))  {	  	non-compiled	[CE]  not  a  statement	4	None	add
11	[BUG]  [BUGGY]      Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]      Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  [BUGGY]    if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	        Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  elseBlock  =  allCatchNodes.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	19	None	add
12	[BUG]  [BUGGY]      Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getLastChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]      Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getLastChild();  [BUGGY]    if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	        Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  elseBlock  =  allCatchNodes.getLastChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	19	None	add
13	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]      Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  otherBlock  =  allCatchNodes.getFirstChild();  [BUGGY]    if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	add	        Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  otherBlock  =  allCatchNodes.getFirstChild();	  	compilable	  [FE]  AssertionFailedError  	19	2	add
14	[BUG]  [BUGGY]      Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  otherBlock  =  allCatchNodes.getFirstChild();  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]      Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  otherBlock  =  allCatchNodes.getFirstChild();  [BUGGY]    if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	        Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  otherBlock  =  allCatchNodes.getFirstChild();	  	compilable	  [FE]  AssertionFailedError  	19	2	add
15	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]      Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  thenBlock  =  allCatchNodes.getFirstChild();  [BUGGY]    if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	add	        Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  thenBlock  =  allCatchNodes.getFirstChild();	  	compilable	  [FE]  AssertionFailedError  	19	2	add
16	[BUG]  [BUGGY]      Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  thenBlock  =  allCatchNodes.getFirstChild();  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]      Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  thenBlock  =  allCatchNodes.getFirstChild();  [BUGGY]    if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	        Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  thenBlock  =  allCatchNodes.getFirstChild();	  	compilable	  [FE]  AssertionFailedError  	19	2	add
17	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]      Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  anotherBlock  =  allCatchNodes.getFirstChild();  [BUGGY]    if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	add	        Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  anotherBlock  =  allCatchNodes.getFirstChild();	  	compilable	  [FE]  AssertionFailedError  	19	2	add
18	[BUG]  [BUGGY]      Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  anotherBlock  =  allCatchNodes.getFirstChild();  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]      Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  anotherBlock  =  allCatchNodes.getFirstChild();  [BUGGY]    if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	        Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  anotherBlock  =  allCatchNodes.getFirstChild();	  	compilable	  [FE]  AssertionFailedError  	19	2	add
19	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(catchNode)||  NodeUtil.hasFinally(n))  {  [CE]  cannot  find  symbol  catchNode  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  if(NodeUtil.hasFinally(catchNode)||  NodeUtil.hasFinally(n))  {  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(catchNode)||  NodeUtil.hasFinally(n))  {	  if(NodeUtil.hasFinally(n)||    NodeUtil.hasFinally(n))    {    	non-compiled	[CE]  cannot  find  symbol  catchNode	5	None	replace
20	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  if(NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(n))  {  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	add	if(NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(n))  {	  if(NodeUtil.hasFinally(n)||    NodeUtil.hasFinally(n))    {    	compilable	  [FE]  AssertionFailedError  	5	2	replace
21	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(n))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  if(NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(n))  {  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(n))  {	  if(NodeUtil.hasFinally(n)||    NodeUtil.hasFinally(n))    {    	compilable	  [FE]  AssertionFailedError  	5	2	replace
22	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(callNode)||  NodeUtil.hasFinally(n))  {  [CE]  cannot  find  symbol  callNode  [FE]        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  if(NodeUtil.hasFinally(callNode)||  NodeUtil.hasFinally(n))  {  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(callNode)||  NodeUtil.hasFinally(n))  {	  if(NodeUtil.hasFinally(n)||    NodeUtil.hasFinally(n))    {    	non-compiled	[CE]  cannot  find  symbol  callNode	5	None	replace
23	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(catchNodes)||  NodeUtil.hasFinally(n))  {  [CE]  cannot  find  symbol  catchNodes  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  if(NodeUtil.hasFinally(catchNodes)||  NodeUtil.hasFinally(n))  {  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(catchNodes)||  NodeUtil.hasFinally(n))  {	  if(NodeUtil.hasFinally(n)||    NodeUtil.hasFinally(n))    {    	non-compiled	[CE]  cannot  find  symbol  catchNodes	5	None	replace
24	[BUG]  [BUGGY]  Node  c  =  catchNode.getFirstChild();  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  Node  c  =  catchNode.getFirstChild();  [BUGGY]    if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  c  =  catchNode.getFirstChild();	      Node    c    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
25	[BUG]  [BUGGY]  Node  c  =  allCatchNodes.getLastChild();  [CE]  illegal  start  of  type  [FE]      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  Node  c  =  allCatchNodes.getLastChild();  [BUGGY]    if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  c  =  allCatchNodes.getLastChild();	      Node    c    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
26	[BUG]  [BUGGY]  Node  c  =  catchNodes.getFirstChild();  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  Node  c  =  catchNodes.getFirstChild();  [BUGGY]    if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  c  =  catchNodes.getFirstChild();	      Node    c    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
27	[BUG]  [BUGGY]  Node  c  =  catchNode.getLastChild();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  Node  c  =  catchNode.getLastChild();  [BUGGY]    if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  c  =  catchNode.getLastChild();	      Node    c    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
28	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes))  {  if(NodeUtil.hasFinally(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes))  {  if(NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(allCatchNodes))    {    if(NodeUtil.hasFinally(allCatchNodes))  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
29	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes))  {  if(NodeUtil.isFinally(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes))  {  if(NodeUtil.isFinally(allCatchNodes))  {  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(allCatchNodes))    {    if(NodeUtil.isFinally(allCatchNodes))  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
30	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  [CE]  illegal  start  of  expression  [FE]        RuntimeException    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(allCatchNodes))    {    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
31	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes))  {  if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]          RuntimeException    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes))  {  if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(allCatchNodes))    {    if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
32	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes))  {  If(NodeUtil.hasFinally(allCatchNodes))  {  [CE]  ';'  expected  [FE]            RuntimeException    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes))  {  If(NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(allCatchNodes))    {    If(NodeUtil.hasFinally(allCatchNodes))  {	  	non-compiled	[CE]  ';'  expected	1	None	add
33	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes))  {  if(NodeUtil.hasFinally(allCatchNodes))  <  Node  finallyBlock  =  n.getLastChild();  [CE]  >  expected  [FE]              RuntimeException    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes))  {  if(NodeUtil.hasFinally(allCatchNodes))  <  Node  finallyBlock  =  n.getLastChild();  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(allCatchNodes))    {    if(NodeUtil.hasFinally(allCatchNodes))  <  Node  finallyBlock  =  n.getLastChild();	  	non-compiled	[CE]  >  expected	1	None	add
34	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.isLabelHandler(n))  {  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.isLabelHandler(n))  {  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.isLabelHandler(n))  {	  if(NodeUtil.hasFinally(n)&&    NodeUtil.isLabelHandler(n))    {    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
35	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(catchNode)&&  NodeUtil.isLabelHandler(n))  {  [CE]  cannot  find  symbol  catchNode  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  if(NodeUtil.hasFinally(catchNode)&&  NodeUtil.isLabelHandler(n))  {  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(catchNode)&&  NodeUtil.isLabelHandler(n))  {	  if(NodeUtil.hasFinally(n)&&    NodeUtil.isLabelHandler(n))    {    	non-compiled	[CE]  cannot  find  symbol  catchNode	16	None	replace
36	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(c)&&  NodeUtil.isLabelHandler(n))  {  [CE]  cannot  find  symbol  c  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  if(NodeUtil.hasFinally(c)&&  NodeUtil.isLabelHandler(n))  {  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(c)&&  NodeUtil.isLabelHandler(n))  {	  if(NodeUtil.hasFinally(n)&&    NodeUtil.isLabelHandler(n))    {    	non-compiled	[CE]  cannot  find  symbol  c	16	None	replace
37	[BUG]  [BUGGY]  if(NodeUtil.isFinally(n)&&  NodeUtil.isLabelHandler(n))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  if(NodeUtil.isFinally(n)&&  NodeUtil.isLabelHandler(n))  {  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isFinally(n)&&  NodeUtil.isLabelHandler(n))  {	  if(NodeUtil.hasFinally(n)&&    NodeUtil.isLabelHandler(n))    {    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
38	[BUG]  [BUGGY]  Node  n  =  catchNode.getLastChild();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  Node  n  =  catchNode.getLastChild();  [BUGGY]    if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  n  =  catchNode.getLastChild();	      Node    n    =    catchNode.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
39	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(allCatchNodes))  {  if(NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  if(NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(allCatchNodes))  {  if(NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(n)||    NodeUtil.hasFinally(allCatchNodes))    {    if(NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(allCatchNodes))  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
40	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(allCatchNodes))  {  If(NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  if(NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(allCatchNodes))  {  If(NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(n)||    NodeUtil.hasFinally(allCatchNodes))    {    If(NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(allCatchNodes))  {	  	non-compiled	[CE]  ';'  expected	7	None	add
41	[BUG]  [BUGGY]  Node  elseBlock  =  catchNode.getNext();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  Node  elseBlock  =  catchNode.getNext();  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  elseBlock  =  catchNode.getNext();	      	non-compiled	[CE]  illegal  start  of  type	9	None	replace
42	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]      Preconditions.checkState(n.isLabel());  Preconditions.checkState(n.isLabel());  [BUGGY]    if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	add	        Preconditions.checkState(n.isLabel());    Preconditions.checkState(n.isLabel());	  	compilable	  [FE]  RuntimeException  	25	6	add
43	[BUG]  [BUGGY]      Preconditions.checkState(n.isLabel());  Preconditions.checkState(n.isLabel());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]      Preconditions.checkState(n.isLabel());  Preconditions.checkState(n.isLabel());  [BUGGY]    if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	        Preconditions.checkState(n.isLabel());    Preconditions.checkState(n.isLabel());	  	compilable	  [FE]  RuntimeException  	25	6	add
44	[BUG]  [BUGGY]      Preconditions.checkState(n.isLabel());  Node  n  =  allCatchNodes.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      RuntimeException    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]      Preconditions.checkState(n.isLabel());  Node  n  =  allCatchNodes.getFirstChild();  [BUGGY]    if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	        Preconditions.checkState(n.isLabel());    Node  n  =  allCatchNodes.getFirstChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	25	None	add
45	[BUG]  [BUGGY]      Preconditions.checkState(n.isLabel());  NodeUtil.checkState(n.isLabel());  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]      Preconditions.checkState(n.isLabel());  NodeUtil.checkState(n.isLabel());  [BUGGY]    if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	        Preconditions.checkState(n.isLabel());    NodeUtil.checkState(n.isLabel());	  	non-compiled	[CE]  cannot  find  symbol	25	None	add
46	[BUG]  [BUGGY]      Preconditions.checkState(n.isLabel());  Node  n  =  catchNode.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          RuntimeException    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]      Preconditions.checkState(n.isLabel());  Node  n  =  catchNode.getFirstChild();  [BUGGY]    if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	        Preconditions.checkState(n.isLabel());    Node  n  =  catchNode.getFirstChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	25	None	add
47	[BUG]  [BUGGY]      Preconditions.checkState(n.isLabel());  NodeUtil.checkLabel(n.isLabel());  [CE]  cannot  find  symbol  [FE]            RuntimeException    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]      Preconditions.checkState(n.isLabel());  NodeUtil.checkLabel(n.isLabel());  [BUGGY]    if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	        Preconditions.checkState(n.isLabel());    NodeUtil.checkLabel(n.isLabel());	  	non-compiled	[CE]  cannot  find  symbol	25	None	add
48	[BUG]  [BUGGY]      Preconditions.checkState(n.isLabel());  Node  n  =  catchNodes.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]              RuntimeException    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]      Preconditions.checkState(n.isLabel());  Node  n  =  catchNodes.getFirstChild();  [BUGGY]    if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	        Preconditions.checkState(n.isLabel());    Node  n  =  catchNodes.getFirstChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	25	None	add
49	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.isName(n.getFirstChild()))  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.isName(n.getFirstChild()))  {  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.isName(n.getFirstChild()))  {	  if(NodeUtil.hasFinally(n)&&    NodeUtil.isName(n.getFirstChild()))    {    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
50	[BUG]  [BUGGY]  if(NodeUtil.isFinally(n)&&  NodeUtil.isName(n.getFirstChild()))  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  if(NodeUtil.isFinally(n)&&  NodeUtil.isName(n.getFirstChild()))  {  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isFinally(n)&&  NodeUtil.isName(n.getFirstChild()))  {	  if(NodeUtil.hasFinally(n)&&    NodeUtil.isName(n.getFirstChild()))    {    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
51	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(n)&&  NodeUtil.isName(n,  allCatchNodes.getFirstChild()))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  if(NodeUtil.hasFinally(n)&&  NodeUtil.isName(n,  allCatchNodes.getFirstChild()))  {  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(n)&&  NodeUtil.isName(n,  allCatchNodes.getFirstChild()))  {	  if(NodeUtil.hasFinally(n)&&    NodeUtil.isName(n.getFirstChild()))    {    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
52	[BUG]  [BUGGY]  if(NodeUtil.isName(n)&&  NodeUtil.hasFinally(n.getFirstChild()))  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  if(NodeUtil.isName(n)&&  NodeUtil.hasFinally(n.getFirstChild()))  {  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isName(n)&&  NodeUtil.hasFinally(n.getFirstChild()))  {	  if(NodeUtil.hasFinally(n)&&    NodeUtil.isName(n.getFirstChild()))    {    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
53	[BUG]  [BUGGY]  Node  n  =  allCatchNodes.getLastChild();  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  Node  n  =  allCatchNodes.getLastChild();  [BUGGY]    if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  n  =  allCatchNodes.getLastChild();	      Node    n    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
54	[BUG]  [BUGGY]  if(NodeUtil.isFinally(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  if(NodeUtil.isFinally(allCatchNodes))  {  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isFinally(allCatchNodes))  {	  if(NodeUtil.hasFinally(catchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
55	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(labelName))  {  [CE]  method  hasFinally  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  if(NodeUtil.hasFinally(labelName))  {  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(labelName))  {	  if(NodeUtil.hasFinally(catchNodes))    {    	non-compiled	[CE]  method  hasFinally  in  class  NodeUtil  cannot  be  applied  to  given  types;	3	None	replace
56	[BUG]  [BUGGY]  Node  n  =  allCatchNodes.get(c);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  Node  n  =  allCatchNodes.get(c);  [BUGGY]    if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  n  =  allCatchNodes.get(c);	      Node    n    =    allCatchNodes.get(0);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
57	[BUG]  [BUGGY]  Node  n  =  allCatchNodes.get(1);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  Node  n  =  allCatchNodes.get(1);  [BUGGY]    if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  n  =  allCatchNodes.get(1);	      Node    n    =    allCatchNodes.get(0);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
58	[BUG]  [BUGGY]  Preconditions.checkState(n.hasChildren());  [CE]  illegal  start  of  type  [FE]    RuntimeException    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  Preconditions.checkState(n.hasChildren());  [BUGGY]    if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(n.hasChildren());	      Preconditions.checkState(n.hasOneChild());    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
59	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  type  [FE]      RuntimeException    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);	      Preconditions.checkState(n.hasOneChild());    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
60	[BUG]  [BUGGY]  Preconditions.checkState(n.hasFinally());  [CE]  illegal  start  of  type  [FE]        RuntimeException    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  Preconditions.checkState(n.hasFinally());  [BUGGY]    if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(n.hasFinally());	      Preconditions.checkState(n.hasOneChild());    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
61	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	add	if(NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.hasFinally(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	2	6	replace
62	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.hasFinally(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	2	6	replace
63	[BUG]  [BUGGY]  if(NodeUtil.isFinally(n))  {  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  if(NodeUtil.isFinally(n))  {  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isFinally(n))  {	  if(NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
64	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n))  {  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  if(NodeUtil.isExpressionNode(n))  {  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isExpressionNode(n))  {	  if(NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
65	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  if(NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(n.getFirstChild()))  {  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	add	if(NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(n.getFirstChild()))  {	  if(NodeUtil.hasFinally(n)&&    NodeUtil.hasFinally(n.getFirstChild()))    {    	compilable	  [FE]  RuntimeException  	29	6	replace
66	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(n.getFirstChild()))  {  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  if(NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(n.getFirstChild()))  {  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(n.getFirstChild()))  {	  if(NodeUtil.hasFinally(n)&&    NodeUtil.hasFinally(n.getFirstChild()))    {    	compilable	  [FE]  RuntimeException  	29	6	replace
67	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(catchNode)&&  NodeUtil.hasFinally(n.getFirstChild()))  {  [CE]  cannot  find  symbol  catchNode  [FE]      RuntimeException    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  if(NodeUtil.hasFinally(catchNode)&&  NodeUtil.hasFinally(n.getFirstChild()))  {  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(catchNode)&&  NodeUtil.hasFinally(n.getFirstChild()))  {	  if(NodeUtil.hasFinally(n)&&    NodeUtil.hasFinally(n.getFirstChild()))    {    	non-compiled	[CE]  cannot  find  symbol  catchNode	29	None	replace
68	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  NodeUtil.hasFinally(n.getFirstChild()))  {  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  NodeUtil.hasFinally(n.getFirstChild()))  {  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isExpressionNode(n)&&  NodeUtil.hasFinally(n.getFirstChild()))  {	  if(NodeUtil.hasFinally(n)&&    NodeUtil.hasFinally(n.getFirstChild()))    {    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
69	[BUG]  [BUGGY]  if(NodeUtil.isFinally(node)&&  NodeUtil.hasFinally(node))  {  [CE]  cannot  find  symbol  node  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  if(NodeUtil.isFinally(node)&&  NodeUtil.hasFinally(node))  {  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isFinally(node)&&  NodeUtil.hasFinally(node))  {	  if(NodeUtil.isFinally(n)&&    NodeUtil.hasFinally(node))    {    	non-compiled	[CE]  cannot  find  symbol  node	17	None	replace
70	[BUG]  [BUGGY]  if(NodeUtil.isFinally(n)||  NodeUtil.hasFinally(node))  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  if(NodeUtil.isFinally(n)||  NodeUtil.hasFinally(node))  {  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isFinally(n)||  NodeUtil.hasFinally(node))  {	  if(NodeUtil.isFinally(n)&&    NodeUtil.hasFinally(node))    {    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
71	[BUG]  [BUGGY]  if(NodeUtil.isFinally(n)&&  NodeUtil.hasFinally(catchNode))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  if(NodeUtil.isFinally(n)&&  NodeUtil.hasFinally(catchNode))  {  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isFinally(n)&&  NodeUtil.hasFinally(catchNode))  {	  if(NodeUtil.isFinally(n)&&    NodeUtil.hasFinally(node))    {    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
72	[BUG]  [BUGGY]  if(NodeUtil.isName(n)&&  NodeUtil.hasFinally(node))  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  if(NodeUtil.isName(n)&&  NodeUtil.hasFinally(node))  {  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isName(n)&&  NodeUtil.hasFinally(node))  {	  if(NodeUtil.isFinally(n)&&    NodeUtil.hasFinally(node))    {    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
73	[BUG]  [BUGGY]  Node  elseBlock  =  catchNode.getLastChild();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  Node  elseBlock  =  catchNode.getLastChild();  [BUGGY]    if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  elseBlock  =  catchNode.getLastChild();	      Node    elseBlock    =    catchNode.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
74	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(c)||  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  cannot  find  symbol  c  [FE]    RuntimeException    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  if(NodeUtil.hasFinally(c)||  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(c)||  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.hasFinally(n)||    NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol  c	8	None	replace
75	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(catchNode)||  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  cannot  find  symbol  catchNode  [FE]      RuntimeException    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  if(NodeUtil.hasFinally(catchNode)||  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(catchNode)||  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.hasFinally(n)||    NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol  catchNode	8	None	replace
76	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  if(NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	add	if(NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.hasFinally(n)||    NodeUtil.hasFinally(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	8	2	replace
77	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(allCatchNodes))  {  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  if(NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.hasFinally(n)||    NodeUtil.hasFinally(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	8	2	replace
78	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(callNode)||  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  cannot  find  symbol  callNode  [FE]          RuntimeException    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  if(NodeUtil.hasFinally(callNode)||  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(callNode)||  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.hasFinally(n)||    NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol  callNode	8	None	replace
79	[BUG]  [BUGGY]  Node  n  =  catchNodes.getLastChild();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  Node  n  =  catchNodes.getLastChild();  [BUGGY]    if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  n  =  catchNodes.getLastChild();	      Node    n    =    catchNodes.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
80	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(n.getFirstChild()))  {  if(NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(n.getFirstChild()))  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  if(NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(n.getFirstChild()))  {  if(NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(n.getFirstChild()))  {  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(n)&&    NodeUtil.hasFinally(n.getFirstChild()))    {    if(NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(n.getFirstChild()))  {	  	non-compiled	[CE]  illegal  start  of  expression	28	None	add
81	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(n.getFirstChild()))  {  if(NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(n.getLastChild()))  {  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  if(NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(n.getFirstChild()))  {  if(NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(n.getLastChild()))  {  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(n)&&    NodeUtil.hasFinally(n.getFirstChild()))    {    if(NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(n.getLastChild()))  {	  	non-compiled	[CE]  illegal  start  of  expression	28	None	add
82	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(n.getFirstChild()))  {  If(NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(n.getFirstChild()))  {  [CE]  ';'  expected  [FE]        RuntimeException    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  if(NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(n.getFirstChild()))  {  If(NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(n.getFirstChild()))  {  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(n)&&    NodeUtil.hasFinally(n.getFirstChild()))    {    If(NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(n.getFirstChild()))  {	  	non-compiled	[CE]  ';'  expected	28	None	add
83	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(n.getFirstChild()))  {  if(NodeUtil.isFinally(n)&&  NodeUtil.hasFinally(n.getFirstChild()))  {  [CE]  illegal  start  of  expression  [FE]          RuntimeException    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  if(NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(n.getFirstChild()))  {  if(NodeUtil.isFinally(n)&&  NodeUtil.hasFinally(n.getFirstChild()))  {  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(n)&&    NodeUtil.hasFinally(n.getFirstChild()))    {    if(NodeUtil.isFinally(n)&&  NodeUtil.hasFinally(n.getFirstChild()))  {	  	non-compiled	[CE]  illegal  start  of  expression	28	None	add
84	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(n.getFirstChild()))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  [CE]  illegal  start  of  expression  [FE]            RuntimeException    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  if(NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(n.getFirstChild()))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(n)&&    NodeUtil.hasFinally(n.getFirstChild()))    {    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);	  	non-compiled	[CE]  illegal  start  of  expression	28	None	add
85	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]      Preconditions.checkState(n.hasOneChild());  Preconditions.checkState(n.hasOneChild());  [BUGGY]    if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	add	        Preconditions.checkState(n.hasOneChild());    Preconditions.checkState(n.hasOneChild());	  	compilable	  [FE]  RuntimeException  	23	6	add
86	[BUG]  [BUGGY]      Preconditions.checkState(n.hasOneChild());  Preconditions.checkState(n.hasOneChild());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]      Preconditions.checkState(n.hasOneChild());  Preconditions.checkState(n.hasOneChild());  [BUGGY]    if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	        Preconditions.checkState(n.hasOneChild());    Preconditions.checkState(n.hasOneChild());	  	compilable	  [FE]  RuntimeException  	23	6	add
87	[BUG]  [BUGGY]      Preconditions.checkState(n.hasOneChild());  Node  n  =  allCatchNodes.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      RuntimeException    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]      Preconditions.checkState(n.hasOneChild());  Node  n  =  allCatchNodes.getFirstChild();  [BUGGY]    if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	        Preconditions.checkState(n.hasOneChild());    Node  n  =  allCatchNodes.getFirstChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	23	None	add
88	[BUG]  [BUGGY]      Preconditions.checkState(n.hasOneChild());  Node  n  =  allCatchNodes.getFirstChild();  Preconditions.checkState(n.hasOneChild());  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        RuntimeException    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]      Preconditions.checkState(n.hasOneChild());  Node  n  =  allCatchNodes.getFirstChild();  Preconditions.checkState(n.hasOneChild());  [BUGGY]    if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	        Preconditions.checkState(n.hasOneChild());    Node  n  =  allCatchNodes.getFirstChild();  Preconditions.checkState(n.hasOneChild());	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	23	None	add
89	[BUG]  [BUGGY]      Preconditions.checkState(n.hasOneChild());  Node  n  =  catchNode.getFirstChild();  Preconditions.checkState(n.hasOneChild());  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          RuntimeException    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]      Preconditions.checkState(n.hasOneChild());  Node  n  =  catchNode.getFirstChild();  Preconditions.checkState(n.hasOneChild());  [BUGGY]    if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	        Preconditions.checkState(n.hasOneChild());    Node  n  =  catchNode.getFirstChild();  Preconditions.checkState(n.hasOneChild());	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	23	None	add
90	[BUG]  [BUGGY]      Preconditions.checkState(n.hasOneChild());  Node  n  =  catchNodes.getFirstChild();  Preconditions.checkState(n.hasOneChild());  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]            RuntimeException    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]      Preconditions.checkState(n.hasOneChild());  Node  n  =  catchNodes.getFirstChild();  Preconditions.checkState(n.hasOneChild());  [BUGGY]    if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	        Preconditions.checkState(n.hasOneChild());    Node  n  =  catchNodes.getFirstChild();  Preconditions.checkState(n.hasOneChild());	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	23	None	add
91	[BUG]  [BUGGY]      Preconditions.checkState(n.hasOneChild());  NodeUtil.checkState(n.hasOneChild());  [CE]  cannot  find  symbol  [FE]              RuntimeException    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]      Preconditions.checkState(n.hasOneChild());  NodeUtil.checkState(n.hasOneChild());  [BUGGY]    if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	        Preconditions.checkState(n.hasOneChild());    NodeUtil.checkState(n.hasOneChild());	  	non-compiled	[CE]  cannot  find  symbol	23	None	add
92	[BUG]  [BUGGY]  n  =  catchNode.getLastChild();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  n  =  catchNode.getLastChild();  [BUGGY]    if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	n  =  catchNode.getLastChild();	      n    =    catchNode.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
93	[BUG]  [BUGGY]  n  =  catchNodes.getFirstChild();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  n  =  catchNodes.getFirstChild();  [BUGGY]    if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	n  =  catchNodes.getFirstChild();	      n    =    catchNode.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
94	[BUG]  [BUGGY]  if(NodeUtil.isFinally(n)&&  NodeUtil.hasFinally(allCatchNodes.getFirstChild()))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  if(NodeUtil.isFinally(n)&&  NodeUtil.hasFinally(allCatchNodes.getFirstChild()))  {  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isFinally(n)&&  NodeUtil.hasFinally(allCatchNodes.getFirstChild()))  {	  if(NodeUtil.isFinally(n)&&    NodeUtil.hasFinally(n.getFirstChild()))    {    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
95	[BUG]  [BUGGY]  if(NodeUtil.isFinally(n)&&  NodeUtil.hasFinally(n,  catchNode.getFirstChild()))  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  if(NodeUtil.isFinally(n)&&  NodeUtil.hasFinally(n,  catchNode.getFirstChild()))  {  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isFinally(n)&&  NodeUtil.hasFinally(n,  catchNode.getFirstChild()))  {	  if(NodeUtil.isFinally(n)&&    NodeUtil.hasFinally(n.getFirstChild()))    {    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
96	[BUG]  [BUGGY]  if(NodeUtil.isFinally(allCatchNodes)&&  NodeUtil.hasFinally(n.getFirstChild()))  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  if(NodeUtil.isFinally(allCatchNodes)&&  NodeUtil.hasFinally(n.getFirstChild()))  {  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isFinally(allCatchNodes)&&  NodeUtil.hasFinally(n.getFirstChild()))  {	  if(NodeUtil.isFinally(n)&&    NodeUtil.hasFinally(n.getFirstChild()))    {    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
97	[BUG]  [BUGGY]  if(NodeUtil.isFinally(n)&&  NodeUtil.hasFinally(n.getLastChild()))  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  if(NodeUtil.isFinally(n)&&  NodeUtil.hasFinally(n.getLastChild()))  {  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isFinally(n)&&  NodeUtil.hasFinally(n.getLastChild()))  {	  if(NodeUtil.isFinally(n)&&    NodeUtil.hasFinally(n.getFirstChild()))    {    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
98	[BUG]  [BUGGY]  Preconditions.checkState(n.isFinally());  [CE]  illegal  start  of  type  [FE]    RuntimeException    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  Preconditions.checkState(n.isFinally());  [BUGGY]    if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(n.isFinally());	      Preconditions.checkState(n.isLabel());    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
99	[BUG]  [BUGGY]  Preconditions.checkState(catchNode.isLabel());  [CE]  illegal  start  of  type  [FE]      RuntimeException    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  Preconditions.checkState(catchNode.isLabel());  [BUGGY]    if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(catchNode.isLabel());	      Preconditions.checkState(n.isLabel());    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
100	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  illegal  start  of  type  [FE]        RuntimeException    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]    if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);	      Preconditions.checkState(n.isLabel());    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
101	[BUG]  [BUGGY]  Preconditions.checkState(n.isAll());  [CE]  illegal  start  of  type  [FE]          RuntimeException    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  Preconditions.checkState(n.isAll());  [BUGGY]    if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(n.isAll());	      Preconditions.checkState(n.isLabel());    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
102	[BUG]  [BUGGY]  if(NodeUtil.isFinally(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  if(NodeUtil.isFinally(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isFinally(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.isFinally(n)&&    NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
103	[BUG]  [BUGGY]  if(NodeUtil.isFinally(allCatchNodes)&&  NodeUtil.hasFinally(n))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  if(NodeUtil.isFinally(allCatchNodes)&&  NodeUtil.hasFinally(n))  {  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isFinally(allCatchNodes)&&  NodeUtil.hasFinally(n))  {	  if(NodeUtil.isFinally(n)&&    NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
104	[BUG]  [BUGGY]  if(NodeUtil.isName(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  if(NodeUtil.isName(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isName(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.isFinally(n)&&    NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
105	[BUG]  [BUGGY]  if(NodeUtil.isFinally(c)&&  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  cannot  find  symbol  c  [FE]                  AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  if(NodeUtil.isFinally(c)&&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isFinally(c)&&  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.isFinally(n)&&    NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol  c	18	None	replace
106	[BUG]  [BUGGY]  Node  n  =  catchNode.getParent();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  Node  n  =  catchNode.getParent();  [BUGGY]    if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  n  =  catchNode.getParent();	      Node    n    =    catchNode.getNext();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
107	[BUG]  [BUGGY]  Node  n  =  catchNodes.getNext();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  Node  n  =  catchNodes.getNext();  [BUGGY]    if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  n  =  catchNodes.getNext();	      Node    n    =    catchNode.getNext();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
108	[BUG]  [BUGGY]  if(NodeUtil.isFinally(catchNode)&&  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  cannot  find  symbol  catchNode  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  if(NodeUtil.isFinally(catchNode)&&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isFinally(catchNode)&&  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.isFinally(n)&&    NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol  catchNode	18	None	replace
109	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	add	if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.isFinally(n)&&    NodeUtil.hasFinally(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	18	6	replace
110	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [FE]  RuntimeException  [FE]              AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.isFinally(n)&&    NodeUtil.hasFinally(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	18	6	replace
111	[BUG]  [BUGGY]  Node  n  =  allCatchNodes.getNext();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  Node  n  =  allCatchNodes.getNext();  [BUGGY]    if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  n  =  allCatchNodes.getNext();	      Node    n    =    catchNode.getNext();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
112	[BUG]  [BUGGY]      Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(n))  {  Node  elseBlock  =  allCatchNodes.getFirstChild();  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]      Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(n))  {  Node  elseBlock  =  allCatchNodes.getFirstChild();  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  [BUGGY]    if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	        Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(n))  {  Node  elseBlock  =  allCatchNodes.getFirstChild();  tryMinimizeExits(elseBlock,  exitType,  labelName);  }	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	19	None	add
113	[BUG]  [BUGGY]      Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(n))  {  Node  elseBlock  =  allCatchNodes.getFirstChild();  tryMinimizeExits(elseBlock,  exitType,  labelName  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]      Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(n))  {  Node  elseBlock  =  allCatchNodes.getFirstChild();  tryMinimizeExits(elseBlock,  exitType,  labelName  [BUGGY]    if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	        Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(n))  {  Node  elseBlock  =  allCatchNodes.getFirstChild();  tryMinimizeExits(elseBlock,  exitType,  labelName	  	non-compiled	[CE]  ')'  expected	19	None	add
114	[BUG]  [BUGGY]      Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(n))  {  Node  elseBlock  =  allCatchNodes.getFirstChild();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]      Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(n))  {  Node  elseBlock  =  allCatchNodes.getFirstChild();  [BUGGY]    if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	        Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(n))  {  Node  elseBlock  =  allCatchNodes.getFirstChild();	  	non-compiled	[CE]  illegal  start  of  expression	19	None	add
115	[BUG]  [BUGGY]      Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(n))  {  Node  elseBlock  =  allCatchNodes.getFirstChild();  tryMinimizeExits(otherBlock,  exitType,  labelName);  }  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]      Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(n))  {  Node  elseBlock  =  allCatchNodes.getFirstChild();  tryMinimizeExits(otherBlock,  exitType,  labelName);  }  [BUGGY]    if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	        Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(n))  {  Node  elseBlock  =  allCatchNodes.getFirstChild();  tryMinimizeExits(otherBlock,  exitType,  labelName);  }	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	19	None	add
116	[BUG]  [BUGGY]  n  =  allCatchNodes.getFirstChild();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  n  =  allCatchNodes.getFirstChild();  [BUGGY]    if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	n  =  allCatchNodes.getFirstChild();	      n    =    catchNode.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
117	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(n))  {  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	add	if(NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(n))  {	  if(NodeUtil.hasFinally(n)||    NodeUtil.hasFinally(n))    {    	compilable	  [FE]  RuntimeException  	5	6	replace
118	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(n))  {  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(n))  {  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(n))  {	  if(NodeUtil.hasFinally(n)||    NodeUtil.hasFinally(n))    {    	compilable	  [FE]  RuntimeException  	5	6	replace
119	[BUG]  [BUGGY]  if(NodeUtil.isFinally(n)&&  NodeUtil.hasFinally(n))  {  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  if(NodeUtil.isFinally(n)&&  NodeUtil.hasFinally(n))  {  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isFinally(n)&&  NodeUtil.hasFinally(n))  {	  if(NodeUtil.hasFinally(n)||    NodeUtil.hasFinally(n))    {    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
120	[BUG]  [BUGGY]  if(NodeUtil.isName(n)||  NodeUtil.hasFinally(n))  {  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  if(NodeUtil.isName(n)||  NodeUtil.hasFinally(n))  {  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isName(n)||  NodeUtil.hasFinally(n))  {	  if(NodeUtil.hasFinally(n)||    NodeUtil.hasFinally(n))    {    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
121	[BUG]  [BUGGY]  Node  elseBlock  =  node.getFirstChild();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  Node  elseBlock  =  node.getFirstChild();  [BUGGY]    if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  elseBlock  =  node.getFirstChild();	      Node    elseBlock    =    catchNode.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
122	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(allCatchNodes))  {  NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  if(NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(allCatchNodes))  {  NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(n)||    NodeUtil.hasFinally(allCatchNodes))    {    NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(allCatchNodes))  {	  	non-compiled	[CE]  not  a  statement	7	None	add
123	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(n.getFirstChild()))  {  NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(n.getFirstChild()))  {  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  if(NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(n.getFirstChild()))  {  NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(n.getFirstChild()))  {  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(n)&&    NodeUtil.hasFinally(n.getFirstChild()))    {    NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(n.getFirstChild()))  {	  	non-compiled	[CE]  not  a  statement	28	None	add
124	[BUG]  [BUGGY]  Node  n  =  allNodes.getFirstChild();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  Node  n  =  allNodes.getFirstChild();  [BUGGY]    if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  n  =  allNodes.getFirstChild();	      Node    n    =    catchNode.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
125	[BUG]  [BUGGY]  if(NodeUtil.isLabelHandler(n)&&  NodeUtil.hasFinally(n))  {  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  if(NodeUtil.isLabelHandler(n)&&  NodeUtil.hasFinally(n))  {  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isLabelHandler(n)&&  NodeUtil.hasFinally(n))  {	  if(NodeUtil.hasFinally(n)&&    NodeUtil.isLabelHandler(n))    {    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
126	[BUG]  [BUGGY]      Preconditions.checkState(n.hasOneChild());  Node  n  =  allCatchNodes.getFirstChild();  tryMinimizeExits(n.hasOneChild());  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    RuntimeException    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]      Preconditions.checkState(n.hasOneChild());  Node  n  =  allCatchNodes.getFirstChild();  tryMinimizeExits(n.hasOneChild());  [BUGGY]    if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	        Preconditions.checkState(n.hasOneChild());    Node  n  =  allCatchNodes.getFirstChild();  tryMinimizeExits(n.hasOneChild());	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	23	None	add
127	[BUG]  [BUGGY]      Preconditions.checkState(n.hasOneChild());  Node  n  =  catchNodes.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      RuntimeException    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]      Preconditions.checkState(n.hasOneChild());  Node  n  =  catchNodes.getFirstChild();  [BUGGY]    if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	        Preconditions.checkState(n.hasOneChild());    Node  n  =  catchNodes.getFirstChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	23	None	add
128	[BUG]  [BUGGY]  Node  c  =  allCatchNodes.getChildCount();  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  Node  c  =  allCatchNodes.getChildCount();  [BUGGY]    if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  c  =  allCatchNodes.getChildCount();	      Node    c    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
129	[BUG]  [BUGGY]  Node  c  =  allCatchNodes.get(0);  [CE]  illegal  start  of  type  [FE]      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  Node  c  =  allCatchNodes.get(0);  [BUGGY]    if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  c  =  allCatchNodes.get(0);	      Node    c    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
130	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(catchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  cannot  find  symbol  catchNodes  [FE]    RuntimeException    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  if(NodeUtil.hasFinally(catchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(catchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.hasFinally(n)||    NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol  catchNodes	8	None	replace
131	[BUG]  [BUGGY]  Node  nextBlock  =  allCatchNodes.getFirstChild();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  Node  nextBlock  =  allCatchNodes.getFirstChild();  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  nextBlock  =  allCatchNodes.getFirstChild();	      	non-compiled	[CE]  illegal  start  of  type	9	None	replace
132	[BUG]  [BUGGY]      Node  c  =  allCatchNodes.getFirstChild();  AssertionFailedError  c  =  allCatchNodes.getFirstChild();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]      Node  c  =  allCatchNodes.getFirstChild();  AssertionFailedError  c  =  allCatchNodes.getFirstChild();  [BUGGY]    if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	        Node    c    =    allCatchNodes.getFirstChild();    AssertionFailedError  c  =  allCatchNodes.getFirstChild();	  	non-compiled	[CE]  cannot  find  symbol	21	None	add
133	[BUG]  [BUGGY]      Node  c  =  allCatchNodes.getFirstChild();  Node  c  =  allCatchNodes.getFirstChild();  System.arraycopy(c,  0,  tryMinimizeExits(c,  exitType,  labelName);  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]      Node  c  =  allCatchNodes.getFirstChild();  Node  c  =  allCatchNodes.getFirstChild();  System.arraycopy(c,  0,  tryMinimizeExits(c,  exitType,  labelName);  [BUGGY]    if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	        Node    c    =    allCatchNodes.getFirstChild();    Node  c  =  allCatchNodes.getFirstChild();  System.arraycopy(c,  0,  tryMinimizeExits(c,  exitType,  labelName);	  	non-compiled	[CE]  ')'  expected	21	None	add
134	[BUG]  [BUGGY]      Node  c  =  allCatchNodes.getFirstChild();  Node  c  =  allCatchNodes.getFirstChild();  System.arraycopy(c,  0,  tryMinimizeExits(c,  exitType,  labelName));  [CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]      Node  c  =  allCatchNodes.getFirstChild();  Node  c  =  allCatchNodes.getFirstChild();  System.arraycopy(c,  0,  tryMinimizeExits(c,  exitType,  labelName));  [BUGGY]    if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	        Node    c    =    allCatchNodes.getFirstChild();    Node  c  =  allCatchNodes.getFirstChild();  System.arraycopy(c,  0,  tryMinimizeExits(c,  exitType,  labelName));	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	21	None	add
135	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  if(NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(n.getLastChild()))  {  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	add	if(NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(n.getLastChild()))  {	  if(NodeUtil.hasFinally(n)&&    NodeUtil.hasFinally(n.getFirstChild()))    {    	compilable	  [FE]  RuntimeException  	29	2	replace
136	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(n.getLastChild()))  {  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  if(NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(n.getLastChild()))  {  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(n.getLastChild()))  {	  if(NodeUtil.hasFinally(n)&&    NodeUtil.hasFinally(n.getFirstChild()))    {    	compilable	  [FE]  RuntimeException  	29	2	replace
137	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(n.getFirstChild()))  {  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	add	if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(n.getFirstChild()))  {	  if(NodeUtil.hasFinally(n)&&    NodeUtil.hasFinally(n.getFirstChild()))    {    	compilable	  [FE]  RuntimeException  	29	6	replace
138	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(n.getFirstChild()))  {  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(n.getFirstChild()))  {  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(n.getFirstChild()))  {	  if(NodeUtil.hasFinally(n)&&    NodeUtil.hasFinally(n.getFirstChild()))    {    	compilable	  [FE]  RuntimeException  	29	6	replace
139	[BUG]  [BUGGY]  if(NodeUtil.isFinally(n)&&  NodeUtil.hasFinally(n,  allCatchNodes.getFirstChild()))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  if(NodeUtil.isFinally(n)&&  NodeUtil.hasFinally(n,  allCatchNodes.getFirstChild()))  {  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isFinally(n)&&  NodeUtil.hasFinally(n,  allCatchNodes.getFirstChild()))  {	  if(NodeUtil.isFinally(n)&&    NodeUtil.hasFinally(n.getFirstChild()))    {    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
140	[BUG]  [BUGGY]  if(NodeUtil.isFinally(n)&&  NodeUtil.hasFinally(n,  n.getFirstChild()))  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  if(NodeUtil.isFinally(n)&&  NodeUtil.hasFinally(n,  n.getFirstChild()))  {  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isFinally(n)&&  NodeUtil.hasFinally(n,  n.getFirstChild()))  {	  if(NodeUtil.isFinally(n)&&    NodeUtil.hasFinally(n.getFirstChild()))    {    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
141	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes))  {  Node  finallyBlock  =  n.getLastChild();  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes))  {  Node  finallyBlock  =  n.getLastChild();  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(allCatchNodes))    {    Node  finallyBlock  =  n.getLastChild();	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
142	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes))  {  Node  finallyBlock  =  n.getFirstChild();  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes))  {  Node  finallyBlock  =  n.getFirstChild();  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(allCatchNodes))    {    Node  finallyBlock  =  n.getFirstChild();	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
143	[BUG]  [BUGGY]  if(NodeUtil.isName(node)&&  NodeUtil.hasFinally(node))  {  [CE]  cannot  find  symbol  node  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  if(NodeUtil.isName(node)&&  NodeUtil.hasFinally(node))  {  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isName(node)&&  NodeUtil.hasFinally(node))  {	  if(NodeUtil.isFinally(n)&&    NodeUtil.hasFinally(node))    {    	non-compiled	[CE]  cannot  find  symbol  node	17	None	replace
144	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(catchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  cannot  find  symbol  catchNodes  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  if(NodeUtil.hasFinally(catchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(catchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.hasFinally(catchNodes))    {    	non-compiled	[CE]  cannot  find  symbol  catchNodes	3	None	replace
145	[BUG]  [BUGGY]  Node  n  =  nodes.getFirstChild();  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  Node  n  =  nodes.getFirstChild();  [BUGGY]    if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  n  =  nodes.getFirstChild();	      Node    n    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
146	[BUG]  [BUGGY]      Preconditions.checkState(n.isLabel());  Node  n  =  allCatchNodes.getFirstChild();  Preconditions.checkState(n.isLabel());  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    RuntimeException    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]      Preconditions.checkState(n.isLabel());  Node  n  =  allCatchNodes.getFirstChild();  Preconditions.checkState(n.isLabel());  [BUGGY]    if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	        Preconditions.checkState(n.isLabel());    Node  n  =  allCatchNodes.getFirstChild();  Preconditions.checkState(n.isLabel());	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	25	None	add
147	[BUG]  [BUGGY]      Preconditions.checkState(n.isLabel());  Node  n  =  catchNodes.getFirstChild();  Preconditions.checkState(n.isLabel());  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      RuntimeException    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]      Preconditions.checkState(n.isLabel());  Node  n  =  catchNodes.getFirstChild();  Preconditions.checkState(n.isLabel());  [BUGGY]    if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	        Preconditions.checkState(n.isLabel());    Node  n  =  catchNodes.getFirstChild();  Preconditions.checkState(n.isLabel());	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	25	None	add
148	[BUG]  [BUGGY]  Preconditions.checkState(n.isFunction());  [CE]  illegal  start  of  type  [FE]    RuntimeException    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  Preconditions.checkState(n.isFunction());  [BUGGY]    if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(n.isFunction());	      Preconditions.checkState(n.isLabel());    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
149	[BUG]  [BUGGY]  Preconditions.checkState(n.isTree());  [CE]  illegal  start  of  type  [FE]      RuntimeException    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  Preconditions.checkState(n.isTree());  [BUGGY]    if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(n.isTree());	      Preconditions.checkState(n.isLabel());    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
150	[BUG]  [BUGGY]  Node  n  =  allCatchNodes.get(i);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  Node  n  =  allCatchNodes.get(i);  [BUGGY]    if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  n  =  allCatchNodes.get(i);	      Node    n    =    allCatchNodes.get(0);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
151	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(n)&&  NodeUtil.isName(n,  catchNode.getFirstChild()))  {  [CE]  cannot  find  symbol  catchNode  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  if(NodeUtil.hasFinally(n)&&  NodeUtil.isName(n,  catchNode.getFirstChild()))  {  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(n)&&  NodeUtil.isName(n,  catchNode.getFirstChild()))  {	  if(NodeUtil.hasFinally(n)&&    NodeUtil.isName(n.getFirstChild()))    {    	non-compiled	[CE]  cannot  find  symbol  catchNode	30	None	replace
152	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild());  [CE]  illegal  start  of  type  [FE]    RuntimeException    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  Preconditions.checkState(n.getFirstChild());  [BUGGY]    if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(n.getFirstChild());	      Preconditions.checkState(n.hasOneChild());    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
153	[BUG]  [BUGGY]      Node  c  =  allCatchNodes.getFirstChild();  Node  c  =  allCatchNodes.getFirstChild();  Preconditions.checkState(c!=  null);  [CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]      Node  c  =  allCatchNodes.getFirstChild();  Node  c  =  allCatchNodes.getFirstChild();  Preconditions.checkState(c!=  null);  [BUGGY]    if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	        Node    c    =    allCatchNodes.getFirstChild();    Node  c  =  allCatchNodes.getFirstChild();  Preconditions.checkState(c!=  null);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	21	None	add
154	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(callNodes))  {  [CE]  cannot  find  symbol  callNodes  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  if(NodeUtil.hasFinally(callNodes))  {  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(callNodes))  {	  if(NodeUtil.hasFinally(catchNodes))    {    	non-compiled	[CE]  cannot  find  symbol  callNodes	3	None	replace
155	[BUG]  [BUGGY]  if(NodeUtil.isLabelName(n)&&  NodeUtil.hasFinally(n.getFirstChild()))  {  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  if(NodeUtil.isLabelName(n)&&  NodeUtil.hasFinally(n.getFirstChild()))  {  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isLabelName(n)&&  NodeUtil.hasFinally(n.getFirstChild()))  {	  if(NodeUtil.hasFinally(n)&&    NodeUtil.hasFinally(n.getFirstChild()))    {    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
156	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(n)&&  NodeUtil.isLabelHandler(n,  exitType))  {  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  if(NodeUtil.hasFinally(n)&&  NodeUtil.isLabelHandler(n,  exitType))  {  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(n)&&  NodeUtil.isLabelHandler(n,  exitType))  {	  if(NodeUtil.hasFinally(n)&&    NodeUtil.isLabelHandler(n))    {    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
157	[BUG]  [BUGGY]  Node  elseBlock  =  catchNode.getParent();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  Node  elseBlock  =  catchNode.getParent();  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  elseBlock  =  catchNode.getParent();	      	non-compiled	[CE]  illegal  start  of  type	9	None	replace
158	[BUG]  [BUGGY]  Node  elseBlock  =  escapeType.getFirstChild();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  Node  elseBlock  =  escapeType.getFirstChild();  [BUGGY]    if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  elseBlock  =  escapeType.getFirstChild();	      Node    elseBlock    =    catchNode.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
159	[BUG]  [BUGGY]  Node  n  =  catchNode.removeFirstChild();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  Node  n  =  catchNode.removeFirstChild();  [BUGGY]    if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  n  =  catchNode.removeFirstChild();	      Node    n    =    catchNode.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
160	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)||  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  if(NodeUtil.isExpressionNode(n)||  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isExpressionNode(n)||  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.hasFinally(n)||    NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
161	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(allCatchNodes))  {  if(NodeUtil.isFinally(n)||  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  if(NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(allCatchNodes))  {  if(NodeUtil.isFinally(n)||  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(n)||    NodeUtil.hasFinally(allCatchNodes))    {    if(NodeUtil.isFinally(n)||  NodeUtil.hasFinally(allCatchNodes))  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
162	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  null);  [CE]  illegal  start  of  type  [FE]    RuntimeException    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  null);  [BUGGY]    if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(n.getFirstChild()  ==  null);	      Preconditions.checkState(n.hasOneChild());    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
163	[BUG]  [BUGGY]  Preconditions.checkArgument(n.hasOneChild());  [CE]  illegal  start  of  type  [FE]      RuntimeException    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  Preconditions.checkArgument(n.hasOneChild());  [BUGGY]    if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkArgument(n.hasOneChild());	      Preconditions.checkState(n.hasOneChild());    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
164	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  NodeUtil.hasFinally(node))  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  NodeUtil.hasFinally(node))  {  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isExpressionNode(n)&&  NodeUtil.hasFinally(node))  {	  if(NodeUtil.isFinally(n)&&    NodeUtil.hasFinally(node))    {    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
165	[BUG]  [BUGGY]  if(NodeUtil.isName(n)&&  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  if(NodeUtil.isName(n)&&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isName(n)&&  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.isFinally(n)&&    NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
166	[BUG]  [BUGGY]  Node  n  =  this.allCatchNodes.getFirstChild();  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  Node  n  =  this.allCatchNodes.getFirstChild();  [BUGGY]    if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  n  =  this.allCatchNodes.getFirstChild();	      Node    n    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
167	[BUG]  [BUGGY]  Node  n  =  catchNodes.removeFirstChild();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  Node  n  =  catchNodes.removeFirstChild();  [BUGGY]    if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  n  =  catchNodes.removeFirstChild();	      Node    n    =    catchNodes.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
168	[BUG]  [BUGGY]  Node  n  =  caughtNodes.getFirstChild();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  Node  n  =  caughtNodes.getFirstChild();  [BUGGY]    if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  n  =  caughtNodes.getFirstChild();	      Node    n    =    catchNodes.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
169	[BUG]  [BUGGY]  Node  c  =  n.getFirstChild();  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  Node  c  =  n.getFirstChild();  [BUGGY]    if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  c  =  n.getFirstChild();	      Node    c    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
170	[BUG]  [BUGGY]  Node  c  =  nodes.getFirstChild();  [CE]  illegal  start  of  type  [FE]      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  Node  c  =  nodes.getFirstChild();  [BUGGY]    if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  c  =  nodes.getFirstChild();	      Node    c    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
171	[BUG]  [BUGGY]      Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(n))  {  Node  elseBlock  =  allCatchNodes.getFirstChild();  tryMinimizeExits(exitType,  labelName);  }  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]      Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(n))  {  Node  elseBlock  =  allCatchNodes.getFirstChild();  tryMinimizeExits(exitType,  labelName);  }  [BUGGY]    if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	        Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(n))  {  Node  elseBlock  =  allCatchNodes.getFirstChild();  tryMinimizeExits(exitType,  labelName);  }	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	19	None	add
172	[BUG]  [BUGGY]  if(NodeUtil.isFinally(n)||  NodeUtil.hasFinally(n.getFirstChild()))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  if(NodeUtil.isFinally(n)||  NodeUtil.hasFinally(n.getFirstChild()))  {  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isFinally(n)||  NodeUtil.hasFinally(n.getFirstChild()))  {	  if(NodeUtil.isFinally(n)&&    NodeUtil.hasFinally(n.getFirstChild()))    {    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
173	[BUG]  [BUGGY]  Node  n  =  allCatchNodes.get(n);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  Node  n  =  allCatchNodes.get(n);  [BUGGY]    if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  n  =  allCatchNodes.get(n);	      Node    n    =    allCatchNodes.get(0);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
174	[BUG]  [BUGGY]  Node  n  =  catchNode.cloneTree();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  Node  n  =  catchNode.cloneTree();  [BUGGY]    if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Node  n  =  catchNode.cloneTree();	      Node    n    =    catchNode.getNext();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
175	[BUG]  [BUGGY]  Preconditions.checkState(n.isExit());  [CE]  illegal  start  of  type  [FE]    RuntimeException    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  Preconditions.checkState(n.isExit());  [BUGGY]    if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	Preconditions.checkState(n.isExit());	      Preconditions.checkState(n.isLabel());    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
176	[BUG]  [BUGGY]  if(NodeUtil.isCatchHandler(n)||  NodeUtil.hasFinally(n))  {  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]  if(NodeUtil.isCatchHandler(n)||  NodeUtil.hasFinally(n))  {  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isCatchHandler(n)||  NodeUtil.hasFinally(n))  {	  if(NodeUtil.hasFinally(n)||    NodeUtil.hasFinally(n))    {    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
177	[BUG]  [BUGGY]      Preconditions.checkState(n.isLabel());  Node  n  =  catchNode.getFirstChild();  Preconditions.checkState(n.isLabel());  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    RuntimeException    [CONTEXT]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }        [BUGGY]      Preconditions.checkState(n.isLabel());  Node  n  =  catchNode.getFirstChild();  Preconditions.checkState(n.isLabel());  [BUGGY]    if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	        Preconditions.checkState(n.isLabel());    Node  n  =  catchNode.getFirstChild();  Preconditions.checkState(n.isLabel());	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	25	None	add
