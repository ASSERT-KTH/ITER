bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError  [CONTEXT]  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	add	if(NodeUtil.hasFinally(allCatchNodes))  {	if  (NodeUtil.hasFinally(n))  {  	compilable	  [FE]  RuntimeException  	17	6	replace
2	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes))  {  [FE]  RuntimeException  [FE]    AssertionFailedError  [CONTEXT]  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(allCatchNodes))  {	if  (NodeUtil.hasFinally(n))  {  	compilable	  [FE]  RuntimeException  	17	6	replace
3	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(catchNodes))  {  [CE]  cannot  find  symbol  catchNodes  [FE]      AssertionFailedError  [CONTEXT]  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [BUGGY]  if(NodeUtil.hasFinally(catchNodes))  {  [BUGGY]  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(catchNodes))  {	if  (NodeUtil.hasFinally(n))  {  	non-compiled	[CE]  cannot  find  symbol  catchNodes	17	None	replace
4	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [BUGGY]  if(NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(n))  {  [BUGGY]  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	add	if(NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(n))  {	if  (NodeUtil.hasFinally(n))  {  	compilable	  [FE]  AssertionFailedError  	17	2	replace
5	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(n))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [BUGGY]  if(NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(n))  {  [BUGGY]  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(n))  {	if  (NodeUtil.hasFinally(n))  {  	compilable	  [FE]  AssertionFailedError  	17	2	replace
6	[BUG]  [BUGGY]  if(NodeUtil.isFinally(n)&&  NodeUtil.hasFinally(n.getFirstChild()))  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError  [CONTEXT]  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [BUGGY]  if(NodeUtil.isFinally(n)&&  NodeUtil.hasFinally(n.getFirstChild()))  {  [BUGGY]  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isFinally(n)&&  NodeUtil.hasFinally(n.getFirstChild()))  {	if  (NodeUtil.hasFinally(n))  {  	non-compiled	[CE]  cannot  find  symbol	17	None	replace
7	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            AssertionFailedError  [CONTEXT]  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [BUGGY]  if(NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	add	if(NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(allCatchNodes))  {	if  (NodeUtil.hasFinally(n))  {  	compilable	  [FE]  RuntimeException  	17	6	replace
8	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(allCatchNodes))  {  [FE]  RuntimeException  [FE]            AssertionFailedError  [CONTEXT]  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [BUGGY]  if(NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(allCatchNodes))  {	if  (NodeUtil.hasFinally(n))  {  	compilable	  [FE]  RuntimeException  	17	6	replace
9	[BUG]  [BUGGY]    [CE]  illegal  start  of  type  [FE]              AssertionFailedError  [CONTEXT]  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [BUGGY]    [BUGGY]  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	  	if  (NodeUtil.hasFinally(n))  {  	non-compiled	[CE]  illegal  start  of  type	17	None	replace
10	[BUG]  [BUGGY]    Node  n  =  allCatchNodes.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError  [CONTEXT]  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [BUGGY]    Node  n  =  allCatchNodes.getFirstChild();  [BUGGY]  if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	    Node  n  =  allCatchNodes.getFirstChild();		non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	18	None	add
11	[BUG]  [BUGGY]    Node  n  =  catchNode.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      AssertionFailedError  [CONTEXT]  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [BUGGY]    Node  n  =  catchNode.getFirstChild();  [BUGGY]  if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	    Node  n  =  catchNode.getFirstChild();		non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	18	None	add
12	[BUG]  [BUGGY]    Node  elseBlock  =  catchNode.getFirstChild();  [CE]  cannot  find  symbol  catchNode  [FE]        AssertionFailedError  [CONTEXT]  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [BUGGY]    Node  elseBlock  =  catchNode.getFirstChild();  [BUGGY]  if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	    Node  elseBlock  =  catchNode.getFirstChild();		non-compiled	[CE]  cannot  find  symbol  catchNode	18	None	add
13	[BUG]  [BUGGY]    Node  n  =  catchNodes.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          AssertionFailedError  [CONTEXT]  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [BUGGY]    Node  n  =  catchNodes.getFirstChild();  [BUGGY]  if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	    Node  n  =  catchNodes.getFirstChild();		non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	18	None	add
14	[BUG]  [BUGGY]    Node  n  =  catchNode.getNext();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]            AssertionFailedError  [CONTEXT]  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [BUGGY]    Node  n  =  catchNode.getNext();  [BUGGY]  if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	    Node  n  =  catchNode.getNext();		non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	18	None	add
15	[BUG]  [BUGGY]    Node  n  =  allCatchNodes.get(0);  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]              AssertionFailedError  [CONTEXT]  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [BUGGY]    Node  n  =  allCatchNodes.get(0);  [BUGGY]  if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	    Node  n  =  allCatchNodes.get(0);		non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	18	None	add
16	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(n)&&  NodeUtil.isLabelHandler(n))  {  [CE]  cannot  find  symbol  [FE]    AssertionFailedError  [CONTEXT]  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [BUGGY]  if(NodeUtil.hasFinally(n)&&  NodeUtil.isLabelHandler(n))  {  [BUGGY]  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(n)&&  NodeUtil.isLabelHandler(n))  {	if  (NodeUtil.hasFinally(n))  {  	non-compiled	[CE]  cannot  find  symbol	17	None	replace
17	[BUG]  [BUGGY]  if(NodeUtil.isFinally(n)&&  NodeUtil.hasFinally(node))  {  [CE]  cannot  find  symbol  [FE]      AssertionFailedError  [CONTEXT]  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [BUGGY]  if(NodeUtil.isFinally(n)&&  NodeUtil.hasFinally(node))  {  [BUGGY]  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isFinally(n)&&  NodeUtil.hasFinally(node))  {	if  (NodeUtil.hasFinally(n))  {  	non-compiled	[CE]  cannot  find  symbol	17	None	replace
18	[BUG]  [BUGGY]  if(NodeUtil.isFinally(n)&&  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]        AssertionFailedError  [CONTEXT]  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [BUGGY]  if(NodeUtil.isFinally(n)&&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.isFinally(n)&&  NodeUtil.hasFinally(allCatchNodes))  {	if  (NodeUtil.hasFinally(n))  {  	non-compiled	[CE]  cannot  find  symbol	17	None	replace
19	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [BUGGY]    Node  elseBlock  =  allCatchNodes.getFirstChild();  [BUGGY]  if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	add	    Node  elseBlock  =  allCatchNodes.getFirstChild();		compilable	  [FE]  AssertionFailedError  	18	2	add
20	[BUG]  [BUGGY]    Node  elseBlock  =  allCatchNodes.getFirstChild();  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [BUGGY]    Node  elseBlock  =  allCatchNodes.getFirstChild();  [BUGGY]  if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	    Node  elseBlock  =  allCatchNodes.getFirstChild();		compilable	  [FE]  AssertionFailedError  	18	2	add
21	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [BUGGY]    Node  c  =  allCatchNodes.getFirstChild();  [BUGGY]  if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	add	    Node  c  =  allCatchNodes.getFirstChild();		compilable	  [FE]  AssertionFailedError  	18	2	add
22	[BUG]  [BUGGY]    Node  c  =  allCatchNodes.getFirstChild();  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [BUGGY]    Node  c  =  allCatchNodes.getFirstChild();  [BUGGY]  if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	    Node  c  =  allCatchNodes.getFirstChild();		compilable	  [FE]  AssertionFailedError  	18	2	add
23	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError  [CONTEXT]  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [BUGGY]    Preconditions.checkState(n.hasOneChild());  [BUGGY]  if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	add	    Preconditions.checkState(n.hasOneChild());		compilable	  [FE]  RuntimeException  	18	6	add
24	[BUG]  [BUGGY]    Preconditions.checkState(n.hasOneChild());  [FE]  RuntimeException  [FE]        AssertionFailedError  [CONTEXT]  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [BUGGY]    Preconditions.checkState(n.hasOneChild());  [BUGGY]  if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	    Preconditions.checkState(n.hasOneChild());		compilable	  [FE]  RuntimeException  	18	6	add
25	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError  [CONTEXT]  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [BUGGY]    Preconditions.checkState(n.isLabel());  [BUGGY]  if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	add	    Preconditions.checkState(n.isLabel());		compilable	  [FE]  RuntimeException  	18	6	add
26	[BUG]  [BUGGY]    Preconditions.checkState(n.isLabel());  [FE]  RuntimeException  [FE]    AssertionFailedError  [CONTEXT]  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [BUGGY]    Preconditions.checkState(n.isLabel());  [BUGGY]  if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	    Preconditions.checkState(n.isLabel());		compilable	  [FE]  RuntimeException  	18	6	add
27	[BUG]  [BUGGY]    n  =  catchNode.getFirstChild();  [CE]  cannot  find  symbol  catchNode  [FE]      AssertionFailedError  [CONTEXT]  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [BUGGY]    n  =  catchNode.getFirstChild();  [BUGGY]  if  (NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	    n  =  catchNode.getFirstChild();		non-compiled	[CE]  cannot  find  symbol  catchNode	18	None	add
28	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError  [CONTEXT]  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [BUGGY]  if(NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(n.getFirstChild()))  {  [BUGGY]  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	add	if(NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(n.getFirstChild()))  {	if  (NodeUtil.hasFinally(n))  {  	compilable	  [FE]  RuntimeException  	17	2	replace
29	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(n.getFirstChild()))  {  [FE]  RuntimeException  [FE]    AssertionFailedError  [CONTEXT]  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [BUGGY]  if(NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(n.getFirstChild()))  {  [BUGGY]  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(n.getFirstChild()))  {	if  (NodeUtil.hasFinally(n))  {  	compilable	  [FE]  RuntimeException  	17	2	replace
30	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(n)&&  NodeUtil.isName(n.getFirstChild()))  {  [CE]  cannot  find  symbol  [FE]      AssertionFailedError  [CONTEXT]  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      [BUGGY]  if(NodeUtil.hasFinally(n)&&  NodeUtil.isName(n.getFirstChild()))  {  [BUGGY]  Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	if(NodeUtil.hasFinally(n)&&  NodeUtil.isName(n.getFirstChild()))  {	if  (NodeUtil.hasFinally(n))  {  	non-compiled	[CE]  cannot  find  symbol	17	None	replace
