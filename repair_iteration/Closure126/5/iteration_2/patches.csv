bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Preconditions.checkState(n.isTry());  Node  c  =  n.getNext();  [CE]  cannot  find  symbol  tryBlock  [FE]        AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(n.isTry());  Node  c  =  n.getNext();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Preconditions.checkState(n.isTry());  Node  c  =  n.getNext();	          Node    c    =    n.getNext();    Preconditions.checkState(n.isTry());    Node    c    =    n.getNext();    	non-compiled	[CE]  cannot  find  symbol  tryBlock	109	None	replace
2	[BUG]  [BUGGY]  Preconditions.checkState(n.isTry()  ||  n.isTree());  Node  c  =  n.getNext();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(n.isTry()  ||  n.isTree());  Node  c  =  n.getNext();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Preconditions.checkState(n.isTry()  ||  n.isTree());  Node  c  =  n.getNext();	          Node    c    =    n.getNext();    Preconditions.checkState(n.isTry());    Node    c    =    n.getNext();    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
3	[BUG]  [BUGGY]  Node  tryBlock  =  n.replaceFirst(labelName,  n.removeFirstChild());  [CE]  cannot  find  symbol  [FE]        RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.replaceFirst(labelName,  n.removeFirstChild());  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.replaceFirst(labelName,  n.removeFirstChild());	  Node    tryBlock    =    n.removeFirstChild();    Node    tryBlock    =    n.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
4	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(n.isTry());  Node  tryBlock  =  n.getNext();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	add	Preconditions.checkState(n.isTry());  Node  tryBlock  =  n.getNext();	  Node    tryBlock    =    n.getNext();    Preconditions.checkState(n.isTry());    Node    tryBlock    =    n.getNext();    	compilable	  [FE]  RuntimeException  	92	6	replace
5	[BUG]  [BUGGY]  Preconditions.checkState(n.isTry());  Node  tryBlock  =  n.getNext();  [FE]  RuntimeException  [FE]        RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(n.isTry());  Node  tryBlock  =  n.getNext();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Preconditions.checkState(n.isTry());  Node  tryBlock  =  n.getNext();	  Node    tryBlock    =    n.getNext();    Preconditions.checkState(n.isTry());    Node    tryBlock    =    n.getNext();    	compilable	  [FE]  RuntimeException  	92	6	replace
6	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.getFirstChild();  Preconditions.checkState(n.isTry());  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	add	Node  tryBlock  =  n.getFirstChild();  Preconditions.checkState(n.isTry());	  Node    tryBlock    =    n.getNext();    Preconditions.checkState(n.isTry());    Node    tryBlock    =    n.getNext();    	compilable	  [FE]  AssertionFailedError  	92	2	replace
7	[BUG]  [BUGGY]  Node  tryBlock  =  n.getFirstChild();  Preconditions.checkState(n.isTry());  [FE]  AssertionFailedError  [FE]          RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.getFirstChild();  Preconditions.checkState(n.isTry());  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.getFirstChild();  Preconditions.checkState(n.isTry());	  Node    tryBlock    =    n.getNext();    Preconditions.checkState(n.isTry());    Node    tryBlock    =    n.getNext();    	compilable	  [FE]  AssertionFailedError  	92	2	replace
8	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.getNext();  Preconditions.checkState(n.isTry());  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	add	Node  tryBlock  =  n.getNext();  Preconditions.checkState(n.isTry());	  Node    tryBlock    =    n.getNext();    Preconditions.checkState(n.isTry());    Node    tryBlock    =    n.getNext();    	compilable	  [FE]  RuntimeException  	92	6	replace
9	[BUG]  [BUGGY]  Node  tryBlock  =  n.getNext();  Preconditions.checkState(n.isTry());  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.getNext();  Preconditions.checkState(n.isTry());  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.getNext();  Preconditions.checkState(n.isTry());	  Node    tryBlock    =    n.getNext();    Preconditions.checkState(n.isTry());    Node    tryBlock    =    n.getNext();    	compilable	  [FE]  RuntimeException  	92	6	replace
10	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.getFirstChild();  Node  triedBlock  =  n.getNext();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	add	Node  tryBlock  =  n.getFirstChild();  Node  triedBlock  =  n.getNext();	  Node    tryBlock    =    n.getNext();    Node    triedBlock    =    n.getNext();    	compilable	  [FE]  AssertionFailedError  	21	2	replace
11	[BUG]  [BUGGY]  Node  tryBlock  =  n.getFirstChild();  Node  triedBlock  =  n.getNext();  [FE]  AssertionFailedError  [FE]            RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.getFirstChild();  Node  triedBlock  =  n.getNext();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.getFirstChild();  Node  triedBlock  =  n.getNext();	  Node    tryBlock    =    n.getNext();    Node    triedBlock    =    n.getNext();    	compilable	  [FE]  AssertionFailedError  	21	2	replace
12	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]              RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.getParent();  Node  triedBlock  =  n.getNext();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	add	Node  tryBlock  =  n.getParent();  Node  triedBlock  =  n.getNext();	  Node    tryBlock    =    n.getNext();    Node    triedBlock    =    n.getNext();    	compilable	  [FE]  StackOverflowError  	21	6	replace
13	[BUG]  [BUGGY]  Node  tryBlock  =  n.getParent();  Node  triedBlock  =  n.getNext();  [FE]  StackOverflowError  [FE]              RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.getParent();  Node  triedBlock  =  n.getNext();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.getParent();  Node  triedBlock  =  n.getNext();	  Node    tryBlock    =    n.getNext();    Node    triedBlock    =    n.getNext();    	compilable	  [FE]  StackOverflowError  	21	6	replace
14	[BUG]  [BUGGY]  Node  tryBlock  =  falseBlock.getNext();  Node  triedBlock  =  n.getNext();  [CE]  cannot  find  symbol  falseBlock  [FE]                RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  falseBlock.getNext();  Node  triedBlock  =  n.getNext();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  falseBlock.getNext();  Node  triedBlock  =  n.getNext();	  Node    tryBlock    =    n.getNext();    Node    triedBlock    =    n.getNext();    	non-compiled	[CE]  cannot  find  symbol  falseBlock	21	None	replace
15	[BUG]  [BUGGY]  Node  tryBlock  =  elseBlock.getTry();  [CE]  cannot  find  symbol  elseBlock  [FE]        RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  elseBlock.getTry();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  elseBlock.getTry();	  Node    tryBlock    =    n.getTry();    	non-compiled	[CE]  cannot  find  symbol  elseBlock	72	None	replace
16	[BUG]  [BUGGY]  Node  tryBlock  =  n.getTryNode();  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.getTryNode();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.getTryNode();	  Node    tryBlock    =    n.getTry();    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
17	[BUG]  [BUGGY]  Node  tryBlock  =  labelName.getTry();  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  labelName.getTry();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  labelName.getTry();	  Node    tryBlock    =    n.getTry();    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
18	[BUG]  [BUGGY]  Node  c  =  n.getFirstChild();  this.labelName  =  n.getLastChild();  [CE]  cannot  find  symbol  labelName  [FE]              AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  c  =  n.getFirstChild();  this.labelName  =  n.getLastChild();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  c  =  n.getFirstChild();  this.labelName  =  n.getLastChild();	          Node    c    =    n.getFirstChild();    Node    c    =    n.getFirstChild();    this.labelName    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  labelName	39	None	replace
19	[BUG]  [BUGGY]  Node  c  =  n.getFirstChild();  node  =  n.getFirstChild();  this.labelName  =  n.getLastChild();  [CE]  cannot  find  symbol  node  [FE]                AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  c  =  n.getFirstChild();  node  =  n.getFirstChild();  this.labelName  =  n.getLastChild();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  c  =  n.getFirstChild();  node  =  n.getFirstChild();  this.labelName  =  n.getLastChild();	          Node    c    =    n.getFirstChild();    Node    c    =    n.getFirstChild();    this.labelName    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  node	39	None	replace
20	[BUG]  [BUGGY]  Node  labelName  =  n.getFirstChild();  [CE]  variable  labelName  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                  AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  labelName  =  n.getFirstChild();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  labelName  =  n.getFirstChild();	          Node    c    =    n.getFirstChild();    Node    c    =    n.getFirstChild();    this.labelName    =    n.getLastChild();    	non-compiled	[CE]  variable  labelName  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	39	None	replace
21	[BUG]  [BUGGY]  Node  tryBlock  =  n.getFirstChild();  Node  tryBlock  =  n.getLastChild();  Preconditions.checkState(tryBlock!=  null);  [CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.getFirstChild();  Node  tryBlock  =  n.getLastChild();  Preconditions.checkState(tryBlock!=  null);  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.getFirstChild();  Node  tryBlock  =  n.getLastChild();  Preconditions.checkState(tryBlock!=  null);	  Node    tryBlock    =    n.getLastChild();    Node    tryBlock    =    n.getLastChild();    Preconditions.checkState(tryBlock!=    null);    	non-compiled	[CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	98	None	replace
22	[BUG]  [BUGGY]  Node  tryBlock  =  n.getFirstChild();  Node  tryBlock  =  n.getLastChild();  [CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]              AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.getFirstChild();  Node  tryBlock  =  n.getLastChild();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.getFirstChild();  Node  tryBlock  =  n.getLastChild();	  Node    tryBlock    =    n.getLastChild();    Node    tryBlock    =    n.getLastChild();    Preconditions.checkState(tryBlock!=    null);    	non-compiled	[CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	98	None	replace
23	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.getLastChild();  Preconditions.checkState(tryBlock!=  null);  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	add	Node  tryBlock  =  n.getLastChild();  Preconditions.checkState(tryBlock!=  null);	  Node    tryBlock    =    n.getLastChild();    Node    tryBlock    =    n.getLastChild();    Preconditions.checkState(tryBlock!=    null);    	compilable	  [FE]  AssertionFailedError  	98	6	replace
24	[BUG]  [BUGGY]  Node  tryBlock  =  n.getLastChild();  Preconditions.checkState(tryBlock!=  null);  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.getLastChild();  Preconditions.checkState(tryBlock!=  null);  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.getLastChild();  Preconditions.checkState(tryBlock!=  null);	  Node    tryBlock    =    n.getLastChild();    Node    tryBlock    =    n.getLastChild();    Preconditions.checkState(tryBlock!=    null);    	compilable	  [FE]  AssertionFailedError  	98	6	replace
25	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.getFirstChild();  Preconditions.checkState(tryBlock!=  null);  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	add	Node  tryBlock  =  n.getFirstChild();  Preconditions.checkState(tryBlock!=  null);	  Node    tryBlock    =    n.getLastChild();    Node    tryBlock    =    n.getLastChild();    Preconditions.checkState(tryBlock!=    null);    	compilable	  [FE]  AssertionFailedError  	98	2	replace
26	[BUG]  [BUGGY]  Node  tryBlock  =  n.getFirstChild();  Preconditions.checkState(tryBlock!=  null);  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.getFirstChild();  Preconditions.checkState(tryBlock!=  null);  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.getFirstChild();  Preconditions.checkState(tryBlock!=  null);	  Node    tryBlock    =    n.getLastChild();    Node    tryBlock    =    n.getLastChild();    Preconditions.checkState(tryBlock!=    null);    	compilable	  [FE]  AssertionFailedError  	98	2	replace
27	[BUG]  [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  thenBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  Node  thenBlock  =  n.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  thenBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  Node  thenBlock  =  n.getFirstChild();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	                Node        elseBlock        =        n.getFirstChild();        Node    thenBlock    =    n.getFirstChild();    Node  elseBlock  =  n.getFirstChild();  Node  thenBlock  =  n.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	9	None	add
28	[BUG]  [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  thenBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  Node  thenBlock  =  n.getLastChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      AssertionFailedError    [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  thenBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  Node  thenBlock  =  n.getLastChild();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	                Node        elseBlock        =        n.getFirstChild();        Node    thenBlock    =    n.getFirstChild();    Node  elseBlock  =  n.getFirstChild();  Node  thenBlock  =  n.getLastChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	9	None	add
29	[BUG]  [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  thenBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getLastChild();  Node  thenBlock  =  n.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        AssertionFailedError    [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  thenBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getLastChild();  Node  thenBlock  =  n.getFirstChild();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	                Node        elseBlock        =        n.getFirstChild();        Node    thenBlock    =    n.getFirstChild();    Node  elseBlock  =  n.getLastChild();  Node  thenBlock  =  n.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	9	None	add
30	[BUG]  [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  thenBlock  =  n.getFirstChild();  Node  otherBlock  =  n.getFirstChild();  Node  thenBlock  =  n.getFirstChild();  [CE]  variable  thenBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          AssertionFailedError    [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  thenBlock  =  n.getFirstChild();  Node  otherBlock  =  n.getFirstChild();  Node  thenBlock  =  n.getFirstChild();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	                Node        elseBlock        =        n.getFirstChild();        Node    thenBlock    =    n.getFirstChild();    Node  otherBlock  =  n.getFirstChild();  Node  thenBlock  =  n.getFirstChild();	  	non-compiled	[CE]  variable  thenBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	9	None	add
31	[BUG]  [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  thenBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  Node  finallyBlock  =  n.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]            AssertionFailedError    [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  thenBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  Node  finallyBlock  =  n.getFirstChild();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	                Node        elseBlock        =        n.getFirstChild();        Node    thenBlock    =    n.getFirstChild();    Node  elseBlock  =  n.getFirstChild();  Node  finallyBlock  =  n.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	9	None	add
32	[BUG]  [BUGGY]  Node  n  =  this.node.getParent();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                    AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  n  =  this.node.getParent();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  n  =  this.node.getParent();	  Node    n    =    this.node.getNext();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	131	None	replace
33	[BUG]  [BUGGY]  Node  c  =  n.getNext();  Preconditions.checkState(c.hasOneChild());  [CE]  cannot  find  symbol  tryBlock  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  c  =  n.getNext();  Preconditions.checkState(c.hasOneChild());  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  c  =  n.getNext();  Preconditions.checkState(c.hasOneChild());	          Node    c    =    n.getNext();    Node    c    =    n.getNext();    Preconditions.checkState(n.hasOneChild());    	non-compiled	[CE]  cannot  find  symbol  tryBlock	44	None	replace
34	[BUG]  [BUGGY]  Node  c  =  n.getNext();  Preconditions.checkState(n.hasOneChild());  [CE]  cannot  find  symbol  tryBlock  [FE]              AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  c  =  n.getNext();  Preconditions.checkState(n.hasOneChild());  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  c  =  n.getNext();  Preconditions.checkState(n.hasOneChild());	          Node    c    =    n.getNext();    Node    c    =    n.getNext();    Preconditions.checkState(n.hasOneChild());    	non-compiled	[CE]  cannot  find  symbol  tryBlock	44	None	replace
35	[BUG]  [BUGGY]  Node  elseBlock  =  otherBlock.removeFirstChild();  [CE]  cannot  find  symbol  otherBlock  [FE]        AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  elseBlock  =  otherBlock.removeFirstChild();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  elseBlock  =  otherBlock.removeFirstChild();	  Node    elseBlock    =    n.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol  otherBlock	148	None	replace
36	[BUG]  [BUGGY]  Node  elseBlock  =  n.replaceChild(n,  falseBlock);  [CE]  cannot  find  symbol  falseBlock  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  elseBlock  =  n.replaceChild(n,  falseBlock);  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  elseBlock  =  n.replaceChild(n,  falseBlock);	  Node    elseBlock    =    n.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol  falseBlock	148	None	replace
37	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(n.isTry()  ||  n.isTry());  Node  tryBlock  =  n.getNext();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	add	Preconditions.checkState(n.isTry()  ||  n.isTry());  Node  tryBlock  =  n.getNext();	  Node    tryBlock    =    n.getNext();    Preconditions.checkState(n.isTry()    ||    n.isTry());    Node    tryBlock    =    n.getNext();    	compilable	  [FE]  RuntimeException  	133	6	replace
38	[BUG]  [BUGGY]  Preconditions.checkState(n.isTry()  ||  n.isTry());  Node  tryBlock  =  n.getNext();  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(n.isTry()  ||  n.isTry());  Node  tryBlock  =  n.getNext();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Preconditions.checkState(n.isTry()  ||  n.isTry());  Node  tryBlock  =  n.getNext();	  Node    tryBlock    =    n.getNext();    Preconditions.checkState(n.isTry()    ||    n.isTry());    Node    tryBlock    =    n.getNext();    	compilable	  [FE]  RuntimeException  	133	6	replace
39	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.getNext();  Preconditions.checkState(n.isTry()  ||  n.isTry());  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	add	Node  tryBlock  =  n.getNext();  Preconditions.checkState(n.isTry()  ||  n.isTry());	  Node    tryBlock    =    n.getNext();    Preconditions.checkState(n.isTry()    ||    n.isTry());    Node    tryBlock    =    n.getNext();    	compilable	  [FE]  RuntimeException  	133	6	replace
40	[BUG]  [BUGGY]  Node  tryBlock  =  n.getNext();  Preconditions.checkState(n.isTry()  ||  n.isTry());  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.getNext();  Preconditions.checkState(n.isTry()  ||  n.isTry());  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.getNext();  Preconditions.checkState(n.isTry()  ||  n.isTry());	  Node    tryBlock    =    n.getNext();    Preconditions.checkState(n.isTry()    ||    n.isTry());    Node    tryBlock    =    n.getNext();    	compilable	  [FE]  RuntimeException  	133	6	replace
41	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.getFirstChild();  Preconditions.checkState(n.isTry()  ||  n.isTry());  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	add	Node  tryBlock  =  n.getFirstChild();  Preconditions.checkState(n.isTry()  ||  n.isTry());	  Node    tryBlock    =    n.getNext();    Preconditions.checkState(n.isTry()    ||    n.isTry());    Node    tryBlock    =    n.getNext();    	compilable	  [FE]  AssertionFailedError  	133	2	replace
42	[BUG]  [BUGGY]  Node  tryBlock  =  n.getFirstChild();  Preconditions.checkState(n.isTry()  ||  n.isTry());  [FE]  AssertionFailedError  [FE]              RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.getFirstChild();  Preconditions.checkState(n.isTry()  ||  n.isTry());  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.getFirstChild();  Preconditions.checkState(n.isTry()  ||  n.isTry());	  Node    tryBlock    =    n.getNext();    Preconditions.checkState(n.isTry()    ||    n.isTry());    Node    tryBlock    =    n.getNext();    	compilable	  [FE]  AssertionFailedError  	133	2	replace
43	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(n.isTry()  &&  n.isTry());  Node  tryBlock  =  n.getNext();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	add	Preconditions.checkState(n.isTry()  &&  n.isTry());  Node  tryBlock  =  n.getNext();	  Node    tryBlock    =    n.getNext();    Preconditions.checkState(n.isTry()    ||    n.isTry());    Node    tryBlock    =    n.getNext();    	compilable	  [FE]  RuntimeException  	133	6	replace
44	[BUG]  [BUGGY]  Preconditions.checkState(n.isTry()  &&  n.isTry());  Node  tryBlock  =  n.getNext();  [FE]  RuntimeException  [FE]                RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(n.isTry()  &&  n.isTry());  Node  tryBlock  =  n.getNext();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Preconditions.checkState(n.isTry()  &&  n.isTry());  Node  tryBlock  =  n.getNext();	  Node    tryBlock    =    n.getNext();    Preconditions.checkState(n.isTry()    ||    n.isTry());    Node    tryBlock    =    n.getNext();    	compilable	  [FE]  RuntimeException  	133	6	replace
45	[BUG]  [BUGGY]  Node  n  =  n.getLastChild();  Preconditions.checkState(n.isTry());  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  n  =  n.getLastChild();  Preconditions.checkState(n.isTry());  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  n  =  n.getLastChild();  Preconditions.checkState(n.isTry());	          Preconditions.checkState(n.isTry());    Node    n    =    n.getLastChild();    Preconditions.checkState(n.isTry());    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	57	None	replace
46	[BUG]  [BUGGY]  Node  n  =  n.getFirstChild();  Preconditions.checkState(n.isTry());  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]              AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  n  =  n.getFirstChild();  Preconditions.checkState(n.isTry());  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  n  =  n.getFirstChild();  Preconditions.checkState(n.isTry());	          Preconditions.checkState(n.isTry());    Node    n    =    n.getLastChild();    Preconditions.checkState(n.isTry());    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	57	None	replace
47	[BUG]  [BUGGY]  Node  n  =  otherBlock.getLastChild();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]              AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  n  =  otherBlock.getLastChild();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  n  =  otherBlock.getLastChild();	  Node    n    =    this.node.getLastChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	143	None	replace
48	[BUG]  [BUGGY]  Node  c  =  n.getNext();  Preconditions.checkState(NodeUtil.hasCatchHandler(c));  [CE]  cannot  find  symbol  tryBlock  [FE]        AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  c  =  n.getNext();  Preconditions.checkState(NodeUtil.hasCatchHandler(c));  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  c  =  n.getNext();  Preconditions.checkState(NodeUtil.hasCatchHandler(c));	          Node    c    =    n.getNext();    Node    c    =    n.getNext();    Preconditions.checkState(NodeUtil.hasCatchHandler(c));    	non-compiled	[CE]  cannot  find  symbol  tryBlock	144	None	replace
49	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.hasCatchHandler(n));  [CE]  cannot  find  symbol  tryBlock  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(NodeUtil.hasCatchHandler(n));  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Preconditions.checkState(NodeUtil.hasCatchHandler(n));	          Node    c    =    n.getNext();    Node    c    =    n.getNext();    Preconditions.checkState(NodeUtil.hasCatchHandler(c));    	non-compiled	[CE]  cannot  find  symbol  tryBlock	144	None	replace
50	[BUG]  [BUGGY]  Node  c  =  n.getFirstChild();  Preconditions.checkState(NodeUtil.hasCatchHandler(c));  [CE]  cannot  find  symbol  tryBlock  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  c  =  n.getFirstChild();  Preconditions.checkState(NodeUtil.hasCatchHandler(c));  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  c  =  n.getFirstChild();  Preconditions.checkState(NodeUtil.hasCatchHandler(c));	          Node    c    =    n.getNext();    Node    c    =    n.getNext();    Preconditions.checkState(NodeUtil.hasCatchHandler(c));    	non-compiled	[CE]  cannot  find  symbol  tryBlock	144	None	replace
51	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]          Preconditions.checkState(n.isTry());    Preconditions.checkState(n.isTry());  Preconditions.checkState(n.isTry());  Preconditions.checkState(n.isTry());  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	add	                Preconditions.checkState(n.isTry());        Preconditions.checkState(n.isTry());    Preconditions.checkState(n.isTry());  Preconditions.checkState(n.isTry());	  	compilable	  [FE]  AssertionFailedError  	54	2	add
52	[BUG]  [BUGGY]          Preconditions.checkState(n.isTry());    Preconditions.checkState(n.isTry());  Preconditions.checkState(n.isTry());  Preconditions.checkState(n.isTry());  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]          Preconditions.checkState(n.isTry());    Preconditions.checkState(n.isTry());  Preconditions.checkState(n.isTry());  Preconditions.checkState(n.isTry());  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	                Preconditions.checkState(n.isTry());        Preconditions.checkState(n.isTry());    Preconditions.checkState(n.isTry());  Preconditions.checkState(n.isTry());	  	compilable	  [FE]  AssertionFailedError  	54	2	add
53	[BUG]  [BUGGY]          Preconditions.checkState(n.isTry());    Preconditions.checkState(n.isTry());  Node  n  =  n.getNext();  Preconditions.checkState(n.isTry());  Preconditions.checkState(n.isTry());  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      AssertionFailedError    [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]          Preconditions.checkState(n.isTry());    Preconditions.checkState(n.isTry());  Node  n  =  n.getNext();  Preconditions.checkState(n.isTry());  Preconditions.checkState(n.isTry());  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	                Preconditions.checkState(n.isTry());        Preconditions.checkState(n.isTry());    Node  n  =  n.getNext();  Preconditions.checkState(n.isTry());  Preconditions.checkState(n.isTry());	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	54	None	add
54	[BUG]  [BUGGY]          Preconditions.checkState(n.isTry());    Preconditions.checkState(n.isTry());  Node  n  =  n.getFirstChild();  Preconditions.checkState(n.isTry());  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        AssertionFailedError    [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]          Preconditions.checkState(n.isTry());    Preconditions.checkState(n.isTry());  Node  n  =  n.getFirstChild();  Preconditions.checkState(n.isTry());  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	                Preconditions.checkState(n.isTry());        Preconditions.checkState(n.isTry());    Node  n  =  n.getFirstChild();  Preconditions.checkState(n.isTry());	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	54	None	add
55	[BUG]  [BUGGY]          Preconditions.checkState(n.isTry());    Preconditions.checkState(n.isTry());  Preconditions.checkState(N.isTry());  Preconditions.checkState(n.isTry());  [CE]  cannot  find  symbol  N  [FE]          AssertionFailedError    [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]          Preconditions.checkState(n.isTry());    Preconditions.checkState(n.isTry());  Preconditions.checkState(N.isTry());  Preconditions.checkState(n.isTry());  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	                Preconditions.checkState(n.isTry());        Preconditions.checkState(n.isTry());    Preconditions.checkState(N.isTry());  Preconditions.checkState(n.isTry());	  	non-compiled	[CE]  cannot  find  symbol  N	54	None	add
56	[BUG]  [BUGGY]  Preconditions.checkState(n.getNext()  ==  exitType);  Node  c  =  n.getNext();  [CE]  incomparable  types:  Node  and  int  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(n.getNext()  ==  exitType);  Node  c  =  n.getNext();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Preconditions.checkState(n.getNext()  ==  exitType);  Node  c  =  n.getNext();	          Node    c    =    n.getNext();    Preconditions.checkState(n.getNext()    ==    exitType);    Node    c    =    n.getNext();    	non-compiled	[CE]  incomparable  types:  Node  and  int	110	None	replace
57	[BUG]  [BUGGY]  Preconditions.checkState(n.getNext()!=  exitType);  Node  c  =  n.getNext();  [CE]  incomparable  types:  Node  and  int  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(n.getNext()!=  exitType);  Node  c  =  n.getNext();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Preconditions.checkState(n.getNext()!=  exitType);  Node  c  =  n.getNext();	          Node    c    =    n.getNext();    Preconditions.checkState(n.getNext()    ==    exitType);    Node    c    =    n.getNext();    	non-compiled	[CE]  incomparable  types:  Node  and  int	110	None	replace
58	[BUG]  [BUGGY]  Node  c  =  currentNode.getCurrentNode();  [CE]  cannot  find  symbol  currentNode  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  c  =  currentNode.getCurrentNode();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  c  =  currentNode.getCurrentNode();	  Node    c    =    n.getCurrentNode();    	non-compiled	[CE]  cannot  find  symbol  currentNode	31	None	replace
59	[BUG]  [BUGGY]  Node  c  =  node.getCurrentNode();  [CE]  cannot  find  symbol  node  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  c  =  node.getCurrentNode();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  c  =  node.getCurrentNode();	  Node    c    =    n.getCurrentNode();    	non-compiled	[CE]  cannot  find  symbol  node	31	None	replace
60	[BUG]  [BUGGY]  Node  c  =  this.n.getCurrentNode();  [CE]  cannot  find  symbol  n  [FE]              AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  c  =  this.n.getCurrentNode();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  c  =  this.n.getCurrentNode();	  Node    c    =    n.getCurrentNode();    	non-compiled	[CE]  cannot  find  symbol  n	31	None	replace
61	[BUG]  [BUGGY]  Node  c  =  no.getFirstChild();  [CE]  cannot  find  symbol  no  [FE]        AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  c  =  no.getFirstChild();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  c  =  no.getFirstChild();	          Node    c    =    n.getFirstChild();    Node    c    =    no.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  no	149	None	replace
62	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  null);  Node  c  =  no.getFirstChild();  [CE]  cannot  find  symbol  no  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  null);  Node  c  =  no.getFirstChild();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Preconditions.checkState(n.getFirstChild()  ==  null);  Node  c  =  no.getFirstChild();	          Node    c    =    n.getFirstChild();    Node    c    =    no.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  no	149	None	replace
63	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild()!=  null);  Node  c  =  no.getFirstChild();  [CE]  cannot  find  symbol  no  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(n.getFirstChild()!=  null);  Node  c  =  no.getFirstChild();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Preconditions.checkState(n.getFirstChild()!=  null);  Node  c  =  no.getFirstChild();	          Node    c    =    n.getFirstChild();    Node    c    =    no.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  no	149	None	replace
64	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  exitType);  Node  c  =  no.getFirstChild();  [CE]  incomparable  types:  Node  and  int  [FE]              AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  exitType);  Node  c  =  no.getFirstChild();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Preconditions.checkState(n.getFirstChild()  ==  exitType);  Node  c  =  no.getFirstChild();	          Node    c    =    n.getFirstChild();    Node    c    =    no.getFirstChild();    	non-compiled	[CE]  incomparable  types:  Node  and  int	149	None	replace
65	[BUG]  [BUGGY]  Node  elseBlock  =  n.getFirstChild();  Preconditions.checkState(n.isTry());  [CE]  cannot  find  symbol  tryBlock  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  elseBlock  =  n.getFirstChild();  Preconditions.checkState(n.isTry());  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  elseBlock  =  n.getFirstChild();  Preconditions.checkState(n.isTry());	          Node    elseBlock    =    n.getFirstChild();    Node    elseBlock    =    n.getFirstChild();    preconditions.checkState(n.isTry());    	non-compiled	[CE]  cannot  find  symbol  tryBlock	101	None	replace
66	[BUG]  [BUGGY]  Preconditions.checkState(n.isError(),  exitType);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(n.isError(),  exitType);  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Preconditions.checkState(n.isError(),  exitType);	  Preconditions.checkState(n.isError());    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
67	[BUG]  [BUGGY]  Preconditions.checkState(n.isError()  ||  n.isTry());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(n.isError()  ||  n.isTry());  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Preconditions.checkState(n.isError()  ||  n.isTry());	  Preconditions.checkState(n.isError());    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
68	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.getFirstChild();  Node  attemptBlock  =  n.getNext();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	add	Node  tryBlock  =  n.getFirstChild();  Node  attemptBlock  =  n.getNext();	  Node    tryBlock    =    n.getNext();    Node    attemptBlock    =    n.getNext();    	compilable	  [FE]  AssertionFailedError  	20	2	replace
69	[BUG]  [BUGGY]  Node  tryBlock  =  n.getFirstChild();  Node  attemptBlock  =  n.getNext();  [FE]  AssertionFailedError  [FE]          RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.getFirstChild();  Node  attemptBlock  =  n.getNext();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.getFirstChild();  Node  attemptBlock  =  n.getNext();	  Node    tryBlock    =    n.getNext();    Node    attemptBlock    =    n.getNext();    	compilable	  [FE]  AssertionFailedError  	20	2	replace
70	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]            RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.getParent();  Node  attemptBlock  =  n.getNext();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	add	Node  tryBlock  =  n.getParent();  Node  attemptBlock  =  n.getNext();	  Node    tryBlock    =    n.getNext();    Node    attemptBlock    =    n.getNext();    	compilable	  [FE]  StackOverflowError  	20	6	replace
71	[BUG]  [BUGGY]  Node  tryBlock  =  n.getParent();  Node  attemptBlock  =  n.getNext();  [FE]  StackOverflowError  [FE]            RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.getParent();  Node  attemptBlock  =  n.getNext();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.getParent();  Node  attemptBlock  =  n.getNext();	  Node    tryBlock    =    n.getNext();    Node    attemptBlock    =    n.getNext();    	compilable	  [FE]  StackOverflowError  	20	6	replace
72	[BUG]  [BUGGY]  Node  attemptBlock  =  n.getNext();  [CE]  cannot  find  symbol  tryBlock  [FE]              RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  attemptBlock  =  n.getNext();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  attemptBlock  =  n.getNext();	  Node    tryBlock    =    n.getNext();    Node    attemptBlock    =    n.getNext();    	non-compiled	[CE]  cannot  find  symbol  tryBlock	20	None	replace
73	[BUG]  [BUGGY]  Node  tryBlock  =  falseBlock.getNext();  Node  attemptBlock  =  n.getNext();  [CE]  cannot  find  symbol  falseBlock  [FE]                RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  falseBlock.getNext();  Node  attemptBlock  =  n.getNext();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  falseBlock.getNext();  Node  attemptBlock  =  n.getNext();	  Node    tryBlock    =    n.getNext();    Node    attemptBlock    =    n.getNext();    	non-compiled	[CE]  cannot  find  symbol  falseBlock	20	None	replace
74	[BUG]  [BUGGY]  Node  tryBlock  =  n.removeChild(n.getFirstChild(),  labelName);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.removeChild(n.getFirstChild(),  labelName);  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.removeChild(n.getFirstChild(),  labelName);	  Node    tryBlock    =    n.removeChild(n.getFirstChild());    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	120	None	replace
75	[BUG]  [BUGGY]  Node  tryBlock  =  n.removeChild(n.getLastChild());  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.removeChild(n.getLastChild());  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.removeChild(n.getLastChild());	  Node    tryBlock    =    n.removeChild(n.getFirstChild());    	non-compiled	[CE]  incompatible  types	120	None	replace
76	[BUG]  [BUGGY]  Node  tryBlock  =  n.removeChild(labelName.getFirstChild());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.removeChild(labelName.getFirstChild());  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.removeChild(labelName.getFirstChild());	  Node    tryBlock    =    n.removeChild(n.getFirstChild());    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
77	[BUG]  [BUGGY]  Node  tryBlock  =  n.removeChild(n.getFirstChild(),  falseBlock);  [CE]  cannot  find  symbol  falseBlock  [FE]              AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.removeChild(n.getFirstChild(),  falseBlock);  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.removeChild(n.getFirstChild(),  falseBlock);	  Node    tryBlock    =    n.removeChild(n.getFirstChild());    	non-compiled	[CE]  cannot  find  symbol  falseBlock	120	None	replace
78	[BUG]  [BUGGY]  Node  tryBlock  =  nextNode.getTree();  [CE]  cannot  find  symbol  nextNode  [FE]                      AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  nextNode.getTree();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  nextNode.getTree();	  Node    tryBlock    =    node.getTree();    	non-compiled	[CE]  cannot  find  symbol  nextNode	28	None	replace
79	[BUG]  [BUGGY]  Node  tryBlock  =  n.removeFirstChild();  Preconditions.checkState(n.removeFirstChild()!=  exitType);  [CE]  incomparable  types:  Node  and  int  [FE]            RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.removeFirstChild();  Preconditions.checkState(n.removeFirstChild()!=  exitType);  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.removeFirstChild();  Preconditions.checkState(n.removeFirstChild()!=  exitType);	  Node    tryBlock    =    n.removeFirstChild();    Preconditions.checkState(n.removeFirstChild()!=    exitType);    Node    tryBlock    =    n.removeFirstChild();    	non-compiled	[CE]  incomparable  types:  Node  and  int	107	None	replace
80	[BUG]  [BUGGY]  Node  tryBlock  =  n.getFirstChild();  Preconditions.checkState(n.removeFirstChild()!=  exitType);  Node  tryBlock  =  n.removeFirstChild();  [CE]  incomparable  types:  Node  and  int  [FE]              RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.getFirstChild();  Preconditions.checkState(n.removeFirstChild()!=  exitType);  Node  tryBlock  =  n.removeFirstChild();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.getFirstChild();  Preconditions.checkState(n.removeFirstChild()!=  exitType);  Node  tryBlock  =  n.removeFirstChild();	  Node    tryBlock    =    n.removeFirstChild();    Preconditions.checkState(n.removeFirstChild()!=    exitType);    Node    tryBlock    =    n.removeFirstChild();    	non-compiled	[CE]  incomparable  types:  Node  and  int	107	None	replace
81	[BUG]  [BUGGY]  Node  c  =  null.getFirstChild();  [CE]  <null>  cannot  be  dereferenced  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  c  =  null.getFirstChild();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  c  =  null.getFirstChild();	          Node    c    =    n.getFirstChild();    Node    c    =    null.getFirstChild();    	non-compiled	[CE]  <null>  cannot  be  dereferenced	150	None	replace
82	[BUG]  [BUGGY]  Node  c  =  node.getFirstChild();  [CE]  cannot  find  symbol  node  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  c  =  node.getFirstChild();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  c  =  node.getFirstChild();	          Node    c    =    n.getFirstChild();    Node    c    =    null.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  node	150	None	replace
83	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]          Preconditions.checkState(n.isTry());    Preconditions.checkState(n.isTry());Preconditions.checkState(n.isTry());  Preconditions.checkState(n.isTry());  Preconditions.checkState(n.isTry());Preconditions.checkState(n.isTry());  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	add	                Preconditions.checkState(n.isTry());        Preconditions.checkState(n.isTry());Preconditions.checkState(n.isTry());    Preconditions.checkState(n.isTry());  Preconditions.checkState(n.isTry());Preconditions.checkState(n.isTry());	  	compilable	  [FE]  AssertionFailedError  	126	2	add
84	[BUG]  [BUGGY]          Preconditions.checkState(n.isTry());    Preconditions.checkState(n.isTry());Preconditions.checkState(n.isTry());  Preconditions.checkState(n.isTry());  Preconditions.checkState(n.isTry());Preconditions.checkState(n.isTry());  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]          Preconditions.checkState(n.isTry());    Preconditions.checkState(n.isTry());Preconditions.checkState(n.isTry());  Preconditions.checkState(n.isTry());  Preconditions.checkState(n.isTry());Preconditions.checkState(n.isTry());  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	                Preconditions.checkState(n.isTry());        Preconditions.checkState(n.isTry());Preconditions.checkState(n.isTry());    Preconditions.checkState(n.isTry());  Preconditions.checkState(n.isTry());Preconditions.checkState(n.isTry());	  	compilable	  [FE]  AssertionFailedError  	126	2	add
85	[BUG]  [BUGGY]          Preconditions.checkState(n.isTry());    Preconditions.checkState(n.isTry());Preconditions.checkState(n.isTry());  Preconditions.checkState(t.isTry());  Preconditions.checkState(n.isTry());Preconditions.checkState(n.isTry());  [CE]  cannot  find  symbol  t  [FE]      AssertionFailedError    [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]          Preconditions.checkState(n.isTry());    Preconditions.checkState(n.isTry());Preconditions.checkState(n.isTry());  Preconditions.checkState(t.isTry());  Preconditions.checkState(n.isTry());Preconditions.checkState(n.isTry());  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	                Preconditions.checkState(n.isTry());        Preconditions.checkState(n.isTry());Preconditions.checkState(n.isTry());    Preconditions.checkState(t.isTry());  Preconditions.checkState(n.isTry());Preconditions.checkState(n.isTry());	  	non-compiled	[CE]  cannot  find  symbol  t	126	None	add
86	[BUG]  [BUGGY]          Preconditions.checkState(n.isTry());    Preconditions.checkState(n.isTry());Preconditions.checkState(n.isTry());  Preconditions.checkState(N.isTry());  Preconditions.checkState(n.isTry());Preconditions.checkState(n.isTry());  [CE]  cannot  find  symbol  N  [FE]        AssertionFailedError    [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]          Preconditions.checkState(n.isTry());    Preconditions.checkState(n.isTry());Preconditions.checkState(n.isTry());  Preconditions.checkState(N.isTry());  Preconditions.checkState(n.isTry());Preconditions.checkState(n.isTry());  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	                Preconditions.checkState(n.isTry());        Preconditions.checkState(n.isTry());Preconditions.checkState(n.isTry());    Preconditions.checkState(N.isTry());  Preconditions.checkState(n.isTry());Preconditions.checkState(n.isTry());	  	non-compiled	[CE]  cannot  find  symbol  N	126	None	add
87	[BUG]  [BUGGY]          Preconditions.checkState(n.isTry());    Preconditions.checkState(n.isTry());Preconditions.checkState(n.isTry());  Node  n  =  n.getFirstChild();  Preconditions.checkState(n.isTry());Preconditions.checkState(n.isTry());  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          AssertionFailedError    [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]          Preconditions.checkState(n.isTry());    Preconditions.checkState(n.isTry());Preconditions.checkState(n.isTry());  Node  n  =  n.getFirstChild();  Preconditions.checkState(n.isTry());Preconditions.checkState(n.isTry());  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	                Preconditions.checkState(n.isTry());        Preconditions.checkState(n.isTry());Preconditions.checkState(n.isTry());    Node  n  =  n.getFirstChild();  Preconditions.checkState(n.isTry());Preconditions.checkState(n.isTry());	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	126	None	add
88	[BUG]  [BUGGY]  Node  c  =  n.getNext();  Preconditions.checkState(NodeUtil.isTree(c));  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  c  =  n.getNext();  Preconditions.checkState(NodeUtil.isTree(c));  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  c  =  n.getNext();  Preconditions.checkState(NodeUtil.isTree(c));	          Node    c    =    n.getNext();    Node    c    =    n.getNext();    Preconditions.checkState(NodeUtil.isTree(n));    	non-compiled	[CE]  cannot  find  symbol	147	None	replace
89	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isTree(n));  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(NodeUtil.isTree(n));  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Preconditions.checkState(NodeUtil.isTree(n));	          Node    c    =    n.getNext();    Node    c    =    n.getNext();    Preconditions.checkState(NodeUtil.isTree(n));    	non-compiled	[CE]  cannot  find  symbol	147	None	replace
90	[BUG]  [BUGGY]  Node  n  =  n.getNext();  Preconditions.checkState(NodeUtil.isTree(n));  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                  AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  n  =  n.getNext();  Preconditions.checkState(NodeUtil.isTree(n));  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  n  =  n.getNext();  Preconditions.checkState(NodeUtil.isTree(n));	          Node    c    =    n.getNext();    Node    c    =    n.getNext();    Preconditions.checkState(NodeUtil.isTree(n));    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	147	None	replace
91	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.getFirstChild();  Node  triedBlock  =  n.getLastChild();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	add	Node  tryBlock  =  n.getFirstChild();  Node  triedBlock  =  n.getLastChild();	  Node    tryBlock    =    n.getLastChild();    Node    triedBlock    =    n.getLastChild();    	compilable	  [FE]  AssertionFailedError  	69	2	replace
92	[BUG]  [BUGGY]  Node  tryBlock  =  n.getFirstChild();  Node  triedBlock  =  n.getLastChild();  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.getFirstChild();  Node  triedBlock  =  n.getLastChild();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.getFirstChild();  Node  triedBlock  =  n.getLastChild();	  Node    tryBlock    =    n.getLastChild();    Node    triedBlock    =    n.getLastChild();    	compilable	  [FE]  AssertionFailedError  	69	2	replace
93	[BUG]  [BUGGY]  Node  tryBlock  =  n.getNext();  Node  tryBlock  =  n.getParent();  [CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                  StackOverflowError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.getNext();  Node  tryBlock  =  n.getParent();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.getNext();  Node  tryBlock  =  n.getParent();	  Node    tryBlock    =    n.getParent();    Node    tryBlock    =    n.getParent();    }    else    if(n.isTree())    {    Preconditions.checkState(!NodeUtil.isFunctionDeclaration(n));    return;    	non-compiled	[CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	18	None	replace
94	[BUG]  [BUGGY]  Node  tryBlock  =  n.getFirstChild();  Node  tryBlock  =  n.getParent();  [CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                    StackOverflowError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.getFirstChild();  Node  tryBlock  =  n.getParent();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.getFirstChild();  Node  tryBlock  =  n.getParent();	  Node    tryBlock    =    n.getParent();    Node    tryBlock    =    n.getParent();    }    else    if(n.isTree())    {    Preconditions.checkState(!NodeUtil.isFunctionDeclaration(n));    return;    	non-compiled	[CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	18	None	replace
95	[BUG]  [BUGGY]  Node  tryBlock  =  no.getLastChild();  [CE]  cannot  find  symbol  no  [FE]        AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  no.getLastChild();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  no.getLastChild();	  Node    tryBlock    =    n.getLastChild();    Node    tryBlock    =    no.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  no	140	None	replace
96	[BUG]  [BUGGY]  Node  tryBlock  =  no.getFirstChild();  [CE]  cannot  find  symbol  no  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  no.getFirstChild();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  no.getFirstChild();	  Node    tryBlock    =    n.getLastChild();    Node    tryBlock    =    no.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  no	140	None	replace
97	[BUG]  [BUGGY]  Node  n  =  elseBlock.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  n  =  elseBlock.getFirstChild();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  n  =  elseBlock.getFirstChild();	  Node    n    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	73	None	replace
98	[BUG]  [BUGGY]  Node  n  =  anyCatchNodes.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]              AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  n  =  anyCatchNodes.getFirstChild();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  n  =  anyCatchNodes.getFirstChild();	  Node    n    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	73	None	replace
99	[BUG]  [BUGGY]  Node  n  =  otherBlock.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  n  =  otherBlock.getFirstChild();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  n  =  otherBlock.getFirstChild();	  Node    n    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	73	None	replace
100	[BUG]  [BUGGY]  Node  elseBlock  =  falseBlock.getNext();  [CE]  cannot  find  symbol  falseBlock  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  elseBlock  =  falseBlock.getNext();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  elseBlock  =  falseBlock.getNext();	  Node    elseBlock    =    n.getNext();    	non-compiled	[CE]  cannot  find  symbol  falseBlock	51	None	replace
101	[BUG]  [BUGGY]  Node  tryBlock  =  n.removeLastChild();  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.removeLastChild();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.removeLastChild();	  Node    tryBlock    =    n.removeFirstChild();    Node    tryBlock    =    n.removeLastChild();    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
102	[BUG]  [BUGGY]  Node  tryBlock  =  n.getFirstChild();  Node  tryBlock  =  n.removeLastChild();  [CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]              RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.getFirstChild();  Node  tryBlock  =  n.removeLastChild();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.getFirstChild();  Node  tryBlock  =  n.removeLastChild();	  Node    tryBlock    =    n.removeFirstChild();    Node    tryBlock    =    n.removeLastChild();    	non-compiled	[CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	77	None	replace
103	[BUG]  [BUGGY]  Node  n  =  nextNode.getNext();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                    AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  n  =  nextNode.getNext();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  n  =  nextNode.getNext();	  Node    n    =    node.getNext();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	48	None	replace
104	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.getFirstChild();  Node  attemptBlock  =  n.getLastChild();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	add	Node  tryBlock  =  n.getFirstChild();  Node  attemptBlock  =  n.getLastChild();	  Node    tryBlock    =    n.getLastChild();    Node    attemptBlock    =    n.getLastChild();    	compilable	  [FE]  AssertionFailedError  	68	2	replace
105	[BUG]  [BUGGY]  Node  tryBlock  =  n.getFirstChild();  Node  attemptBlock  =  n.getLastChild();  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.getFirstChild();  Node  attemptBlock  =  n.getLastChild();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.getFirstChild();  Node  attemptBlock  =  n.getLastChild();	  Node    tryBlock    =    n.getLastChild();    Node    attemptBlock    =    n.getLastChild();    	compilable	  [FE]  AssertionFailedError  	68	2	replace
106	[BUG]  [BUGGY]  Node  tryBlock  =  n.getFirstChild();  node  attemptBlock  =  n.getLastChild();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.getFirstChild();  node  attemptBlock  =  n.getLastChild();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.getFirstChild();  node  attemptBlock  =  n.getLastChild();	  Node    tryBlock    =    n.getLastChild();    Node    attemptBlock    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
107	[BUG]  [BUGGY]  Node  elseBlock  =  n.getPrevious();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  elseBlock  =  n.getPrevious();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  elseBlock  =  n.getPrevious();	  Node    elseBlock    =    n.getParent();    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
108	[BUG]  [BUGGY]  Node  n  =  allCatchNodes.get(0);  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  n  =  allCatchNodes.get(0);  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  n  =  allCatchNodes.get(0);	  Node    n    =    allCatchNodes.getLastChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	34	None	replace
109	[BUG]  [BUGGY]  Node  n  =  allCatchNodes.getfirstChild();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                  AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  n  =  allCatchNodes.getfirstChild();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  n  =  allCatchNodes.getfirstChild();	  Node    n    =    allCatchNodes.getLastChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	34	None	replace
110	[BUG]  [BUGGY]  Node  c  =  n.getNext();  Preconditions.checkState(NodeUtil.isCatchHandler(c));  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  c  =  n.getNext();  Preconditions.checkState(NodeUtil.isCatchHandler(c));  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  c  =  n.getNext();  Preconditions.checkState(NodeUtil.isCatchHandler(c));	          Node    c    =    n.getNext();    Node    c    =    n.getNext();    Preconditions.checkState(NodeUtil.isCatchHandler(n));    	non-compiled	[CE]  cannot  find  symbol	145	None	replace
111	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isCatchHandler(n));  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(NodeUtil.isCatchHandler(n));  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Preconditions.checkState(NodeUtil.isCatchHandler(n));	          Node    c    =    n.getNext();    Node    c    =    n.getNext();    Preconditions.checkState(NodeUtil.isCatchHandler(n));    	non-compiled	[CE]  cannot  find  symbol	145	None	replace
112	[BUG]  [BUGGY]  Node  n  =  n.getNext();  Preconditions.checkState(NodeUtil.isCatchHandler(n));  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]              AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  n  =  n.getNext();  Preconditions.checkState(NodeUtil.isCatchHandler(n));  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  n  =  n.getNext();  Preconditions.checkState(NodeUtil.isCatchHandler(n));	          Node    c    =    n.getNext();    Node    c    =    n.getNext();    Preconditions.checkState(NodeUtil.isCatchHandler(n));    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	145	None	replace
113	[BUG]  [BUGGY]  Node  elseBlock  =  n.getLastChild();  Node  otherBlock  =  n.getFirstChild();  [CE]  cannot  find  symbol  tryBlock  [FE]    AssertionFailedError    [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  elseBlock  =  n.getLastChild();  Node  otherBlock  =  n.getFirstChild();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  elseBlock  =  n.getLastChild();  Node  otherBlock  =  n.getFirstChild();	          Node    elseBlock    =    n.getFirstChild();    Node    otherBlock    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  tryBlock	8	None	replace
114	[BUG]  [BUGGY]  Node  elseBlock  =  ifTree.getFirstChild();  Node  elseBlock  =  n.getLastChild();  [CE]  cannot  find  symbol  ifTree  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  elseBlock  =  ifTree.getFirstChild();  Node  elseBlock  =  n.getLastChild();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  elseBlock  =  ifTree.getFirstChild();  Node  elseBlock  =  n.getLastChild();	          Node    elseBlock    =    n.getFirstChild();    Node    elseBlock    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  ifTree	6	None	replace
115	[BUG]  [BUGGY]  Node  tryBlock  =  n.removeChild(n.getNext(),  labelName);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]        StackOverflowError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.removeChild(n.getNext(),  labelName);  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.removeChild(n.getNext(),  labelName);	  Node    tryBlock    =    n.removeChild(n.getNext());    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	139	None	replace
116	[BUG]  [BUGGY]  Node  tryBlock  =  n.removeChild(n.getNext()  -  1);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]          StackOverflowError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.removeChild(n.getNext()  -  1);  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.removeChild(n.getNext()  -  1);	  Node    tryBlock    =    n.removeChild(n.getNext());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	139	None	replace
117	[BUG]  [BUGGY]  Node  tryBlock  =  n.removeChild(n.getString());  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]            StackOverflowError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.removeChild(n.getString());  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.removeChild(n.getString());	  Node    tryBlock    =    n.removeChild(n.getNext());    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	139	None	replace
118	[BUG]  [BUGGY]  Node  c  =  n.getFirstChild();  Preconditions.checkState(c.hasOneChild());  [CE]  cannot  find  symbol  tryBlock  [FE]                AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  c  =  n.getFirstChild();  Preconditions.checkState(c.hasOneChild());  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  c  =  n.getFirstChild();  Preconditions.checkState(c.hasOneChild());	          Node    c    =    n.getFirstChild();    Node    c    =    n.getFirstChild();    Preconditions.checkState(n.hasOneChild());    	non-compiled	[CE]  cannot  find  symbol  tryBlock	40	None	replace
119	[BUG]  [BUGGY]  Node  c  =  n.getFirstChild();  Node  c  =  n.getFirstChild();  Preconditions.checkState(c.hasOneChild());  [CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                  AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  c  =  n.getFirstChild();  Node  c  =  n.getFirstChild();  Preconditions.checkState(c.hasOneChild());  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  c  =  n.getFirstChild();  Node  c  =  n.getFirstChild();  Preconditions.checkState(c.hasOneChild());	          Node    c    =    n.getFirstChild();    Node    c    =    n.getFirstChild();    Preconditions.checkState(n.hasOneChild());    	non-compiled	[CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	40	None	replace
120	[BUG]  [BUGGY]  Node  c  =  n.getNext();  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  [CE]  cannot  find  symbol  tryBlock  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  c  =  n.getNext();  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  c  =  n.getNext();  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);	          Node    c    =    n.getNext();    Node    c    =    n.getNext();    Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  cannot  find  symbol  tryBlock	43	None	replace
121	[BUG]  [BUGGY]  Node  c  =  n.getNext();  Preconditions.checkState(c.getType()  ==  Token.EXPR_RESULT);  [CE]  cannot  find  symbol  tryBlock  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  c  =  n.getNext();  Preconditions.checkState(c.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  c  =  n.getNext();  Preconditions.checkState(c.getType()  ==  Token.EXPR_RESULT);	          Node    c    =    n.getNext();    Node    c    =    n.getNext();    Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  cannot  find  symbol  tryBlock	43	None	replace
122	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.getFirstChild();  Node  tryingBlock  =  n.getNext();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	add	Node  tryBlock  =  n.getFirstChild();  Node  tryingBlock  =  n.getNext();	  Node    tryBlock    =    n.getNext();    Node    tryingBlock    =    n.getNext();    	compilable	  [FE]  AssertionFailedError  	22	2	replace
123	[BUG]  [BUGGY]  Node  tryBlock  =  n.getFirstChild();  Node  tryingBlock  =  n.getNext();  [FE]  AssertionFailedError  [FE]              RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.getFirstChild();  Node  tryingBlock  =  n.getNext();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.getFirstChild();  Node  tryingBlock  =  n.getNext();	  Node    tryBlock    =    n.getNext();    Node    tryingBlock    =    n.getNext();    	compilable	  [FE]  AssertionFailedError  	22	2	replace
124	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]                RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.getParent();  Node  tryingBlock  =  n.getNext();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	add	Node  tryBlock  =  n.getParent();  Node  tryingBlock  =  n.getNext();	  Node    tryBlock    =    n.getNext();    Node    tryingBlock    =    n.getNext();    	compilable	  [FE]  StackOverflowError  	22	6	replace
125	[BUG]  [BUGGY]  Node  tryBlock  =  n.getParent();  Node  tryingBlock  =  n.getNext();  [FE]  StackOverflowError  [FE]                RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.getParent();  Node  tryingBlock  =  n.getNext();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.getParent();  Node  tryingBlock  =  n.getNext();	  Node    tryBlock    =    n.getNext();    Node    tryingBlock    =    n.getNext();    	compilable	  [FE]  StackOverflowError  	22	6	replace
126	[BUG]  [BUGGY]  Node  tryBlock  =  n.getTree();  Node  tryingBlock  =  n.getNext();  [CE]  cannot  find  symbol  [FE]                  RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.getTree();  Node  tryingBlock  =  n.getNext();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.getTree();  Node  tryingBlock  =  n.getNext();	  Node    tryBlock    =    n.getNext();    Node    tryingBlock    =    n.getNext();    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
127	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(n.getNext()  ==  null);  Node  tryBlock  =  n.getNext();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	add	Preconditions.checkState(n.getNext()  ==  null);  Node  tryBlock  =  n.getNext();	  Node    tryBlock    =    n.getNext();    Preconditions.checkState(n.getNext()    ==    null);    Node    tryBlock    =    n.getNext();    	compilable	  [FE]  RuntimeException  	94	6	replace
128	[BUG]  [BUGGY]  Preconditions.checkState(n.getNext()  ==  null);  Node  tryBlock  =  n.getNext();  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(n.getNext()  ==  null);  Node  tryBlock  =  n.getNext();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Preconditions.checkState(n.getNext()  ==  null);  Node  tryBlock  =  n.getNext();	  Node    tryBlock    =    n.getNext();    Preconditions.checkState(n.getNext()    ==    null);    Node    tryBlock    =    n.getNext();    	compilable	  [FE]  RuntimeException  	94	6	replace
129	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(n.getNext()!=  null);  Node  tryBlock  =  n.getNext();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	add	Preconditions.checkState(n.getNext()!=  null);  Node  tryBlock  =  n.getNext();	  Node    tryBlock    =    n.getNext();    Preconditions.checkState(n.getNext()    ==    null);    Node    tryBlock    =    n.getNext();    	compilable	  [FE]  RuntimeException  	94	6	replace
130	[BUG]  [BUGGY]  Preconditions.checkState(n.getNext()!=  null);  Node  tryBlock  =  n.getNext();  [FE]  RuntimeException  [FE]              RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(n.getNext()!=  null);  Node  tryBlock  =  n.getNext();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Preconditions.checkState(n.getNext()!=  null);  Node  tryBlock  =  n.getNext();	  Node    tryBlock    =    n.getNext();    Preconditions.checkState(n.getNext()    ==    null);    Node    tryBlock    =    n.getNext();    	compilable	  [FE]  RuntimeException  	94	6	replace
131	[BUG]  [BUGGY]  Node  tryBlock  =  n,  exitType.getTree(),  labelName);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n,  exitType.getTree(),  labelName);  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n,  exitType.getTree(),  labelName);	  Node    tryBlock    =    n,    exitType.getTree();    	non-compiled	[CE]  ';'  expected	26	None	replace
132	[BUG]  [BUGGY]  Node  tryBlock  =  n,  exitType.getTree(),  labelName;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n,  exitType.getTree(),  labelName;  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n,  exitType.getTree(),  labelName;	  Node    tryBlock    =    n,    exitType.getTree();    	non-compiled	[CE]  ';'  expected	26	None	replace
133	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]          Preconditions.checkState(n.isTry());    Preconditions.checkState(n.isTry());  }  else  {  Preconditions.checkState(n.isTry());  Preconditions.checkState(n.isTry());  Preconditions.checkState(n.isTry());  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	add	                Preconditions.checkState(n.isTry());        Preconditions.checkState(n.isTry());    }    else    {    Preconditions.checkState(n.isTry());    Preconditions.checkState(n.isTry());  Preconditions.checkState(n.isTry());	  	compilable	  [FE]  RuntimeException  	59	7	add
134	[BUG]  [BUGGY]          Preconditions.checkState(n.isTry());    Preconditions.checkState(n.isTry());  }  else  {  Preconditions.checkState(n.isTry());  Preconditions.checkState(n.isTry());  Preconditions.checkState(n.isTry());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]          Preconditions.checkState(n.isTry());    Preconditions.checkState(n.isTry());  }  else  {  Preconditions.checkState(n.isTry());  Preconditions.checkState(n.isTry());  Preconditions.checkState(n.isTry());  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	                Preconditions.checkState(n.isTry());        Preconditions.checkState(n.isTry());    }    else    {    Preconditions.checkState(n.isTry());    Preconditions.checkState(n.isTry());  Preconditions.checkState(n.isTry());	  	compilable	  [FE]  RuntimeException  	59	7	add
135	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]          Preconditions.checkState(n.isTry());    Preconditions.checkState(n.isTry());  }  else  {  Preconditions.checkState(n.isTry());  Preconditions.checkState(n.isTry());  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	add	                Preconditions.checkState(n.isTry());        Preconditions.checkState(n.isTry());    }    else    {    Preconditions.checkState(n.isTry());    Preconditions.checkState(n.isTry());	  	compilable	  [FE]  RuntimeException  	59	7	add
136	[BUG]  [BUGGY]          Preconditions.checkState(n.isTry());    Preconditions.checkState(n.isTry());  }  else  {  Preconditions.checkState(n.isTry());  Preconditions.checkState(n.isTry());  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]          Preconditions.checkState(n.isTry());    Preconditions.checkState(n.isTry());  }  else  {  Preconditions.checkState(n.isTry());  Preconditions.checkState(n.isTry());  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	                Preconditions.checkState(n.isTry());        Preconditions.checkState(n.isTry());    }    else    {    Preconditions.checkState(n.isTry());    Preconditions.checkState(n.isTry());	  	compilable	  [FE]  RuntimeException  	59	7	add
137	[BUG]  [BUGGY]          Preconditions.checkState(n.isTry());    Preconditions.checkState(n.isTry());  }  else  {  Preconditions.checkState(n.isTry());  Preconditions.checkState(n.isTry());  preconditions.checkState(n.isTry());  [CE]  cannot  find  symbol  preconditions  [FE]        RuntimeException    [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]          Preconditions.checkState(n.isTry());    Preconditions.checkState(n.isTry());  }  else  {  Preconditions.checkState(n.isTry());  Preconditions.checkState(n.isTry());  preconditions.checkState(n.isTry());  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	                Preconditions.checkState(n.isTry());        Preconditions.checkState(n.isTry());    }    else    {    Preconditions.checkState(n.isTry());    Preconditions.checkState(n.isTry());  preconditions.checkState(n.isTry());	  	non-compiled	[CE]  cannot  find  symbol  preconditions	59	None	add
138	[BUG]  [BUGGY]          Preconditions.checkState(n.isTry());    Preconditions.checkState(n.isTry());  }  else  {  Preconditions.checkState(n.isTry());  Node  n  =  n.getFirstChild();  Preconditions.checkState(n.isTry());  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          RuntimeException    [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]          Preconditions.checkState(n.isTry());    Preconditions.checkState(n.isTry());  }  else  {  Preconditions.checkState(n.isTry());  Node  n  =  n.getFirstChild();  Preconditions.checkState(n.isTry());  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	                Preconditions.checkState(n.isTry());        Preconditions.checkState(n.isTry());    }    else    {    Preconditions.checkState(n.isTry());    Node  n  =  n.getFirstChild();  Preconditions.checkState(n.isTry());	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	59	None	add
139	[BUG]  [BUGGY]  Node  elseBlock  =  n.getLastChild();  Node  thenBlock  =  n.getFirstChild();  [CE]  cannot  find  symbol  tryBlock  [FE]    AssertionFailedError    [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  elseBlock  =  n.getLastChild();  Node  thenBlock  =  n.getFirstChild();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  elseBlock  =  n.getLastChild();  Node  thenBlock  =  n.getFirstChild();	          Node    elseBlock    =    n.getFirstChild();    Node    thenBlock    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  tryBlock	10	None	replace
140	[BUG]  [BUGGY]  Node  elseBlock  =  n.getFirstChild();  Node  thenBlock  =  n.getLastChild();  [CE]  cannot  find  symbol  tryBlock  [FE]      AssertionFailedError    [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  elseBlock  =  n.getFirstChild();  Node  thenBlock  =  n.getLastChild();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  elseBlock  =  n.getFirstChild();  Node  thenBlock  =  n.getLastChild();	          Node    elseBlock    =    n.getFirstChild();    Node    thenBlock    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  tryBlock	10	None	replace
141	[BUG]  [BUGGY]  Node  elseBlock  =  n.getNext();  Node  thenBlock  =  n.getFirstChild();  [CE]  cannot  find  symbol  tryBlock  [FE]        AssertionFailedError    [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  elseBlock  =  n.getNext();  Node  thenBlock  =  n.getFirstChild();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  elseBlock  =  n.getNext();  Node  thenBlock  =  n.getFirstChild();	          Node    elseBlock    =    n.getFirstChild();    Node    thenBlock    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  tryBlock	10	None	replace
142	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.getFirstChild();  Node  attemptBlock  =  n.removeFirstChild();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	add	Node  tryBlock  =  n.getFirstChild();  Node  attemptBlock  =  n.removeFirstChild();	  Node    tryBlock    =    n.removeFirstChild();    Node    attemptBlock    =    n.removeFirstChild();    	compilable	  [FE]  RuntimeException  	76	6	replace
143	[BUG]  [BUGGY]  Node  tryBlock  =  n.getFirstChild();  Node  attemptBlock  =  n.removeFirstChild();  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.getFirstChild();  Node  attemptBlock  =  n.removeFirstChild();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.getFirstChild();  Node  attemptBlock  =  n.removeFirstChild();	  Node    tryBlock    =    n.removeFirstChild();    Node    attemptBlock    =    n.removeFirstChild();    	compilable	  [FE]  RuntimeException  	76	6	replace
144	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.getFirstChild();  Node  attemptBlock  =  n.getFirstChild();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	add	Node  tryBlock  =  n.getFirstChild();  Node  attemptBlock  =  n.getFirstChild();	  Node    tryBlock    =    n.removeFirstChild();    Node    attemptBlock    =    n.removeFirstChild();    	compilable	  [FE]  AssertionFailedError  	76	2	replace
145	[BUG]  [BUGGY]  Node  tryBlock  =  n.getFirstChild();  Node  attemptBlock  =  n.getFirstChild();  [FE]  AssertionFailedError  [FE]            RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.getFirstChild();  Node  attemptBlock  =  n.getFirstChild();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.getFirstChild();  Node  attemptBlock  =  n.getFirstChild();	  Node    tryBlock    =    n.removeFirstChild();    Node    attemptBlock    =    n.removeFirstChild();    	compilable	  [FE]  AssertionFailedError  	76	2	replace
146	[BUG]  [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  anotherBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  Node  anotherBlock  =  n.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  anotherBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  Node  anotherBlock  =  n.getFirstChild();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	                Node        elseBlock        =        n.getFirstChild();        Node    anotherBlock    =    n.getFirstChild();    Node  elseBlock  =  n.getFirstChild();  Node  anotherBlock  =  n.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	11	None	add
147	[BUG]  [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  anotherBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  Node  anotherBlock  =  n.getLastChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      AssertionFailedError    [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  anotherBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  Node  anotherBlock  =  n.getLastChild();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	                Node        elseBlock        =        n.getFirstChild();        Node    anotherBlock    =    n.getFirstChild();    Node  elseBlock  =  n.getFirstChild();  Node  anotherBlock  =  n.getLastChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	11	None	add
148	[BUG]  [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  anotherBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getLastChild();  Node  anotherBlock  =  n.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        AssertionFailedError    [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  anotherBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getLastChild();  Node  anotherBlock  =  n.getFirstChild();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	                Node        elseBlock        =        n.getFirstChild();        Node    anotherBlock    =    n.getFirstChild();    Node  elseBlock  =  n.getLastChild();  Node  anotherBlock  =  n.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	11	None	add
149	[BUG]  [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  anotherBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  Node  otherBlock  =  n.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          AssertionFailedError    [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  anotherBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  Node  otherBlock  =  n.getFirstChild();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	                Node        elseBlock        =        n.getFirstChild();        Node    anotherBlock    =    n.getFirstChild();    Node  elseBlock  =  n.getFirstChild();  Node  otherBlock  =  n.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	11	None	add
150	[BUG]  [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  anotherBlock  =  n.getFirstChild();  Node  otherBlock  =  n.getFirstChild();  Node  anotherBlock  =  n.getFirstChild();  [CE]  variable  anotherBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]            AssertionFailedError    [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  anotherBlock  =  n.getFirstChild();  Node  otherBlock  =  n.getFirstChild();  Node  anotherBlock  =  n.getFirstChild();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	                Node        elseBlock        =        n.getFirstChild();        Node    anotherBlock    =    n.getFirstChild();    Node  otherBlock  =  n.getFirstChild();  Node  anotherBlock  =  n.getFirstChild();	  	non-compiled	[CE]  variable  anotherBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	11	None	add
151	[BUG]  [BUGGY]  Node  tryBlock  =  nextBlock.getTree();  [CE]  cannot  find  symbol  nextBlock  [FE]                AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  nextBlock.getTree();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  nextBlock.getTree();	  Node    tryBlock    =    ifBlock.getTree();    	non-compiled	[CE]  cannot  find  symbol  nextBlock	84	None	replace
152	[BUG]  [BUGGY]  Node  c  =  node.removeFirstChild();  [CE]  cannot  find  symbol  node  [FE]        AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  c  =  node.removeFirstChild();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  c  =  node.removeFirstChild();	  Node    c    =    n.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol  node	125	None	replace
153	[BUG]  [BUGGY]  Node  c  =  elseBlock.removeFirstChild();  [CE]  cannot  find  symbol  elseBlock  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  c  =  elseBlock.removeFirstChild();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  c  =  elseBlock.removeFirstChild();	  Node    c    =    n.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol  elseBlock	125	None	replace
154	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  exitType);  Node  c  =  n.getFirstChild();  [CE]  incomparable  types:  Node  and  int  [FE]        AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  exitType);  Node  c  =  n.getFirstChild();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Preconditions.checkState(n.getFirstChild()  ==  exitType);  Node  c  =  n.getFirstChild();	          Node    c    =    n.getFirstChild();    Node    c    =    n.getFirstChild();    	non-compiled	[CE]  incomparable  types:  Node  and  int	36	None	replace
155	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild()!=  exitType);  Node  c  =  n.getFirstChild();  [CE]  incomparable  types:  Node  and  int  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(n.getFirstChild()!=  exitType);  Node  c  =  n.getFirstChild();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Preconditions.checkState(n.getFirstChild()!=  exitType);  Node  c  =  n.getFirstChild();	          Node    c    =    n.getFirstChild();    Node    c    =    n.getFirstChild();    	non-compiled	[CE]  incomparable  types:  Node  and  int	36	None	replace
156	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  null);  Node  c  =  n.getFirstChild();  [CE]  cannot  find  symbol  tryBlock  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  null);  Node  c  =  n.getFirstChild();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Preconditions.checkState(n.getFirstChild()  ==  null);  Node  c  =  n.getFirstChild();	          Node    c    =    n.getFirstChild();    Node    c    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  tryBlock	36	None	replace
157	[BUG]  [BUGGY]  n.removeChild(labelName,  tryMinimizeExits);  [CE]  cannot  find  symbol  tryMinimizeExits  [FE]              AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  n.removeChild(labelName,  tryMinimizeExits);  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	n.removeChild(labelName,  tryMinimizeExits);	  n.removeChild(labelName,    escapeType);    	non-compiled	[CE]  cannot  find  symbol  tryMinimizeExits	63	None	replace
158	[BUG]  [BUGGY]  n.removeChild(labelName,  labelName);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  n.removeChild(labelName,  labelName);  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	n.removeChild(labelName,  labelName);	  n.removeChild(labelName,    escapeType);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	63	None	replace
159	[BUG]  [BUGGY]  Node  tryBlock  =  n.getParent();  Node  tryBlock  =  elseBlock.getNext();  [CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]            StackOverflowError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.getParent();  Node  tryBlock  =  elseBlock.getNext();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.getParent();  Node  tryBlock  =  elseBlock.getNext();	  Node    tryBlock    =    n.getParent();    Node    tryBlock    =    n.getNext();    	non-compiled	[CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	123	None	replace
160	[BUG]  [BUGGY]  Node  c  =  node.getNext();  [CE]  cannot  find  symbol  node  [FE]        AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  c  =  node.getNext();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  c  =  node.getNext();	          Node    c    =    n.getNext();    Node    c    =    n.getNext();    	non-compiled	[CE]  cannot  find  symbol  node	42	None	replace
161	[BUG]  [BUGGY]  Preconditions.checkState(labelName.isTry());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(labelName.isTry());  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Preconditions.checkState(labelName.isTry());	          Preconditions.checkState(n.isTry());    AssertionFailedError    n    =    new    AssertionFailedError(labelName);    Preconditions.checkState(n.isTry());    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
162	[BUG]  [BUGGY]  Preconditions.checkState(labelName.isTry());  AssertionFailedError  n  =  new  AssertionFailedError(labelName);  Preconditions.checkState(n.isTry());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(labelName.isTry());  AssertionFailedError  n  =  new  AssertionFailedError(labelName);  Preconditions.checkState(n.isTry());  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Preconditions.checkState(labelName.isTry());  AssertionFailedError  n  =  new  AssertionFailedError(labelName);  Preconditions.checkState(n.isTry());	          Preconditions.checkState(n.isTry());    AssertionFailedError    n    =    new    AssertionFailedError(labelName);    Preconditions.checkState(n.isTry());    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
163	[BUG]  [BUGGY]  AssertionFailedError  n  =  new  AssertionFailedError(labelName);  Preconditions.checkState(n.isTry());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  AssertionFailedError  n  =  new  AssertionFailedError(labelName);  Preconditions.checkState(n.isTry());  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	AssertionFailedError  n  =  new  AssertionFailedError(labelName);  Preconditions.checkState(n.isTry());	          Preconditions.checkState(n.isTry());    AssertionFailedError    n    =    new    AssertionFailedError(labelName);    Preconditions.checkState(n.isTry());    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
164	[BUG]  [BUGGY]  Preconditions.checkState(n.hasOneChild(),  exitType);  [CE]  cannot  find  symbol  tryBlock  [FE]        AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(n.hasOneChild(),  exitType);  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Preconditions.checkState(n.hasOneChild(),  exitType);	  Preconditions.checkState(n.hasOneChild());    	non-compiled	[CE]  cannot  find  symbol  tryBlock	119	None	replace
165	[BUG]  [BUGGY]  Preconditions.checkState(n.hasOneChild()  ||  n.hasOneChild());  [CE]  cannot  find  symbol  tryBlock  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(n.hasOneChild()  ||  n.hasOneChild());  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Preconditions.checkState(n.hasOneChild()  ||  n.hasOneChild());	  Preconditions.checkState(n.hasOneChild());    	non-compiled	[CE]  cannot  find  symbol  tryBlock	119	None	replace
166	[BUG]  [BUGGY]  Preconditions.checkState(n.hasOneChild()  ||  n.isTry());  [CE]  cannot  find  symbol  tryBlock  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(n.hasOneChild()  ||  n.isTry());  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Preconditions.checkState(n.hasOneChild()  ||  n.isTry());	  Preconditions.checkState(n.hasOneChild());    	non-compiled	[CE]  cannot  find  symbol  tryBlock	119	None	replace
167	[BUG]  [BUGGY]  Preconditions.checkState(n.hasOneChild()  &&  n.isTry());  [CE]  cannot  find  symbol  tryBlock  [FE]              AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(n.hasOneChild()  &&  n.isTry());  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Preconditions.checkState(n.hasOneChild()  &&  n.isTry());	  Preconditions.checkState(n.hasOneChild());    	non-compiled	[CE]  cannot  find  symbol  tryBlock	119	None	replace
168	[BUG]  [BUGGY]  Preconditions.checkState(n.isExit()  ||  n.isExit());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(n.isExit()  ||  n.isExit());  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Preconditions.checkState(n.isExit()  ||  n.isExit());	  Preconditions.checkState(n.isExit());    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
169	[BUG]  [BUGGY]  Preconditions.checkState(n.isExit(),  exitType);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(n.isExit(),  exitType);  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Preconditions.checkState(n.isExit(),  exitType);	  Preconditions.checkState(n.isExit());    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
170	[BUG]  [BUGGY]  Preconditions.checkState(n.isExit()  &&  n.isTry());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(n.isExit()  &&  n.isTry());  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Preconditions.checkState(n.isExit()  &&  n.isTry());	  Preconditions.checkState(n.isExit());    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
171	[BUG]  [BUGGY]  Preconditions.checkState(n.isExit()  &&  n.isTree());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(n.isExit()  &&  n.isTree());  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Preconditions.checkState(n.isExit()  &&  n.isTree());	  Preconditions.checkState(n.isExit());    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
172	[BUG]  [BUGGY]  Node  tryBlock  =  null.getLastChild();  [CE]  <null>  cannot  be  dereferenced  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  null.getLastChild();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  null.getLastChild();	  Node    tryBlock    =    n.getLastChild();    Node    tryBlock    =    null.getLastChild();    	non-compiled	[CE]  <null>  cannot  be  dereferenced	141	None	replace
173	[BUG]  [BUGGY]  Node  tryBlock  =  node.getLastChild();  [CE]  cannot  find  symbol  node  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  node.getLastChild();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  node.getLastChild();	  Node    tryBlock    =    n.getLastChild();    Node    tryBlock    =    null.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  node	141	None	replace
174	[BUG]  [BUGGY]  Node  tryBlock  =  null.getFirstChild();  [CE]  <null>  cannot  be  dereferenced  [FE]              AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  null.getFirstChild();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  null.getFirstChild();	  Node    tryBlock    =    n.getLastChild();    Node    tryBlock    =    null.getLastChild();    	non-compiled	[CE]  <null>  cannot  be  dereferenced	141	None	replace
175	[BUG]  [BUGGY]  Node  tryBlock  =  n.getFirstChild();  Preconditions.checkState(n.removeFirstChild()  ==  exitType);  Node  tryBlock  =  n.removeFirstChild();  [CE]  incomparable  types:  Node  and  int  [FE]              RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.getFirstChild();  Preconditions.checkState(n.removeFirstChild()  ==  exitType);  Node  tryBlock  =  n.removeFirstChild();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.getFirstChild();  Preconditions.checkState(n.removeFirstChild()  ==  exitType);  Node  tryBlock  =  n.removeFirstChild();	  Node    tryBlock    =    n.removeFirstChild();    Preconditions.checkState(n.removeFirstChild()    ==    exitType);    Node    tryBlock    =    n.removeFirstChild();    	non-compiled	[CE]  incomparable  types:  Node  and  int	108	None	replace
176	[BUG]  [BUGGY]  Node  tryBlock  =  n.removeFirstChild();  Preconditions.checkState(n.removeFirstChild()  ==  exitType);  [CE]  incomparable  types:  Node  and  int  [FE]                RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.removeFirstChild();  Preconditions.checkState(n.removeFirstChild()  ==  exitType);  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.removeFirstChild();  Preconditions.checkState(n.removeFirstChild()  ==  exitType);	  Node    tryBlock    =    n.removeFirstChild();    Preconditions.checkState(n.removeFirstChild()    ==    exitType);    Node    tryBlock    =    n.removeFirstChild();    	non-compiled	[CE]  incomparable  types:  Node  and  int	108	None	replace
177	[BUG]  [BUGGY]  Node  attemptBlock  =  n.getFirstChild();  [CE]  cannot  find  symbol  tryBlock  [FE]          RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  attemptBlock  =  n.getFirstChild();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  attemptBlock  =  n.getFirstChild();	  Node    tryBlock    =    n.removeFirstChild();    Node    tryBlock    =    n.removeFirstChild();    }    else    {    tryMinimizeExits(tryBlock,    exitType,    labelName);    	non-compiled	[CE]  cannot  find  symbol  tryBlock	137	None	replace
178	[BUG]  [BUGGY]  Node  c  =  n,  exitType.getTree();  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  c  =  n,  exitType.getTree();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  c  =  n,  exitType.getTree();	  Node    c    =    n.getTree();    	non-compiled	[CE]  ';'  expected	32	None	replace
179	[BUG]  [BUGGY]  Node  c  =  n.getCurrentTree();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  c  =  n.getCurrentTree();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  c  =  n.getCurrentTree();	  Node    c    =    n.getTree();    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
180	[BUG]  [BUGGY]  Node  c  =  node.getTree();  [CE]  cannot  find  symbol  node  [FE]                AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  c  =  node.getTree();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  c  =  node.getTree();	  Node    c    =    n.getTree();    	non-compiled	[CE]  cannot  find  symbol  node	32	None	replace
181	[BUG]  [BUGGY]  Node  c  =  this.n.getTree();  [CE]  cannot  find  symbol  n  [FE]                  AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  c  =  this.n.getTree();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  c  =  this.n.getTree();	  Node    c    =    n.getTree();    	non-compiled	[CE]  cannot  find  symbol  n	32	None	replace
182	[BUG]  [BUGGY]  Node  tryBlock  =  n.getFirstChild();  Node  tryBlock  =  n.getParent();  Preconditions.checkState(tryBlock!=  null);  [CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        StackOverflowError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.getFirstChild();  Node  tryBlock  =  n.getParent();  Preconditions.checkState(tryBlock!=  null);  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.getFirstChild();  Node  tryBlock  =  n.getParent();  Preconditions.checkState(tryBlock!=  null);	  Node    tryBlock    =    n.getParent();    Node    tryBlock    =    n.getParent();    Preconditions.checkState(tryBlock!=    null);    	non-compiled	[CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	113	None	replace
183	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          StackOverflowError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.getNext();  Preconditions.checkState(tryBlock!=  null);  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	add	Node  tryBlock  =  n.getNext();  Preconditions.checkState(tryBlock!=  null);	  Node    tryBlock    =    n.getParent();    Node    tryBlock    =    n.getParent();    Preconditions.checkState(tryBlock!=    null);    	compilable	  [FE]  RuntimeException  	113	6	replace
184	[BUG]  [BUGGY]  Node  tryBlock  =  n.getNext();  Preconditions.checkState(tryBlock!=  null);  [FE]  RuntimeException  [FE]          StackOverflowError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.getNext();  Preconditions.checkState(tryBlock!=  null);  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.getNext();  Preconditions.checkState(tryBlock!=  null);	  Node    tryBlock    =    n.getParent();    Node    tryBlock    =    n.getParent();    Preconditions.checkState(tryBlock!=    null);    	compilable	  [FE]  RuntimeException  	113	6	replace
185	[BUG]  [BUGGY]  Node  tryBlock  =  no.getParent();  [CE]  cannot  find  symbol  no  [FE]          StackOverflowError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  no.getParent();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  no.getParent();	  Node    tryBlock    =    n.getParent();    Node    tryBlock    =    no.getParent();    	non-compiled	[CE]  cannot  find  symbol  no	122	None	replace
186	[BUG]  [BUGGY]  Node  tryBlock  =  no.getNext();  [CE]  cannot  find  symbol  no  [FE]            StackOverflowError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  no.getNext();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  no.getNext();	  Node    tryBlock    =    n.getParent();    Node    tryBlock    =    no.getParent();    	non-compiled	[CE]  cannot  find  symbol  no	122	None	replace
187	[BUG]  [BUGGY]  Node  attemptBlock  =  n.removeFirstChild();  [CE]  cannot  find  symbol  tryBlock  [FE]        RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  attemptBlock  =  n.removeFirstChild();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  attemptBlock  =  n.removeFirstChild();	  Node    tryBlock    =    elseBlock.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol  tryBlock	29	None	replace
188	[BUG]  [BUGGY]  Node  tryBlock  =  falseBlock.removeFirstChild();  [CE]  cannot  find  symbol  falseBlock  [FE]          RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  falseBlock.removeFirstChild();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  falseBlock.removeFirstChild();	  Node    tryBlock    =    elseBlock.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol  falseBlock	29	None	replace
189	[BUG]  [BUGGY]  Node  tryBlock  =  node.removeFirstChild();  [CE]  cannot  find  symbol  node  [FE]            RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  node.removeFirstChild();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  node.removeFirstChild();	  Node    tryBlock    =    elseBlock.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol  node	29	None	replace
190	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isFunctionAnonymous(labelName));  [CE]  cannot  find  symbol  [FE]                StackOverflowError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(!NodeUtil.isFunctionAnonymous(labelName));  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Preconditions.checkState(!NodeUtil.isFunctionAnonymous(labelName));	  Node    tryBlock    =    n.getParent();    Node    tryBlock    =    n.getParent();    }    else    if(n.isTree())    {    Preconditions.checkState(!NodeUtil.isFunctionAnonymous(labelName));    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
191	[BUG]  [BUGGY]  Node  n  =  n.getNext();  Preconditions.checkState(n.isTry());  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]              AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  n  =  n.getNext();  Preconditions.checkState(n.isTry());  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  n  =  n.getNext();  Preconditions.checkState(n.isTry());	          Preconditions.checkState(n.isTry());    Node    n    =    n.getNext();    Preconditions.checkState(n.isTry());    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	58	None	replace
192	[BUG]  [BUGGY]  Node  elseBlock  =  otherBlock.getLastChild();  [CE]  cannot  find  symbol  otherBlock  [FE]        AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  elseBlock  =  otherBlock.getLastChild();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  elseBlock  =  otherBlock.getLastChild();	  Node    elseBlock    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  otherBlock	50	None	replace
193	[BUG]  [BUGGY]  Node  elseBlock  =  node.getLastChild();  [CE]  cannot  find  symbol  node  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  elseBlock  =  node.getLastChild();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  elseBlock  =  node.getLastChild();	  Node    elseBlock    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  node	50	None	replace
194	[BUG]  [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  otherBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  Node  otherBlock  =  n.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  otherBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  Node  otherBlock  =  n.getFirstChild();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	                Node        elseBlock        =        n.getFirstChild();        Node    otherBlock    =    n.getFirstChild();    Node  elseBlock  =  n.getFirstChild();  Node  otherBlock  =  n.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	7	None	add
195	[BUG]  [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  otherBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  Node  otherBlock  =  n.getLastChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      AssertionFailedError    [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  otherBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  Node  otherBlock  =  n.getLastChild();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	                Node        elseBlock        =        n.getFirstChild();        Node    otherBlock    =    n.getFirstChild();    Node  elseBlock  =  n.getFirstChild();  Node  otherBlock  =  n.getLastChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	7	None	add
196	[BUG]  [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  otherBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getLastChild();  Node  otherBlock  =  n.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        AssertionFailedError    [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  otherBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getLastChild();  Node  otherBlock  =  n.getFirstChild();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	                Node        elseBlock        =        n.getFirstChild();        Node    otherBlock    =    n.getFirstChild();    Node  elseBlock  =  n.getLastChild();  Node  otherBlock  =  n.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	7	None	add
197	[BUG]  [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  otherBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  Node  othersBlock  =  n.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          AssertionFailedError    [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  otherBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  Node  othersBlock  =  n.getFirstChild();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	                Node        elseBlock        =        n.getFirstChild();        Node    otherBlock    =    n.getFirstChild();    Node  elseBlock  =  n.getFirstChild();  Node  othersBlock  =  n.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	7	None	add
198	[BUG]  [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  otherBlock  =  n.getFirstChild();  Node  otherBlock  =  n.getFirstChild();  Node  otherBlock  =  n.getFirstChild();  [CE]  variable  otherBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]            AssertionFailedError    [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  otherBlock  =  n.getFirstChild();  Node  otherBlock  =  n.getFirstChild();  Node  otherBlock  =  n.getFirstChild();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	                Node        elseBlock        =        n.getFirstChild();        Node    otherBlock    =    n.getFirstChild();    Node  otherBlock  =  n.getFirstChild();  Node  otherBlock  =  n.getFirstChild();	  	non-compiled	[CE]  variable  otherBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	7	None	add
199	[BUG]  [BUGGY]  Node  tryBlock  =  tryBlock.replaceChild(n,  n);  [CE]  incompatible  types  [FE]        RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  tryBlock.replaceChild(n,  n);  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  tryBlock.replaceChild(n,  n);	  Node    tryBlock    =    n.replaceChild(n,    tryBlock);    	non-compiled	[CE]  incompatible  types	118	None	replace
200	[BUG]  [BUGGY]  Node  tryBlock  =  n.replaceChild(n,  tryBlock,  falseBlock);  [CE]  cannot  find  symbol  falseBlock  [FE]          RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.replaceChild(n,  tryBlock,  falseBlock);  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.replaceChild(n,  tryBlock,  falseBlock);	  Node    tryBlock    =    n.replaceChild(n,    tryBlock);    	non-compiled	[CE]  cannot  find  symbol  falseBlock	118	None	replace
201	[BUG]  [BUGGY]  Node  tryBlock  =  n.replaceChild(n,  tryBlock,  labelName);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]            RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.replaceChild(n,  tryBlock,  labelName);  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.replaceChild(n,  tryBlock,  labelName);	  Node    tryBlock    =    n.replaceChild(n,    tryBlock);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	118	None	replace
202	[BUG]  [BUGGY]  Node  tryBlock  =  n.replaceChild(n,  tryBlock,  trueBlock);  [CE]  cannot  find  symbol  trueBlock  [FE]              RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.replaceChild(n,  tryBlock,  trueBlock);  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.replaceChild(n,  tryBlock,  trueBlock);	  Node    tryBlock    =    n.replaceChild(n,    tryBlock);    	non-compiled	[CE]  cannot  find  symbol  trueBlock	118	None	replace
203	[BUG]  [BUGGY]  Node  tryBlock  =  n.replaceChild(n,  tryBlock,  null);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.replaceChild(n,  tryBlock,  null);  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.replaceChild(n,  tryBlock,  null);	  Node    tryBlock    =    n.replaceChild(n,    tryBlock);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	118	None	replace
204	[BUG]  [BUGGY]  n.removeChild(c,  labelName);  [CE]  cannot  find  symbol  c  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  n.removeChild(c,  labelName);  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	n.removeChild(c,  labelName);	  n.removeChild(chooser,    labelName);    	non-compiled	[CE]  cannot  find  symbol  c	86	None	replace
205	[BUG]  [BUGGY]  n.removeChild(labelName,  null,  exitType);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  n.removeChild(labelName,  null,  exitType);  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	n.removeChild(labelName,  null,  exitType);	  n.removeChild(labelName,    null);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	64	None	replace
206	[BUG]  [BUGGY]  n.removeChild(labelName,  exitType,  null);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  n.removeChild(labelName,  exitType,  null);  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	n.removeChild(labelName,  exitType,  null);	  n.removeChild(labelName,    null);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	64	None	replace
207	[BUG]  [BUGGY]  n.removeChild(labelName,  tryMinimizeExits(n,  exitType,  labelName));  [CE]  'void'  type  not  allowed  here  [FE]                    AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  n.removeChild(labelName,  tryMinimizeExits(n,  exitType,  labelName));  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	n.removeChild(labelName,  tryMinimizeExits(n,  exitType,  labelName));	  n.removeChild(labelName,    null);    	non-compiled	[CE]  'void'  type  not  allowed  here	64	None	replace
208	[BUG]  [BUGGY]  n.removeChild(labelName,  tryMinimizeExits(labelName,  elseBlock,  null);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  n.removeChild(labelName,  tryMinimizeExits(labelName,  elseBlock,  null);  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	n.removeChild(labelName,  tryMinimizeExits(labelName,  elseBlock,  null);	  n.removeChild(labelName,    null);    	non-compiled	[CE]  ')'  expected	64	None	replace
209	[BUG]  [BUGGY]  n.removeChild(labelName,  tryMinimizeExits(elseBlock,  exitType,  labelName));  [CE]  cannot  find  symbol  elseBlock  [FE]                        AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  n.removeChild(labelName,  tryMinimizeExits(elseBlock,  exitType,  labelName));  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	n.removeChild(labelName,  tryMinimizeExits(elseBlock,  exitType,  labelName));	  n.removeChild(labelName,    null);    	non-compiled	[CE]  cannot  find  symbol  elseBlock	64	None	replace
210	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.getFirstChild();  Node  triedBlock  =  n.removeFirstChild();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	add	Node  tryBlock  =  n.getFirstChild();  Node  triedBlock  =  n.removeFirstChild();	  Node    tryBlock    =    n.removeFirstChild();    Node    triedBlock    =    n.removeFirstChild();    	compilable	  [FE]  RuntimeException  	79	6	replace
211	[BUG]  [BUGGY]  Node  tryBlock  =  n.getFirstChild();  Node  triedBlock  =  n.removeFirstChild();  [FE]  RuntimeException  [FE]                RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.getFirstChild();  Node  triedBlock  =  n.removeFirstChild();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.getFirstChild();  Node  triedBlock  =  n.removeFirstChild();	  Node    tryBlock    =    n.removeFirstChild();    Node    triedBlock    =    n.removeFirstChild();    	compilable	  [FE]  RuntimeException  	79	6	replace
212	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.getFirstChild();  Node  triedBlock  =  n.getFirstChild();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	add	Node  tryBlock  =  n.getFirstChild();  Node  triedBlock  =  n.getFirstChild();	  Node    tryBlock    =    n.removeFirstChild();    Node    triedBlock    =    n.removeFirstChild();    	compilable	  [FE]  AssertionFailedError  	79	2	replace
213	[BUG]  [BUGGY]  Node  tryBlock  =  n.getFirstChild();  Node  triedBlock  =  n.getFirstChild();  [FE]  AssertionFailedError  [FE]                  RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.getFirstChild();  Node  triedBlock  =  n.getFirstChild();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.getFirstChild();  Node  triedBlock  =  n.getFirstChild();	  Node    tryBlock    =    n.removeFirstChild();    Node    triedBlock    =    n.removeFirstChild();    	compilable	  [FE]  AssertionFailedError  	79	2	replace
214	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                    RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.getLastChild();  Node  triedBlock  =  n.removeFirstChild();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	add	Node  tryBlock  =  n.getLastChild();  Node  triedBlock  =  n.removeFirstChild();	  Node    tryBlock    =    n.removeFirstChild();    Node    triedBlock    =    n.removeFirstChild();    	compilable	  [FE]  RuntimeException  	79	6	replace
215	[BUG]  [BUGGY]  Node  tryBlock  =  n.getLastChild();  Node  triedBlock  =  n.removeFirstChild();  [FE]  RuntimeException  [FE]                    RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.getLastChild();  Node  triedBlock  =  n.removeFirstChild();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.getLastChild();  Node  triedBlock  =  n.removeFirstChild();	  Node    tryBlock    =    n.removeFirstChild();    Node    triedBlock    =    n.removeFirstChild();    	compilable	  [FE]  RuntimeException  	79	6	replace
216	[BUG]  [BUGGY]  Node  tryBlock  =  n.getNext();  Preconditions.checkState(n.getNext()  ==  exitType);  [CE]  incomparable  types:  Node  and  int  [FE]          RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.getNext();  Preconditions.checkState(n.getNext()  ==  exitType);  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.getNext();  Preconditions.checkState(n.getNext()  ==  exitType);	  Node    tryBlock    =    n.getNext();    Preconditions.checkState(n.getNext()    ==    exitType);    Node    tryBlock    =    n.getNext();    	non-compiled	[CE]  incomparable  types:  Node  and  int	93	None	replace
217	[BUG]  [BUGGY]  Node  tryBlock  =  n.getNext();  Preconditions.checkState(n.getNext()!=  exitType);  Node  tryBlock  =  n.getNext();  [CE]  incomparable  types:  Node  and  int  [FE]            RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.getNext();  Preconditions.checkState(n.getNext()!=  exitType);  Node  tryBlock  =  n.getNext();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.getNext();  Preconditions.checkState(n.getNext()!=  exitType);  Node  tryBlock  =  n.getNext();	  Node    tryBlock    =    n.getNext();    Preconditions.checkState(n.getNext()    ==    exitType);    Node    tryBlock    =    n.getNext();    	non-compiled	[CE]  incomparable  types:  Node  and  int	93	None	replace
218	[BUG]  [BUGGY]  Preconditions.checkState(n.getNext()  ==  exitType);  Node  tryBlock  =  n.getNext();  [CE]  incomparable  types:  Node  and  int  [FE]              RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(n.getNext()  ==  exitType);  Node  tryBlock  =  n.getNext();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Preconditions.checkState(n.getNext()  ==  exitType);  Node  tryBlock  =  n.getNext();	  Node    tryBlock    =    n.getNext();    Preconditions.checkState(n.getNext()    ==    exitType);    Node    tryBlock    =    n.getNext();    	non-compiled	[CE]  incomparable  types:  Node  and  int	93	None	replace
219	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.getNext();  Preconditions.checkState(tryBlock  ==  null);  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	add	Node  tryBlock  =  n.getNext();  Preconditions.checkState(tryBlock  ==  null);	  Node    tryBlock    =    n.getNext();    Node    tryBlock    =    n.getNext();    }    else    {    tryMinimizeExits(tryBlock,    exitType,    labelName);    Preconditions.checkState(tryBlock!=    null);    	compilable	  [FE]  RuntimeException  	135	6	replace
220	[BUG]  [BUGGY]  Node  tryBlock  =  n.getNext();  Preconditions.checkState(tryBlock  ==  null);  [FE]  RuntimeException  [FE]              RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.getNext();  Preconditions.checkState(tryBlock  ==  null);  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.getNext();  Preconditions.checkState(tryBlock  ==  null);	  Node    tryBlock    =    n.getNext();    Node    tryBlock    =    n.getNext();    }    else    {    tryMinimizeExits(tryBlock,    exitType,    labelName);    Preconditions.checkState(tryBlock!=    null);    	compilable	  [FE]  RuntimeException  	135	6	replace
221	[BUG]  [BUGGY]  Node  tryBlock  =  node.getFirstChild();  [CE]  cannot  find  symbol  node  [FE]        AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  node.getFirstChild();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  node.getFirstChild();	  Node    tryBlock    =    elseBlock.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  node	24	None	replace
222	[BUG]  [BUGGY]  Node  labelBlock  =  n.getFirstChild();  [CE]  cannot  find  symbol  tryBlock  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  labelBlock  =  n.getFirstChild();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  labelBlock  =  n.getFirstChild();	  Node    tryBlock    =    elseBlock.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  tryBlock	24	None	replace
223	[BUG]  [BUGGY]  Preconditions.checkState(n.isFalse(),  exitType);  [CE]  cannot  find  symbol  tryBlock  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(n.isFalse(),  exitType);  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Preconditions.checkState(n.isFalse(),  exitType);	  Preconditions.checkState(n.isFalse());    	non-compiled	[CE]  cannot  find  symbol  tryBlock	117	None	replace
224	[BUG]  [BUGGY]  Preconditions.checkState(n.isFalse()  ||  n.isTry());  [CE]  cannot  find  symbol  tryBlock  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(n.isFalse()  ||  n.isTry());  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Preconditions.checkState(n.isFalse()  ||  n.isTry());	  Preconditions.checkState(n.isFalse());    	non-compiled	[CE]  cannot  find  symbol  tryBlock	117	None	replace
225	[BUG]  [BUGGY]  Preconditions.checkState(labelName.isFalse());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(labelName.isFalse());  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Preconditions.checkState(labelName.isFalse());	  Preconditions.checkState(n.isFalse());    	non-compiled	[CE]  cannot  find  symbol	117	None	replace
226	[BUG]  [BUGGY]  Node  elseBlock  =  n.getLastChild();  Node  anotherBlock  =  n.getFirstChild();  [CE]  cannot  find  symbol  tryBlock  [FE]    AssertionFailedError    [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  elseBlock  =  n.getLastChild();  Node  anotherBlock  =  n.getFirstChild();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  elseBlock  =  n.getLastChild();  Node  anotherBlock  =  n.getFirstChild();	          Node    elseBlock    =    n.getFirstChild();    Node    anotherBlock    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  tryBlock	12	None	replace
227	[BUG]  [BUGGY]  Node  elseBlock  =  n.getFirstChild();  Node  anotherBlock  =  n.getLastChild();  [CE]  cannot  find  symbol  tryBlock  [FE]      AssertionFailedError    [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  elseBlock  =  n.getFirstChild();  Node  anotherBlock  =  n.getLastChild();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  elseBlock  =  n.getFirstChild();  Node  anotherBlock  =  n.getLastChild();	          Node    elseBlock    =    n.getFirstChild();    Node    anotherBlock    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  tryBlock	12	None	replace
228	[BUG]  [BUGGY]  Preconditions.checkState(n.isTree());  Node  n  =  n.getFirstChild();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(n.isTree());  Node  n  =  n.getFirstChild();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Preconditions.checkState(n.isTree());  Node  n  =  n.getFirstChild();	          Preconditions.checkState(n.isTry());    Node    n    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	128	None	replace
229	[BUG]  [BUGGY]  Preconditions.checkState(n.isTry());  Node  n  =  n.getLastChild();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(n.isTry());  Node  n  =  n.getLastChild();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Preconditions.checkState(n.isTry());  Node  n  =  n.getLastChild();	          Preconditions.checkState(n.isTry());    Node    n    =    n.getFirstChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	128	None	replace
230	[BUG]  [BUGGY]  Preconditions.checkState(n.isTry());  n  =  n.getFirstChild();  [CE]  cannot  find  symbol  tryBlock  [FE]              AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(n.isTry());  n  =  n.getFirstChild();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Preconditions.checkState(n.isTry());  n  =  n.getFirstChild();	          Preconditions.checkState(n.isTry());    Node    n    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  tryBlock	128	None	replace
231	[BUG]  [BUGGY]  Node  tryBlock  =  n.getPrevious();  [CE]  cannot  find  symbol  [FE]                RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.getPrevious();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.getPrevious();	  Node    tryBlock    =    n.getNext();    Node    tryBlock    =    n.getPrevious();    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
232	[BUG]  [BUGGY]  Node  elseBlock  =  no.getFirstChild();  [CE]  cannot  find  symbol  no  [FE]        AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  elseBlock  =  no.getFirstChild();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  elseBlock  =  no.getFirstChild();	          Node    elseBlock    =    n.getFirstChild();    Node    elseBlock    =    no.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  no	130	None	replace
233	[BUG]  [BUGGY]  Preconditions.checkState(n.isTry());  Node  elseBlock  =  n.getFirstChild();  [CE]  cannot  find  symbol  tryBlock  [FE]        AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(n.isTry());  Node  elseBlock  =  n.getFirstChild();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Preconditions.checkState(n.isTry());  Node  elseBlock  =  n.getFirstChild();	          Node    elseBlock    =    n.getFirstChild();    Preconditions.checkState(n.isTry());    Node    elseBlock    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  tryBlock	99	None	replace
234	[BUG]  [BUGGY]  Node  tryBlock  =  n.getFirstChild();  Preconditions.checkState(n.removeFirstChild()  ==  null);  Node  tryBlock  =  n.removeFirstChild();  [CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.getFirstChild();  Preconditions.checkState(n.removeFirstChild()  ==  null);  Node  tryBlock  =  n.removeFirstChild();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.getFirstChild();  Preconditions.checkState(n.removeFirstChild()  ==  null);  Node  tryBlock  =  n.removeFirstChild();	  Node    tryBlock    =    n.removeFirstChild();    Preconditions.checkState(n.removeFirstChild()    ==    null);    Node    tryBlock    =    n.removeFirstChild();    	non-compiled	[CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	105	None	replace
235	[BUG]  [BUGGY]  Node  c  =  n.getNext();  Preconditions.checkState(NodeUtil.isTreeBlock(c));  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  c  =  n.getNext();  Preconditions.checkState(NodeUtil.isTreeBlock(c));  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  c  =  n.getNext();  Preconditions.checkState(NodeUtil.isTreeBlock(c));	          Node    c    =    n.getNext();    Node    c    =    n.getNext();    Preconditions.checkState(NodeUtil.isTreeBlock(n));    	non-compiled	[CE]  cannot  find  symbol	146	None	replace
236	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isTreeBlock(n));  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(NodeUtil.isTreeBlock(n));  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Preconditions.checkState(NodeUtil.isTreeBlock(n));	          Node    c    =    n.getNext();    Node    c    =    n.getNext();    Preconditions.checkState(NodeUtil.isTreeBlock(n));    	non-compiled	[CE]  cannot  find  symbol	146	None	replace
237	[BUG]  [BUGGY]  Node  n  =  n.getNext();  Preconditions.checkState(NodeUtil.isTreeBlock(n));  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  n  =  n.getNext();  Preconditions.checkState(NodeUtil.isTreeBlock(n));  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  n  =  n.getNext();  Preconditions.checkState(NodeUtil.isTreeBlock(n));	          Node    c    =    n.getNext();    Node    c    =    n.getNext();    Preconditions.checkState(NodeUtil.isTreeBlock(n));    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	146	None	replace
238	[BUG]  [BUGGY]  Node  elseBlock  =  otherBlock.getOwnerChild();  [CE]  cannot  find  symbol  otherBlock  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  elseBlock  =  otherBlock.getOwnerChild();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  elseBlock  =  otherBlock.getOwnerChild();	  Node    elseBlock    =    n.getOwnerChild();    	non-compiled	[CE]  cannot  find  symbol  otherBlock	52	None	replace
239	[BUG]  [BUGGY]  Node  elseBlock  =  anotherBlock.getOwnerChild();  [CE]  cannot  find  symbol  anotherBlock  [FE]              AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  elseBlock  =  anotherBlock.getOwnerChild();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  elseBlock  =  anotherBlock.getOwnerChild();	  Node    elseBlock    =    n.getOwnerChild();    	non-compiled	[CE]  cannot  find  symbol  anotherBlock	52	None	replace
240	[BUG]  [BUGGY]  Node  elseBlock  =  node.getOwnerChild();  [CE]  cannot  find  symbol  node  [FE]                AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  elseBlock  =  node.getOwnerChild();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  elseBlock  =  node.getOwnerChild();	  Node    elseBlock    =    n.getOwnerChild();    	non-compiled	[CE]  cannot  find  symbol  node	52	None	replace
241	[BUG]  [BUGGY]  Node  elseBlock  =  c.getOwnerChild();  [CE]  cannot  find  symbol  c  [FE]                  AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  elseBlock  =  c.getOwnerChild();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  elseBlock  =  c.getOwnerChild();	  Node    elseBlock    =    n.getOwnerChild();    	non-compiled	[CE]  cannot  find  symbol  c	52	None	replace
242	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.removeFirstChild();  Preconditions.checkState(n.removeFirstChild()!=  null);  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	add	Node  tryBlock  =  n.removeFirstChild();  Preconditions.checkState(n.removeFirstChild()!=  null);	  Node    tryBlock    =    n.removeFirstChild();    Preconditions.checkState(n.removeFirstChild()!=    null);    Node    tryBlock    =    n.removeFirstChild();    	compilable	  [FE]  RuntimeException  	106	6	replace
243	[BUG]  [BUGGY]  Node  tryBlock  =  n.removeFirstChild();  Preconditions.checkState(n.removeFirstChild()!=  null);  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.removeFirstChild();  Preconditions.checkState(n.removeFirstChild()!=  null);  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.removeFirstChild();  Preconditions.checkState(n.removeFirstChild()!=  null);	  Node    tryBlock    =    n.removeFirstChild();    Preconditions.checkState(n.removeFirstChild()!=    null);    Node    tryBlock    =    n.removeFirstChild();    	compilable	  [FE]  RuntimeException  	106	6	replace
244	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.getFirstChild();  Preconditions.checkState(n.removeFirstChild()!=  null);  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	add	Node  tryBlock  =  n.getFirstChild();  Preconditions.checkState(n.removeFirstChild()!=  null);	  Node    tryBlock    =    n.removeFirstChild();    Preconditions.checkState(n.removeFirstChild()!=    null);    Node    tryBlock    =    n.removeFirstChild();    	compilable	  [FE]  RuntimeException  	106	6	replace
245	[BUG]  [BUGGY]  Node  tryBlock  =  n.getFirstChild();  Preconditions.checkState(n.removeFirstChild()!=  null);  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.getFirstChild();  Preconditions.checkState(n.removeFirstChild()!=  null);  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.getFirstChild();  Preconditions.checkState(n.removeFirstChild()!=  null);	  Node    tryBlock    =    n.removeFirstChild();    Preconditions.checkState(n.removeFirstChild()!=    null);    Node    tryBlock    =    n.removeFirstChild();    	compilable	  [FE]  RuntimeException  	106	6	replace
246	[BUG]  [BUGGY]  Node  tryBlock  =  n.getFirstChild();  Node  tryBlock  =  n.getParent();  Preconditions.checkState(tryBlock  ==  null);  [CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          StackOverflowError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.getFirstChild();  Node  tryBlock  =  n.getParent();  Preconditions.checkState(tryBlock  ==  null);  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.getFirstChild();  Node  tryBlock  =  n.getParent();  Preconditions.checkState(tryBlock  ==  null);	  Node    tryBlock    =    n.getParent();    Node    tryBlock    =    n.getParent();    Preconditions.checkState(tryBlock    ==    null);    	non-compiled	[CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	114	None	replace
247	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  exitType);  [CE]  cannot  find  symbol  tryBlock  [FE]        AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  exitType);  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  exitType);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  tryBlock	116	None	replace
248	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME);  [CE]  cannot  find  symbol  tryBlock  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME);  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Preconditions.checkState(n.getType()!=  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  tryBlock	116	None	replace
249	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  labelName);  [CE]  cannot  find  symbol  tryBlock  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  labelName);  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  labelName);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  tryBlock	116	None	replace
250	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  c);  [CE]  cannot  find  symbol  c  [FE]              AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  c);  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  c);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  c	116	None	replace
251	[BUG]  [BUGGY]  Node  c  =  n.getFirstChild();  Preconditions.checkState(c.isTry());  [CE]  cannot  find  symbol  tryBlock  [FE]                  AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  c  =  n.getFirstChild();  Preconditions.checkState(c.isTry());  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  c  =  n.getFirstChild();  Preconditions.checkState(c.isTry());	          Node    c    =    n.getFirstChild();    Node    c    =    n.getFirstChild();    Preconditions.checkState(n.isTry());    	non-compiled	[CE]  cannot  find  symbol  tryBlock	41	None	replace
252	[BUG]  [BUGGY]  Node  c  =  n.getFirstChild();  Node  c  =  n.getFirstChild();  Preconditions.checkState(c.isTry());  [CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                    AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  c  =  n.getFirstChild();  Node  c  =  n.getFirstChild();  Preconditions.checkState(c.isTry());  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  c  =  n.getFirstChild();  Node  c  =  n.getFirstChild();  Preconditions.checkState(c.isTry());	          Node    c    =    n.getFirstChild();    Node    c    =    n.getFirstChild();    Preconditions.checkState(n.isTry());    	non-compiled	[CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	41	None	replace
253	[BUG]  [BUGGY]  Node  c  =  n.getNext();  Preconditions.checkState(n.getNext()!=  exitType);  [CE]  incomparable  types:  Node  and  int  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  c  =  n.getNext();  Preconditions.checkState(n.getNext()!=  exitType);  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  c  =  n.getNext();  Preconditions.checkState(n.getNext()!=  exitType);	          Node    c    =    n.getNext();    Preconditions.checkState(n.getNext()!=    exitType);    Node    c    =    n.getNext();    	non-compiled	[CE]  incomparable  types:  Node  and  int	111	None	replace
254	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(n.isTry());  Node  tryBlock  =  n.getLastChild();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	add	Preconditions.checkState(n.isTry());  Node  tryBlock  =  n.getLastChild();	  Node    tryBlock    =    n.getLastChild();    Preconditions.checkState(n.isTry());    Node    tryBlock    =    n.getLastChild();    	compilable	  [FE]  AssertionFailedError  	96	6	replace
255	[BUG]  [BUGGY]  Preconditions.checkState(n.isTry());  Node  tryBlock  =  n.getLastChild();  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(n.isTry());  Node  tryBlock  =  n.getLastChild();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Preconditions.checkState(n.isTry());  Node  tryBlock  =  n.getLastChild();	  Node    tryBlock    =    n.getLastChild();    Preconditions.checkState(n.isTry());    Node    tryBlock    =    n.getLastChild();    	compilable	  [FE]  AssertionFailedError  	96	6	replace
256	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(n.isTry());  Node  tryBlock  =  n.getFirstChild();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	add	Preconditions.checkState(n.isTry());  Node  tryBlock  =  n.getFirstChild();	  Node    tryBlock    =    n.getLastChild();    Preconditions.checkState(n.isTry());    Node    tryBlock    =    n.getLastChild();    	compilable	  [FE]  AssertionFailedError  	96	2	replace
257	[BUG]  [BUGGY]  Preconditions.checkState(n.isTry());  Node  tryBlock  =  n.getFirstChild();  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(n.isTry());  Node  tryBlock  =  n.getFirstChild();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Preconditions.checkState(n.isTry());  Node  tryBlock  =  n.getFirstChild();	  Node    tryBlock    =    n.getLastChild();    Preconditions.checkState(n.isTry());    Node    tryBlock    =    n.getLastChild();    	compilable	  [FE]  AssertionFailedError  	96	2	replace
258	[BUG]  [BUGGY]  Node  n  =  nodes.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]              AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  n  =  nodes.getFirstChild();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  n  =  nodes.getFirstChild();	  Node    n    =    nodes.getLastChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	85	None	replace
259	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        StackOverflowError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.getFirstChild();  Node  attemptBlock  =  n.getParent();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	add	Node  tryBlock  =  n.getFirstChild();  Node  attemptBlock  =  n.getParent();	  Node    tryBlock    =    n.getParent();    Node    attemptBlock    =    n.getParent();    	compilable	  [FE]  AssertionFailedError  	121	2	replace
260	[BUG]  [BUGGY]  Node  tryBlock  =  n.getFirstChild();  Node  attemptBlock  =  n.getParent();  [FE]  AssertionFailedError  [FE]        StackOverflowError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.getFirstChild();  Node  attemptBlock  =  n.getParent();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.getFirstChild();  Node  attemptBlock  =  n.getParent();	  Node    tryBlock    =    n.getParent();    Node    attemptBlock    =    n.getParent();    	compilable	  [FE]  AssertionFailedError  	121	2	replace
261	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          StackOverflowError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.getNext();  Node  attemptBlock  =  n.getParent();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	add	Node  tryBlock  =  n.getNext();  Node  attemptBlock  =  n.getParent();	  Node    tryBlock    =    n.getParent();    Node    attemptBlock    =    n.getParent();    	compilable	  [FE]  RuntimeException  	121	6	replace
262	[BUG]  [BUGGY]  Node  tryBlock  =  n.getNext();  Node  attemptBlock  =  n.getParent();  [FE]  RuntimeException  [FE]          StackOverflowError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.getNext();  Node  attemptBlock  =  n.getParent();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.getNext();  Node  attemptBlock  =  n.getParent();	  Node    tryBlock    =    n.getParent();    Node    attemptBlock    =    n.getParent();    	compilable	  [FE]  RuntimeException  	121	6	replace
263	[BUG]  [BUGGY]  Node  tryBlock  =  null.getParent();  [CE]  <null>  cannot  be  dereferenced  [FE]              StackOverflowError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  null.getParent();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  null.getParent();	  Node    tryBlock    =    n.getParent();    Node    tryBlock    =    null.getParent();    	non-compiled	[CE]  <null>  cannot  be  dereferenced	124	None	replace
264	[BUG]  [BUGGY]  Node  tryBlock  =  null.getNext();  [CE]  <null>  cannot  be  dereferenced  [FE]                StackOverflowError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  null.getNext();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  null.getNext();	  Node    tryBlock    =    n.getParent();    Node    tryBlock    =    null.getParent();    	non-compiled	[CE]  <null>  cannot  be  dereferenced	124	None	replace
265	[BUG]  [BUGGY]  Node  c  =  node.getCatchBlock();  [CE]  cannot  find  symbol  node  [FE]        AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  c  =  node.getCatchBlock();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  c  =  node.getCatchBlock();	  Node    c    =    n.getCatchBlock();    	non-compiled	[CE]  cannot  find  symbol  node	88	None	replace
266	[BUG]  [BUGGY]  Node  c  =  n,  exitType.getCatchBlock();  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  c  =  n,  exitType.getCatchBlock();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  c  =  n,  exitType.getCatchBlock();	  Node    c    =    n.getCatchBlock();    	non-compiled	[CE]  ';'  expected	88	None	replace
267	[BUG]  [BUGGY]  Node  c  =  n.getCatchBlock(labelName);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  c  =  n.getCatchBlock(labelName);  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  c  =  n.getCatchBlock(labelName);	  Node    c    =    n.getCatchBlock();    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
268	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.getFirstChild();  Node  startBlock  =  n.removeFirstChild();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	add	Node  tryBlock  =  n.getFirstChild();  Node  startBlock  =  n.removeFirstChild();	  Node    tryBlock    =    n.removeFirstChild();    Node    startBlock    =    n.removeFirstChild();    	compilable	  [FE]  RuntimeException  	78	6	replace
269	[BUG]  [BUGGY]  Node  tryBlock  =  n.getFirstChild();  Node  startBlock  =  n.removeFirstChild();  [FE]  RuntimeException  [FE]              RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.getFirstChild();  Node  startBlock  =  n.removeFirstChild();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.getFirstChild();  Node  startBlock  =  n.removeFirstChild();	  Node    tryBlock    =    n.removeFirstChild();    Node    startBlock    =    n.removeFirstChild();    	compilable	  [FE]  RuntimeException  	78	6	replace
270	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.getFirstChild();  Node  startBlock  =  n.getFirstChild();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	add	Node  tryBlock  =  n.getFirstChild();  Node  startBlock  =  n.getFirstChild();	  Node    tryBlock    =    n.removeFirstChild();    Node    startBlock    =    n.removeFirstChild();    	compilable	  [FE]  AssertionFailedError  	78	2	replace
271	[BUG]  [BUGGY]  Node  tryBlock  =  n.getFirstChild();  Node  startBlock  =  n.getFirstChild();  [FE]  AssertionFailedError  [FE]                RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.getFirstChild();  Node  startBlock  =  n.getFirstChild();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.getFirstChild();  Node  startBlock  =  n.getFirstChild();	  Node    tryBlock    =    n.removeFirstChild();    Node    startBlock    =    n.removeFirstChild();    	compilable	  [FE]  AssertionFailedError  	78	2	replace
272	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                  RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.getLastChild();  Node  startBlock  =  n.removeFirstChild();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	add	Node  tryBlock  =  n.getLastChild();  Node  startBlock  =  n.removeFirstChild();	  Node    tryBlock    =    n.removeFirstChild();    Node    startBlock    =    n.removeFirstChild();    	compilable	  [FE]  RuntimeException  	78	6	replace
273	[BUG]  [BUGGY]  Node  tryBlock  =  n.getLastChild();  Node  startBlock  =  n.removeFirstChild();  [FE]  RuntimeException  [FE]                  RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.getLastChild();  Node  startBlock  =  n.removeFirstChild();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.getLastChild();  Node  startBlock  =  n.removeFirstChild();	  Node    tryBlock    =    n.removeFirstChild();    Node    startBlock    =    n.removeFirstChild();    	compilable	  [FE]  RuntimeException  	78	6	replace
274	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                    RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.getNext();  Node  startBlock  =  n.removeFirstChild();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	add	Node  tryBlock  =  n.getNext();  Node  startBlock  =  n.removeFirstChild();	  Node    tryBlock    =    n.removeFirstChild();    Node    startBlock    =    n.removeFirstChild();    	compilable	  [FE]  RuntimeException  	78	6	replace
275	[BUG]  [BUGGY]  Node  tryBlock  =  n.getNext();  Node  startBlock  =  n.removeFirstChild();  [FE]  RuntimeException  [FE]                    RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.getNext();  Node  startBlock  =  n.removeFirstChild();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.getNext();  Node  startBlock  =  n.removeFirstChild();	  Node    tryBlock    =    n.removeFirstChild();    Node    startBlock    =    n.removeFirstChild();    	compilable	  [FE]  RuntimeException  	78	6	replace
276	[BUG]  [BUGGY]  n.removeChild(labelName,  exitType,  labelName);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  n.removeChild(labelName,  exitType,  labelName);  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	n.removeChild(labelName,  exitType,  labelName);	  n.removeChild(labelName,    exitType);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	62	None	replace
277	[BUG]  [BUGGY]  n.removeChild(labelName,  tryMinimizeExits(exitType,  exitType));  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  n.removeChild(labelName,  tryMinimizeExits(exitType,  exitType));  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	n.removeChild(labelName,  tryMinimizeExits(exitType,  exitType));	  n.removeChild(labelName,    exitType);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	62	None	replace
278	[BUG]  [BUGGY]  n.removeChild(labelName,  tryMinimizeExits(exitType,  exitType);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  n.removeChild(labelName,  tryMinimizeExits(exitType,  exitType);  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	n.removeChild(labelName,  tryMinimizeExits(exitType,  exitType);	  n.removeChild(labelName,    exitType);    	non-compiled	[CE]  ')'  expected	62	None	replace
279	[BUG]  [BUGGY]  n.removeChild(labelName,  tryMinimizeExits(elseBlock,  exitType,  labelName);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  n.removeChild(labelName,  tryMinimizeExits(elseBlock,  exitType,  labelName);  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	n.removeChild(labelName,  tryMinimizeExits(elseBlock,  exitType,  labelName);	  n.removeChild(labelName,    exitType);    	non-compiled	[CE]  ')'  expected	62	None	replace
280	[BUG]  [BUGGY]  n.removeChild(labelName,  tryBlock,  exitType);  [CE]  cannot  find  symbol  tryBlock  [FE]                    AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  n.removeChild(labelName,  tryBlock,  exitType);  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	n.removeChild(labelName,  tryBlock,  exitType);	  n.removeChild(labelName,    exitType);    	non-compiled	[CE]  cannot  find  symbol  tryBlock	62	None	replace
281	[BUG]  [BUGGY]  Node  n  =  otherBlock.getNext();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                      AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  n  =  otherBlock.getNext();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  n  =  otherBlock.getNext();	  Node    n    =    elseBlock.getNext();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	49	None	replace
282	[BUG]  [BUGGY]  Node  c  =  n.getNext();  Preconditions.checkState(n.getType()  ==  Token.GETPROP);  [CE]  cannot  find  symbol  tryBlock  [FE]                  AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  c  =  n.getNext();  Preconditions.checkState(n.getType()  ==  Token.GETPROP);  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  c  =  n.getNext();  Preconditions.checkState(n.getType()  ==  Token.GETPROP);	          Node    c    =    n.getNext();    Node    c    =    n.getNext();    Preconditions.checkState(n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  cannot  find  symbol  tryBlock	47	None	replace
283	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP);  [CE]  cannot  find  symbol  tryBlock  [FE]                    AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP);  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP);	          Node    c    =    n.getNext();    Node    c    =    n.getNext();    Preconditions.checkState(n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  cannot  find  symbol  tryBlock	47	None	replace
284	[BUG]  [BUGGY]  Node  n  =  n.getNext();  Preconditions.checkState(n.getType()  ==  Token.GETPROP);  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                      AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  n  =  n.getNext();  Preconditions.checkState(n.getType()  ==  Token.GETPROP);  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  n  =  n.getNext();  Preconditions.checkState(n.getType()  ==  Token.GETPROP);	          Node    c    =    n.getNext();    Node    c    =    n.getNext();    Preconditions.checkState(n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	47	None	replace
285	[BUG]  [BUGGY]  Preconditions.checkState(n.isTree(),  exitType);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(n.isTree(),  exitType);  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Preconditions.checkState(n.isTree(),  exitType);	  Preconditions.checkState(n.isTree());    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
286	[BUG]  [BUGGY]  Preconditions.checkState(n.isTree()  ||  n.isTree());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(n.isTree()  ||  n.isTree());  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Preconditions.checkState(n.isTree()  ||  n.isTree());	  Preconditions.checkState(n.isTree());    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
287	[BUG]  [BUGGY]  Preconditions.checkState(n.isTree()  &&  n.isTree());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(n.isTree()  &&  n.isTree());  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Preconditions.checkState(n.isTree()  &&  n.isTree());	  Preconditions.checkState(n.isTree());    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
288	[BUG]  [BUGGY]  Node  c  =  n.getNext();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  tryBlock  [FE]                AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  c  =  n.getNext();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  c  =  n.getNext();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	          Node    c    =    n.getNext();    Node    c    =    n.getNext();    Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  cannot  find  symbol  tryBlock	46	None	replace
289	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  tryBlock  [FE]                  AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	          Node    c    =    n.getNext();    Node    c    =    n.getNext();    Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  cannot  find  symbol  tryBlock	46	None	replace
290	[BUG]  [BUGGY]  Node  n  =  n.getNext();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                    AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  n  =  n.getNext();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  n  =  n.getNext();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	          Node    c    =    n.getNext();    Node    c    =    n.getNext();    Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	46	None	replace
291	[BUG]  [BUGGY]  Node  c  =  n.getNext();  Preconditions.checkState(c.getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  tryBlock  [FE]                      AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  c  =  n.getNext();  Preconditions.checkState(c.getType()  ==  Token.FUNCTION);  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  c  =  n.getNext();  Preconditions.checkState(c.getType()  ==  Token.FUNCTION);	          Node    c    =    n.getNext();    Node    c    =    n.getNext();    Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  cannot  find  symbol  tryBlock	46	None	replace
292	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isFunctionAnonymous(n));  [CE]  cannot  find  symbol  [FE]          StackOverflowError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(!NodeUtil.isFunctionAnonymous(n));  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Preconditions.checkState(!NodeUtil.isFunctionAnonymous(n));	  Node    tryBlock    =    n.getParent();    Node    tryBlock    =    n.getParent();    }    else    if(n.isTree())    {    Preconditions.checkState(!NodeUtil.isFunctionAnonymous(n));    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
293	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.getFirstChild();  Node  startBlock  =  n.getLastChild();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	add	Node  tryBlock  =  n.getFirstChild();  Node  startBlock  =  n.getLastChild();	  Node    tryBlock    =    n.getLastChild();    Node    startBlock    =    n.getLastChild();    	compilable	  [FE]  AssertionFailedError  	70	2	replace
294	[BUG]  [BUGGY]  Node  tryBlock  =  n.getFirstChild();  Node  startBlock  =  n.getLastChild();  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.getFirstChild();  Node  startBlock  =  n.getLastChild();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.getFirstChild();  Node  startBlock  =  n.getLastChild();	  Node    tryBlock    =    n.getLastChild();    Node    startBlock    =    n.getLastChild();    	compilable	  [FE]  AssertionFailedError  	70	2	replace
295	[BUG]  [BUGGY]  Node  startBlock  =  n.getLastChild();  [CE]  cannot  find  symbol  tryBlock  [FE]                AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  startBlock  =  n.getLastChild();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  startBlock  =  n.getLastChild();	  Node    tryBlock    =    n.getLastChild();    Node    startBlock    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  tryBlock	70	None	replace
296	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.getLastChild();  Node  startBlock  =  n.getFirstChild();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	add	Node  tryBlock  =  n.getLastChild();  Node  startBlock  =  n.getFirstChild();	  Node    tryBlock    =    n.getLastChild();    Node    startBlock    =    n.getLastChild();    	compilable	  [FE]  AssertionFailedError  	70	6	replace
297	[BUG]  [BUGGY]  Node  tryBlock  =  n.getLastChild();  Node  startBlock  =  n.getFirstChild();  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.getLastChild();  Node  startBlock  =  n.getFirstChild();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.getLastChild();  Node  startBlock  =  n.getFirstChild();	  Node    tryBlock    =    n.getLastChild();    Node    startBlock    =    n.getLastChild();    	compilable	  [FE]  AssertionFailedError  	70	6	replace
298	[BUG]  [BUGGY]  Node  elseBlock  =  ifTree.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  }  elseBlock  =  n.getFirstChild();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  elseBlock  =  ifTree.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  }  elseBlock  =  n.getFirstChild();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  elseBlock  =  ifTree.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  }  elseBlock  =  n.getFirstChild();	          Node    elseBlock    =    n.getFirstChild();    Node    elseBlock    =    n.getFirstChild();    }    elseBlock    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
299	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isExpressionNode(n));  [CE]  cannot  find  symbol  [FE]              StackOverflowError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(!NodeUtil.isExpressionNode(n));  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Preconditions.checkState(!NodeUtil.isExpressionNode(n));	  Node    tryBlock    =    n.getParent();    Node    tryBlock    =    n.getParent();    }    else    if(n.isTree())    {    Preconditions.checkState(!NodeUtil.isExpressionNode(n));    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
300	[BUG]  [BUGGY]  Node  tryBlock  =  ifBlock.getNext();  Node  tryBlock  =  n.getNext();  [CE]  cannot  find  symbol  ifBlock  [FE]            RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  ifBlock.getNext();  Node  tryBlock  =  n.getNext();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  ifBlock.getNext();  Node  tryBlock  =  n.getNext();	  Node    tryBlock    =    n.getNext();    Node    tryBlock    =    n.getNext();    }    else    {    tryMinimizeExits(tryBlock,    exitType,    labelName);    Preconditions.checkState(n.isTry());    	non-compiled	[CE]  cannot  find  symbol  ifBlock	134	None	replace
301	[BUG]  [BUGGY]  Node  tryBlock  =  this.falseBlock.getTree();  [CE]  cannot  find  symbol  falseBlock  [FE]                AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  this.falseBlock.getTree();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  this.falseBlock.getTree();	  Node    tryBlock    =    elseBlock.getTree();    	non-compiled	[CE]  cannot  find  symbol  falseBlock	25	None	replace
302	[BUG]  [BUGGY]  Node  tryBlock  =  falseBlock.getTree();  [CE]  cannot  find  symbol  falseBlock  [FE]                  AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  falseBlock.getTree();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  falseBlock.getTree();	  Node    tryBlock    =    elseBlock.getTree();    	non-compiled	[CE]  cannot  find  symbol  falseBlock	25	None	replace
303	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild()!=  exitType);  Node  c  =  n.getLastChild();  [CE]  incomparable  types:  Node  and  int  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(n.getFirstChild()!=  exitType);  Node  c  =  n.getLastChild();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Preconditions.checkState(n.getFirstChild()!=  exitType);  Node  c  =  n.getLastChild();	          Node    c    =    n.getFirstChild();    Node    c    =    n.getLastChild();    	non-compiled	[CE]  incomparable  types:  Node  and  int	37	None	replace
304	[BUG]  [BUGGY]  Presconditions.checkState(n.isTry());  [CE]  cannot  find  symbol  Presconditions  [FE]    AssertionFailedError    [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Presconditions.checkState(n.isTry());  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Presconditions.checkState(n.isTry());	          Preconditions.checkState(n.isTry());    Preconditions.checkState(n.isTry());Preconditions.checkState(n.isTry());    	non-compiled	[CE]  cannot  find  symbol  Presconditions	127	None	replace
305	[BUG]  [BUGGY]  Conditions.checkState(n.isTry());  [CE]  cannot  find  symbol  Conditions  [FE]      AssertionFailedError    [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Conditions.checkState(n.isTry());  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Conditions.checkState(n.isTry());	          Preconditions.checkState(n.isTry());    Preconditions.checkState(n.isTry());Preconditions.checkState(n.isTry());    	non-compiled	[CE]  cannot  find  symbol  Conditions	127	None	replace
306	[BUG]  [BUGGY]  Préconditions.checkState(n.isTry());  [CE]  cannot  find  symbol  Pr  [FE]        AssertionFailedError    [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Préconditions.checkState(n.isTry());  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Préconditions.checkState(n.isTry());	          Preconditions.checkState(n.isTry());    Preconditions.checkState(n.isTry());Preconditions.checkState(n.isTry());    	non-compiled	[CE]  cannot  find  symbol  Pr	127	None	replace
307	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isFunctionDeclaration(n));  [CE]  cannot  find  symbol  tryBlock  [FE]            StackOverflowError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(!NodeUtil.isFunctionDeclaration(n));  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Preconditions.checkState(!NodeUtil.isFunctionDeclaration(n));	  Node    tryBlock    =    n.getParent();    Node    tryBlock    =    n.getParent();    }    else    if(n.isTree())    {    Preconditions.checkState(!NodeUtil.isFunctionDeclaration(n));    	non-compiled	[CE]  cannot  find  symbol  tryBlock	15	None	replace
308	[BUG]  [BUGGY]  Preconditions.checkState(labelName.isTry());  AssertionFailedError  n  =  new  AssertionFailedError(labelName,  exitType);  Preconditions.checkState(n.isTry());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(labelName.isTry());  AssertionFailedError  n  =  new  AssertionFailedError(labelName,  exitType);  Preconditions.checkState(n.isTry());  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Preconditions.checkState(labelName.isTry());  AssertionFailedError  n  =  new  AssertionFailedError(labelName,  exitType);  Preconditions.checkState(n.isTry());	          Preconditions.checkState(n.isTry());    AssertionFailedError    n    =    new    AssertionFailedError(labelName,    exitType);    Preconditions.checkState(n.isTry());    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
309	[BUG]  [BUGGY]  Preconditions.checkState(n.isTry());  n.setTree(n.isTry());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(n.isTry());  n.setTree(n.isTry());  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Preconditions.checkState(n.isTry());  n.setTree(n.isTry());	          Preconditions.checkState(n.isTry());    Preconditions.checkState(n.isTry());    n.setTree(n.isTry());    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
310	[BUG]  [BUGGY]  Preconditions.checkState(n.isTry(),  n.isTry());  n.setTree(n.isTry());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(n.isTry(),  n.isTry());  n.setTree(n.isTry());  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Preconditions.checkState(n.isTry(),  n.isTry());  n.setTree(n.isTry());	          Preconditions.checkState(n.isTry());    Preconditions.checkState(n.isTry());    n.setTree(n.isTry());    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
311	[BUG]  [BUGGY]  Preconditions.checkState(labelName.isTry());  Preconditions.checkState(n.isTry());  n.setTree(n.isTry());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(labelName.isTry());  Preconditions.checkState(n.isTry());  n.setTree(n.isTry());  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Preconditions.checkState(labelName.isTry());  Preconditions.checkState(n.isTry());  n.setTree(n.isTry());	          Preconditions.checkState(n.isTry());    Preconditions.checkState(n.isTry());    n.setTree(n.isTry());    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
312	[BUG]  [BUGGY]  Node  c  =  allCatchNodes.getCatchNodes();  [CE]  cannot  find  symbol  allCatchNodes  [FE]        AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  c  =  allCatchNodes.getCatchNodes();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  c  =  allCatchNodes.getCatchNodes();	  Node    c    =    n.getCatchNodes();    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	66	None	replace
313	[BUG]  [BUGGY]  Node  c  =  node.getCatchNodes();  [CE]  cannot  find  symbol  node  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  c  =  node.getCatchNodes();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  c  =  node.getCatchNodes();	  Node    c    =    n.getCatchNodes();    	non-compiled	[CE]  cannot  find  symbol  node	66	None	replace
314	[BUG]  [BUGGY]  Node  c  =  n.getCatchNodes(labelName);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  c  =  n.getCatchNodes(labelName);  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  c  =  n.getCatchNodes(labelName);	  Node    c    =    n.getCatchNodes();    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
315	[BUG]  [BUGGY]  Node  c  =  nodes.getCatchNodes();  [CE]  cannot  find  symbol  nodes  [FE]              AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  c  =  nodes.getCatchNodes();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  c  =  nodes.getCatchNodes();	  Node    c    =    n.getCatchNodes();    	non-compiled	[CE]  cannot  find  symbol  nodes	66	None	replace
316	[BUG]  [BUGGY]  Node  elseBlock  =  node.getFirstChild();  [CE]  cannot  find  symbol  node  [FE]        AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  elseBlock  =  node.getFirstChild();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  elseBlock  =  node.getFirstChild();	  Node    elseBlock    =    ifTree.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  node	90	None	replace
317	[BUG]  [BUGGY]  Node  nextBlock  =  n.getFirstChild();  [CE]  cannot  find  symbol  tryBlock  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  nextBlock  =  n.getFirstChild();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  nextBlock  =  n.getFirstChild();	  Node    elseBlock    =    ifTree.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  tryBlock	90	None	replace
318	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT);  [CE]  cannot  find  symbol  tryBlock  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT);  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  cannot  find  symbol  tryBlock	3	None	replace
319	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  exitType);  [CE]  cannot  find  symbol  tryBlock  [FE]              AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  exitType);  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  exitType);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  cannot  find  symbol  tryBlock	3	None	replace
320	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  labelName);  [CE]  cannot  find  symbol  tryBlock  [FE]                AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  labelName);  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  labelName);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  cannot  find  symbol  tryBlock	3	None	replace
321	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  cannot  find  symbol  tryBlock  [FE]                  AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  cannot  find  symbol  tryBlock	3	None	replace
322	[BUG]  [BUGGY]  Node  c  =  n.getNext();  AssertionFailedError  c  =  c.getNext();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  c  =  n.getNext();  AssertionFailedError  c  =  c.getNext();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  c  =  n.getNext();  AssertionFailedError  c  =  c.getNext();	          Node    c    =    n.getNext();    AssertionFailedError    c    =    n.getNext();    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
323	[BUG]  [BUGGY]  Node  n  =  n.getNext();  AssertionFailedError  c  =  n.getNext();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  n  =  n.getNext();  AssertionFailedError  c  =  n.getNext();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  n  =  n.getNext();  AssertionFailedError  c  =  n.getNext();	          Node    c    =    n.getNext();    AssertionFailedError    c    =    n.getNext();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	112	None	replace
324	[BUG]  [BUGGY]  AssertionFailedError  c  =  n.getNext();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  AssertionFailedError  c  =  n.getNext();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	AssertionFailedError  c  =  n.getNext();	          Node    c    =    n.getNext();    AssertionFailedError    c    =    n.getNext();    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
325	[BUG]  [BUGGY]  Node  c  =  node.getNext();  AssertionFailedError  c  =  n.getNext();  [CE]  cannot  find  symbol  node  [FE]                    AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  c  =  node.getNext();  AssertionFailedError  c  =  n.getNext();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  c  =  node.getNext();  AssertionFailedError  c  =  n.getNext();	          Node    c    =    n.getNext();    AssertionFailedError    c    =    n.getNext();    	non-compiled	[CE]  cannot  find  symbol  node	112	None	replace
326	[BUG]  [BUGGY]  Node  n  =  ifTree.getNext();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                    AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  n  =  ifTree.getNext();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  n  =  ifTree.getNext();	  Node    n    =    ifBlock.getNext();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	80	None	replace
327	[BUG]  [BUGGY]  Node  n  =  this.ifTree.getNext();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                      AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  n  =  this.ifTree.getNext();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  n  =  this.ifTree.getNext();	  Node    n    =    ifBlock.getNext();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	80	None	replace
328	[BUG]  [BUGGY]  Node  tryBlock  =  no.removeFirstChild();  [CE]  cannot  find  symbol  no  [FE]            RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  no.removeFirstChild();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  no.removeFirstChild();	  Node    tryBlock    =    n.removeFirstChild();    Node    tryBlock    =    no.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol  no	138	None	replace
329	[BUG]  [BUGGY]  Node  c  =  node.getLastChild();  [CE]  cannot  find  symbol  node  [FE]        AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  c  =  node.getLastChild();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  c  =  node.getLastChild();	  Node    c    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  node	30	None	replace
330	[BUG]  [BUGGY]  Node  c  =  allCatchNodes.getLastChild();  [CE]  cannot  find  symbol  allCatchNodes  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  c  =  allCatchNodes.getLastChild();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  c  =  allCatchNodes.getLastChild();	  Node    c    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	30	None	replace
331	[BUG]  [BUGGY]  Node  c  =  this.n.getLastChild();  [CE]  cannot  find  symbol  n  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  c  =  this.n.getLastChild();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  c  =  this.n.getLastChild();	  Node    c    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  n	30	None	replace
332	[BUG]  [BUGGY]  Node  c  =  n.getFirstChild();  preconditions.checkState(c.isTry());  [CE]  cannot  find  symbol  preconditions  [FE]        AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  c  =  n.getFirstChild();  preconditions.checkState(c.isTry());  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  c  =  n.getFirstChild();  preconditions.checkState(c.isTry());	          Node    c    =    n.getFirstChild();    Node    c    =    n.getFirstChild();    preconditions.checkState(n.isTry());    	non-compiled	[CE]  cannot  find  symbol  preconditions	104	None	replace
333	[BUG]  [BUGGY]  Node  attemptBlock  =  elseBlock.getTree();  [CE]  cannot  find  symbol  elseBlock  [FE]                    AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  attemptBlock  =  elseBlock.getTree();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  attemptBlock  =  elseBlock.getTree();	  Node    attemptBlock    =    n.getTree();    	non-compiled	[CE]  cannot  find  symbol  elseBlock	27	None	replace
334	[BUG]  [BUGGY]  Node  attemptBlock  =  n,  falseBlock.getTree();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  attemptBlock  =  n,  falseBlock.getTree();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  attemptBlock  =  n,  falseBlock.getTree();	  Node    attemptBlock    =    n.getTree();    	non-compiled	[CE]  ';'  expected	27	None	replace
335	[BUG]  [BUGGY]  Node  attemptBlock  =  node.getTree();  [CE]  cannot  find  symbol  node  [FE]                        AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  attemptBlock  =  node.getTree();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  attemptBlock  =  node.getTree();	  Node    attemptBlock    =    n.getTree();    	non-compiled	[CE]  cannot  find  symbol  node	27	None	replace
336	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.getNext();  Preconditions.checkState(n.getNext()!=  null);  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	add	Node  tryBlock  =  n.getNext();  Preconditions.checkState(n.getNext()!=  null);	  Node    tryBlock    =    n.getNext();    Preconditions.checkState(n.getNext()!=    null);    Node    tryBlock    =    n.getNext();    	compilable	  [FE]  RuntimeException  	95	6	replace
337	[BUG]  [BUGGY]  Node  tryBlock  =  n.getNext();  Preconditions.checkState(n.getNext()!=  null);  [FE]  RuntimeException  [FE]              RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.getNext();  Preconditions.checkState(n.getNext()!=  null);  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.getNext();  Preconditions.checkState(n.getNext()!=  null);	  Node    tryBlock    =    n.getNext();    Preconditions.checkState(n.getNext()!=    null);    Node    tryBlock    =    n.getNext();    	compilable	  [FE]  RuntimeException  	95	6	replace
338	[BUG]  [BUGGY]  Node  tryBlock  =  n.getFirstChild();  Preconditions.checkState(n.getNext()!=  null);  Node  tryBlock  =  n.getNext();  [CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.getFirstChild();  Preconditions.checkState(n.getNext()!=  null);  Node  tryBlock  =  n.getNext();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.getFirstChild();  Preconditions.checkState(n.getNext()!=  null);  Node  tryBlock  =  n.getNext();	  Node    tryBlock    =    n.getNext();    Preconditions.checkState(n.getNext()!=    null);    Node    tryBlock    =    n.getNext();    	non-compiled	[CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	95	None	replace
339	[BUG]  [BUGGY]  Node  elseBlock  =  otherBlock.getTree();  [CE]  cannot  find  symbol  otherBlock  [FE]              AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  elseBlock  =  otherBlock.getTree();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  elseBlock  =  otherBlock.getTree();	  Node    elseBlock    =    n.getTree();    	non-compiled	[CE]  cannot  find  symbol  otherBlock	53	None	replace
340	[BUG]  [BUGGY]  Node  elseBlock  =  ifBlock.getTree();  [CE]  cannot  find  symbol  ifBlock  [FE]                AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  elseBlock  =  ifBlock.getTree();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  elseBlock  =  ifBlock.getTree();	  Node    elseBlock    =    n.getTree();    	non-compiled	[CE]  cannot  find  symbol  ifBlock	53	None	replace
341	[BUG]  [BUGGY]  Node  elseBlock  =  anotherBlock.getTree();  [CE]  cannot  find  symbol  anotherBlock  [FE]                  AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  elseBlock  =  anotherBlock.getTree();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  elseBlock  =  anotherBlock.getTree();	  Node    elseBlock    =    n.getTree();    	non-compiled	[CE]  cannot  find  symbol  anotherBlock	53	None	replace
342	[BUG]  [BUGGY]  Node  c  =  n.getNext();  Preconditions.checkState(c.isTry());  [CE]  cannot  find  symbol  tryBlock  [FE]              AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  c  =  n.getNext();  Preconditions.checkState(c.isTry());  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  c  =  n.getNext();  Preconditions.checkState(c.isTry());	          Node    c    =    n.getNext();    Node    c    =    n.getNext();    Preconditions.checkState(n.isTry());    	non-compiled	[CE]  cannot  find  symbol  tryBlock	45	None	replace
343	[BUG]  [BUGGY]  Node  n  =  node.getParent();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                      AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  n  =  node.getParent();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  n  =  node.getParent();	  Node    n    =    n.getParent();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	81	None	replace
344	[BUG]  [BUGGY]  Node  tryBlock  =  n.replaceChild(n,  falseBlock);  [CE]  cannot  find  symbol  falseBlock  [FE]        RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.replaceChild(n,  falseBlock);  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.replaceChild(n,  falseBlock);	  Node    tryBlock    =    n.replaceChild(n,    tryMinimizeExits);    	non-compiled	[CE]  cannot  find  symbol  falseBlock	103	None	replace
345	[BUG]  [BUGGY]  Node  tryBlock  =  n.replaceChild(n,  exitType);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]          RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.replaceChild(n,  exitType);  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.replaceChild(n,  exitType);	  Node    tryBlock    =    n.replaceChild(n,    tryMinimizeExits);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	103	None	replace
346	[BUG]  [BUGGY]  Node  tryBlock  =  n.replaceChild(n,  trueBlock);  [CE]  cannot  find  symbol  trueBlock  [FE]            RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.replaceChild(n,  trueBlock);  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.replaceChild(n,  trueBlock);	  Node    tryBlock    =    n.replaceChild(n,    tryMinimizeExits);    	non-compiled	[CE]  cannot  find  symbol  trueBlock	103	None	replace
347	[BUG]  [BUGGY]  Node  tryBlock  =  n.replaceChild(n,  labelName);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]              RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.replaceChild(n,  labelName);  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.replaceChild(n,  labelName);	  Node    tryBlock    =    n.replaceChild(n,    tryMinimizeExits);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	103	None	replace
348	[BUG]  [BUGGY]  Node  tryBlock  =  n.replaceChild(n,  this);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.replaceChild(n,  this);  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.replaceChild(n,  this);	  Node    tryBlock    =    n.replaceChild(n,    tryMinimizeExits);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	103	None	replace
349	[BUG]  [BUGGY]  Advancement.checkState(n.isTry());  [CE]  cannot  find  symbol  Advancement  [FE]    AssertionFailedError    [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Advancement.checkState(n.isTry());  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Advancement.checkState(n.isTry());	          Preconditions.checkState(n.isTry());    Preconditions.checkState(n.isTry());Preconditions.checkState(n.isTry());    	non-compiled	[CE]  cannot  find  symbol  Advancement	127	None	replace
350	[BUG]  [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  otherBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  Node  otherBlock  =  n.getfirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  otherBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  Node  otherBlock  =  n.getfirstChild();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	                Node        elseBlock        =        n.getFirstChild();        Node    otherBlock    =    n.getFirstChild();    Node  elseBlock  =  n.getFirstChild();  Node  otherBlock  =  n.getfirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	7	None	add
351	[BUG]  [BUGGY]  Preconditions.checkState(n.removeFirstChild()  ==  exitType);  Node  tryBlock  =  n.removeFirstChild();  [CE]  incomparable  types:  Node  and  int  [FE]              RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(n.removeFirstChild()  ==  exitType);  Node  tryBlock  =  n.removeFirstChild();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Preconditions.checkState(n.removeFirstChild()  ==  exitType);  Node  tryBlock  =  n.removeFirstChild();	  Node    tryBlock    =    n.removeFirstChild();    Preconditions.checkState(n.removeFirstChild()    ==    exitType);    Node    tryBlock    =    n.removeFirstChild();    	non-compiled	[CE]  incomparable  types:  Node  and  int	108	None	replace
352	[BUG]  [BUGGY]  Node  tryBlock  =  ifBlock.getNext();  Node  triedBlock  =  n.getNext();  [CE]  cannot  find  symbol  ifBlock  [FE]            RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  ifBlock.getNext();  Node  triedBlock  =  n.getNext();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  ifBlock.getNext();  Node  triedBlock  =  n.getNext();	  Node    tryBlock    =    n.getNext();    Node    triedBlock    =    n.getNext();    	non-compiled	[CE]  cannot  find  symbol  ifBlock	21	None	replace
353	[BUG]  [BUGGY]  Node  tryBlock  =  ifBlock.getNext();  Node  tryBlock  =  n.getPrevious();  [CE]  cannot  find  symbol  ifBlock  [FE]                RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  ifBlock.getNext();  Node  tryBlock  =  n.getPrevious();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  ifBlock.getNext();  Node  tryBlock  =  n.getPrevious();	  Node    tryBlock    =    n.getNext();    Node    tryBlock    =    n.getPrevious();    	non-compiled	[CE]  cannot  find  symbol  ifBlock	23	None	replace
354	[BUG]  [BUGGY]  n.removeChild(exitType,  labelName);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  n.removeChild(exitType,  labelName);  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	n.removeChild(exitType,  labelName);	  n.removeChild(chooser,    labelName);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	86	None	replace
355	[BUG]  [BUGGY]  n.removeChild(jpNode,  labelName);  [CE]  cannot  find  symbol  jpNode  [FE]              AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  n.removeChild(jpNode,  labelName);  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	n.removeChild(jpNode,  labelName);	  n.removeChild(chooser,    labelName);    	non-compiled	[CE]  cannot  find  symbol  jpNode	86	None	replace
356	[BUG]  [BUGGY]  Node  elseBlock  =  ifBlock.getLastChild();  [CE]  cannot  find  symbol  ifBlock  [FE]        AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  elseBlock  =  ifBlock.getLastChild();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  elseBlock  =  ifBlock.getLastChild();	  Node    elseBlock    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  ifBlock	50	None	replace
357	[BUG]  [BUGGY]  Node  n  =  ifBlock.getLastChild();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                  AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  n  =  ifBlock.getLastChild();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  n  =  ifBlock.getLastChild();	  Node    n    =    elseBlock.getLastChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	35	None	replace
358	[BUG]  [BUGGY]  Node  elseBlock  =  ifBlock.getFirstChild();  [CE]  cannot  find  symbol  ifBlock  [FE]        AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  elseBlock  =  ifBlock.getFirstChild();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  elseBlock  =  ifBlock.getFirstChild();	          Node    elseBlock    =    n.getFirstChild();    Preconditions.checkState(n.isTry());    Node    elseBlock    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  ifBlock	99	None	replace
359	[BUG]  [BUGGY]  Node  c  =  n.getFirstChild();  node  =  c.getFirstChild();  this.labelName  =  n.getLastChild();  [CE]  cannot  find  symbol  node  [FE]              AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  c  =  n.getFirstChild();  node  =  c.getFirstChild();  this.labelName  =  n.getLastChild();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  c  =  n.getFirstChild();  node  =  c.getFirstChild();  this.labelName  =  n.getLastChild();	          Node    c    =    n.getFirstChild();    Node    c    =    n.getFirstChild();    this.labelName    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  node	39	None	replace
360	[BUG]  [BUGGY]  Preconditions.checkState(n.isTry());  Node  c  =  n.getFirstChild();  this.labelName  =  n.getLastChild();  [CE]  cannot  find  symbol  labelName  [FE]                AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(n.isTry());  Node  c  =  n.getFirstChild();  this.labelName  =  n.getLastChild();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Preconditions.checkState(n.isTry());  Node  c  =  n.getFirstChild();  this.labelName  =  n.getLastChild();	          Node    c    =    n.getFirstChild();    Node    c    =    n.getFirstChild();    this.labelName    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  labelName	39	None	replace
361	[BUG]  [BUGGY]  Preconditions.checkState(n.isTry(),  n.isTree());  Node  c  =  n.getNext();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(n.isTry(),  n.isTree());  Node  c  =  n.getNext();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Preconditions.checkState(n.isTry(),  n.isTree());  Node  c  =  n.getNext();	          Node    c    =    n.getNext();    Preconditions.checkState(n.isTry());    Node    c    =    n.getNext();    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
362	[BUG]  [BUGGY]  Node  c  =  allCatchNodes.removeFirstChild();  [CE]  cannot  find  symbol  allCatchNodes  [FE]        AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  c  =  allCatchNodes.removeFirstChild();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  c  =  allCatchNodes.removeFirstChild();	  Node    c    =    n.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	125	None	replace
363	[BUG]  [BUGGY]  Node  c  =  n.removeLastChild();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  c  =  n.removeLastChild();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  c  =  n.removeLastChild();	  Node    c    =    n.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol	125	None	replace
364	[BUG]  [BUGGY]  Node  tryBlock  =  n.getParent();  Preconditions.checkState(n.getNext()  ==  exitType);  Node  tryBlock  =  n.getNext();  [CE]  incomparable  types:  Node  and  int  [FE]          RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.getParent();  Preconditions.checkState(n.getNext()  ==  exitType);  Node  tryBlock  =  n.getNext();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.getParent();  Preconditions.checkState(n.getNext()  ==  exitType);  Node  tryBlock  =  n.getNext();	  Node    tryBlock    =    n.getNext();    Preconditions.checkState(n.getNext()    ==    exitType);    Node    tryBlock    =    n.getNext();    	non-compiled	[CE]  incomparable  types:  Node  and  int	93	None	replace
365	[BUG]  [BUGGY]  Preconditions.checkState(n.removeFirstChild()!=  exitType);  Node  tryBlock  =  n.removeFirstChild();  [CE]  incomparable  types:  Node  and  int  [FE]            RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(n.removeFirstChild()!=  exitType);  Node  tryBlock  =  n.removeFirstChild();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Preconditions.checkState(n.removeFirstChild()!=  exitType);  Node  tryBlock  =  n.removeFirstChild();	  Node    tryBlock    =    n.removeFirstChild();    Preconditions.checkState(n.removeFirstChild()!=    exitType);    Node    tryBlock    =    n.removeFirstChild();    	non-compiled	[CE]  incomparable  types:  Node  and  int	107	None	replace
366	[BUG]  [BUGGY]  Node  tryBlock  =  n.getFirstChild();  Node  tryBlock  =  n.getNext();  [CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.getFirstChild();  Node  tryBlock  =  n.getNext();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.getFirstChild();  Node  tryBlock  =  n.getNext();	  Node    tryBlock    =    n.getNext();    Node    tryBlock    =    n.getNext();    	non-compiled	[CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	19	None	replace
367	[BUG]  [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  thenBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  Node  thenBlock  =  n.getfirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  thenBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  Node  thenBlock  =  n.getfirstChild();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	                Node        elseBlock        =        n.getFirstChild();        Node    thenBlock    =    n.getFirstChild();    Node  elseBlock  =  n.getFirstChild();  Node  thenBlock  =  n.getfirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	9	None	add
368	[BUG]  [BUGGY]  Node  n  =  ifNode.getNext();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                    AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  n  =  ifNode.getNext();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  n  =  ifNode.getNext();	  Node    n    =    this.node.getNext();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	131	None	replace
369	[BUG]  [BUGGY]  Node  tryBlock  =  n.getLastChild();  node  tryBlock  =  n.getFirstChild();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.getLastChild();  node  tryBlock  =  n.getFirstChild();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.getLastChild();  node  tryBlock  =  n.getFirstChild();	  Node    tryBlock    =    n.getLastChild();    Node    tryBlock    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
370	[BUG]  [BUGGY]  Node  tryBlock  =  n.getFirstChild();  Node  tryBlock  =  no.getLastChild();  [CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.getFirstChild();  Node  tryBlock  =  no.getLastChild();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.getFirstChild();  Node  tryBlock  =  no.getLastChild();	  Node    tryBlock    =    n.getLastChild();    Node    tryBlock    =    no.getLastChild();    	non-compiled	[CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	140	None	replace
371	[BUG]  [BUGGY]  Node  tryBlock  =  ifBlock.getNext();  [CE]  cannot  find  symbol  ifBlock  [FE]        RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  ifBlock.getNext();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  ifBlock.getNext();	  Node    tryBlock    =    n.getNext();    Node    tryBlock    =    n.getNext();    }    else    {    tryMinimizeExits(tryBlock,    exitType,    labelName);    	non-compiled	[CE]  cannot  find  symbol  ifBlock	132	None	replace
372	[BUG]  [BUGGY]  Node  c  =  n,  allCatchNodes.getCatchNodes();  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  c  =  n,  allCatchNodes.getCatchNodes();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  c  =  n,  allCatchNodes.getCatchNodes();	  Node    c    =    n.getCatchNodes();    	non-compiled	[CE]  ';'  expected	66	None	replace
373	[BUG]  [BUGGY]  Node  tryBlock  =  ifBlock.getNext();  Node  attemptBlock  =  n.getNext();  [CE]  cannot  find  symbol  ifBlock  [FE]          RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  ifBlock.getNext();  Node  attemptBlock  =  n.getNext();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  ifBlock.getNext();  Node  attemptBlock  =  n.getNext();	  Node    tryBlock    =    n.getNext();    Node    attemptBlock    =    n.getNext();    	non-compiled	[CE]  cannot  find  symbol  ifBlock	20	None	replace
374	[BUG]  [BUGGY]          Preconditions.checkState(n.isTry());    Preconditions.checkState(n.isTry());  }  else  {  Preconditions.checkState(n.isTry());  Node  n  =  n.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]          Preconditions.checkState(n.isTry());    Preconditions.checkState(n.isTry());  }  else  {  Preconditions.checkState(n.isTry());  Node  n  =  n.getFirstChild();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	                Preconditions.checkState(n.isTry());        Preconditions.checkState(n.isTry());    }    else    {    Preconditions.checkState(n.isTry());    Node  n  =  n.getFirstChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	59	None	add
375	[BUG]  [BUGGY]  Node  tryBlock  =  n,  exitType.getTry();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n,  exitType.getTry();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n,  exitType.getTry();	  Node    tryBlock    =    n,    exitType.getTree();    	non-compiled	[CE]  ';'  expected	26	None	replace
376	[BUG]  [BUGGY]  Node  tryBlock  =  n,  exitType.getTarget();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n,  exitType.getTarget();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n,  exitType.getTarget();	  Node    tryBlock    =    n,    exitType.getTree();    	non-compiled	[CE]  ';'  expected	26	None	replace
377	[BUG]  [BUGGY]  Node  tryBlock  =  n,  exitType.cloneTree();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n,  exitType.cloneTree();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n,  exitType.cloneTree();	  Node    tryBlock    =    n,    exitType.getTree();    	non-compiled	[CE]  ';'  expected	26	None	replace
378	[BUG]  [BUGGY]  Preconditions.checkNotNull(n);  [CE]  cannot  find  symbol  tryBlock  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkNotNull(n);  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Preconditions.checkNotNull(n);	          Preconditions.checkState(n.isTry());    Preconditions.checkState(n.isTry());    }    else    {    Preconditions.checkState(n.isTry());    	non-compiled	[CE]  cannot  find  symbol  tryBlock	60	None	replace
379	[BUG]  [BUGGY]  Node  tryBlock  =  n.removeChild(n.getFirstChild(),  exitType);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.removeChild(n.getFirstChild(),  exitType);  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.removeChild(n.getFirstChild(),  exitType);	  Node    tryBlock    =    n.removeChild(n.getFirstChild());    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	120	None	replace
380	[BUG]  [BUGGY]  Node  c  =  n,  falseBlock.getCatchBlock();  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  c  =  n,  falseBlock.getCatchBlock();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  c  =  n,  falseBlock.getCatchBlock();	  Node    c    =    n.getCatchBlock();    	non-compiled	[CE]  ';'  expected	88	None	replace
381	[BUG]  [BUGGY]  Node  c  =  this.n.getCatchBlock();  [CE]  cannot  find  symbol  n  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  c  =  this.n.getCatchBlock();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  c  =  this.n.getCatchBlock();	  Node    c    =    n.getCatchBlock();    	non-compiled	[CE]  cannot  find  symbol  n	88	None	replace
382	[BUG]  [BUGGY]  Node  tryBlock  =  n.getParent();  node  tryBlock  =  n.getNext();  [CE]  cannot  find  symbol  [FE]            StackOverflowError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.getParent();  node  tryBlock  =  n.getNext();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.getParent();  node  tryBlock  =  n.getNext();	  Node    tryBlock    =    n.getParent();    Node    tryBlock    =    n.getNext();    	non-compiled	[CE]  cannot  find  symbol	123	None	replace
383	[BUG]  [BUGGY]  Node  tryBlock  =  ifBlock.getNext();  Node  tryingBlock  =  n.getNext();  [CE]  cannot  find  symbol  ifBlock  [FE]              RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  ifBlock.getNext();  Node  tryingBlock  =  n.getNext();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  ifBlock.getNext();  Node  tryingBlock  =  n.getNext();	  Node    tryBlock    =    n.getNext();    Node    tryingBlock    =    n.getNext();    	non-compiled	[CE]  cannot  find  symbol  ifBlock	22	None	replace
384	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(n.isTry());  Node  tryBlock  =  n.removeFirstChild();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	add	Preconditions.checkState(n.isTry());  Node  tryBlock  =  n.removeFirstChild();	  Node    tryBlock    =    n.removeFirstChild();    Preconditions.checkState(n.isTry());    Node    tryBlock    =    n.removeFirstChild();    	compilable	  [FE]  RuntimeException  	136	6	replace
385	[BUG]  [BUGGY]  Preconditions.checkState(n.isTry());  Node  tryBlock  =  n.removeFirstChild();  [FE]  RuntimeException  [FE]        RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(n.isTry());  Node  tryBlock  =  n.removeFirstChild();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Preconditions.checkState(n.isTry());  Node  tryBlock  =  n.removeFirstChild();	  Node    tryBlock    =    n.removeFirstChild();    Preconditions.checkState(n.isTry());    Node    tryBlock    =    n.removeFirstChild();    	compilable	  [FE]  RuntimeException  	136	6	replace
386	[BUG]  [BUGGY]  Node  elseBlock  =  n.getFirstChild();  Node  otherBlock  =  n.getLastChild();  [CE]  cannot  find  symbol  tryBlock  [FE]    AssertionFailedError    [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  elseBlock  =  n.getFirstChild();  Node  otherBlock  =  n.getLastChild();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  elseBlock  =  n.getFirstChild();  Node  otherBlock  =  n.getLastChild();	          Node    elseBlock    =    n.getFirstChild();    Node    otherBlock    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  tryBlock	8	None	replace
387	[BUG]  [BUGGY]  Node  elseBlock  =  ifBlock.getParent();  [CE]  cannot  find  symbol  ifBlock  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  elseBlock  =  ifBlock.getParent();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  elseBlock  =  ifBlock.getParent();	  Node    elseBlock    =    n.getParent();    	non-compiled	[CE]  cannot  find  symbol  ifBlock	91	None	replace
388	[BUG]  [BUGGY]  Node  c  =  n.getLastChild();  Preconditions.checkState(c.hasOneChild());  [CE]  cannot  find  symbol  tryBlock  [FE]                AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  c  =  n.getLastChild();  Preconditions.checkState(c.hasOneChild());  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  c  =  n.getLastChild();  Preconditions.checkState(c.hasOneChild());	          Node    c    =    n.getFirstChild();    Node    c    =    n.getFirstChild();    Preconditions.checkState(n.hasOneChild());    	non-compiled	[CE]  cannot  find  symbol  tryBlock	40	None	replace
389	[BUG]  [BUGGY]  Node  c  =  n.getNext();  Preconditions.checkState(c.getType()  ==  Token.GETPROP);  [CE]  cannot  find  symbol  tryBlock  [FE]                  AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  c  =  n.getNext();  Preconditions.checkState(c.getType()  ==  Token.GETPROP);  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  c  =  n.getNext();  Preconditions.checkState(c.getType()  ==  Token.GETPROP);	          Node    c    =    n.getNext();    Node    c    =    n.getNext();    Preconditions.checkState(n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  cannot  find  symbol  tryBlock	47	None	replace
390	[BUG]  [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  anotherBlock  =  n.getFirstChild();  Node  thenBlock  =  n.getFirstChild();  Node  anotherBlock  =  n.getFirstChild();  [CE]  variable  anotherBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  anotherBlock  =  n.getFirstChild();  Node  thenBlock  =  n.getFirstChild();  Node  anotherBlock  =  n.getFirstChild();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	                Node        elseBlock        =        n.getFirstChild();        Node    anotherBlock    =    n.getFirstChild();    Node  thenBlock  =  n.getFirstChild();  Node  anotherBlock  =  n.getFirstChild();	  	non-compiled	[CE]  variable  anotherBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	11	None	add
391	[BUG]  [BUGGY]  n.removeChild(labelName,  tryMinimizeExits(exitType,  labelName);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  n.removeChild(labelName,  tryMinimizeExits(exitType,  labelName);  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	n.removeChild(labelName,  tryMinimizeExits(exitType,  labelName);	  n.removeChild(labelName,    exitType);    	non-compiled	[CE]  ')'  expected	62	None	replace
392	[BUG]  [BUGGY]  n.removeChild(labelName,  tryMinimizeExits(labelName,  exitType));  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  n.removeChild(labelName,  tryMinimizeExits(labelName,  exitType));  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	n.removeChild(labelName,  tryMinimizeExits(labelName,  exitType));	  n.removeChild(labelName,    exitType);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	62	None	replace
393	[BUG]  [BUGGY]  n.removeChild(labelName,  tryMinimizeExits(exitType,  labelName));  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  n.removeChild(labelName,  tryMinimizeExits(exitType,  labelName));  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	n.removeChild(labelName,  tryMinimizeExits(exitType,  labelName));	  n.removeChild(labelName,    exitType);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	62	None	replace
394	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.isTry());  [CE]  cannot  find  symbol  tryBlock  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.isTry());  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.isTry());	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  cannot  find  symbol  tryBlock	3	None	replace
395	[BUG]  [BUGGY]  Node  tryBlock  =  n.removeFirstChild();  Node  tryBlock  =  n.getLastChild();  [CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]            RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.removeFirstChild();  Node  tryBlock  =  n.getLastChild();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.removeFirstChild();  Node  tryBlock  =  n.getLastChild();	  Node    tryBlock    =    n.removeFirstChild();    Node    tryBlock    =    n.removeLastChild();    	non-compiled	[CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	77	None	replace
396	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(n.removeFirstChild()  ==  null);  Node  tryBlock  =  n.removeFirstChild();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	add	Preconditions.checkState(n.removeFirstChild()  ==  null);  Node  tryBlock  =  n.removeFirstChild();	  Node    tryBlock    =    n.removeFirstChild();    Preconditions.checkState(n.removeFirstChild()    ==    null);    Node    tryBlock    =    n.removeFirstChild();    	compilable	  [FE]  RuntimeException  	105	6	replace
397	[BUG]  [BUGGY]  Preconditions.checkState(n.removeFirstChild()  ==  null);  Node  tryBlock  =  n.removeFirstChild();  [FE]  RuntimeException  [FE]        RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(n.removeFirstChild()  ==  null);  Node  tryBlock  =  n.removeFirstChild();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Preconditions.checkState(n.removeFirstChild()  ==  null);  Node  tryBlock  =  n.removeFirstChild();	  Node    tryBlock    =    n.removeFirstChild();    Preconditions.checkState(n.removeFirstChild()    ==    null);    Node    tryBlock    =    n.removeFirstChild();    	compilable	  [FE]  RuntimeException  	105	6	replace
398	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.removeFirstChild();  Preconditions.checkState(tryBlock.removeFirstChild()  ==  null);  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	add	Node  tryBlock  =  n.removeFirstChild();  Preconditions.checkState(tryBlock.removeFirstChild()  ==  null);	  Node    tryBlock    =    n.removeFirstChild();    Preconditions.checkState(n.removeFirstChild()    ==    null);    Node    tryBlock    =    n.removeFirstChild();    	compilable	  [FE]  RuntimeException  	105	6	replace
399	[BUG]  [BUGGY]  Node  tryBlock  =  n.removeFirstChild();  Preconditions.checkState(tryBlock.removeFirstChild()  ==  null);  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.removeFirstChild();  Preconditions.checkState(tryBlock.removeFirstChild()  ==  null);  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.removeFirstChild();  Preconditions.checkState(tryBlock.removeFirstChild()  ==  null);	  Node    tryBlock    =    n.removeFirstChild();    Preconditions.checkState(n.removeFirstChild()    ==    null);    Node    tryBlock    =    n.removeFirstChild();    	compilable	  [FE]  RuntimeException  	105	6	replace
400	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.hasCatchHandler(c));  [CE]  cannot  find  symbol  c  [FE]        AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(NodeUtil.hasCatchHandler(c));  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Preconditions.checkState(NodeUtil.hasCatchHandler(c));	          Node    c    =    n.getNext();    Node    c    =    n.getNext();    Preconditions.checkState(NodeUtil.hasCatchHandler(c));    	non-compiled	[CE]  cannot  find  symbol  c	144	None	replace
401	[BUG]  [BUGGY]  Node  tryBlock  =  n.getFirstChild();  Node  tryBlock  =  n.removeFirstChild();  [CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.getFirstChild();  Node  tryBlock  =  n.removeFirstChild();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.getFirstChild();  Node  tryBlock  =  n.removeFirstChild();	  Node    tryBlock    =    n.removeFirstChild();    Node    tryBlock    =    n.removeFirstChild();    	non-compiled	[CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	75	None	replace
402	[BUG]  [BUGGY]  Preconditions.checkState(n.isTry()  ||  n.isTry());  [CE]  cannot  find  symbol  tryBlock  [FE]          RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(n.isTry()  ||  n.isTry());  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Preconditions.checkState(n.isTry()  ||  n.isTry());	  Node    tryBlock    =    n.getNext();    Preconditions.checkState(n.isTry()    ||    n.isTry());    Node    tryBlock    =    n.getNext();    	non-compiled	[CE]  cannot  find  symbol  tryBlock	133	None	replace
403	[BUG]  [BUGGY]  Node  tryBlock  =  ifBlock.getFirstChild();  [CE]  cannot  find  symbol  ifBlock  [FE]        AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  ifBlock.getFirstChild();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  ifBlock.getFirstChild();	  Node    tryBlock    =    elseBlock.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  ifBlock	24	None	replace
404	[BUG]  [BUGGY]  Node  tryBlock  =  this.falseBlock.getFirstChild();  [CE]  cannot  find  symbol  falseBlock  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  this.falseBlock.getFirstChild();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  this.falseBlock.getFirstChild();	  Node    tryBlock    =    elseBlock.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  falseBlock	24	None	replace
405	[BUG]  [BUGGY]  Node  n  =  n.getNext();  Preconditions.checkState(n.hasOneChild());  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  n  =  n.getNext();  Preconditions.checkState(n.hasOneChild());  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  n  =  n.getNext();  Preconditions.checkState(n.hasOneChild());	          Node    c    =    n.getNext();    Node    c    =    n.getNext();    Preconditions.checkState(n.hasOneChild());    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	44	None	replace
406	[BUG]  [BUGGY]  Node  tryBlock  =  n.removeChild(n.getParent());  [CE]  incompatible  types  [FE]        StackOverflowError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.removeChild(n.getParent());  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.removeChild(n.getParent());	  Node    tryBlock    =    n.removeChild(n.getNext());    	non-compiled	[CE]  incompatible  types	139	None	replace
407	[BUG]  [BUGGY]  Preconditions.checkState(n.isTree()  ||  n.isTry());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(n.isTree()  ||  n.isTry());  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Preconditions.checkState(n.isTree()  ||  n.isTry());	  Preconditions.checkState(n.isTree());    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
408	[BUG]  [BUGGY]  Preconditions.checkState(n.isTrue());  [CE]  cannot  find  symbol  tryBlock  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(n.isTrue());  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Preconditions.checkState(n.isTrue());	  Preconditions.checkState(n.isFalse());    	non-compiled	[CE]  cannot  find  symbol  tryBlock	117	None	replace
409	[BUG]  [BUGGY]  n.removeChild(labelName,  tryMinimizeExits(labelName,  null));  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  n.removeChild(labelName,  tryMinimizeExits(labelName,  null));  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	n.removeChild(labelName,  tryMinimizeExits(labelName,  null));	  n.removeChild(labelName,    null);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	64	None	replace
410	[BUG]  [BUGGY]  n.removeChild(labelName,  n);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  n.removeChild(labelName,  n);  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	n.removeChild(labelName,  n);	  n.removeChild(labelName,    null);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	64	None	replace
411	[BUG]  [BUGGY]  n.removeChild(labelName,  this);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  n.removeChild(labelName,  this);  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	n.removeChild(labelName,  this);	  n.removeChild(labelName,    null);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	64	None	replace
412	[BUG]  [BUGGY]  Node  elseBlock  =  c.getTree();  [CE]  cannot  find  symbol  c  [FE]              AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  elseBlock  =  c.getTree();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  elseBlock  =  c.getTree();	  Node    elseBlock    =    n.getTree();    	non-compiled	[CE]  cannot  find  symbol  c	53	None	replace
413	[BUG]  [BUGGY]  Node  c  =  n.getNext();  Preconditions.checkState(NodeUtil.isTreeBlock(n));  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  c  =  n.getNext();  Preconditions.checkState(NodeUtil.isTreeBlock(n));  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  c  =  n.getNext();  Preconditions.checkState(NodeUtil.isTreeBlock(n));	          Node    c    =    n.getNext();    Node    c    =    n.getNext();    Preconditions.checkState(NodeUtil.isTreeBlock(n));    	non-compiled	[CE]  cannot  find  symbol	146	None	replace
414	[BUG]  [BUGGY]  Node  elseBlock  =  ifBlock.getFirstChild();  Node  elseBlock  =  n.getLastChild();  [CE]  cannot  find  symbol  ifBlock  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  elseBlock  =  ifBlock.getFirstChild();  Node  elseBlock  =  n.getLastChild();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  elseBlock  =  ifBlock.getFirstChild();  Node  elseBlock  =  n.getLastChild();	          Node    elseBlock    =    n.getFirstChild();    Node    elseBlock    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  ifBlock	6	None	replace
415	[BUG]  [BUGGY]  Node  c  =  nodes.getLastChild();  [CE]  cannot  find  symbol  nodes  [FE]        AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  c  =  nodes.getLastChild();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  c  =  nodes.getLastChild();	  Node    c    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  nodes	30	None	replace
416	[BUG]  [BUGGY]  Node  c  =  n.getNext();  Preconditions.checkState(n.getNext()  ==  exitType);  [CE]  incomparable  types:  Node  and  int  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  c  =  n.getNext();  Preconditions.checkState(n.getNext()  ==  exitType);  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  c  =  n.getNext();  Preconditions.checkState(n.getNext()  ==  exitType);	          Node    c    =    n.getNext();    Preconditions.checkState(n.getNext()    ==    exitType);    Node    c    =    n.getNext();    	non-compiled	[CE]  incomparable  types:  Node  and  int	110	None	replace
417	[BUG]  [BUGGY]  Preconditions.checkState(n.isTry());  n  =  n.getNext();  [CE]  cannot  find  symbol  tryBlock  [FE]        RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(n.isTry());  n  =  n.getNext();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Preconditions.checkState(n.isTry());  n  =  n.getNext();	  Node    tryBlock    =    n.getNext();    Preconditions.checkState(n.isTry());    Node    tryBlock    =    n.getNext();    	non-compiled	[CE]  cannot  find  symbol  tryBlock	92	None	replace
418	[BUG]  [BUGGY]  Node  tryBlock  =  n.removeFirstChild();  Node  triedBlock  =  n.removeLastChild();  [CE]  cannot  find  symbol  [FE]                RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.removeFirstChild();  Node  triedBlock  =  n.removeLastChild();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.removeFirstChild();  Node  triedBlock  =  n.removeLastChild();	  Node    tryBlock    =    n.removeFirstChild();    Node    triedBlock    =    n.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
419	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                  RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.removeFirstChild();  Node  triedBlock  =  n.getFirstChild();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	add	Node  tryBlock  =  n.removeFirstChild();  Node  triedBlock  =  n.getFirstChild();	  Node    tryBlock    =    n.removeFirstChild();    Node    triedBlock    =    n.removeFirstChild();    	compilable	  [FE]  RuntimeException  	79	6	replace
420	[BUG]  [BUGGY]  Node  tryBlock  =  n.removeFirstChild();  Node  triedBlock  =  n.getFirstChild();  [FE]  RuntimeException  [FE]                  RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.removeFirstChild();  Node  triedBlock  =  n.getFirstChild();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.removeFirstChild();  Node  triedBlock  =  n.getFirstChild();	  Node    tryBlock    =    n.removeFirstChild();    Node    triedBlock    =    n.removeFirstChild();    	compilable	  [FE]  RuntimeException  	79	6	replace
421	[BUG]  [BUGGY]  Preconditions.checkState(n.hasChildren());  [CE]  cannot  find  symbol  tryBlock  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(n.hasChildren());  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Preconditions.checkState(n.hasChildren());	          Preconditions.checkState(n.isTry());    Node    n    =    n.getFirstChild();    Preconditions.checkState(n.isTry());    	non-compiled	[CE]  cannot  find  symbol  tryBlock	56	None	replace
422	[BUG]  [BUGGY]  Node  attemptBlock  =  ifBlock.getTree();  [CE]  cannot  find  symbol  ifBlock  [FE]                    AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  attemptBlock  =  ifBlock.getTree();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  attemptBlock  =  ifBlock.getTree();	  Node    attemptBlock    =    n.getTree();    	non-compiled	[CE]  cannot  find  symbol  ifBlock	27	None	replace
423	[BUG]  [BUGGY]  Preconditions.checkState(n.isTry(),  n.isTry());  [CE]  cannot  find  symbol  tryBlock  [FE]                  AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(n.isTry(),  n.isTry());  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Preconditions.checkState(n.isTry(),  n.isTry());	          Preconditions.checkState(n.isTry());    Preconditions.checkState(n.isTry());    n.setTree(n.isTry());    	non-compiled	[CE]  cannot  find  symbol  tryBlock	61	None	replace
424	[BUG]  [BUGGY]  Preconditions.checkState(n.isTry());  NodeUtil.setTree(n.isTry());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(n.isTry());  NodeUtil.setTree(n.isTry());  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Preconditions.checkState(n.isTry());  NodeUtil.setTree(n.isTry());	          Preconditions.checkState(n.isTry());    Preconditions.checkState(n.isTry());    n.setTree(n.isTry());    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
425	[BUG]  [BUGGY]  Node  elseBlock  =  ifBlock.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  Preconditions.checkState(n.isTry());  [CE]  cannot  find  symbol  ifBlock  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  elseBlock  =  ifBlock.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  Preconditions.checkState(n.isTry());  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  elseBlock  =  ifBlock.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  Preconditions.checkState(n.isTry());	          Node    elseBlock    =    n.getFirstChild();    Node    elseBlock    =    n.getFirstChild();    Preconditions.checkState(n.isTry());    	non-compiled	[CE]  cannot  find  symbol  ifBlock	100	None	replace
426	[BUG]  [BUGGY]  Preconditions.checkState(n.hasOneChild()  &&  tryMinimizeExits(n.getLastChild()));  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(n.hasOneChild()  &&  tryMinimizeExits(n.getLastChild()));  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Preconditions.checkState(n.hasOneChild()  &&  tryMinimizeExits(n.getLastChild()));	  Preconditions.checkState(n.hasOneChild());    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	119	None	replace
427	[BUG]  [BUGGY]  Preconditions.checkState(n.hasOneChild()  &&  tryMinimizeExits(n,  exitType,  labelName));  [CE]  'void'  type  not  allowed  here  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(n.hasOneChild()  &&  tryMinimizeExits(n,  exitType,  labelName));  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Preconditions.checkState(n.hasOneChild()  &&  tryMinimizeExits(n,  exitType,  labelName));	  Preconditions.checkState(n.hasOneChild());    	non-compiled	[CE]  'void'  type  not  allowed  here	119	None	replace
428	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(n.removeFirstChild()!=  null);  Node  tryBlock  =  n.removeFirstChild();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	add	Preconditions.checkState(n.removeFirstChild()!=  null);  Node  tryBlock  =  n.removeFirstChild();	  Node    tryBlock    =    n.removeFirstChild();    Preconditions.checkState(n.removeFirstChild()!=    null);    Node    tryBlock    =    n.removeFirstChild();    	compilable	  [FE]  RuntimeException  	106	6	replace
429	[BUG]  [BUGGY]  Preconditions.checkState(n.removeFirstChild()!=  null);  Node  tryBlock  =  n.removeFirstChild();  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(n.removeFirstChild()!=  null);  Node  tryBlock  =  n.removeFirstChild();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Preconditions.checkState(n.removeFirstChild()!=  null);  Node  tryBlock  =  n.removeFirstChild();	  Node    tryBlock    =    n.removeFirstChild();    Preconditions.checkState(n.removeFirstChild()!=    null);    Node    tryBlock    =    n.removeFirstChild();    	compilable	  [FE]  RuntimeException  	106	6	replace
430	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.removeFirstChild();  Preconditions.checkState(tryBlock.removeFirstChild()!=  null);  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	add	Node  tryBlock  =  n.removeFirstChild();  Preconditions.checkState(tryBlock.removeFirstChild()!=  null);	  Node    tryBlock    =    n.removeFirstChild();    Preconditions.checkState(n.removeFirstChild()!=    null);    Node    tryBlock    =    n.removeFirstChild();    	compilable	  [FE]  RuntimeException  	106	6	replace
431	[BUG]  [BUGGY]  Node  tryBlock  =  n.removeFirstChild();  Preconditions.checkState(tryBlock.removeFirstChild()!=  null);  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.removeFirstChild();  Preconditions.checkState(tryBlock.removeFirstChild()!=  null);  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.removeFirstChild();  Preconditions.checkState(tryBlock.removeFirstChild()!=  null);	  Node    tryBlock    =    n.removeFirstChild();    Preconditions.checkState(n.removeFirstChild()!=    null);    Node    tryBlock    =    n.removeFirstChild();    	compilable	  [FE]  RuntimeException  	106	6	replace
432	[BUG]  [BUGGY]  Node  tryBlock  =  n.getfirstChild();  Node  attemptBlock  =  n.getLastChild();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.getfirstChild();  Node  attemptBlock  =  n.getLastChild();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.getfirstChild();  Node  attemptBlock  =  n.getLastChild();	  Node    tryBlock    =    n.getLastChild();    Node    attemptBlock    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
433	[BUG]  [BUGGY]  Node  n  =  c.getNext();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                      AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  n  =  c.getNext();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  n  =  c.getNext();	  Node    n    =    elseBlock.getNext();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	49	None	replace
434	[BUG]  [BUGGY]  Preconditions.checkState(n.isTry());  Node  c  =  n.getLastChild();  [CE]  cannot  find  symbol  tryBlock  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(n.isTry());  Node  c  =  n.getLastChild();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Preconditions.checkState(n.isTry());  Node  c  =  n.getLastChild();	          Node    c    =    n.getFirstChild();    Node    c    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  tryBlock	37	None	replace
435	[BUG]  [BUGGY]  Preconditions.checkState(n.isWarning());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(n.isWarning());  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Preconditions.checkState(n.isWarning());	  Preconditions.checkState(n.isError());    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
436	[BUG]  [BUGGY]  Node  tryBlock  =  n.removeFirstChild();  Node  startBlock  =  n.removeLastChild();  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.removeFirstChild();  Node  startBlock  =  n.removeLastChild();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.removeFirstChild();  Node  startBlock  =  n.removeLastChild();	  Node    tryBlock    =    n.removeFirstChild();    Node    startBlock    =    n.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
437	[BUG]  [BUGGY]  Node  elseBlock  =  n.removeLastChild();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  elseBlock  =  n.removeLastChild();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  elseBlock  =  n.removeLastChild();	  Node    elseBlock    =    n.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol	148	None	replace
438	[BUG]  [BUGGY]  Node  n  =  ifBlock.getParent();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                      AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  n  =  ifBlock.getParent();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  n  =  ifBlock.getParent();	  Node    n    =    n.getParent();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	81	None	replace
439	[BUG]  [BUGGY]  Node  n  =  allCatchNodes.getNext();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  n  =  allCatchNodes.getNext();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  n  =  allCatchNodes.getNext();	  Node    n    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	73	None	replace
440	[BUG]  [BUGGY]  Node  tryBlock  =  ifBlock.removeFirstChild();  [CE]  cannot  find  symbol  ifBlock  [FE]        RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  ifBlock.removeFirstChild();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  ifBlock.removeFirstChild();	  Node    tryBlock    =    elseBlock.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol  ifBlock	29	None	replace
441	[BUG]  [BUGGY]  Node  tryBlock  =  n.removeFirstChild();  Node  attemptBlock  =  n.removeLastChild();  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.removeFirstChild();  Node  attemptBlock  =  n.removeLastChild();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.removeFirstChild();  Node  attemptBlock  =  n.removeLastChild();	  Node    tryBlock    =    n.removeFirstChild();    Node    attemptBlock    =    n.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
442	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.removeFirstChild();  Node  attemptBlock  =  n.getFirstChild();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	add	Node  tryBlock  =  n.removeFirstChild();  Node  attemptBlock  =  n.getFirstChild();	  Node    tryBlock    =    n.removeFirstChild();    Node    attemptBlock    =    n.removeFirstChild();    	compilable	  [FE]  RuntimeException  	76	6	replace
443	[BUG]  [BUGGY]  Node  tryBlock  =  n.removeFirstChild();  Node  attemptBlock  =  n.getFirstChild();  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.removeFirstChild();  Node  attemptBlock  =  n.getFirstChild();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.removeFirstChild();  Node  attemptBlock  =  n.getFirstChild();	  Node    tryBlock    =    n.removeFirstChild();    Node    attemptBlock    =    n.removeFirstChild();    	compilable	  [FE]  RuntimeException  	76	6	replace
444	[BUG]  [BUGGY]  Node  n  =  allNodes.getLastChild();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]              AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  n  =  allNodes.getLastChild();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  n  =  allNodes.getLastChild();	  Node    n    =    nodes.getLastChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	85	None	replace
445	[BUG]  [BUGGY]  Node  n  =  this.falseBlock.getNext();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                    AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  n  =  this.falseBlock.getNext();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  n  =  this.falseBlock.getNext();	  Node    n    =    ifBlock.getNext();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	80	None	replace
446	[BUG]  [BUGGY]  Node  c  =  n.getNext();  Preconditions.checkState(NodeUtil.isTree(n));  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  c  =  n.getNext();  Preconditions.checkState(NodeUtil.isTree(n));  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  c  =  n.getNext();  Preconditions.checkState(NodeUtil.isTree(n));	          Node    c    =    n.getNext();    Node    c    =    n.getNext();    Preconditions.checkState(NodeUtil.isTree(n));    	non-compiled	[CE]  cannot  find  symbol	147	None	replace
447	[BUG]  [BUGGY]  Node  elseBlock  =  ifBlock.getOwnerChild();  [CE]  cannot  find  symbol  ifBlock  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  elseBlock  =  ifBlock.getOwnerChild();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  elseBlock  =  ifBlock.getOwnerChild();	  Node    elseBlock    =    n.getOwnerChild();    	non-compiled	[CE]  cannot  find  symbol  ifBlock	52	None	replace
448	[BUG]  [BUGGY]  Node  tryBlock  =  this.n.getTree();  [CE]  cannot  find  symbol  n  [FE]                      AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  this.n.getTree();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  this.n.getTree();	  Node    tryBlock    =    node.getTree();    	non-compiled	[CE]  cannot  find  symbol  n	28	None	replace
449	[BUG]  [BUGGY]  AssertionFailedError  n  =  new  AssertionFailedError(labelName,  exitType);  Preconditions.checkState(n.isTry());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  AssertionFailedError  n  =  new  AssertionFailedError(labelName,  exitType);  Preconditions.checkState(n.isTry());  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	AssertionFailedError  n  =  new  AssertionFailedError(labelName,  exitType);  Preconditions.checkState(n.isTry());	          Preconditions.checkState(n.isTry());    AssertionFailedError    n    =    new    AssertionFailedError(labelName,    exitType);    Preconditions.checkState(n.isTry());    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
450	[BUG]  [BUGGY]  Node  tryBlock  =  ifBlock.getTry();  [CE]  cannot  find  symbol  ifBlock  [FE]        RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  ifBlock.getTry();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  ifBlock.getTry();	  Node    tryBlock    =    n.getTry();    	non-compiled	[CE]  cannot  find  symbol  ifBlock	72	None	replace
451	[BUG]  [BUGGY]  Node  tryBlock  =  node.getTry();  [CE]  cannot  find  symbol  node  [FE]          RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  node.getTry();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  node.getTry();	  Node    tryBlock    =    n.getTry();    	non-compiled	[CE]  cannot  find  symbol  node	72	None	replace
452	[BUG]  [BUGGY]  Node  n  =  allCatchNodes.get(n.getFirstChild());  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  n  =  allCatchNodes.get(n.getFirstChild());  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  n  =  allCatchNodes.get(n.getFirstChild());	  Node    n    =    allCatchNodes.getLastChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	34	None	replace
453	[BUG]  [BUGGY]  Node  elseBlock  =  ifBlock.getNext();  [CE]  cannot  find  symbol  ifBlock  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  elseBlock  =  ifBlock.getNext();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  elseBlock  =  ifBlock.getNext();	  Node    elseBlock    =    n.getNext();    	non-compiled	[CE]  cannot  find  symbol  ifBlock	51	None	replace
454	[BUG]  [BUGGY]  Node  elseBlock  =  node.getNext();  [CE]  cannot  find  symbol  node  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  elseBlock  =  node.getNext();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  elseBlock  =  node.getNext();	  Node    elseBlock    =    n.getNext();    	non-compiled	[CE]  cannot  find  symbol  node	51	None	replace
455	[BUG]  [BUGGY]  Preconditions.checkState(n.isExit()  ||  n.isTry());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(n.isExit()  ||  n.isTry());  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Preconditions.checkState(n.isExit()  ||  n.isTry());	  Preconditions.checkState(n.isExit());    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
456	[BUG]  [BUGGY]  Preconditions.checkState(n.isExitType());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(n.isExitType());  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Preconditions.checkState(n.isExitType());	  Preconditions.checkState(n.isExit());    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
457	[BUG]  [BUGGY]  Node  c  =  node.getParent();  [CE]  cannot  find  symbol  node  [FE]        AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  c  =  node.getParent();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  c  =  node.getParent();	  Node    c    =    n.getParent();    	non-compiled	[CE]  cannot  find  symbol  node	129	None	replace
458	[BUG]  [BUGGY]  Node  tryBlock  =  tryBlock.replaceChild(n,  null);  [CE]  incompatible  types  [FE]        RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  tryBlock.replaceChild(n,  null);  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  tryBlock.replaceChild(n,  null);	  Node    tryBlock    =    n.replaceChild(n,    tryBlock);    	non-compiled	[CE]  incompatible  types	118	None	replace
459	[BUG]  [BUGGY]  Node  tryBlock  =  tryBlock.replaceChild(n,  ifBlock);  [CE]  cannot  find  symbol  ifBlock  [FE]          RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  tryBlock.replaceChild(n,  ifBlock);  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  tryBlock.replaceChild(n,  ifBlock);	  Node    tryBlock    =    n.replaceChild(n,    tryBlock);    	non-compiled	[CE]  cannot  find  symbol  ifBlock	118	None	replace
460	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME,  exitType);  [CE]  cannot  find  symbol  tryBlock  [FE]        AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME,  exitType);  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Preconditions.checkState(n.getType()!=  Token.NAME,  exitType);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  tryBlock	116	None	replace
461	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.isTry());  [CE]  cannot  find  symbol  tryBlock  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.isTry());  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.isTry());	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  tryBlock	116	None	replace
462	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]          Preconditions.checkState(n.isTry());    Preconditions.checkState(n.isTry());  }  else  {  Preconditions.checkState(n.isTry());  Preconditions.checkArgument(n.isTry());  Preconditions.checkArgument(n.isTry());  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	add	                Preconditions.checkState(n.isTry());        Preconditions.checkState(n.isTry());    }    else    {    Preconditions.checkState(n.isTry());    Preconditions.checkArgument(n.isTry());  Preconditions.checkArgument(n.isTry());	  	compilable	  [FE]  RuntimeException  	59	7	add
463	[BUG]  [BUGGY]          Preconditions.checkState(n.isTry());    Preconditions.checkState(n.isTry());  }  else  {  Preconditions.checkState(n.isTry());  Preconditions.checkArgument(n.isTry());  Preconditions.checkArgument(n.isTry());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]          Preconditions.checkState(n.isTry());    Preconditions.checkState(n.isTry());  }  else  {  Preconditions.checkState(n.isTry());  Preconditions.checkArgument(n.isTry());  Preconditions.checkArgument(n.isTry());  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	                Preconditions.checkState(n.isTry());        Preconditions.checkState(n.isTry());    }    else    {    Preconditions.checkState(n.isTry());    Preconditions.checkArgument(n.isTry());  Preconditions.checkArgument(n.isTry());	  	compilable	  [FE]  RuntimeException  	59	7	add
464	[BUG]  [BUGGY]          Preconditions.checkState(n.isTry());    Preconditions.checkState(n.isTry());  }  else  {  Preconditions.checkState(n.isTry());  Preconditions.checkState(n.getFirstChild());  Preconditions.checkState(n.isTry());  [CE]  no  suitable  method  found  for  checkState(Node)  [FE]      RuntimeException    [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]          Preconditions.checkState(n.isTry());    Preconditions.checkState(n.isTry());  }  else  {  Preconditions.checkState(n.isTry());  Preconditions.checkState(n.getFirstChild());  Preconditions.checkState(n.isTry());  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	                Preconditions.checkState(n.isTry());        Preconditions.checkState(n.isTry());    }    else    {    Preconditions.checkState(n.isTry());    Preconditions.checkState(n.getFirstChild());  Preconditions.checkState(n.isTry());	  	non-compiled	[CE]  no  suitable  method  found  for  checkState(Node)	59	None	add
465	[BUG]  [BUGGY]  Node  c  =  n,  exitType.getCatchNodes();  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  c  =  n,  exitType.getCatchNodes();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  c  =  n,  exitType.getCatchNodes();	  Node    c    =    n.getCatchNodes();    	non-compiled	[CE]  ';'  expected	66	None	replace
466	[BUG]  [BUGGY]  Node  c  =  this.n.getCatchNodes();  [CE]  cannot  find  symbol  n  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  c  =  this.n.getCatchNodes();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  c  =  this.n.getCatchNodes();	  Node    c    =    n.getCatchNodes();    	non-compiled	[CE]  cannot  find  symbol  n	66	None	replace
467	[BUG]  [BUGGY]  Node  elseBlock  =  n.getFirstChild();  }  elseBlock  =  elseBlock.getFirstChild();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  elseBlock  =  n.getFirstChild();  }  elseBlock  =  elseBlock.getFirstChild();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  elseBlock  =  n.getFirstChild();  }  elseBlock  =  elseBlock.getFirstChild();	          Node    elseBlock    =    n.getFirstChild();    Node    elseBlock    =    n.getFirstChild();    }    elseBlock    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
468	[BUG]  [BUGGY]  Node  elseBlock  =  n.getFirstChild();  }  elseBlock  =  n.getFirstChild();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  elseBlock  =  n.getFirstChild();  }  elseBlock  =  n.getFirstChild();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  elseBlock  =  n.getFirstChild();  }  elseBlock  =  n.getFirstChild();	          Node    elseBlock    =    n.getFirstChild();    Node    elseBlock    =    n.getFirstChild();    }    elseBlock    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
469	[BUG]  [BUGGY]  Node  n  =  this.nodes.getLastChild();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]              AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  n  =  this.nodes.getLastChild();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  n  =  this.nodes.getLastChild();	  Node    n    =    nodes.getLastChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	85	None	replace
470	[BUG]  [BUGGY]  Node  n  =  anotherBlock.getNext();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                      AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  n  =  anotherBlock.getNext();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  n  =  anotherBlock.getNext();	  Node    n    =    elseBlock.getNext();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	49	None	replace
471	[BUG]  [BUGGY]  Node  tryBlock  =  null.getTree();  [CE]  <null>  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  null.getTree();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  null.getTree();	  Node    tryBlock    =    ifBlock.getTree();    	non-compiled	[CE]  <null>  cannot  be  dereferenced	84	None	replace
472	[BUG]  [BUGGY]  Node  elseBlock  =  this.n.getOwnerChild();  [CE]  cannot  find  symbol  n  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  elseBlock  =  this.n.getOwnerChild();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  elseBlock  =  this.n.getOwnerChild();	  Node    elseBlock    =    n.getOwnerChild();    	non-compiled	[CE]  cannot  find  symbol  n	52	None	replace
473	[BUG]  [BUGGY]  Node  elseBlock  =  other.getOwnerChild();  [CE]  cannot  find  symbol  other  [FE]              AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  elseBlock  =  other.getOwnerChild();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  elseBlock  =  other.getOwnerChild();	  Node    elseBlock    =    n.getOwnerChild();    	non-compiled	[CE]  cannot  find  symbol  other	52	None	replace
474	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]        StackOverflowError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.getParent();  Preconditions.checkState(tryBlock!=  null);  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	add	Node  tryBlock  =  n.getParent();  Preconditions.checkState(tryBlock!=  null);	  Node    tryBlock    =    n.getParent();    Node    tryBlock    =    n.getParent();    Preconditions.checkState(tryBlock!=    null);    	compilable	  [FE]  StackOverflowError  	113	6	replace
475	[BUG]  [BUGGY]  Node  tryBlock  =  n.getParent();  Preconditions.checkState(tryBlock!=  null);  [FE]  StackOverflowError  [FE]        StackOverflowError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.getParent();  Preconditions.checkState(tryBlock!=  null);  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.getParent();  Preconditions.checkState(tryBlock!=  null);	  Node    tryBlock    =    n.getParent();    Node    tryBlock    =    n.getParent();    Preconditions.checkState(tryBlock!=    null);    	compilable	  [FE]  StackOverflowError  	113	6	replace
476	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          StackOverflowError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.getParent();  Preconditions.checkState(tryBlock  ==  null);  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	add	Node  tryBlock  =  n.getParent();  Preconditions.checkState(tryBlock  ==  null);	  Node    tryBlock    =    n.getParent();    Node    tryBlock    =    n.getParent();    Preconditions.checkState(tryBlock!=    null);    	compilable	  [FE]  RuntimeException  	113	6	replace
477	[BUG]  [BUGGY]  Node  tryBlock  =  n.getParent();  Preconditions.checkState(tryBlock  ==  null);  [FE]  RuntimeException  [FE]          StackOverflowError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.getParent();  Preconditions.checkState(tryBlock  ==  null);  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.getParent();  Preconditions.checkState(tryBlock  ==  null);	  Node    tryBlock    =    n.getParent();    Node    tryBlock    =    n.getParent();    Preconditions.checkState(tryBlock!=    null);    	compilable	  [FE]  RuntimeException  	113	6	replace
478	[BUG]  [BUGGY]  Node  n  =  n.getFirstChild();  this.labelName  =  n.getLastChild();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]              AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  n  =  n.getFirstChild();  this.labelName  =  n.getLastChild();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  n  =  n.getFirstChild();  this.labelName  =  n.getLastChild();	          Node    c    =    n.getFirstChild();    Node    c    =    n.getFirstChild();    this.labelName    =    n.getLastChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	39	None	replace
479	[BUG]  [BUGGY]  n  =  n.getFirstChild();  this.labelName  =  n.getLastChild();  [CE]  cannot  find  symbol  labelName  [FE]                AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  n  =  n.getFirstChild();  this.labelName  =  n.getLastChild();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	n  =  n.getFirstChild();  this.labelName  =  n.getLastChild();	          Node    c    =    n.getFirstChild();    Node    c    =    n.getFirstChild();    this.labelName    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  labelName	39	None	replace
480	[BUG]  [BUGGY]  Node  c  =  n.getFirstChild();  this.labelName  =  c.getLastChild();  [CE]  cannot  find  symbol  labelName  [FE]                  AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  c  =  n.getFirstChild();  this.labelName  =  c.getLastChild();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  c  =  n.getFirstChild();  this.labelName  =  c.getLastChild();	          Node    c    =    n.getFirstChild();    Node    c    =    n.getFirstChild();    this.labelName    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  labelName	39	None	replace
481	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]          Preconditions.checkState(n.isTry());    Preconditions.checkState(n.isTry());  Preconditions.checkState(!n.isTry());  Preconditions.checkState(!n.isTry());  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	add	                Preconditions.checkState(n.isTry());        Preconditions.checkState(n.isTry());    Preconditions.checkState(!n.isTry());  Preconditions.checkState(!n.isTry());	  	compilable	  [FE]  RuntimeException  	54	6	add
482	[BUG]  [BUGGY]          Preconditions.checkState(n.isTry());    Preconditions.checkState(n.isTry());  Preconditions.checkState(!n.isTry());  Preconditions.checkState(!n.isTry());  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]          Preconditions.checkState(n.isTry());    Preconditions.checkState(n.isTry());  Preconditions.checkState(!n.isTry());  Preconditions.checkState(!n.isTry());  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	                Preconditions.checkState(n.isTry());        Preconditions.checkState(n.isTry());    Preconditions.checkState(!n.isTry());  Preconditions.checkState(!n.isTry());	  	compilable	  [FE]  RuntimeException  	54	6	add
483	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]          Preconditions.checkState(n.isTry());    Preconditions.checkState(n.isTry());  Preconditions.checkNotNull(n);  Preconditions.checkState(n.isTry());  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	add	                Preconditions.checkState(n.isTry());        Preconditions.checkState(n.isTry());    Preconditions.checkNotNull(n);  Preconditions.checkState(n.isTry());	  	compilable	  [FE]  AssertionFailedError  	54	2	add
484	[BUG]  [BUGGY]          Preconditions.checkState(n.isTry());    Preconditions.checkState(n.isTry());  Preconditions.checkNotNull(n);  Preconditions.checkState(n.isTry());  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]          Preconditions.checkState(n.isTry());    Preconditions.checkState(n.isTry());  Preconditions.checkNotNull(n);  Preconditions.checkState(n.isTry());  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	                Preconditions.checkState(n.isTry());        Preconditions.checkState(n.isTry());    Preconditions.checkNotNull(n);  Preconditions.checkState(n.isTry());	  	compilable	  [FE]  AssertionFailedError  	54	2	add
485	[BUG]  [BUGGY]  Node  startBlock  =  n.getFirstChild();  [CE]  cannot  find  symbol  tryBlock  [FE]              AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  startBlock  =  n.getFirstChild();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  startBlock  =  n.getFirstChild();	  Node    tryBlock    =    n.getLastChild();    Node    startBlock    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  tryBlock	70	None	replace
486	[BUG]  [BUGGY]  Node  n  =  n.getNext();  Preconditions.checkState(NodeUtil.hasCatchHandler(n));  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  n  =  n.getNext();  Preconditions.checkState(NodeUtil.hasCatchHandler(n));  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  n  =  n.getNext();  Preconditions.checkState(NodeUtil.hasCatchHandler(n));	          Node    c    =    n.getNext();    Node    c    =    n.getNext();    Preconditions.checkState(NodeUtil.hasCatchHandler(c));    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	144	None	replace
487	[BUG]  [BUGGY]  Node  tryBlock  =  n.removeFirstChild();  node  triedBlock  =  n.removeFirstChild();  [CE]  cannot  find  symbol  [FE]                RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.removeFirstChild();  node  triedBlock  =  n.removeFirstChild();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.removeFirstChild();  node  triedBlock  =  n.removeFirstChild();	  Node    tryBlock    =    n.removeFirstChild();    Node    triedBlock    =    n.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
488	[BUG]  [BUGGY]  Node  tryBlock  =  n.getFirstChild();  node  triedBlock  =  n.removeFirstChild();  [CE]  cannot  find  symbol  [FE]                  RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.getFirstChild();  node  triedBlock  =  n.removeFirstChild();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.getFirstChild();  node  triedBlock  =  n.removeFirstChild();	  Node    tryBlock    =    n.removeFirstChild();    Node    triedBlock    =    n.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
489	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.getFirstChild();  Preconditions.checkState(tryBlock  ==  null);  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	add	Node  tryBlock  =  n.getFirstChild();  Preconditions.checkState(tryBlock  ==  null);	  Node    tryBlock    =    n.getLastChild();    Node    tryBlock    =    n.getLastChild();    Preconditions.checkState(tryBlock!=    null);    	compilable	  [FE]  RuntimeException  	98	6	replace
490	[BUG]  [BUGGY]  Node  tryBlock  =  n.getFirstChild();  Preconditions.checkState(tryBlock  ==  null);  [FE]  RuntimeException  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.getFirstChild();  Preconditions.checkState(tryBlock  ==  null);  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.getFirstChild();  Preconditions.checkState(tryBlock  ==  null);	  Node    tryBlock    =    n.getLastChild();    Node    tryBlock    =    n.getLastChild();    Preconditions.checkState(tryBlock!=    null);    	compilable	  [FE]  RuntimeException  	98	6	replace
491	[BUG]  [BUGGY]  Node  tryBlock  =  elseBlock.getNext();  [CE]  cannot  find  symbol  elseBlock  [FE]                AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  elseBlock.getNext();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  elseBlock.getNext();	  Node    tryBlock    =    elseBlock.getTree();    	non-compiled	[CE]  cannot  find  symbol  elseBlock	25	None	replace
492	[BUG]  [BUGGY]  Node  c  =  n.removeCatchBlock();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  c  =  n.removeCatchBlock();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  c  =  n.removeCatchBlock();	  Node    c    =    n.getCatchBlock();    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
493	[BUG]  [BUGGY]  Node  n  =  node.getNext();  Preconditions.checkState(n.isTry());  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]              AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  n  =  node.getNext();  Preconditions.checkState(n.isTry());  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  n  =  node.getNext();  Preconditions.checkState(n.isTry());	          Preconditions.checkState(n.isTry());    Node    n    =    n.getNext();    Preconditions.checkState(n.isTry());    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	58	None	replace
494	[BUG]  [BUGGY]  Node  tryBlock  =  n.getFirstChild();  node  triedBlock  =  n.getLastChild();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.getFirstChild();  node  triedBlock  =  n.getLastChild();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.getFirstChild();  node  triedBlock  =  n.getLastChild();	  Node    tryBlock    =    n.getLastChild();    Node    triedBlock    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
495	[BUG]  [BUGGY]  Node  c  =  n,  exitType.getNext();  AssertionFailedError  c  =  n.getNext();  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  c  =  n,  exitType.getNext();  AssertionFailedError  c  =  n.getNext();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  c  =  n,  exitType.getNext();  AssertionFailedError  c  =  n.getNext();	          Node    c    =    n.getNext();    AssertionFailedError    c    =    n.getNext();    	non-compiled	[CE]  ';'  expected	112	None	replace
496	[BUG]  [BUGGY]  Preconditions.checkState(n.isTree()  &&  exitType  ==  Token.EXPR_RESULT);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(n.isTree()  &&  exitType  ==  Token.EXPR_RESULT);  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Preconditions.checkState(n.isTree()  &&  exitType  ==  Token.EXPR_RESULT);	  Preconditions.checkState(n.isTree());    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
497	[BUG]  [BUGGY]  Preconditions.checkState(n.isTree()  &&  exitType  ==  Token.BLOCK);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(n.isTree()  &&  exitType  ==  Token.BLOCK);  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Preconditions.checkState(n.isTree()  &&  exitType  ==  Token.BLOCK);	  Preconditions.checkState(n.isTree());    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
498	[BUG]  [BUGGY]  Node  tryBlock  =  n.getNext();  Preconditions.checkState(!NodeUtil.isExpressionNode(n));  [CE]  cannot  find  symbol  [FE]              StackOverflowError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.getNext();  Preconditions.checkState(!NodeUtil.isExpressionNode(n));  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.getNext();  Preconditions.checkState(!NodeUtil.isExpressionNode(n));	  Node    tryBlock    =    n.getParent();    Node    tryBlock    =    n.getParent();    }    else    if(n.isTree())    {    Preconditions.checkState(!NodeUtil.isExpressionNode(n));    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
499	[BUG]  [BUGGY]  Node  tryBlock  =  n.getParent();  Preconditions.checkState(!NodeUtil.isExpressionNode(n));  [CE]  cannot  find  symbol  [FE]                StackOverflowError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.getParent();  Preconditions.checkState(!NodeUtil.isExpressionNode(n));  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.getParent();  Preconditions.checkState(!NodeUtil.isExpressionNode(n));	  Node    tryBlock    =    n.getParent();    Node    tryBlock    =    n.getParent();    }    else    if(n.isTree())    {    Preconditions.checkState(!NodeUtil.isExpressionNode(n));    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
500	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  exitType);  [CE]  incomparable  types:  Node  and  int  [FE]    RuntimeException    [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  exitType);  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Preconditions.checkState(n.getFirstChild()  ==  exitType);	          Preconditions.checkState(n.isTry());    Preconditions.checkState(n.isTry());    }    else    {    Preconditions.checkState(n.isTry());    	non-compiled	[CE]  incomparable  types:  Node  and  int	60	None	replace
501	[BUG]  [BUGGY]  Preconditions.checkState(n.isTry());  Node  c  =  no.getFirstChild();  [CE]  cannot  find  symbol  no  [FE]        AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(n.isTry());  Node  c  =  no.getFirstChild();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Preconditions.checkState(n.isTry());  Node  c  =  no.getFirstChild();	          Node    c    =    n.getFirstChild();    Node    c    =    no.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  no	149	None	replace
502	[BUG]  [BUGGY]  Preconditions.checkState(n.isTry());  Node  c  =  n.getFirstChild();  [CE]  cannot  find  symbol  tryBlock  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(n.isTry());  Node  c  =  n.getFirstChild();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Preconditions.checkState(n.isTry());  Node  c  =  n.getFirstChild();	          Node    c    =    n.getFirstChild();    Node    c    =    no.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  tryBlock	149	None	replace
503	[BUG]  [BUGGY]  Proxy.checkState(n.isTry());  [CE]  cannot  find  symbol  Proxy  [FE]    AssertionFailedError    [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Proxy.checkState(n.isTry());  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Proxy.checkState(n.isTry());	          Preconditions.checkState(n.isTry());    Preconditions.checkState(n.isTry());Preconditions.checkState(n.isTry());    	non-compiled	[CE]  cannot  find  symbol  Proxy	127	None	replace
504	[BUG]  [BUGGY]  Node  n  =  nextNode.getLastChild();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                  AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  n  =  nextNode.getLastChild();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  n  =  nextNode.getLastChild();	  Node    n    =    elseBlock.getLastChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	35	None	replace
505	[BUG]  [BUGGY]  Node  c  =  n,  exitType.getCurrentNode();  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  c  =  n,  exitType.getCurrentNode();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  c  =  n,  exitType.getCurrentNode();	  Node    c    =    n.getCurrentNode();    	non-compiled	[CE]  ';'  expected	31	None	replace
506	[BUG]  [BUGGY]  Node  elseBlock  =  null.getFirstChild();  [CE]  <null>  cannot  be  dereferenced  [FE]        AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  elseBlock  =  null.getFirstChild();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  elseBlock  =  null.getFirstChild();	  Node    elseBlock    =    ifTree.getFirstChild();    	non-compiled	[CE]  <null>  cannot  be  dereferenced	90	None	replace
507	[BUG]  [BUGGY]  Node  elseBlock  =  this.n.getFirstChild();  [CE]  cannot  find  symbol  n  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  elseBlock  =  this.n.getFirstChild();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  elseBlock  =  this.n.getFirstChild();	  Node    elseBlock    =    ifTree.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  n	90	None	replace
508	[BUG]  [BUGGY]  Node  n  =  n.getFirstChild();  preconditions.checkState(n.isTry());  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  n  =  n.getFirstChild();  preconditions.checkState(n.isTry());  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  n  =  n.getFirstChild();  preconditions.checkState(n.isTry());	          Node    c    =    n.getFirstChild();    Node    c    =    n.getFirstChild();    preconditions.checkState(n.isTry());    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	104	None	replace
509	[BUG]  [BUGGY]  Node  attemptBlock  =  n,  exitType.getTree();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  attemptBlock  =  n,  exitType.getTree();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  attemptBlock  =  n,  exitType.getTree();	  Node    attemptBlock    =    n.getTree();    	non-compiled	[CE]  ';'  expected	27	None	replace
510	[BUG]  [BUGGY]  Node  tryBlock  =  n.getFirstChild();  Preconditions.checkState(n.removeFirstChild()!=  exitType);  [CE]  incomparable  types:  Node  and  int  [FE]            RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.getFirstChild();  Preconditions.checkState(n.removeFirstChild()!=  exitType);  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.getFirstChild();  Preconditions.checkState(n.removeFirstChild()!=  exitType);	  Node    tryBlock    =    n.removeFirstChild();    Preconditions.checkState(n.removeFirstChild()!=    exitType);    Node    tryBlock    =    n.removeFirstChild();    	non-compiled	[CE]  incomparable  types:  Node  and  int	107	None	replace
511	[BUG]  [BUGGY]  n.removeChild(labelName,  tryBlock);  [CE]  cannot  find  symbol  tryBlock  [FE]                AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  n.removeChild(labelName,  tryBlock);  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	n.removeChild(labelName,  tryBlock);	  n.removeChild(labelName,    null);    	non-compiled	[CE]  cannot  find  symbol  tryBlock	64	None	replace
512	[BUG]  [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  otherBlock  =  n.getFirstChild();  Node  elseBlock  =  null.getFirstChild();  Node  otherBlock  =  n.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  otherBlock  =  n.getFirstChild();  Node  elseBlock  =  null.getFirstChild();  Node  otherBlock  =  n.getFirstChild();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	                Node        elseBlock        =        n.getFirstChild();        Node    otherBlock    =    n.getFirstChild();    Node  elseBlock  =  null.getFirstChild();  Node  otherBlock  =  n.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	7	None	add
513	[BUG]  [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  otherBlock  =  n.getFirstChild();  Node  elseBlock  =  node.getFirstChild();  Node  otherBlock  =  n.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      AssertionFailedError    [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  otherBlock  =  n.getFirstChild();  Node  elseBlock  =  node.getFirstChild();  Node  otherBlock  =  n.getFirstChild();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	                Node        elseBlock        =        n.getFirstChild();        Node    otherBlock    =    n.getFirstChild();    Node  elseBlock  =  node.getFirstChild();  Node  otherBlock  =  n.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	7	None	add
514	[BUG]  [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  otherBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  Node  otherBlock  =  no.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        AssertionFailedError    [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  otherBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  Node  otherBlock  =  no.getFirstChild();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	                Node        elseBlock        =        n.getFirstChild();        Node    otherBlock    =    n.getFirstChild();    Node  elseBlock  =  n.getFirstChild();  Node  otherBlock  =  no.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	7	None	add
515	[BUG]  [BUGGY]  Preconditions.checkState(n.isAll());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(n.isAll());  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Preconditions.checkState(n.isAll());	  Preconditions.checkState(n.isFalse());    	non-compiled	[CE]  cannot  find  symbol	117	None	replace
516	[BUG]  [BUGGY]  Node  anotherBlock  =  n.getFirstChild();  [CE]  cannot  find  symbol  tryBlock  [FE]    AssertionFailedError    [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  anotherBlock  =  n.getFirstChild();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  anotherBlock  =  n.getFirstChild();	          Node    elseBlock    =    n.getFirstChild();    Node    anotherBlock    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  tryBlock	12	None	replace
517	[BUG]  [BUGGY]  Node  n  =  n.getFirstChild();  Preconditions.checkState(n.hasOneChild());  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  n  =  n.getFirstChild();  Preconditions.checkState(n.hasOneChild());  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  n  =  n.getFirstChild();  Preconditions.checkState(n.hasOneChild());	          Node    c    =    n.getFirstChild();    Node    c    =    n.getFirstChild();    Preconditions.checkState(n.hasOneChild());    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	40	None	replace
518	[BUG]  [BUGGY]  Node  c  =  n.getFirstChild();  Preconditions.checkState(n.hasOneChild());  [CE]  cannot  find  symbol  tryBlock  [FE]                  AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  c  =  n.getFirstChild();  Preconditions.checkState(n.hasOneChild());  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  c  =  n.getFirstChild();  Preconditions.checkState(n.hasOneChild());	          Node    c    =    n.getFirstChild();    Node    c    =    n.getFirstChild();    Preconditions.checkState(n.hasOneChild());    	non-compiled	[CE]  cannot  find  symbol  tryBlock	40	None	replace
519	[BUG]  [BUGGY]  Node  tryBlock  =  n.getNext();  Preconditions.checkState(!NodeUtil.isFunctionAnonymous(labelName));  [CE]  cannot  find  symbol  [FE]                StackOverflowError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.getNext();  Preconditions.checkState(!NodeUtil.isFunctionAnonymous(labelName));  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.getNext();  Preconditions.checkState(!NodeUtil.isFunctionAnonymous(labelName));	  Node    tryBlock    =    n.getParent();    Node    tryBlock    =    n.getParent();    }    else    if(n.isTree())    {    Preconditions.checkState(!NodeUtil.isFunctionAnonymous(labelName));    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
520	[BUG]  [BUGGY]  Node  tryBlock  =  n.getParent();  Preconditions.checkState(!NodeUtil.isFunctionAnonymous(labelName));  [CE]  cannot  find  symbol  [FE]                  StackOverflowError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.getParent();  Preconditions.checkState(!NodeUtil.isFunctionAnonymous(labelName));  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.getParent();  Preconditions.checkState(!NodeUtil.isFunctionAnonymous(labelName));	  Node    tryBlock    =    n.getParent();    Node    tryBlock    =    n.getParent();    }    else    if(n.isTree())    {    Preconditions.checkState(!NodeUtil.isFunctionAnonymous(labelName));    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
521	[BUG]  [BUGGY]  Node  elseBlock  =  n.getFirstChild();  preconditions.checkState(n.isTry());  [CE]  cannot  find  symbol  preconditions  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  elseBlock  =  n.getFirstChild();  preconditions.checkState(n.isTry());  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  elseBlock  =  n.getFirstChild();  preconditions.checkState(n.isTry());	          Node    elseBlock    =    n.getFirstChild();    Node    elseBlock    =    n.getFirstChild();    preconditions.checkState(n.isTry());    	non-compiled	[CE]  cannot  find  symbol  preconditions	101	None	replace
522	[BUG]  [BUGGY]  Node  elseBlock  =  n.getFirstChild();  Preconditions.checkState(node.isTry());  [CE]  cannot  find  symbol  node  [FE]              AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  elseBlock  =  n.getFirstChild();  Preconditions.checkState(node.isTry());  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  elseBlock  =  n.getFirstChild();  Preconditions.checkState(node.isTry());	          Node    elseBlock    =    n.getFirstChild();    Node    elseBlock    =    n.getFirstChild();    preconditions.checkState(n.isTry());    	non-compiled	[CE]  cannot  find  symbol  node	101	None	replace
523	[BUG]  [BUGGY]  Node  tryBlock  =  n.getFirstChild();  Preconditions.checkState(n.removeFirstChild()  ==  exitType);  [CE]  incomparable  types:  Node  and  int  [FE]              RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.getFirstChild();  Preconditions.checkState(n.removeFirstChild()  ==  exitType);  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.getFirstChild();  Preconditions.checkState(n.removeFirstChild()  ==  exitType);	  Node    tryBlock    =    n.removeFirstChild();    Preconditions.checkState(n.removeFirstChild()    ==    exitType);    Node    tryBlock    =    n.removeFirstChild();    	non-compiled	[CE]  incomparable  types:  Node  and  int	108	None	replace
524	[BUG]  [BUGGY]  Node  elseBlock  =  n,  exitType.getTree();  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  elseBlock  =  n,  exitType.getTree();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  elseBlock  =  n,  exitType.getTree();	  Node    elseBlock    =    n.getTree();    	non-compiled	[CE]  ';'  expected	53	None	replace
525	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]          Preconditions.checkState(n.isTry());    Preconditions.checkState(n.isTry());Preconditions.checkState(n.isTry());  Preconditions.checkState(!n.isTry());  Preconditions.checkState(n.isTry());Preconditions.checkState(n.isTry());  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	add	                Preconditions.checkState(n.isTry());        Preconditions.checkState(n.isTry());Preconditions.checkState(n.isTry());    Preconditions.checkState(!n.isTry());  Preconditions.checkState(n.isTry());Preconditions.checkState(n.isTry());	  	compilable	  [FE]  RuntimeException  	126	6	add
526	[BUG]  [BUGGY]          Preconditions.checkState(n.isTry());    Preconditions.checkState(n.isTry());Preconditions.checkState(n.isTry());  Preconditions.checkState(!n.isTry());  Preconditions.checkState(n.isTry());Preconditions.checkState(n.isTry());  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]          Preconditions.checkState(n.isTry());    Preconditions.checkState(n.isTry());Preconditions.checkState(n.isTry());  Preconditions.checkState(!n.isTry());  Preconditions.checkState(n.isTry());Preconditions.checkState(n.isTry());  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	                Preconditions.checkState(n.isTry());        Preconditions.checkState(n.isTry());Preconditions.checkState(n.isTry());    Preconditions.checkState(!n.isTry());  Preconditions.checkState(n.isTry());Preconditions.checkState(n.isTry());	  	compilable	  [FE]  RuntimeException  	126	6	add
527	[BUG]  [BUGGY]          Preconditions.checkState(n.isTry());    Preconditions.checkState(n.isTry());Preconditions.checkState(n.isTry());  Preconditions.checkState(n.isTry());  Preconditions.checkState(n.isTry());Preconditions.checkState(t.isTry());  [CE]  cannot  find  symbol  t  [FE]      AssertionFailedError    [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]          Preconditions.checkState(n.isTry());    Preconditions.checkState(n.isTry());Preconditions.checkState(n.isTry());  Preconditions.checkState(n.isTry());  Preconditions.checkState(n.isTry());Preconditions.checkState(t.isTry());  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	                Preconditions.checkState(n.isTry());        Preconditions.checkState(n.isTry());Preconditions.checkState(n.isTry());    Preconditions.checkState(n.isTry());  Preconditions.checkState(n.isTry());Preconditions.checkState(t.isTry());	  	non-compiled	[CE]  cannot  find  symbol  t	126	None	add
528	[BUG]  [BUGGY]  Node  n  =  this.ifBlock.getNext();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                    AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  n  =  this.ifBlock.getNext();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  n  =  this.ifBlock.getNext();	  Node    n    =    ifBlock.getNext();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	80	None	replace
529	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.hasChildren());  [CE]  cannot  find  symbol  tryBlock  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.hasChildren());  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.hasChildren());	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  cannot  find  symbol  tryBlock	3	None	replace
530	[BUG]  [BUGGY]  Node  tryBlock  =  n.getNext();  Preconditions.checkState(!NodeUtil.isFunctionAnonymous(n));  [CE]  cannot  find  symbol  [FE]          StackOverflowError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.getNext();  Preconditions.checkState(!NodeUtil.isFunctionAnonymous(n));  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.getNext();  Preconditions.checkState(!NodeUtil.isFunctionAnonymous(n));	  Node    tryBlock    =    n.getParent();    Node    tryBlock    =    n.getParent();    }    else    if(n.isTree())    {    Preconditions.checkState(!NodeUtil.isFunctionAnonymous(n));    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
531	[BUG]  [BUGGY]  Node  tryBlock  =  n.getParent();  Preconditions.checkState(!NodeUtil.isFunctionAnonymous(n));  [CE]  cannot  find  symbol  [FE]            StackOverflowError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.getParent();  Preconditions.checkState(!NodeUtil.isFunctionAnonymous(n));  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.getParent();  Preconditions.checkState(!NodeUtil.isFunctionAnonymous(n));	  Node    tryBlock    =    n.getParent();    Node    tryBlock    =    n.getParent();    }    else    if(n.isTree())    {    Preconditions.checkState(!NodeUtil.isFunctionAnonymous(n));    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
532	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.getNext();  Preconditions.checkState(tryBlock.getNext()!=  null);  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	add	Node  tryBlock  =  n.getNext();  Preconditions.checkState(tryBlock.getNext()!=  null);	  Node    tryBlock    =    n.getNext();    Preconditions.checkState(n.getNext()!=    null);    Node    tryBlock    =    n.getNext();    	compilable	  [FE]  RuntimeException  	95	6	replace
533	[BUG]  [BUGGY]  Node  tryBlock  =  n.getNext();  Preconditions.checkState(tryBlock.getNext()!=  null);  [FE]  RuntimeException  [FE]              RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.getNext();  Preconditions.checkState(tryBlock.getNext()!=  null);  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.getNext();  Preconditions.checkState(tryBlock.getNext()!=  null);	  Node    tryBlock    =    n.getNext();    Preconditions.checkState(n.getNext()!=    null);    Node    tryBlock    =    n.getNext();    	compilable	  [FE]  RuntimeException  	95	6	replace
534	[BUG]  [BUGGY]  Node  tryBlock  =  n.removeChild(n.getFirstChild(),  false);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.removeChild(n.getFirstChild(),  false);  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.removeChild(n.getFirstChild(),  false);	  Node    tryBlock    =    n.removeChild(n.getFirstChild());    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	120	None	replace
535	[BUG]  [BUGGY]  Node  c  =  n.removeChild(n);  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  c  =  n.removeChild(n);  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  c  =  n.removeChild(n);	  Node    c    =    n.getTree();    	non-compiled	[CE]  incompatible  types	32	None	replace
536	[BUG]  [BUGGY]  Node  tryBlock  =  n.removeChild(n.getNext(),  exitType);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]        StackOverflowError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.removeChild(n.getNext(),  exitType);  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.removeChild(n.getNext(),  exitType);	  Node    tryBlock    =    n.removeChild(n.getNext());    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	139	None	replace
537	[BUG]  [BUGGY]  Node  tryBlock  =  this.allCatchNodes.getFirstChild();  [CE]  cannot  find  symbol  allCatchNodes  [FE]        AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  this.allCatchNodes.getFirstChild();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  this.allCatchNodes.getFirstChild();	  Node    tryBlock    =    elseBlock.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	24	None	replace
538	[BUG]  [BUGGY]  Node  returnBlock  =  n.getFirstChild();  [CE]  cannot  find  symbol  tryBlock  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  returnBlock  =  n.getFirstChild();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  returnBlock  =  n.getFirstChild();	  Node    tryBlock    =    elseBlock.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  tryBlock	24	None	replace
539	[BUG]  [BUGGY]  Node  tryBlock  =  n.removeFirstChild();  node  =  n.removeLastChild();  [CE]  cannot  find  symbol  node  [FE]            RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.removeFirstChild();  node  =  n.removeLastChild();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.removeFirstChild();  node  =  n.removeLastChild();	  Node    tryBlock    =    n.removeFirstChild();    Node    tryBlock    =    n.removeLastChild();    	non-compiled	[CE]  cannot  find  symbol  node	77	None	replace
540	[BUG]  [BUGGY]  n.removeChild(labelName,  escapeType,  labelName);  [CE]  cannot  find  symbol  escapeType  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  n.removeChild(labelName,  escapeType,  labelName);  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	n.removeChild(labelName,  escapeType,  labelName);	  n.removeChild(labelName,    exitType);    	non-compiled	[CE]  cannot  find  symbol  escapeType	62	None	replace
541	[BUG]  [BUGGY]  n.removeChild(labelName,  JSError.make(labelName,  exitType));  [CE]  no  suitable  method  found  for  make(String,int)  [FE]              AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  n.removeChild(labelName,  JSError.make(labelName,  exitType));  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	n.removeChild(labelName,  JSError.make(labelName,  exitType));	  n.removeChild(labelName,    exitType);    	non-compiled	[CE]  no  suitable  method  found  for  make(String,int)	62	None	replace
542	[BUG]  [BUGGY]  Node  c  =  n.replaceChild(n,  exitType);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  c  =  n.replaceChild(n,  exitType);  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  c  =  n.replaceChild(n,  exitType);	  Node    c    =    n.removeFirstChild();    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	125	None	replace
543	[BUG]  [BUGGY]  Preconditions.checkState(n.isTry()  ||  n.isTry());  n.setTree(n.isTry());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(n.isTry()  ||  n.isTry());  n.setTree(n.isTry());  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Preconditions.checkState(n.isTry()  ||  n.isTry());  n.setTree(n.isTry());	          Preconditions.checkState(n.isTry());    Preconditions.checkState(n.isTry());    n.setTree(n.isTry());    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
544	[BUG]  [BUGGY]  Preconditions.checkState(n,  exitType.isExit());  [CE]  int  cannot  be  dereferenced  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(n,  exitType.isExit());  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Preconditions.checkState(n,  exitType.isExit());	  Preconditions.checkState(n.isExit());    	non-compiled	[CE]  int  cannot  be  dereferenced	2	None	replace
545	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]        RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.cloneTree();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	add	Node  tryBlock  =  n.cloneTree();	  Node    tryBlock    =    n.removeFirstChild();    Node    tryBlock    =    n.removeFirstChild();    	compilable	  [FE]  StackOverflowError  	75	6	replace
546	[BUG]  [BUGGY]  Node  tryBlock  =  n.cloneTree();  [FE]  StackOverflowError  [FE]        RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.cloneTree();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.cloneTree();	  Node    tryBlock    =    n.removeFirstChild();    Node    tryBlock    =    n.removeFirstChild();    	compilable	  [FE]  StackOverflowError  	75	6	replace
547	[BUG]  [BUGGY]  Node  startBlock  =  n.removeFirstChild();  [CE]  cannot  find  symbol  tryBlock  [FE]              RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  startBlock  =  n.removeFirstChild();  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  startBlock  =  n.removeFirstChild();	  Node    tryBlock    =    n.removeFirstChild();    Node    startBlock    =    n.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol  tryBlock	78	None	replace
548	[BUG]  [BUGGY]  Node  c  =  n.getfirstChild();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  c  =  n.getfirstChild();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  c  =  n.getfirstChild();	  Node    c    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
549	[BUG]  [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  anotherBlock  =  n.getFirstChild();  Node  anotherBlock  =  n.getFirstChild();  Node  anotherBlock  =  n.getFirstChild();  [CE]  variable  anotherBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  anotherBlock  =  n.getFirstChild();  Node  anotherBlock  =  n.getFirstChild();  Node  anotherBlock  =  n.getFirstChild();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	                Node        elseBlock        =        n.getFirstChild();        Node    anotherBlock    =    n.getFirstChild();    Node  anotherBlock  =  n.getFirstChild();  Node  anotherBlock  =  n.getFirstChild();	  	non-compiled	[CE]  variable  anotherBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	11	None	add
550	[BUG]  [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  anotherBlock  =  n.getFirstChild();  Node  elseBlock  =  null.getFirstChild();  Node  anotherBlock  =  n.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      AssertionFailedError    [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  anotherBlock  =  n.getFirstChild();  Node  elseBlock  =  null.getFirstChild();  Node  anotherBlock  =  n.getFirstChild();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	                Node        elseBlock        =        n.getFirstChild();        Node    anotherBlock    =    n.getFirstChild();    Node  elseBlock  =  null.getFirstChild();  Node  anotherBlock  =  n.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	11	None	add
551	[BUG]  [BUGGY]  Node  n  =  n.getNext();  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  n  =  n.getNext();  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  n  =  n.getNext();  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);	          Node    c    =    n.getNext();    Node    c    =    n.getNext();    Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	43	None	replace
552	[BUG]  [BUGGY]  Node  c  =  n.getParent();  Preconditions.checkState(n.getNext()  ==  exitType);  Node  c  =  n.getNext();  [CE]  incomparable  types:  Node  and  int  [FE]          AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  c  =  n.getParent();  Preconditions.checkState(n.getNext()  ==  exitType);  Node  c  =  n.getNext();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  c  =  n.getParent();  Preconditions.checkState(n.getNext()  ==  exitType);  Node  c  =  n.getNext();	          Node    c    =    n.getNext();    Preconditions.checkState(n.getNext()    ==    exitType);    Node    c    =    n.getNext();    	non-compiled	[CE]  incomparable  types:  Node  and  int	110	None	replace
553	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.isTry());  [CE]  cannot  find  symbol  tryBlock  [FE]        AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.isTry());  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.isTry());	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  tryBlock	116	None	replace
554	[BUG]  [BUGGY]  Node  elseBlock  =  node.removeFirstChild();  [CE]  cannot  find  symbol  node  [FE]        AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  elseBlock  =  node.removeFirstChild();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  elseBlock  =  node.removeFirstChild();	  Node    elseBlock    =    n.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol  node	148	None	replace
555	[BUG]  [BUGGY]  Node  tryBlock  =  n.replaceChild(node,  tryBlock);  [CE]  cannot  find  symbol  node  [FE]            RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.replaceChild(node,  tryBlock);  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.replaceChild(node,  tryBlock);	  Node    tryBlock    =    n.removeFirstChild();    Node    tryBlock    =    no.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol  node	138	None	replace
556	[BUG]  [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  thenBlock  =  n.getFirstChild();  Node  elseBlock  =  node.getFirstChild();  Node  thenBlock  =  n.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  thenBlock  =  n.getFirstChild();  Node  elseBlock  =  node.getFirstChild();  Node  thenBlock  =  n.getFirstChild();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	                Node        elseBlock        =        n.getFirstChild();        Node    thenBlock    =    n.getFirstChild();    Node  elseBlock  =  node.getFirstChild();  Node  thenBlock  =  n.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	9	None	add
557	[BUG]  [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  thenBlock  =  n.getFirstChild();  Node  }  Block  =  n.getFirstChild();  Node  thenBlock  =  n.getFirstChild();  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  thenBlock  =  n.getFirstChild();  Node  }  Block  =  n.getFirstChild();  Node  thenBlock  =  n.getFirstChild();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	                Node        elseBlock        =        n.getFirstChild();        Node    thenBlock    =    n.getFirstChild();    Node  }  Block  =  n.getFirstChild();  Node  thenBlock  =  n.getFirstChild();	  	non-compiled	[CE]  not  a  statement	9	None	add
558	[BUG]  [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  thenBlock  =  n.getFirstChild();  Node  elseBlock  =  null.getFirstChild();  Node  thenBlock  =  n.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        AssertionFailedError    [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  thenBlock  =  n.getFirstChild();  Node  elseBlock  =  null.getFirstChild();  Node  thenBlock  =  n.getFirstChild();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	                Node        elseBlock        =        n.getFirstChild();        Node    thenBlock    =    n.getFirstChild();    Node  elseBlock  =  null.getFirstChild();  Node  thenBlock  =  n.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	9	None	add
559	[BUG]  [BUGGY]  Node  tryBlock  =  n.getNext();  preconditions.checkState(n.isTry());  [CE]  cannot  find  symbol  preconditions  [FE]            RuntimeException      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  tryBlock  =  n.getNext();  preconditions.checkState(n.isTry());  [BUGGY]      tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.getNext();  preconditions.checkState(n.isTry());	  Node    tryBlock    =    n.getNext();    Node    tryBlock    =    n.getNext();    }    else    {    tryMinimizeExits(tryBlock,    exitType,    labelName);    Preconditions.checkState(n.isTry());    	non-compiled	[CE]  cannot  find  symbol  preconditions	134	None	replace
560	[BUG]  [BUGGY]  Node  n  =  this.allCatchNodes.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]            AssertionFailedError      [CONTEXT]      tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {      [BUGGY]  Node  n  =  this.allCatchNodes.getFirstChild();  [BUGGY]      Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  n  =  this.allCatchNodes.getFirstChild();	  Node    n    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	73	None	replace
