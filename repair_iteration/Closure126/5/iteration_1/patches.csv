bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Preconditions.checkState(n.isTree());  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]  Preconditions.checkState(n.isTree());  [BUGGY]    Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Preconditions.checkState(n.isTree());	      Preconditions.checkState(n.isTry());    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
2	[BUG]  [BUGGY]  Preconditions.checkState(n.isExit());  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]  Preconditions.checkState(n.isExit());  [BUGGY]    Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Preconditions.checkState(n.isExit());	      Preconditions.checkState(n.isTry());    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
3	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  [CE]  cannot  find  symbol  tryBlock  [FE]        AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);	      Preconditions.checkState(n.isTry());    	non-compiled	[CE]  cannot  find  symbol  tryBlock	6	None	replace
4	[BUG]  [BUGGY]  Preconditions.checkState(n.isError());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]  Preconditions.checkState(n.isError());  [BUGGY]    Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Preconditions.checkState(n.isError());	      Preconditions.checkState(n.isTry());    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
5	[BUG]  [BUGGY]      Node  elseBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]      Node  elseBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  [BUGGY]    Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	        Node    elseBlock    =    n.getFirstChild();    Node  elseBlock  =  n.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	8	None	add
6	[BUG]  [BUGGY]      Node  elseBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getLastChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]      Node  elseBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getLastChild();  [BUGGY]    Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	        Node    elseBlock    =    n.getFirstChild();    Node  elseBlock  =  n.getLastChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	8	None	add
7	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]      Node  elseBlock  =  n.getFirstChild();  Node  otherBlock  =  n.getFirstChild();  [BUGGY]    Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	add	        Node    elseBlock    =    n.getFirstChild();    Node  otherBlock  =  n.getFirstChild();	  	compilable	  [FE]  AssertionFailedError  	8	2	add
8	[BUG]  [BUGGY]      Node  elseBlock  =  n.getFirstChild();  Node  otherBlock  =  n.getFirstChild();  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]      Node  elseBlock  =  n.getFirstChild();  Node  otherBlock  =  n.getFirstChild();  [BUGGY]    Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	        Node    elseBlock    =    n.getFirstChild();    Node  otherBlock  =  n.getFirstChild();	  	compilable	  [FE]  AssertionFailedError  	8	2	add
9	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]      Node  elseBlock  =  n.getFirstChild();  Node  thenBlock  =  n.getFirstChild();  [BUGGY]    Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	add	        Node    elseBlock    =    n.getFirstChild();    Node  thenBlock  =  n.getFirstChild();	  	compilable	  [FE]  AssertionFailedError  	8	2	add
10	[BUG]  [BUGGY]      Node  elseBlock  =  n.getFirstChild();  Node  thenBlock  =  n.getFirstChild();  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]      Node  elseBlock  =  n.getFirstChild();  Node  thenBlock  =  n.getFirstChild();  [BUGGY]    Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	        Node    elseBlock    =    n.getFirstChild();    Node  thenBlock  =  n.getFirstChild();	  	compilable	  [FE]  AssertionFailedError  	8	2	add
11	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]      Node  elseBlock  =  n.getFirstChild();  Node  anotherBlock  =  n.getFirstChild();  [BUGGY]    Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	add	        Node    elseBlock    =    n.getFirstChild();    Node  anotherBlock  =  n.getFirstChild();	  	compilable	  [FE]  AssertionFailedError  	8	2	add
12	[BUG]  [BUGGY]      Node  elseBlock  =  n.getFirstChild();  Node  anotherBlock  =  n.getFirstChild();  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]      Node  elseBlock  =  n.getFirstChild();  Node  anotherBlock  =  n.getFirstChild();  [BUGGY]    Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	        Node    elseBlock    =    n.getFirstChild();    Node  anotherBlock  =  n.getFirstChild();	  	compilable	  [FE]  AssertionFailedError  	8	2	add
13	[BUG]  [BUGGY]  Node  tryBlock  =  n.getParent();  Node  tryBlock  =  n.getParent();  [CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    StackOverflowError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]  Node  tryBlock  =  n.getParent();  Node  tryBlock  =  n.getParent();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node    tryBlock    =    n.getParent();    Node  tryBlock  =  n.getParent();	  	non-compiled	[CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	15	None	add
14	[BUG]  [BUGGY]  Node  tryBlock  =  n.getParent();  Node  tryBlock  =  n.getParent();  }  else  if(n.isTree())  {  Preconditions.checkState(!NodeUtil.isFunctionAnonymous(n));  [CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      StackOverflowError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]  Node  tryBlock  =  n.getParent();  Node  tryBlock  =  n.getParent();  }  else  if(n.isTree())  {  Preconditions.checkState(!NodeUtil.isFunctionAnonymous(n));  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node    tryBlock    =    n.getParent();    Node  tryBlock  =  n.getParent();  }  else  if(n.isTree())  {  Preconditions.checkState(!NodeUtil.isFunctionAnonymous(n));	  	non-compiled	[CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	15	None	add
15	[BUG]  [BUGGY]  Node  tryBlock  =  n.getParent();  Node  tryBlock  =  n.getParent();  }  else  if(n.isTree())  {  Preconditions.checkState(!NodeUtil.isFunctionDeclaration(n));  [CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        StackOverflowError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]  Node  tryBlock  =  n.getParent();  Node  tryBlock  =  n.getParent();  }  else  if(n.isTree())  {  Preconditions.checkState(!NodeUtil.isFunctionDeclaration(n));  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node    tryBlock    =    n.getParent();    Node  tryBlock  =  n.getParent();  }  else  if(n.isTree())  {  Preconditions.checkState(!NodeUtil.isFunctionDeclaration(n));	  	non-compiled	[CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	15	None	add
16	[BUG]  [BUGGY]  Node  tryBlock  =  n.getParent();  Node  tryBlock  =  n.getParent();  }  else  if(n.isTree())  {  Preconditions.checkState(!NodeUtil.isExpressionNode(n));  [CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          StackOverflowError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]  Node  tryBlock  =  n.getParent();  Node  tryBlock  =  n.getParent();  }  else  if(n.isTree())  {  Preconditions.checkState(!NodeUtil.isExpressionNode(n));  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node    tryBlock    =    n.getParent();    Node  tryBlock  =  n.getParent();  }  else  if(n.isTree())  {  Preconditions.checkState(!NodeUtil.isExpressionNode(n));	  	non-compiled	[CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	15	None	add
17	[BUG]  [BUGGY]  Node  tryBlock  =  n.getParent();  Node  tryBlock  =  n.getParent();  }  else  if(n.isTree())  {  Preconditions.checkState(!NodeUtil.isFunctionAnonymous(labelName));  [CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]            StackOverflowError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]  Node  tryBlock  =  n.getParent();  Node  tryBlock  =  n.getParent();  }  else  if(n.isTree())  {  Preconditions.checkState(!NodeUtil.isFunctionAnonymous(labelName));  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node    tryBlock    =    n.getParent();    Node  tryBlock  =  n.getParent();  }  else  if(n.isTree())  {  Preconditions.checkState(!NodeUtil.isFunctionAnonymous(labelName));	  	non-compiled	[CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	15	None	add
18	[BUG]  [BUGGY]  Node  tryBlock  =  n.getParent();  Node  tryBlock  =  n.getParent();  }  else  if(n.isTree())  {  Preconditions.checkState(!NodeUtil.isFunctionDeclaration(n));  return;  [CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]              StackOverflowError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]  Node  tryBlock  =  n.getParent();  Node  tryBlock  =  n.getParent();  }  else  if(n.isTree())  {  Preconditions.checkState(!NodeUtil.isFunctionDeclaration(n));  return;  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node    tryBlock    =    n.getParent();    Node  tryBlock  =  n.getParent();  }  else  if(n.isTree())  {  Preconditions.checkState(!NodeUtil.isFunctionDeclaration(n));  return;	  	non-compiled	[CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	15	None	add
19	[BUG]  [BUGGY]  Node  tryBlock  =  n.getNext();  Node  tryBlock  =  n.getNext();  [CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    RuntimeException    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]  Node  tryBlock  =  n.getNext();  Node  tryBlock  =  n.getNext();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node    tryBlock    =    n.getNext();    Node  tryBlock  =  n.getNext();	  	non-compiled	[CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	12	None	add
20	[BUG]  [BUGGY]  Node  tryBlock  =  n.getNext();  Node  attemptBlock  =  n.getNext();  [CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      RuntimeException    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]  Node  tryBlock  =  n.getNext();  Node  attemptBlock  =  n.getNext();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node    tryBlock    =    n.getNext();    Node  attemptBlock  =  n.getNext();	  	non-compiled	[CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	12	None	add
21	[BUG]  [BUGGY]  Node  tryBlock  =  n.getNext();  Node  triedBlock  =  n.getNext();  [CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        RuntimeException    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]  Node  tryBlock  =  n.getNext();  Node  triedBlock  =  n.getNext();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node    tryBlock    =    n.getNext();    Node  triedBlock  =  n.getNext();	  	non-compiled	[CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	12	None	add
22	[BUG]  [BUGGY]  Node  tryBlock  =  n.getNext();  Node  tryingBlock  =  n.getNext();  [CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          RuntimeException    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]  Node  tryBlock  =  n.getNext();  Node  tryingBlock  =  n.getNext();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node    tryBlock    =    n.getNext();    Node  tryingBlock  =  n.getNext();	  	non-compiled	[CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	12	None	add
23	[BUG]  [BUGGY]  Node  tryBlock  =  n.getNext();  Node  tryBlock  =  n.getPrevious();  [CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]            RuntimeException    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]  Node  tryBlock  =  n.getNext();  Node  tryBlock  =  n.getPrevious();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node    tryBlock    =    n.getNext();    Node  tryBlock  =  n.getPrevious();	  	non-compiled	[CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	12	None	add
24	[BUG]  [BUGGY]  Node  tryBlock  =  elseBlock.getFirstChild();  [CE]  cannot  find  symbol  elseBlock  [FE]    AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]  Node  tryBlock  =  elseBlock.getFirstChild();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  elseBlock.getFirstChild();	  Node    tryBlock    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  elseBlock	11	None	replace
25	[BUG]  [BUGGY]  Node  tryBlock  =  elseBlock.getTree();  [CE]  cannot  find  symbol  elseBlock  [FE]            AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]  Node  tryBlock  =  elseBlock.getTree();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  elseBlock.getTree();	  Node    tryBlock    =    n.getTree();    	non-compiled	[CE]  cannot  find  symbol  elseBlock	14	None	replace
26	[BUG]  [BUGGY]  Node  tryBlock  =  n,  exitType.getTree();  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]  Node  tryBlock  =  n,  exitType.getTree();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n,  exitType.getTree();	  Node    tryBlock    =    n.getTree();    	non-compiled	[CE]  ';'  expected	14	None	replace
27	[BUG]  [BUGGY]  Node  attemptBlock  =  n.getTree();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]  Node  attemptBlock  =  n.getTree();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  attemptBlock  =  n.getTree();	  Node    tryBlock    =    n.getTree();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
28	[BUG]  [BUGGY]  Node  tryBlock  =  node.getTree();  [CE]  cannot  find  symbol  node  [FE]                  AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]  Node  tryBlock  =  node.getTree();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  node.getTree();	  Node    tryBlock    =    n.getTree();    	non-compiled	[CE]  cannot  find  symbol  node	14	None	replace
29	[BUG]  [BUGGY]  Node  tryBlock  =  elseBlock.removeFirstChild();  [CE]  cannot  find  symbol  elseBlock  [FE]    RuntimeException    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]  Node  tryBlock  =  elseBlock.removeFirstChild();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  elseBlock.removeFirstChild();	  Node    tryBlock    =    n.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol  elseBlock	20	None	replace
30	[BUG]  [BUGGY]  Node  c  =  n.getLastChild();  [CE]  cannot  find  symbol  tryBlock  [FE]    AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]  Node  c  =  n.getLastChild();  [BUGGY]    Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  c  =  n.getLastChild();	      Node    c    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  tryBlock	4	None	replace
31	[BUG]  [BUGGY]  Node  c  =  n.getCurrentNode();  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]  Node  c  =  n.getCurrentNode();  [BUGGY]    Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  c  =  n.getCurrentNode();	      Node    c    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
32	[BUG]  [BUGGY]  Node  c  =  n.getTree();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]  Node  c  =  n.getTree();  [BUGGY]    Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  c  =  n.getTree();	      Node    c    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
33	[BUG]  [BUGGY]  Node  n  =  node.getLastChild();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]  Node  n  =  node.getLastChild();  [BUGGY]    Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  n  =  node.getLastChild();	      Node    n    =    n.getLastChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	2	None	replace
34	[BUG]  [BUGGY]  Node  n  =  allCatchNodes.getLastChild();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]            AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]  Node  n  =  allCatchNodes.getLastChild();  [BUGGY]    Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  n  =  allCatchNodes.getLastChild();	      Node    n    =    n.getLastChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	2	None	replace
35	[BUG]  [BUGGY]  Node  n  =  elseBlock.getLastChild();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]              AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]  Node  n  =  elseBlock.getLastChild();  [BUGGY]    Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  n  =  elseBlock.getLastChild();	      Node    n    =    n.getLastChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	2	None	replace
36	[BUG]  [BUGGY]      Node  c  =  n.getFirstChild();  Node  c  =  n.getFirstChild();  [CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]      Node  c  =  n.getFirstChild();  Node  c  =  n.getFirstChild();  [BUGGY]    Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	        Node    c    =    n.getFirstChild();    Node  c  =  n.getFirstChild();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	3	None	add
37	[BUG]  [BUGGY]      Node  c  =  n.getFirstChild();  Node  c  =  n.getLastChild();  [CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]      Node  c  =  n.getFirstChild();  Node  c  =  n.getLastChild();  [BUGGY]    Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	        Node    c    =    n.getFirstChild();    Node  c  =  n.getLastChild();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	3	None	add
38	[BUG]  [BUGGY]      Node  c  =  n.getFirstChild();  Node  c  =  n.getFirstChild();  }  else  {  Node  c  =  n.getFirstChild();  [CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]      Node  c  =  n.getFirstChild();  Node  c  =  n.getFirstChild();  }  else  {  Node  c  =  n.getFirstChild();  [BUGGY]    Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	        Node    c    =    n.getFirstChild();    Node  c  =  n.getFirstChild();  }  else  {  Node  c  =  n.getFirstChild();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	3	None	add
39	[BUG]  [BUGGY]      Node  c  =  n.getFirstChild();  Node  c  =  n.getFirstChild();  this.labelName  =  n.getLastChild();  [CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]      Node  c  =  n.getFirstChild();  Node  c  =  n.getFirstChild();  this.labelName  =  n.getLastChild();  [BUGGY]    Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	        Node    c    =    n.getFirstChild();    Node  c  =  n.getFirstChild();  this.labelName  =  n.getLastChild();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	3	None	add
40	[BUG]  [BUGGY]      Node  c  =  n.getFirstChild();  Node  c  =  n.getFirstChild();  Preconditions.checkState(n.hasOneChild());  [CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]            AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]      Node  c  =  n.getFirstChild();  Node  c  =  n.getFirstChild();  Preconditions.checkState(n.hasOneChild());  [BUGGY]    Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	        Node    c    =    n.getFirstChild();    Node  c  =  n.getFirstChild();  Preconditions.checkState(n.hasOneChild());	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	3	None	add
41	[BUG]  [BUGGY]      Node  c  =  n.getFirstChild();  Node  c  =  n.getFirstChild();  Preconditions.checkState(n.isTry());  [CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]              AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]      Node  c  =  n.getFirstChild();  Node  c  =  n.getFirstChild();  Preconditions.checkState(n.isTry());  [BUGGY]    Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	        Node    c    =    n.getFirstChild();    Node  c  =  n.getFirstChild();  Preconditions.checkState(n.isTry());	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	3	None	add
42	[BUG]  [BUGGY]      Node  c  =  n.getNext();  Node  c  =  n.getNext();  [CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]      Node  c  =  n.getNext();  Node  c  =  n.getNext();  [BUGGY]    Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	        Node    c    =    n.getNext();    Node  c  =  n.getNext();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	17	None	add
43	[BUG]  [BUGGY]      Node  c  =  n.getNext();  Node  c  =  n.getNext();  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  [CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]      Node  c  =  n.getNext();  Node  c  =  n.getNext();  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	        Node    c    =    n.getNext();    Node  c  =  n.getNext();  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	17	None	add
44	[BUG]  [BUGGY]      Node  c  =  n.getNext();  Node  c  =  n.getNext();  Preconditions.checkState(n.hasOneChild());  [CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]      Node  c  =  n.getNext();  Node  c  =  n.getNext();  Preconditions.checkState(n.hasOneChild());  [BUGGY]    Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	        Node    c    =    n.getNext();    Node  c  =  n.getNext();  Preconditions.checkState(n.hasOneChild());	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	17	None	add
45	[BUG]  [BUGGY]      Node  c  =  n.getNext();  Node  c  =  n.getNext();  Preconditions.checkState(n.isTry());  [CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]      Node  c  =  n.getNext();  Node  c  =  n.getNext();  Preconditions.checkState(n.isTry());  [BUGGY]    Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	        Node    c    =    n.getNext();    Node  c  =  n.getNext();  Preconditions.checkState(n.isTry());	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	17	None	add
46	[BUG]  [BUGGY]      Node  c  =  n.getNext();  Node  c  =  n.getNext();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]            AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]      Node  c  =  n.getNext();  Node  c  =  n.getNext();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]    Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	        Node    c    =    n.getNext();    Node  c  =  n.getNext();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	17	None	add
47	[BUG]  [BUGGY]      Node  c  =  n.getNext();  Node  c  =  n.getNext();  Preconditions.checkState(n.getType()  ==  Token.GETPROP);  [CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]              AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]      Node  c  =  n.getNext();  Node  c  =  n.getNext();  Preconditions.checkState(n.getType()  ==  Token.GETPROP);  [BUGGY]    Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	        Node    c    =    n.getNext();    Node  c  =  n.getNext();  Preconditions.checkState(n.getType()  ==  Token.GETPROP);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	17	None	add
48	[BUG]  [BUGGY]  Node  n  =  node.getNext();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]  Node  n  =  node.getNext();  [BUGGY]    Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  n  =  node.getNext();	      Node    n    =    n.getNext();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	7	None	replace
49	[BUG]  [BUGGY]  Node  n  =  elseBlock.getNext();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                  AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]  Node  n  =  elseBlock.getNext();  [BUGGY]    Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  n  =  elseBlock.getNext();	      Node    n    =    n.getNext();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	7	None	replace
50	[BUG]  [BUGGY]  Node  elseBlock  =  n.getLastChild();  [CE]  cannot  find  symbol  tryBlock  [FE]    AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]  Node  elseBlock  =  n.getLastChild();  [BUGGY]    Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  elseBlock  =  n.getLastChild();	      Node    elseBlock    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  tryBlock	9	None	replace
51	[BUG]  [BUGGY]  Node  elseBlock  =  n.getNext();  [CE]  cannot  find  symbol  tryBlock  [FE]      AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]  Node  elseBlock  =  n.getNext();  [BUGGY]    Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  elseBlock  =  n.getNext();	      Node    elseBlock    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  tryBlock	9	None	replace
52	[BUG]  [BUGGY]  Node  elseBlock  =  n.getOwnerChild();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]  Node  elseBlock  =  n.getOwnerChild();  [BUGGY]    Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  elseBlock  =  n.getOwnerChild();	      Node    elseBlock    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
53	[BUG]  [BUGGY]  Node  elseBlock  =  n.getTree();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]  Node  elseBlock  =  n.getTree();  [BUGGY]    Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  elseBlock  =  n.getTree();	      Node    elseBlock    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
54	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]      Preconditions.checkState(n.isTry());  Preconditions.checkState(n.isTry());  [BUGGY]    Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	add	        Preconditions.checkState(n.isTry());    Preconditions.checkState(n.isTry());	  	compilable	  [FE]  AssertionFailedError  	5	2	add
55	[BUG]  [BUGGY]      Preconditions.checkState(n.isTry());  Preconditions.checkState(n.isTry());  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]      Preconditions.checkState(n.isTry());  Preconditions.checkState(n.isTry());  [BUGGY]    Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	        Preconditions.checkState(n.isTry());    Preconditions.checkState(n.isTry());	  	compilable	  [FE]  AssertionFailedError  	5	2	add
56	[BUG]  [BUGGY]      Preconditions.checkState(n.isTry());  Node  n  =  n.getFirstChild();  Preconditions.checkState(n.isTry());  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]      Preconditions.checkState(n.isTry());  Node  n  =  n.getFirstChild();  Preconditions.checkState(n.isTry());  [BUGGY]    Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	        Preconditions.checkState(n.isTry());    Node  n  =  n.getFirstChild();  Preconditions.checkState(n.isTry());	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	5	None	add
57	[BUG]  [BUGGY]      Preconditions.checkState(n.isTry());  Node  n  =  n.getLastChild();  Preconditions.checkState(n.isTry());  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]      Preconditions.checkState(n.isTry());  Node  n  =  n.getLastChild();  Preconditions.checkState(n.isTry());  [BUGGY]    Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	        Preconditions.checkState(n.isTry());    Node  n  =  n.getLastChild();  Preconditions.checkState(n.isTry());	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	5	None	add
58	[BUG]  [BUGGY]      Preconditions.checkState(n.isTry());  Node  n  =  n.getNext();  Preconditions.checkState(n.isTry());  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]      Preconditions.checkState(n.isTry());  Node  n  =  n.getNext();  Preconditions.checkState(n.isTry());  [BUGGY]    Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	        Preconditions.checkState(n.isTry());    Node  n  =  n.getNext();  Preconditions.checkState(n.isTry());	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	5	None	add
59	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]      Preconditions.checkState(n.isTry());  Preconditions.checkState(n.isTry());  }  else  {  Preconditions.checkState(n.isTry());  [BUGGY]    Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	add	        Preconditions.checkState(n.isTry());    Preconditions.checkState(n.isTry());  }  else  {  Preconditions.checkState(n.isTry());	  	compilable	  [FE]  RuntimeException  	5	7	add
60	[BUG]  [BUGGY]      Preconditions.checkState(n.isTry());  Preconditions.checkState(n.isTry());  }  else  {  Preconditions.checkState(n.isTry());  [FE]  RuntimeException  [FE]            AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]      Preconditions.checkState(n.isTry());  Preconditions.checkState(n.isTry());  }  else  {  Preconditions.checkState(n.isTry());  [BUGGY]    Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	        Preconditions.checkState(n.isTry());    Preconditions.checkState(n.isTry());  }  else  {  Preconditions.checkState(n.isTry());	  	compilable	  [FE]  RuntimeException  	5	7	add
61	[BUG]  [BUGGY]      Preconditions.checkState(n.isTry());  Preconditions.checkState(n.isTry());  n.setTree(n.isTry());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]      Preconditions.checkState(n.isTry());  Preconditions.checkState(n.isTry());  n.setTree(n.isTry());  [BUGGY]    Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	        Preconditions.checkState(n.isTry());    Preconditions.checkState(n.isTry());  n.setTree(n.isTry());	  	non-compiled	[CE]  cannot  find  symbol	5	None	add
62	[BUG]  [BUGGY]  n.removeChild(labelName,  exitType);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]  n.removeChild(labelName,  exitType);  [BUGGY]    Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	n.removeChild(labelName,  exitType);	      n.removeChild(labelName);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	21	None	replace
63	[BUG]  [BUGGY]  n.removeChild(labelName,  escapeType);  [CE]  cannot  find  symbol  escapeType  [FE]          AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]  n.removeChild(labelName,  escapeType);  [BUGGY]    Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	n.removeChild(labelName,  escapeType);	      n.removeChild(labelName);    	non-compiled	[CE]  cannot  find  symbol  escapeType	21	None	replace
64	[BUG]  [BUGGY]  n.removeChild(labelName,  null);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]  n.removeChild(labelName,  null);  [BUGGY]    Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	n.removeChild(labelName,  null);	      n.removeChild(labelName);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	21	None	replace
65	[BUG]  [BUGGY]  n.removeChild(labelName,  stopType);  [CE]  cannot  find  symbol  stopType  [FE]              AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]  n.removeChild(labelName,  stopType);  [BUGGY]    Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	n.removeChild(labelName,  stopType);	      n.removeChild(labelName);    	non-compiled	[CE]  cannot  find  symbol  stopType	21	None	replace
66	[BUG]  [BUGGY]  Node  c  =  n.getCatchNodes();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]  Node  c  =  n.getCatchNodes();  [BUGGY]    Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  c  =  n.getCatchNodes();	      Node    c    =    n.getNext();    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
67	[BUG]  [BUGGY]  Node  tryBlock  =  n.getLastChild();  Node  tryBlock  =  n.getLastChild();  [CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]  Node  tryBlock  =  n.getLastChild();  Node  tryBlock  =  n.getLastChild();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node    tryBlock    =    n.getLastChild();    Node  tryBlock  =  n.getLastChild();	  	non-compiled	[CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	10	None	add
68	[BUG]  [BUGGY]  Node  tryBlock  =  n.getLastChild();  Node  attemptBlock  =  n.getLastChild();  [CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]  Node  tryBlock  =  n.getLastChild();  Node  attemptBlock  =  n.getLastChild();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node    tryBlock    =    n.getLastChild();    Node  attemptBlock  =  n.getLastChild();	  	non-compiled	[CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	10	None	add
69	[BUG]  [BUGGY]  Node  tryBlock  =  n.getLastChild();  Node  triedBlock  =  n.getLastChild();  [CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]  Node  tryBlock  =  n.getLastChild();  Node  triedBlock  =  n.getLastChild();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node    tryBlock    =    n.getLastChild();    Node  triedBlock  =  n.getLastChild();	  	non-compiled	[CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	10	None	add
70	[BUG]  [BUGGY]  Node  tryBlock  =  n.getLastChild();  Node  startBlock  =  n.getLastChild();  [CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]  Node  tryBlock  =  n.getLastChild();  Node  startBlock  =  n.getLastChild();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node    tryBlock    =    n.getLastChild();    Node  startBlock  =  n.getLastChild();	  	non-compiled	[CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	10	None	add
71	[BUG]  [BUGGY]  Node  tryBlock  =  n.getLastChild();  Node  tryBlock  =  n.getFirstChild();  [CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]            AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]  Node  tryBlock  =  n.getLastChild();  Node  tryBlock  =  n.getFirstChild();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node    tryBlock    =    n.getLastChild();    Node  tryBlock  =  n.getFirstChild();	  	non-compiled	[CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	10	None	add
72	[BUG]  [BUGGY]  Node  tryBlock  =  n.getTry();  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]  Node  tryBlock  =  n.getTry();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.getTry();	  Node    tryBlock    =    n.getNext();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
73	[BUG]  [BUGGY]  Node  n  =  allCatchNodes.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]  Node  n  =  allCatchNodes.getFirstChild();  [BUGGY]    Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  n  =  allCatchNodes.getFirstChild();	      Node    n    =    n.getFirstChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	1	None	replace
74	[BUG]  [BUGGY]  Node  n  =  node.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]  Node  n  =  node.getFirstChild();  [BUGGY]    Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  n  =  node.getFirstChild();	      Node    n    =    n.getFirstChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	1	None	replace
75	[BUG]  [BUGGY]  Node  tryBlock  =  n.removeFirstChild();  Node  tryBlock  =  n.removeFirstChild();  [CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    RuntimeException    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]  Node  tryBlock  =  n.removeFirstChild();  Node  tryBlock  =  n.removeFirstChild();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node    tryBlock    =    n.removeFirstChild();    Node  tryBlock  =  n.removeFirstChild();	  	non-compiled	[CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	19	None	add
76	[BUG]  [BUGGY]  Node  tryBlock  =  n.removeFirstChild();  Node  attemptBlock  =  n.removeFirstChild();  [CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      RuntimeException    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]  Node  tryBlock  =  n.removeFirstChild();  Node  attemptBlock  =  n.removeFirstChild();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node    tryBlock    =    n.removeFirstChild();    Node  attemptBlock  =  n.removeFirstChild();	  	non-compiled	[CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	19	None	add
77	[BUG]  [BUGGY]  Node  tryBlock  =  n.removeFirstChild();  Node  tryBlock  =  n.removeLastChild();  [CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        RuntimeException    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]  Node  tryBlock  =  n.removeFirstChild();  Node  tryBlock  =  n.removeLastChild();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node    tryBlock    =    n.removeFirstChild();    Node  tryBlock  =  n.removeLastChild();	  	non-compiled	[CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	19	None	add
78	[BUG]  [BUGGY]  Node  tryBlock  =  n.removeFirstChild();  Node  startBlock  =  n.removeFirstChild();  [CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          RuntimeException    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]  Node  tryBlock  =  n.removeFirstChild();  Node  startBlock  =  n.removeFirstChild();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node    tryBlock    =    n.removeFirstChild();    Node  startBlock  =  n.removeFirstChild();	  	non-compiled	[CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	19	None	add
79	[BUG]  [BUGGY]  Node  tryBlock  =  n.removeFirstChild();  Node  triedBlock  =  n.removeFirstChild();  [CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]            RuntimeException    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]  Node  tryBlock  =  n.removeFirstChild();  Node  triedBlock  =  n.removeFirstChild();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node    tryBlock    =    n.removeFirstChild();    Node  triedBlock  =  n.removeFirstChild();	  	non-compiled	[CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	19	None	add
80	[BUG]  [BUGGY]  Node  n  =  ifBlock.getNext();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]  Node  n  =  ifBlock.getNext();  [BUGGY]    Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  n  =  ifBlock.getNext();	      Node    n    =    n.getNext();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	7	None	replace
81	[BUG]  [BUGGY]  Node  n  =  n.getParent();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                  AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]  Node  n  =  n.getParent();  [BUGGY]    Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  n  =  n.getParent();	      Node    n    =    n.getNext();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	7	None	replace
82	[BUG]  [BUGGY]      Preconditions.checkState(n.isTry());  AssertionFailedError  n  =  new  AssertionFailedError(labelName,  exitType);  Preconditions.checkState(n.isTry());  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]      Preconditions.checkState(n.isTry());  AssertionFailedError  n  =  new  AssertionFailedError(labelName,  exitType);  Preconditions.checkState(n.isTry());  [BUGGY]    Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	        Preconditions.checkState(n.isTry());    AssertionFailedError  n  =  new  AssertionFailedError(labelName,  exitType);  Preconditions.checkState(n.isTry());	  	non-compiled	[CE]  cannot  find  symbol	5	None	add
83	[BUG]  [BUGGY]      Preconditions.checkState(n.isTry());  AssertionFailedError  n  =  new  AssertionFailedError(labelName);  Preconditions.checkState(n.isTry());  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]      Preconditions.checkState(n.isTry());  AssertionFailedError  n  =  new  AssertionFailedError(labelName);  Preconditions.checkState(n.isTry());  [BUGGY]    Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	        Preconditions.checkState(n.isTry());    AssertionFailedError  n  =  new  AssertionFailedError(labelName);  Preconditions.checkState(n.isTry());	  	non-compiled	[CE]  cannot  find  symbol	5	None	add
84	[BUG]  [BUGGY]  Node  tryBlock  =  ifBlock.getTree();  [CE]  cannot  find  symbol  ifBlock  [FE]            AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]  Node  tryBlock  =  ifBlock.getTree();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  ifBlock.getTree();	  Node    tryBlock    =    n.getTree();    	non-compiled	[CE]  cannot  find  symbol  ifBlock	14	None	replace
85	[BUG]  [BUGGY]  Node  n  =  nodes.getLastChild();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]  Node  n  =  nodes.getLastChild();  [BUGGY]    Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  n  =  nodes.getLastChild();	      Node    n    =    n.getLastChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	2	None	replace
86	[BUG]  [BUGGY]  n.removeChild(chooser,  labelName);  [CE]  cannot  find  symbol  chooser  [FE]        AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]  n.removeChild(chooser,  labelName);  [BUGGY]    Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	n.removeChild(chooser,  labelName);	      n.removeChild(labelName);    	non-compiled	[CE]  cannot  find  symbol  chooser	21	None	replace
87	[BUG]  [BUGGY]  n.removeChild(labelName,  entryType);  [CE]  cannot  find  symbol  entryType  [FE]          AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]  n.removeChild(labelName,  entryType);  [BUGGY]    Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	n.removeChild(labelName,  entryType);	      n.removeChild(labelName);    	non-compiled	[CE]  cannot  find  symbol  entryType	21	None	replace
88	[BUG]  [BUGGY]  Node  c  =  n.getCatchBlock();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]  Node  c  =  n.getCatchBlock();  [BUGGY]    Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  c  =  n.getCatchBlock();	      Node    c    =    n.getNext();    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
89	[BUG]  [BUGGY]  Node  tryBlock  =  n.getfirstChild();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]  Node  tryBlock  =  n.getfirstChild();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.getfirstChild();	  Node    tryBlock    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
90	[BUG]  [BUGGY]  Node  elseBlock  =  ifTree.getFirstChild();  [CE]  cannot  find  symbol  ifTree  [FE]    AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]  Node  elseBlock  =  ifTree.getFirstChild();  [BUGGY]    Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  elseBlock  =  ifTree.getFirstChild();	      Node    elseBlock    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  ifTree	9	None	replace
91	[BUG]  [BUGGY]  Node  elseBlock  =  n.getParent();  [CE]  cannot  find  symbol  tryBlock  [FE]      AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]  Node  elseBlock  =  n.getParent();  [BUGGY]    Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  elseBlock  =  n.getParent();	      Node    elseBlock    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  tryBlock	9	None	replace
92	[BUG]  [BUGGY]  Node  tryBlock  =  n.getNext();  Preconditions.checkState(n.isTry());  Node  tryBlock  =  n.getNext();  [CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    RuntimeException    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]  Node  tryBlock  =  n.getNext();  Preconditions.checkState(n.isTry());  Node  tryBlock  =  n.getNext();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node    tryBlock    =    n.getNext();    Preconditions.checkState(n.isTry());  Node  tryBlock  =  n.getNext();	  	non-compiled	[CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	12	None	add
93	[BUG]  [BUGGY]  Node  tryBlock  =  n.getNext();  Preconditions.checkState(n.getNext()  ==  exitType);  Node  tryBlock  =  n.getNext();  [CE]  incomparable  types:  Node  and  int  [FE]      RuntimeException    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]  Node  tryBlock  =  n.getNext();  Preconditions.checkState(n.getNext()  ==  exitType);  Node  tryBlock  =  n.getNext();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node    tryBlock    =    n.getNext();    Preconditions.checkState(n.getNext()  ==  exitType);  Node  tryBlock  =  n.getNext();	  	non-compiled	[CE]  incomparable  types:  Node  and  int	12	None	add
94	[BUG]  [BUGGY]  Node  tryBlock  =  n.getNext();  Preconditions.checkState(n.getNext()  ==  null);  Node  tryBlock  =  n.getNext();  [CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        RuntimeException    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]  Node  tryBlock  =  n.getNext();  Preconditions.checkState(n.getNext()  ==  null);  Node  tryBlock  =  n.getNext();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node    tryBlock    =    n.getNext();    Preconditions.checkState(n.getNext()  ==  null);  Node  tryBlock  =  n.getNext();	  	non-compiled	[CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	12	None	add
95	[BUG]  [BUGGY]  Node  tryBlock  =  n.getNext();  Preconditions.checkState(n.getNext()!=  null);  Node  tryBlock  =  n.getNext();  [CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          RuntimeException    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]  Node  tryBlock  =  n.getNext();  Preconditions.checkState(n.getNext()!=  null);  Node  tryBlock  =  n.getNext();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node    tryBlock    =    n.getNext();    Preconditions.checkState(n.getNext()!=  null);  Node  tryBlock  =  n.getNext();	  	non-compiled	[CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	12	None	add
96	[BUG]  [BUGGY]  Node  tryBlock  =  n.getLastChild();  Preconditions.checkState(n.isTry());  Node  tryBlock  =  n.getLastChild();  [CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]  Node  tryBlock  =  n.getLastChild();  Preconditions.checkState(n.isTry());  Node  tryBlock  =  n.getLastChild();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node    tryBlock    =    n.getLastChild();    Preconditions.checkState(n.isTry());  Node  tryBlock  =  n.getLastChild();	  	non-compiled	[CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	10	None	add
97	[BUG]  [BUGGY]  Node  tryBlock  =  n.getLastChild();  Node  tryBlock  =  n.getLastChild();  }  else  {  tryMinimizeExits(tryBlock,  exitType,  labelName);  [CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]  Node  tryBlock  =  n.getLastChild();  Node  tryBlock  =  n.getLastChild();  }  else  {  tryMinimizeExits(tryBlock,  exitType,  labelName);  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node    tryBlock    =    n.getLastChild();    Node  tryBlock  =  n.getLastChild();  }  else  {  tryMinimizeExits(tryBlock,  exitType,  labelName);	  	non-compiled	[CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	10	None	add
98	[BUG]  [BUGGY]  Node  tryBlock  =  n.getLastChild();  Node  tryBlock  =  n.getLastChild();  Preconditions.checkState(tryBlock!=  null);  [CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]  Node  tryBlock  =  n.getLastChild();  Node  tryBlock  =  n.getLastChild();  Preconditions.checkState(tryBlock!=  null);  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node    tryBlock    =    n.getLastChild();    Node  tryBlock  =  n.getLastChild();  Preconditions.checkState(tryBlock!=  null);	  	non-compiled	[CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	10	None	add
99	[BUG]  [BUGGY]      Node  elseBlock  =  n.getFirstChild();  Preconditions.checkState(n.isTry());  Node  elseBlock  =  n.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]      Node  elseBlock  =  n.getFirstChild();  Preconditions.checkState(n.isTry());  Node  elseBlock  =  n.getFirstChild();  [BUGGY]    Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	        Node    elseBlock    =    n.getFirstChild();    Preconditions.checkState(n.isTry());  Node  elseBlock  =  n.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	8	None	add
100	[BUG]  [BUGGY]      Node  elseBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  Preconditions.checkState(n.isTry());  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]      Node  elseBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  Preconditions.checkState(n.isTry());  [BUGGY]    Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	        Node    elseBlock    =    n.getFirstChild();    Node  elseBlock  =  n.getFirstChild();  Preconditions.checkState(n.isTry());	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	8	None	add
101	[BUG]  [BUGGY]      Node  elseBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  preconditions.checkState(n.isTry());  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]      Node  elseBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  preconditions.checkState(n.isTry());  [BUGGY]    Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	        Node    elseBlock    =    n.getFirstChild();    Node  elseBlock  =  n.getFirstChild();  preconditions.checkState(n.isTry());	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	8	None	add
102	[BUG]  [BUGGY]      Node  elseBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  }  elseBlock  =  n.getFirstChild();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]      Node  elseBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  }  elseBlock  =  n.getFirstChild();  [BUGGY]    Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	        Node    elseBlock    =    n.getFirstChild();    Node  elseBlock  =  n.getFirstChild();  }  elseBlock  =  n.getFirstChild();	  	non-compiled	[CE]  illegal  start  of  type	8	None	add
103	[BUG]  [BUGGY]  Node  tryBlock  =  n.replaceChild(n,  tryMinimizeExits);  [CE]  cannot  find  symbol  tryMinimizeExits  [FE]    RuntimeException    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]  Node  tryBlock  =  n.replaceChild(n,  tryMinimizeExits);  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.replaceChild(n,  tryMinimizeExits);	  Node    tryBlock    =    n.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol  tryMinimizeExits	20	None	replace
104	[BUG]  [BUGGY]      Node  c  =  n.getFirstChild();  Node  c  =  n.getFirstChild();  preconditions.checkState(n.isTry());  [CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]      Node  c  =  n.getFirstChild();  Node  c  =  n.getFirstChild();  preconditions.checkState(n.isTry());  [BUGGY]    Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	        Node    c    =    n.getFirstChild();    Node  c  =  n.getFirstChild();  preconditions.checkState(n.isTry());	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	3	None	add
105	[BUG]  [BUGGY]  Node  tryBlock  =  n.removeFirstChild();  Preconditions.checkState(n.removeFirstChild()  ==  null);  Node  tryBlock  =  n.removeFirstChild();  [CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    RuntimeException    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]  Node  tryBlock  =  n.removeFirstChild();  Preconditions.checkState(n.removeFirstChild()  ==  null);  Node  tryBlock  =  n.removeFirstChild();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node    tryBlock    =    n.removeFirstChild();    Preconditions.checkState(n.removeFirstChild()  ==  null);  Node  tryBlock  =  n.removeFirstChild();	  	non-compiled	[CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	19	None	add
106	[BUG]  [BUGGY]  Node  tryBlock  =  n.removeFirstChild();  Preconditions.checkState(n.removeFirstChild()!=  null);  Node  tryBlock  =  n.removeFirstChild();  [CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      RuntimeException    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]  Node  tryBlock  =  n.removeFirstChild();  Preconditions.checkState(n.removeFirstChild()!=  null);  Node  tryBlock  =  n.removeFirstChild();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node    tryBlock    =    n.removeFirstChild();    Preconditions.checkState(n.removeFirstChild()!=  null);  Node  tryBlock  =  n.removeFirstChild();	  	non-compiled	[CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	19	None	add
107	[BUG]  [BUGGY]  Node  tryBlock  =  n.removeFirstChild();  Preconditions.checkState(n.removeFirstChild()!=  exitType);  Node  tryBlock  =  n.removeFirstChild();  [CE]  incomparable  types:  Node  and  int  [FE]        RuntimeException    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]  Node  tryBlock  =  n.removeFirstChild();  Preconditions.checkState(n.removeFirstChild()!=  exitType);  Node  tryBlock  =  n.removeFirstChild();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node    tryBlock    =    n.removeFirstChild();    Preconditions.checkState(n.removeFirstChild()!=  exitType);  Node  tryBlock  =  n.removeFirstChild();	  	non-compiled	[CE]  incomparable  types:  Node  and  int	19	None	add
108	[BUG]  [BUGGY]  Node  tryBlock  =  n.removeFirstChild();  Preconditions.checkState(n.removeFirstChild()  ==  exitType);  Node  tryBlock  =  n.removeFirstChild();  [CE]  incomparable  types:  Node  and  int  [FE]          RuntimeException    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]  Node  tryBlock  =  n.removeFirstChild();  Preconditions.checkState(n.removeFirstChild()  ==  exitType);  Node  tryBlock  =  n.removeFirstChild();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node    tryBlock    =    n.removeFirstChild();    Preconditions.checkState(n.removeFirstChild()  ==  exitType);  Node  tryBlock  =  n.removeFirstChild();	  	non-compiled	[CE]  incomparable  types:  Node  and  int	19	None	add
109	[BUG]  [BUGGY]      Node  c  =  n.getNext();  Preconditions.checkState(n.isTry());  Node  c  =  n.getNext();  [CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]      Node  c  =  n.getNext();  Preconditions.checkState(n.isTry());  Node  c  =  n.getNext();  [BUGGY]    Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	        Node    c    =    n.getNext();    Preconditions.checkState(n.isTry());  Node  c  =  n.getNext();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	17	None	add
110	[BUG]  [BUGGY]      Node  c  =  n.getNext();  Preconditions.checkState(n.getNext()  ==  exitType);  Node  c  =  n.getNext();  [CE]  incomparable  types:  Node  and  int  [FE]      AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]      Node  c  =  n.getNext();  Preconditions.checkState(n.getNext()  ==  exitType);  Node  c  =  n.getNext();  [BUGGY]    Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	        Node    c    =    n.getNext();    Preconditions.checkState(n.getNext()  ==  exitType);  Node  c  =  n.getNext();	  	non-compiled	[CE]  incomparable  types:  Node  and  int	17	None	add
111	[BUG]  [BUGGY]      Node  c  =  n.getNext();  Preconditions.checkState(n.getNext()!=  exitType);  Node  c  =  n.getNext();  [CE]  incomparable  types:  Node  and  int  [FE]        AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]      Node  c  =  n.getNext();  Preconditions.checkState(n.getNext()!=  exitType);  Node  c  =  n.getNext();  [BUGGY]    Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	        Node    c    =    n.getNext();    Preconditions.checkState(n.getNext()!=  exitType);  Node  c  =  n.getNext();	  	non-compiled	[CE]  incomparable  types:  Node  and  int	17	None	add
112	[BUG]  [BUGGY]      Node  c  =  n.getNext();  AssertionFailedError  c  =  n.getNext();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]      Node  c  =  n.getNext();  AssertionFailedError  c  =  n.getNext();  [BUGGY]    Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	        Node    c    =    n.getNext();    AssertionFailedError  c  =  n.getNext();	  	non-compiled	[CE]  cannot  find  symbol	17	None	add
113	[BUG]  [BUGGY]  Node  tryBlock  =  n.getParent();  Node  tryBlock  =  n.getParent();  Preconditions.checkState(tryBlock!=  null);  [CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    StackOverflowError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]  Node  tryBlock  =  n.getParent();  Node  tryBlock  =  n.getParent();  Preconditions.checkState(tryBlock!=  null);  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node    tryBlock    =    n.getParent();    Node  tryBlock  =  n.getParent();  Preconditions.checkState(tryBlock!=  null);	  	non-compiled	[CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	15	None	add
114	[BUG]  [BUGGY]  Node  tryBlock  =  n.getParent();  Node  tryBlock  =  n.getParent();  Preconditions.checkState(tryBlock  ==  null);  [CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      StackOverflowError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]  Node  tryBlock  =  n.getParent();  Node  tryBlock  =  n.getParent();  Preconditions.checkState(tryBlock  ==  null);  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node    tryBlock    =    n.getParent();    Node  tryBlock  =  n.getParent();  Preconditions.checkState(tryBlock  ==  null);	  	non-compiled	[CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	15	None	add
115	[BUG]  [BUGGY]  Node  tryBlock  =  n.getParent();  Node  tryBlock  =  n.getParent();  }  else  {  Preconditions.checkState(tryBlock!=  null);  [CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        StackOverflowError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]  Node  tryBlock  =  n.getParent();  Node  tryBlock  =  n.getParent();  }  else  {  Preconditions.checkState(tryBlock!=  null);  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node    tryBlock    =    n.getParent();    Node  tryBlock  =  n.getParent();  }  else  {  Preconditions.checkState(tryBlock!=  null);	  	non-compiled	[CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	15	None	add
116	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  tryBlock  [FE]    AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]    Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);	      Preconditions.checkState(n.isTry());    	non-compiled	[CE]  cannot  find  symbol  tryBlock	6	None	replace
117	[BUG]  [BUGGY]  Preconditions.checkState(n.isFalse());  [CE]  cannot  find  symbol  tryBlock  [FE]      AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]  Preconditions.checkState(n.isFalse());  [BUGGY]    Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Preconditions.checkState(n.isFalse());	      Preconditions.checkState(n.isTry());    	non-compiled	[CE]  cannot  find  symbol  tryBlock	6	None	replace
118	[BUG]  [BUGGY]  Node  tryBlock  =  n.replaceChild(n,  tryBlock);  [CE]  incompatible  types  [FE]    RuntimeException    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]  Node  tryBlock  =  n.replaceChild(n,  tryBlock);  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.replaceChild(n,  tryBlock);	  Node    tryBlock    =    n.removeFirstChild();    	non-compiled	[CE]  incompatible  types	20	None	replace
119	[BUG]  [BUGGY]  Preconditions.checkState(n.hasOneChild());  [CE]  cannot  find  symbol  tryBlock  [FE]    AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]  Preconditions.checkState(n.hasOneChild());  [BUGGY]    Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Preconditions.checkState(n.hasOneChild());	      Preconditions.checkState(n.isTry());    	non-compiled	[CE]  cannot  find  symbol  tryBlock	6	None	replace
120	[BUG]  [BUGGY]  Node  tryBlock  =  n.removeChild(n.getFirstChild());  [CE]  incompatible  types  [FE]    AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]  Node  tryBlock  =  n.removeChild(n.getFirstChild());  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.removeChild(n.getFirstChild());	  Node    tryBlock    =    n.getLastChild();    	non-compiled	[CE]  incompatible  types	11	None	replace
121	[BUG]  [BUGGY]  Node  tryBlock  =  n.getParent();  Node  attemptBlock  =  n.getParent();  [CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    StackOverflowError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]  Node  tryBlock  =  n.getParent();  Node  attemptBlock  =  n.getParent();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node    tryBlock    =    n.getParent();    Node  attemptBlock  =  n.getParent();	  	non-compiled	[CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	15	None	add
122	[BUG]  [BUGGY]  Node  tryBlock  =  n.getParent();  Node  tryBlock  =  no.getParent();  [CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      StackOverflowError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]  Node  tryBlock  =  n.getParent();  Node  tryBlock  =  no.getParent();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node    tryBlock    =    n.getParent();    Node  tryBlock  =  no.getParent();	  	non-compiled	[CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	15	None	add
123	[BUG]  [BUGGY]  Node  tryBlock  =  n.getParent();  Node  tryBlock  =  n.getNext();  [CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        StackOverflowError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]  Node  tryBlock  =  n.getParent();  Node  tryBlock  =  n.getNext();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node    tryBlock    =    n.getParent();    Node  tryBlock  =  n.getNext();	  	non-compiled	[CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	15	None	add
124	[BUG]  [BUGGY]  Node  tryBlock  =  n.getParent();  Node  tryBlock  =  null.getParent();  [CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          StackOverflowError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]  Node  tryBlock  =  n.getParent();  Node  tryBlock  =  null.getParent();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node    tryBlock    =    n.getParent();    Node  tryBlock  =  null.getParent();	  	non-compiled	[CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	15	None	add
125	[BUG]  [BUGGY]  Node  c  =  n.removeFirstChild();  [CE]  cannot  find  symbol  tryBlock  [FE]    AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]  Node  c  =  n.removeFirstChild();  [BUGGY]    Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  c  =  n.removeFirstChild();	      Node    c    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  tryBlock	4	None	replace
126	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]      Preconditions.checkState(n.isTry());  Preconditions.checkState(n.isTry());Preconditions.checkState(n.isTry());  [BUGGY]    Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	add	        Preconditions.checkState(n.isTry());    Preconditions.checkState(n.isTry());Preconditions.checkState(n.isTry());	  	compilable	  [FE]  AssertionFailedError  	5	2	add
127	[BUG]  [BUGGY]      Preconditions.checkState(n.isTry());  Preconditions.checkState(n.isTry());Preconditions.checkState(n.isTry());  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]      Preconditions.checkState(n.isTry());  Preconditions.checkState(n.isTry());Preconditions.checkState(n.isTry());  [BUGGY]    Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	        Preconditions.checkState(n.isTry());    Preconditions.checkState(n.isTry());Preconditions.checkState(n.isTry());	  	compilable	  [FE]  AssertionFailedError  	5	2	add
128	[BUG]  [BUGGY]      Preconditions.checkState(n.isTry());  Node  n  =  n.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]      Preconditions.checkState(n.isTry());  Node  n  =  n.getFirstChild();  [BUGGY]    Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	        Preconditions.checkState(n.isTry());    Node  n  =  n.getFirstChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	5	None	add
129	[BUG]  [BUGGY]  Node  c  =  n.getParent();  [CE]  cannot  find  symbol  tryBlock  [FE]    AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]  Node  c  =  n.getParent();  [BUGGY]    Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  c  =  n.getParent();	      Node    c    =    n.getNext();    	non-compiled	[CE]  cannot  find  symbol  tryBlock	18	None	replace
130	[BUG]  [BUGGY]      Node  elseBlock  =  n.getFirstChild();  Node  elseBlock  =  no.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]      Node  elseBlock  =  n.getFirstChild();  Node  elseBlock  =  no.getFirstChild();  [BUGGY]    Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	        Node    elseBlock    =    n.getFirstChild();    Node  elseBlock  =  no.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	8	None	add
131	[BUG]  [BUGGY]  Node  n  =  this.node.getNext();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]  Node  n  =  this.node.getNext();  [BUGGY]    Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  n  =  this.node.getNext();	      Node    n    =    n.getNext();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	7	None	replace
132	[BUG]  [BUGGY]  Node  tryBlock  =  n.getNext();  Node  tryBlock  =  n.getNext();  }  else  {  tryMinimizeExits(tryBlock,  exitType,  labelName);  [CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    RuntimeException    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]  Node  tryBlock  =  n.getNext();  Node  tryBlock  =  n.getNext();  }  else  {  tryMinimizeExits(tryBlock,  exitType,  labelName);  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node    tryBlock    =    n.getNext();    Node  tryBlock  =  n.getNext();  }  else  {  tryMinimizeExits(tryBlock,  exitType,  labelName);	  	non-compiled	[CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	12	None	add
133	[BUG]  [BUGGY]  Node  tryBlock  =  n.getNext();  Preconditions.checkState(n.isTry()  ||  n.isTry());  Node  tryBlock  =  n.getNext();  [CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      RuntimeException    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]  Node  tryBlock  =  n.getNext();  Preconditions.checkState(n.isTry()  ||  n.isTry());  Node  tryBlock  =  n.getNext();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node    tryBlock    =    n.getNext();    Preconditions.checkState(n.isTry()  ||  n.isTry());  Node  tryBlock  =  n.getNext();	  	non-compiled	[CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	12	None	add
134	[BUG]  [BUGGY]  Node  tryBlock  =  n.getNext();  Node  tryBlock  =  n.getNext();  }  else  {  tryMinimizeExits(tryBlock,  exitType,  labelName);  Preconditions.checkState(n.isTry());  [CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        RuntimeException    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]  Node  tryBlock  =  n.getNext();  Node  tryBlock  =  n.getNext();  }  else  {  tryMinimizeExits(tryBlock,  exitType,  labelName);  Preconditions.checkState(n.isTry());  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node    tryBlock    =    n.getNext();    Node  tryBlock  =  n.getNext();  }  else  {  tryMinimizeExits(tryBlock,  exitType,  labelName);  Preconditions.checkState(n.isTry());	  	non-compiled	[CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	12	None	add
135	[BUG]  [BUGGY]  Node  tryBlock  =  n.getNext();  Node  tryBlock  =  n.getNext();  }  else  {  tryMinimizeExits(tryBlock,  exitType,  labelName);  Preconditions.checkState(tryBlock!=  null);  [CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          RuntimeException    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]  Node  tryBlock  =  n.getNext();  Node  tryBlock  =  n.getNext();  }  else  {  tryMinimizeExits(tryBlock,  exitType,  labelName);  Preconditions.checkState(tryBlock!=  null);  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node    tryBlock    =    n.getNext();    Node  tryBlock  =  n.getNext();  }  else  {  tryMinimizeExits(tryBlock,  exitType,  labelName);  Preconditions.checkState(tryBlock!=  null);	  	non-compiled	[CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	12	None	add
136	[BUG]  [BUGGY]  Node  tryBlock  =  n.removeFirstChild();  Preconditions.checkState(n.isTry());  Node  tryBlock  =  n.removeFirstChild();  [CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    RuntimeException    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]  Node  tryBlock  =  n.removeFirstChild();  Preconditions.checkState(n.isTry());  Node  tryBlock  =  n.removeFirstChild();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node    tryBlock    =    n.removeFirstChild();    Preconditions.checkState(n.isTry());  Node  tryBlock  =  n.removeFirstChild();	  	non-compiled	[CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	19	None	add
137	[BUG]  [BUGGY]  Node  tryBlock  =  n.removeFirstChild();  Node  tryBlock  =  n.removeFirstChild();  }  else  {  tryMinimizeExits(tryBlock,  exitType,  labelName);  [CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      RuntimeException    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]  Node  tryBlock  =  n.removeFirstChild();  Node  tryBlock  =  n.removeFirstChild();  }  else  {  tryMinimizeExits(tryBlock,  exitType,  labelName);  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node    tryBlock    =    n.removeFirstChild();    Node  tryBlock  =  n.removeFirstChild();  }  else  {  tryMinimizeExits(tryBlock,  exitType,  labelName);	  	non-compiled	[CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	19	None	add
138	[BUG]  [BUGGY]  Node  tryBlock  =  n.removeFirstChild();  Node  tryBlock  =  no.removeFirstChild();  [CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        RuntimeException    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]  Node  tryBlock  =  n.removeFirstChild();  Node  tryBlock  =  no.removeFirstChild();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node    tryBlock    =    n.removeFirstChild();    Node  tryBlock  =  no.removeFirstChild();	  	non-compiled	[CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	19	None	add
139	[BUG]  [BUGGY]  Node  tryBlock  =  n.removeChild(n.getNext());  [CE]  incompatible  types  [FE]    StackOverflowError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]  Node  tryBlock  =  n.removeChild(n.getNext());  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  tryBlock  =  n.removeChild(n.getNext());	  Node    tryBlock    =    n.getParent();    	non-compiled	[CE]  incompatible  types	16	None	replace
140	[BUG]  [BUGGY]  Node  tryBlock  =  n.getLastChild();  Node  tryBlock  =  no.getLastChild();  [CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]  Node  tryBlock  =  n.getLastChild();  Node  tryBlock  =  no.getLastChild();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node    tryBlock    =    n.getLastChild();    Node  tryBlock  =  no.getLastChild();	  	non-compiled	[CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	10	None	add
141	[BUG]  [BUGGY]  Node  tryBlock  =  n.getLastChild();  Node  tryBlock  =  null.getLastChild();  [CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]  Node  tryBlock  =  n.getLastChild();  Node  tryBlock  =  null.getLastChild();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node    tryBlock    =    n.getLastChild();    Node  tryBlock  =  null.getLastChild();	  	non-compiled	[CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	10	None	add
142	[BUG]  [BUGGY]  Node  n  =  this.node.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]  Node  n  =  this.node.getFirstChild();  [BUGGY]    Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  n  =  this.node.getFirstChild();	      Node    n    =    n.getFirstChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	1	None	replace
143	[BUG]  [BUGGY]  Node  n  =  this.node.getLastChild();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]  Node  n  =  this.node.getLastChild();  [BUGGY]    Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  n  =  this.node.getLastChild();	      Node    n    =    n.getLastChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	2	None	replace
144	[BUG]  [BUGGY]      Node  c  =  n.getNext();  Node  c  =  n.getNext();  Preconditions.checkState(NodeUtil.hasCatchHandler(c));  [CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]      Node  c  =  n.getNext();  Node  c  =  n.getNext();  Preconditions.checkState(NodeUtil.hasCatchHandler(c));  [BUGGY]    Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	        Node    c    =    n.getNext();    Node  c  =  n.getNext();  Preconditions.checkState(NodeUtil.hasCatchHandler(c));	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	17	None	add
145	[BUG]  [BUGGY]      Node  c  =  n.getNext();  Node  c  =  n.getNext();  Preconditions.checkState(NodeUtil.isCatchHandler(n));  [CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]      Node  c  =  n.getNext();  Node  c  =  n.getNext();  Preconditions.checkState(NodeUtil.isCatchHandler(n));  [BUGGY]    Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	        Node    c    =    n.getNext();    Node  c  =  n.getNext();  Preconditions.checkState(NodeUtil.isCatchHandler(n));	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	17	None	add
146	[BUG]  [BUGGY]      Node  c  =  n.getNext();  Node  c  =  n.getNext();  Preconditions.checkState(NodeUtil.isTreeBlock(n));  [CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]      Node  c  =  n.getNext();  Node  c  =  n.getNext();  Preconditions.checkState(NodeUtil.isTreeBlock(n));  [BUGGY]    Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	        Node    c    =    n.getNext();    Node  c  =  n.getNext();  Preconditions.checkState(NodeUtil.isTreeBlock(n));	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	17	None	add
147	[BUG]  [BUGGY]      Node  c  =  n.getNext();  Node  c  =  n.getNext();  Preconditions.checkState(NodeUtil.isTree(n));  [CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]      Node  c  =  n.getNext();  Node  c  =  n.getNext();  Preconditions.checkState(NodeUtil.isTree(n));  [BUGGY]    Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	        Node    c    =    n.getNext();    Node  c  =  n.getNext();  Preconditions.checkState(NodeUtil.isTree(n));	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	17	None	add
148	[BUG]  [BUGGY]  Node  elseBlock  =  n.removeFirstChild();  [CE]  cannot  find  symbol  tryBlock  [FE]    AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]  Node  elseBlock  =  n.removeFirstChild();  [BUGGY]    Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	Node  elseBlock  =  n.removeFirstChild();	      Node    elseBlock    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  tryBlock	9	None	replace
149	[BUG]  [BUGGY]      Node  c  =  n.getFirstChild();  Node  c  =  no.getFirstChild();  [CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]      Node  c  =  n.getFirstChild();  Node  c  =  no.getFirstChild();  [BUGGY]    Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	        Node    c    =    n.getFirstChild();    Node  c  =  no.getFirstChild();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	3	None	add
150	[BUG]  [BUGGY]      Node  c  =  n.getFirstChild();  Node  c  =  null.getFirstChild();  [CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      AssertionFailedError    [CONTEXT]    tryMinimizeExits(ifBlock,  exitType,  labelName);  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {    [BUGGY]      Node  c  =  n.getFirstChild();  Node  c  =  null.getFirstChild();  [BUGGY]    Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	        Node    c    =    n.getFirstChild();    Node  c  =  null.getFirstChild();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	3	None	add
