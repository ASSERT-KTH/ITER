bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] Node finallyBlock = n.getLastChild(); [FE] AssertionFailedError [CONTEXT] Preconditions.checkState(allCatchNodes.hasOneChild()); Node catchNode = allCatchNodes.getFirstChild(); Node catchCodeBlock = catchNode.getLastChild(); tryMinimizeExits(catchCodeBlock, exitType, labelName); }     if (NodeUtil.hasFinally(n)) { [BUGGY] Node finallyBlock = n.getLastChild(); [BUGGY] tryMinimizeExits(finallyBlock, exitType, labelName); } }  if (n.isLabel()) { Node labelBlock = n.getLastChild(); tryMinimizeExits(labelBlock, exitType, labelName); }  [CLASS] MinimizeExitPoints [METHOD] tryMinimizeExits [RETURN_TYPE] void  Node n int exitType String labelName [VARIABLES] AbstractCompiler compiler String labelName boolean int exitType Node allCatchNodes c catchCodeBlock catchNode elseBlock falseBlock finallyBlock ifBlock ifTree labelBlock n trueBlock tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	
2	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] Preconditions.checkState(allCatchNodes.hasOneChild()); Node catchNode = allCatchNodes.getFirstChild(); Node catchCodeBlock = catchNode.getLastChild(); tryMinimizeExits(catchCodeBlock, exitType, labelName); }     if (NodeUtil.hasFinally(n)) { [BUGGY] [BUGGY] Node finallyBlock = n.getLastChild(); tryMinimizeExits(finallyBlock, exitType, labelName); } }  if (n.isLabel()) { Node labelBlock = n.getLastChild(); tryMinimizeExits(labelBlock, exitType, labelName); }  [CLASS] MinimizeExitPoints [METHOD] tryMinimizeExits [RETURN_TYPE] void  Node n int exitType String labelName [VARIABLES] AbstractCompiler compiler String labelName boolean int exitType Node allCatchNodes c catchCodeBlock catchNode elseBlock falseBlock finallyBlock ifBlock ifTree labelBlock n trueBlock tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	add	
3	[BUG] [BUGGY] tryMinimizeExits(finallyBlock, exitType, labelName); [FE] AssertionFailedError [CONTEXT] Node catchNode = allCatchNodes.getFirstChild(); Node catchCodeBlock = catchNode.getLastChild(); tryMinimizeExits(catchCodeBlock, exitType, labelName); }     if (NodeUtil.hasFinally(n)) { Node finallyBlock = n.getLastChild(); [BUGGY] tryMinimizeExits(finallyBlock, exitType, labelName); [BUGGY] } }  if (n.isLabel()) { Node labelBlock = n.getLastChild(); tryMinimizeExits(labelBlock, exitType, labelName); }   [CLASS] MinimizeExitPoints [METHOD] tryMinimizeExits [RETURN_TYPE] void  Node n int exitType String labelName [VARIABLES] AbstractCompiler compiler String labelName boolean int exitType Node allCatchNodes c catchCodeBlock catchNode elseBlock falseBlock finallyBlock ifBlock ifTree labelBlock n trueBlock tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	replace	
4	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] Node catchNode = allCatchNodes.getFirstChild(); Node catchCodeBlock = catchNode.getLastChild(); tryMinimizeExits(catchCodeBlock, exitType, labelName); }     if (NodeUtil.hasFinally(n)) { Node finallyBlock = n.getLastChild(); [BUGGY] [BUGGY] tryMinimizeExits(finallyBlock, exitType, labelName); } }  if (n.isLabel()) { Node labelBlock = n.getLastChild(); tryMinimizeExits(labelBlock, exitType, labelName); }   [CLASS] MinimizeExitPoints [METHOD] tryMinimizeExits [RETURN_TYPE] void  Node n int exitType String labelName [VARIABLES] AbstractCompiler compiler String labelName boolean int exitType Node allCatchNodes c catchCodeBlock catchNode elseBlock falseBlock finallyBlock ifBlock ifTree labelBlock n trueBlock tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	143	143	2	add	
5	[BUG] [BUGGY] tryMinimizeExits(n.getLastChild(), Token.RETURN, null); [FE] AssertionFailedError [CONTEXT] Node cond = NodeUtil.getConditionExpression(n); if (NodeUtil.getImpureBooleanValue(cond) == TernaryValue.FALSE) {    tryMinimizeExits(n.getFirstChild(), Token.BREAK, null); } break; case Token.FUNCTION: [BUGGY] tryMinimizeExits(n.getLastChild(), Token.RETURN, null); [BUGGY] break; } } [CLASS] MinimizeExitPoints [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler compiler boolean NodeTraversal t Node cond n parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	replace	
6	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] Node cond = NodeUtil.getConditionExpression(n); if (NodeUtil.getImpureBooleanValue(cond) == TernaryValue.FALSE) {    tryMinimizeExits(n.getFirstChild(), Token.BREAK, null); } break; case Token.FUNCTION: [BUGGY] [BUGGY] tryMinimizeExits(n.getLastChild(), Token.RETURN, null); break; } } [CLASS] MinimizeExitPoints [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler compiler boolean NodeTraversal t Node cond n parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	73	73	2	add	
7	[BUG] [BUGGY] return !n.hasChildren(); [FE] AssertionFailedError [CONTEXT] private static boolean matchingExitNode(Node n, int type, String labelName) { if (n.getType() == type) { if (type == Token.RETURN) {  [BUGGY] return !n.hasChildren(); [BUGGY] } else { if (labelName == null) { return !n.hasChildren(); } else { return n.hasChildren() && labelName.equals(n.getFirstChild().getString()); } } } return false; [CLASS] MinimizeExitPoints [METHOD] matchingExitNode [RETURN_TYPE] boolean  Node n int type String labelName [VARIABLES] AbstractCompiler compiler String labelName boolean int type Node n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	
8	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private static boolean matchingExitNode(Node n, int type, String labelName) { if (n.getType() == type) { if (type == Token.RETURN) {  [BUGGY] [BUGGY] return !n.hasChildren(); } else { if (labelName == null) { return !n.hasChildren(); } else { return n.hasChildren() && labelName.equals(n.getFirstChild().getString()); } } } return false; [CLASS] MinimizeExitPoints [METHOD] matchingExitNode [RETURN_TYPE] boolean  Node n int type String labelName [VARIABLES] AbstractCompiler compiler String labelName boolean int type Node n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	
9	[BUG] [BUGGY] Node tryBlock = n.getFirstChild(); [FE] AssertionFailedError [CONTEXT] tryMinimizeExits(ifBlock, exitType, labelName); Node elseBlock = ifBlock.getNext(); if (elseBlock != null) { tryMinimizeExits(elseBlock, exitType, labelName); } return; }  if (n.isTry()) { [BUGGY] Node tryBlock = n.getFirstChild(); [BUGGY] tryMinimizeExits(tryBlock, exitType, labelName); Node allCatchNodes = NodeUtil.getCatchBlock(n); if (NodeUtil.hasCatchHandler(allCatchNodes)) { Preconditions.checkState(allCatchNodes.hasOneChild()); Node catchNode = allCatchNodes.getFirstChild(); Node catchCodeBlock = catchNode.getLastChild(); tryMinimizeExits(catchCodeBlock, exitType, labelName); }   [CLASS] MinimizeExitPoints [METHOD] tryMinimizeExits [RETURN_TYPE] void  Node n int exitType String labelName [VARIABLES] AbstractCompiler compiler String labelName boolean int exitType Node allCatchNodes c catchCodeBlock catchNode elseBlock falseBlock finallyBlock ifBlock ifTree labelBlock n trueBlock tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	replace	
10	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] tryMinimizeExits(ifBlock, exitType, labelName); Node elseBlock = ifBlock.getNext(); if (elseBlock != null) { tryMinimizeExits(elseBlock, exitType, labelName); } return; }  if (n.isTry()) { [BUGGY] [BUGGY] Node tryBlock = n.getFirstChild(); tryMinimizeExits(tryBlock, exitType, labelName); Node allCatchNodes = NodeUtil.getCatchBlock(n); if (NodeUtil.hasCatchHandler(allCatchNodes)) { Preconditions.checkState(allCatchNodes.hasOneChild()); Node catchNode = allCatchNodes.getFirstChild(); Node catchCodeBlock = catchNode.getLastChild(); tryMinimizeExits(catchCodeBlock, exitType, labelName); }   [CLASS] MinimizeExitPoints [METHOD] tryMinimizeExits [RETURN_TYPE] void  Node n int exitType String labelName [VARIABLES] AbstractCompiler compiler String labelName boolean int exitType Node allCatchNodes c catchCodeBlock catchNode elseBlock falseBlock finallyBlock ifBlock ifTree labelBlock n trueBlock tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	128	128	2	add	
11	[BUG] [BUGGY] tryMinimizeExits(tryBlock, exitType, labelName); [FE] AssertionFailedError [CONTEXT] Node elseBlock = ifBlock.getNext(); if (elseBlock != null) { tryMinimizeExits(elseBlock, exitType, labelName); } return; }  if (n.isTry()) { Node tryBlock = n.getFirstChild(); [BUGGY] tryMinimizeExits(tryBlock, exitType, labelName); [BUGGY] Node allCatchNodes = NodeUtil.getCatchBlock(n); if (NodeUtil.hasCatchHandler(allCatchNodes)) { Preconditions.checkState(allCatchNodes.hasOneChild()); Node catchNode = allCatchNodes.getFirstChild(); Node catchCodeBlock = catchNode.getLastChild(); tryMinimizeExits(catchCodeBlock, exitType, labelName); }    [CLASS] MinimizeExitPoints [METHOD] tryMinimizeExits [RETURN_TYPE] void  Node n int exitType String labelName [VARIABLES] AbstractCompiler compiler String labelName boolean int exitType Node allCatchNodes c catchCodeBlock catchNode elseBlock falseBlock finallyBlock ifBlock ifTree labelBlock n trueBlock tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	
12	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] Node elseBlock = ifBlock.getNext(); if (elseBlock != null) { tryMinimizeExits(elseBlock, exitType, labelName); } return; }  if (n.isTry()) { Node tryBlock = n.getFirstChild(); [BUGGY] [BUGGY] tryMinimizeExits(tryBlock, exitType, labelName); Node allCatchNodes = NodeUtil.getCatchBlock(n); if (NodeUtil.hasCatchHandler(allCatchNodes)) { Preconditions.checkState(allCatchNodes.hasOneChild()); Node catchNode = allCatchNodes.getFirstChild(); Node catchCodeBlock = catchNode.getLastChild(); tryMinimizeExits(catchCodeBlock, exitType, labelName); }    [CLASS] MinimizeExitPoints [METHOD] tryMinimizeExits [RETURN_TYPE] void  Node n int exitType String labelName [VARIABLES] AbstractCompiler compiler String labelName boolean int exitType Node allCatchNodes c catchCodeBlock catchNode elseBlock falseBlock finallyBlock ifBlock ifTree labelBlock n trueBlock tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	add	
13	[BUG] [BUGGY] Node allCatchNodes = NodeUtil.getCatchBlock(n); [FE] AssertionFailedError [CONTEXT] if (elseBlock != null) { tryMinimizeExits(elseBlock, exitType, labelName); } return; }  if (n.isTry()) { Node tryBlock = n.getFirstChild(); tryMinimizeExits(tryBlock, exitType, labelName); [BUGGY] Node allCatchNodes = NodeUtil.getCatchBlock(n); [BUGGY] if (NodeUtil.hasCatchHandler(allCatchNodes)) { Preconditions.checkState(allCatchNodes.hasOneChild()); Node catchNode = allCatchNodes.getFirstChild(); Node catchCodeBlock = catchNode.getLastChild(); tryMinimizeExits(catchCodeBlock, exitType, labelName); }     [CLASS] MinimizeExitPoints [METHOD] tryMinimizeExits [RETURN_TYPE] void  Node n int exitType String labelName [VARIABLES] AbstractCompiler compiler String labelName boolean int exitType Node allCatchNodes c catchCodeBlock catchNode elseBlock falseBlock finallyBlock ifBlock ifTree labelBlock n trueBlock tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	replace	
14	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (elseBlock != null) { tryMinimizeExits(elseBlock, exitType, labelName); } return; }  if (n.isTry()) { Node tryBlock = n.getFirstChild(); tryMinimizeExits(tryBlock, exitType, labelName); [BUGGY] [BUGGY] Node allCatchNodes = NodeUtil.getCatchBlock(n); if (NodeUtil.hasCatchHandler(allCatchNodes)) { Preconditions.checkState(allCatchNodes.hasOneChild()); Node catchNode = allCatchNodes.getFirstChild(); Node catchCodeBlock = catchNode.getLastChild(); tryMinimizeExits(catchCodeBlock, exitType, labelName); }     [CLASS] MinimizeExitPoints [METHOD] tryMinimizeExits [RETURN_TYPE] void  Node n int exitType String labelName [VARIABLES] AbstractCompiler compiler String labelName boolean int exitType Node allCatchNodes c catchCodeBlock catchNode elseBlock falseBlock finallyBlock ifBlock ifTree labelBlock n trueBlock tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	130	130	2	add	
15	[BUG] [BUGGY] if (NodeUtil.hasCatchHandler(allCatchNodes)) { [FE] AssertionFailedError [CONTEXT] tryMinimizeExits(elseBlock, exitType, labelName); } return; }  if (n.isTry()) { Node tryBlock = n.getFirstChild(); tryMinimizeExits(tryBlock, exitType, labelName); Node allCatchNodes = NodeUtil.getCatchBlock(n); [BUGGY] if (NodeUtil.hasCatchHandler(allCatchNodes)) { [BUGGY] Preconditions.checkState(allCatchNodes.hasOneChild()); Node catchNode = allCatchNodes.getFirstChild(); Node catchCodeBlock = catchNode.getLastChild(); tryMinimizeExits(catchCodeBlock, exitType, labelName); }     if (NodeUtil.hasFinally(n)) { [CLASS] MinimizeExitPoints [METHOD] tryMinimizeExits [RETURN_TYPE] void  Node n int exitType String labelName [VARIABLES] AbstractCompiler compiler String labelName boolean int exitType Node allCatchNodes c catchCodeBlock catchNode elseBlock falseBlock finallyBlock ifBlock ifTree labelBlock n trueBlock tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	
16	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] tryMinimizeExits(elseBlock, exitType, labelName); } return; }  if (n.isTry()) { Node tryBlock = n.getFirstChild(); tryMinimizeExits(tryBlock, exitType, labelName); Node allCatchNodes = NodeUtil.getCatchBlock(n); [BUGGY] [BUGGY] if (NodeUtil.hasCatchHandler(allCatchNodes)) { Preconditions.checkState(allCatchNodes.hasOneChild()); Node catchNode = allCatchNodes.getFirstChild(); Node catchCodeBlock = catchNode.getLastChild(); tryMinimizeExits(catchCodeBlock, exitType, labelName); }     if (NodeUtil.hasFinally(n)) { [CLASS] MinimizeExitPoints [METHOD] tryMinimizeExits [RETURN_TYPE] void  Node n int exitType String labelName [VARIABLES] AbstractCompiler compiler String labelName boolean int exitType Node allCatchNodes c catchCodeBlock catchNode elseBlock falseBlock finallyBlock ifBlock ifTree labelBlock n trueBlock tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	
17	[BUG] [BUGGY] if (NodeUtil.hasFinally(n)) { [FE] AssertionFailedError [CONTEXT] if (NodeUtil.hasCatchHandler(allCatchNodes)) { Preconditions.checkState(allCatchNodes.hasOneChild()); Node catchNode = allCatchNodes.getFirstChild(); Node catchCodeBlock = catchNode.getLastChild(); tryMinimizeExits(catchCodeBlock, exitType, labelName); }     [BUGGY] if (NodeUtil.hasFinally(n)) { [BUGGY] Node finallyBlock = n.getLastChild(); tryMinimizeExits(finallyBlock, exitType, labelName); } }  if (n.isLabel()) { Node labelBlock = n.getLastChild(); tryMinimizeExits(labelBlock, exitType, labelName); } [CLASS] MinimizeExitPoints [METHOD] tryMinimizeExits [RETURN_TYPE] void  Node n int exitType String labelName [VARIABLES] AbstractCompiler compiler String labelName boolean int exitType Node allCatchNodes c catchCodeBlock catchNode elseBlock falseBlock finallyBlock ifBlock ifTree labelBlock n trueBlock tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	replace	
18	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (NodeUtil.hasCatchHandler(allCatchNodes)) { Preconditions.checkState(allCatchNodes.hasOneChild()); Node catchNode = allCatchNodes.getFirstChild(); Node catchCodeBlock = catchNode.getLastChild(); tryMinimizeExits(catchCodeBlock, exitType, labelName); }     [BUGGY] [BUGGY] if (NodeUtil.hasFinally(n)) { Node finallyBlock = n.getLastChild(); tryMinimizeExits(finallyBlock, exitType, labelName); } }  if (n.isLabel()) { Node labelBlock = n.getLastChild(); tryMinimizeExits(labelBlock, exitType, labelName); } [CLASS] MinimizeExitPoints [METHOD] tryMinimizeExits [RETURN_TYPE] void  Node n int exitType String labelName [VARIABLES] AbstractCompiler compiler String labelName boolean int exitType Node allCatchNodes c catchCodeBlock catchNode elseBlock falseBlock finallyBlock ifBlock ifTree labelBlock n trueBlock tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	141	141	2	add	
19	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] AbstractCompiler compiler; [CLASS] MinimizeExitPoints  [VARIABLES] 	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5345224838248488	38	38	2	replace	
20	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] AbstractCompiler compiler; [CLASS] MinimizeExitPoints  [VARIABLES] 	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5345224838248488	38	38	2	add	
21	[BUG] [BUGGY] this.compiler = compiler; [FE] AssertionFailedError [CONTEXT] MinimizeExitPoints(AbstractCompiler compiler) { [BUGGY] this.compiler = compiler; [BUGGY] } [CLASS] MinimizeExitPoints [METHOD] <init> [RETURN_TYPE] AbstractCompiler)  AbstractCompiler compiler [VARIABLES] AbstractCompiler compiler boolean  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5345224838248488	39	39	2	replace	
22	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] MinimizeExitPoints(AbstractCompiler compiler) { [BUGGY] [BUGGY] this.compiler = compiler; } [CLASS] MinimizeExitPoints [METHOD] <init> [RETURN_TYPE] AbstractCompiler)  AbstractCompiler compiler [VARIABLES] AbstractCompiler compiler boolean  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5345224838248488	39	39	2	add	
23	[BUG] [BUGGY] } [FE] AssertionFailedError [CONTEXT] MinimizeExitPoints(AbstractCompiler compiler) { this.compiler = compiler; [BUGGY] } [BUGGY]  [CLASS] MinimizeExitPoints [METHOD] <init> [RETURN_TYPE] AbstractCompiler)  AbstractCompiler compiler [VARIABLES] AbstractCompiler compiler boolean  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5345224838248488	40	40	2	replace	
24	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] MinimizeExitPoints(AbstractCompiler compiler) { this.compiler = compiler; [BUGGY] [BUGGY] } [CLASS] MinimizeExitPoints [METHOD] <init> [RETURN_TYPE] AbstractCompiler)  AbstractCompiler compiler [VARIABLES] AbstractCompiler compiler boolean  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5345224838248488	40	40	2	add	
25	[BUG] [BUGGY] switch (n.getType()) { [FE] AssertionFailedError [CONTEXT] public void visit(NodeTraversal t, Node n, Node parent) { [BUGGY] switch (n.getType()) { [BUGGY] case Token.LABEL: tryMinimizeExits( n.getLastChild(), Token.BREAK, n.getFirstChild().getString()); break; case Token.FOR: case Token.WHILE: tryMinimizeExits(NodeUtil.getLoopCodeBlock(n), Token.CONTINUE, null); break;  [CLASS] MinimizeExitPoints [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler compiler boolean NodeTraversal t Node cond n parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5345224838248488	49	49	2	replace	
26	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public void visit(NodeTraversal t, Node n, Node parent) { [BUGGY] [BUGGY] switch (n.getType()) { case Token.LABEL: tryMinimizeExits( n.getLastChild(), Token.BREAK, n.getFirstChild().getString()); break; case Token.FOR: case Token.WHILE: tryMinimizeExits(NodeUtil.getLoopCodeBlock(n), Token.CONTINUE, null); break;  [CLASS] MinimizeExitPoints [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler compiler boolean NodeTraversal t Node cond n parent  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5345224838248488	49	49	2	add	
28	[BUG] [BUGGY] if (matchingExitNode(n, exitType, labelName)) { [FE] AssertionFailedError [CONTEXT] void tryMinimizeExits(Node n, int exitType, String labelName) {  [BUGGY] if (matchingExitNode(n, exitType, labelName)) { [BUGGY] NodeUtil.removeChild(n.getParent(), n); compiler.reportCodeChange(); return; }  if (n.isIf()) { Node ifBlock = n.getFirstChild().getNext(); tryMinimizeExits(ifBlock, exitType, labelName); Node elseBlock = ifBlock.getNext(); [CLASS] MinimizeExitPoints [METHOD] tryMinimizeExits [RETURN_TYPE] void  Node n int exitType String labelName [VARIABLES] AbstractCompiler compiler String labelName boolean int exitType Node allCatchNodes c catchCodeBlock catchNode elseBlock falseBlock finallyBlock ifBlock ifTree labelBlock n trueBlock tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5345224838248488	109	109	2	replace	
29	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] void tryMinimizeExits(Node n, int exitType, String labelName) {  [BUGGY] [BUGGY] if (matchingExitNode(n, exitType, labelName)) { NodeUtil.removeChild(n.getParent(), n); compiler.reportCodeChange(); return; }  if (n.isIf()) { Node ifBlock = n.getFirstChild().getNext(); tryMinimizeExits(ifBlock, exitType, labelName); Node elseBlock = ifBlock.getNext(); [CLASS] MinimizeExitPoints [METHOD] tryMinimizeExits [RETURN_TYPE] void  Node n int exitType String labelName [VARIABLES] AbstractCompiler compiler String labelName boolean int exitType Node allCatchNodes c catchCodeBlock catchNode elseBlock falseBlock finallyBlock ifBlock ifTree labelBlock n trueBlock tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5345224838248488	109	109	2	add	
30	[BUG] [BUGGY] NodeUtil.removeChild(n.getParent(), n); [FE] AssertionFailedError [CONTEXT] void tryMinimizeExits(Node n, int exitType, String labelName) {  if (matchingExitNode(n, exitType, labelName)) { [BUGGY] NodeUtil.removeChild(n.getParent(), n); [BUGGY] compiler.reportCodeChange(); return; }  if (n.isIf()) { Node ifBlock = n.getFirstChild().getNext(); tryMinimizeExits(ifBlock, exitType, labelName); Node elseBlock = ifBlock.getNext(); if (elseBlock != null) { [CLASS] MinimizeExitPoints [METHOD] tryMinimizeExits [RETURN_TYPE] void  Node n int exitType String labelName [VARIABLES] AbstractCompiler compiler String labelName boolean int exitType Node allCatchNodes c catchCodeBlock catchNode elseBlock falseBlock finallyBlock ifBlock ifTree labelBlock n trueBlock tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5345224838248488	110	110	2	replace	
31	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] void tryMinimizeExits(Node n, int exitType, String labelName) {  if (matchingExitNode(n, exitType, labelName)) { [BUGGY] [BUGGY] NodeUtil.removeChild(n.getParent(), n); compiler.reportCodeChange(); return; }  if (n.isIf()) { Node ifBlock = n.getFirstChild().getNext(); tryMinimizeExits(ifBlock, exitType, labelName); Node elseBlock = ifBlock.getNext(); if (elseBlock != null) { [CLASS] MinimizeExitPoints [METHOD] tryMinimizeExits [RETURN_TYPE] void  Node n int exitType String labelName [VARIABLES] AbstractCompiler compiler String labelName boolean int exitType Node allCatchNodes c catchCodeBlock catchNode elseBlock falseBlock finallyBlock ifBlock ifTree labelBlock n trueBlock tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5345224838248488	110	110	2	add	
32	[BUG] [BUGGY] compiler.reportCodeChange(); [FE] AssertionFailedError [CONTEXT] void tryMinimizeExits(Node n, int exitType, String labelName) {  if (matchingExitNode(n, exitType, labelName)) { NodeUtil.removeChild(n.getParent(), n); [BUGGY] compiler.reportCodeChange(); [BUGGY] return; }  if (n.isIf()) { Node ifBlock = n.getFirstChild().getNext(); tryMinimizeExits(ifBlock, exitType, labelName); Node elseBlock = ifBlock.getNext(); if (elseBlock != null) { tryMinimizeExits(elseBlock, exitType, labelName); [CLASS] MinimizeExitPoints [METHOD] tryMinimizeExits [RETURN_TYPE] void  Node n int exitType String labelName [VARIABLES] AbstractCompiler compiler String labelName boolean int exitType Node allCatchNodes c catchCodeBlock catchNode elseBlock falseBlock finallyBlock ifBlock ifTree labelBlock n trueBlock tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5345224838248488	111	111	2	replace	
33	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] void tryMinimizeExits(Node n, int exitType, String labelName) {  if (matchingExitNode(n, exitType, labelName)) { NodeUtil.removeChild(n.getParent(), n); [BUGGY] [BUGGY] compiler.reportCodeChange(); return; }  if (n.isIf()) { Node ifBlock = n.getFirstChild().getNext(); tryMinimizeExits(ifBlock, exitType, labelName); Node elseBlock = ifBlock.getNext(); if (elseBlock != null) { tryMinimizeExits(elseBlock, exitType, labelName); [CLASS] MinimizeExitPoints [METHOD] tryMinimizeExits [RETURN_TYPE] void  Node n int exitType String labelName [VARIABLES] AbstractCompiler compiler String labelName boolean int exitType Node allCatchNodes c catchCodeBlock catchNode elseBlock falseBlock finallyBlock ifBlock ifTree labelBlock n trueBlock tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5345224838248488	111	111	2	add	
34	[BUG] [BUGGY] return; [FE] AssertionFailedError [CONTEXT] void tryMinimizeExits(Node n, int exitType, String labelName) {  if (matchingExitNode(n, exitType, labelName)) { NodeUtil.removeChild(n.getParent(), n); compiler.reportCodeChange(); [BUGGY] return; [BUGGY] }  if (n.isIf()) { Node ifBlock = n.getFirstChild().getNext(); tryMinimizeExits(ifBlock, exitType, labelName); Node elseBlock = ifBlock.getNext(); if (elseBlock != null) { tryMinimizeExits(elseBlock, exitType, labelName); } [CLASS] MinimizeExitPoints [METHOD] tryMinimizeExits [RETURN_TYPE] void  Node n int exitType String labelName [VARIABLES] AbstractCompiler compiler String labelName boolean int exitType Node allCatchNodes c catchCodeBlock catchNode elseBlock falseBlock finallyBlock ifBlock ifTree labelBlock n trueBlock tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5345224838248488	112	112	2	replace	
35	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] void tryMinimizeExits(Node n, int exitType, String labelName) {  if (matchingExitNode(n, exitType, labelName)) { NodeUtil.removeChild(n.getParent(), n); compiler.reportCodeChange(); [BUGGY] [BUGGY] return; }  if (n.isIf()) { Node ifBlock = n.getFirstChild().getNext(); tryMinimizeExits(ifBlock, exitType, labelName); Node elseBlock = ifBlock.getNext(); if (elseBlock != null) { tryMinimizeExits(elseBlock, exitType, labelName); } [CLASS] MinimizeExitPoints [METHOD] tryMinimizeExits [RETURN_TYPE] void  Node n int exitType String labelName [VARIABLES] AbstractCompiler compiler String labelName boolean int exitType Node allCatchNodes c catchCodeBlock catchNode elseBlock falseBlock finallyBlock ifBlock ifTree labelBlock n trueBlock tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5345224838248488	112	112	2	add	
36	[BUG] [BUGGY] if (n.isIf()) { [FE] AssertionFailedError [CONTEXT] void tryMinimizeExits(Node n, int exitType, String labelName) {  if (matchingExitNode(n, exitType, labelName)) { NodeUtil.removeChild(n.getParent(), n); compiler.reportCodeChange(); return; }  [BUGGY] if (n.isIf()) { [BUGGY] Node ifBlock = n.getFirstChild().getNext(); tryMinimizeExits(ifBlock, exitType, labelName); Node elseBlock = ifBlock.getNext(); if (elseBlock != null) { tryMinimizeExits(elseBlock, exitType, labelName); } return; }   [CLASS] MinimizeExitPoints [METHOD] tryMinimizeExits [RETURN_TYPE] void  Node n int exitType String labelName [VARIABLES] AbstractCompiler compiler String labelName boolean int exitType Node allCatchNodes c catchCodeBlock catchNode elseBlock falseBlock finallyBlock ifBlock ifTree labelBlock n trueBlock tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5345224838248488	116	116	2	replace	
37	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] void tryMinimizeExits(Node n, int exitType, String labelName) {  if (matchingExitNode(n, exitType, labelName)) { NodeUtil.removeChild(n.getParent(), n); compiler.reportCodeChange(); return; }  [BUGGY] [BUGGY] if (n.isIf()) { Node ifBlock = n.getFirstChild().getNext(); tryMinimizeExits(ifBlock, exitType, labelName); Node elseBlock = ifBlock.getNext(); if (elseBlock != null) { tryMinimizeExits(elseBlock, exitType, labelName); } return; }   [CLASS] MinimizeExitPoints [METHOD] tryMinimizeExits [RETURN_TYPE] void  Node n int exitType String labelName [VARIABLES] AbstractCompiler compiler String labelName boolean int exitType Node allCatchNodes c catchCodeBlock catchNode elseBlock falseBlock finallyBlock ifBlock ifTree labelBlock n trueBlock tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5345224838248488	116	116	2	add	
38	[BUG] [BUGGY] if (n.isTry()) { [FE] AssertionFailedError [CONTEXT] Node ifBlock = n.getFirstChild().getNext(); tryMinimizeExits(ifBlock, exitType, labelName); Node elseBlock = ifBlock.getNext(); if (elseBlock != null) { tryMinimizeExits(elseBlock, exitType, labelName); } return; }  [BUGGY] if (n.isTry()) { [BUGGY] Node tryBlock = n.getFirstChild(); tryMinimizeExits(tryBlock, exitType, labelName); Node allCatchNodes = NodeUtil.getCatchBlock(n); if (NodeUtil.hasCatchHandler(allCatchNodes)) { Preconditions.checkState(allCatchNodes.hasOneChild()); Node catchNode = allCatchNodes.getFirstChild(); Node catchCodeBlock = catchNode.getLastChild(); tryMinimizeExits(catchCodeBlock, exitType, labelName); }  [CLASS] MinimizeExitPoints [METHOD] tryMinimizeExits [RETURN_TYPE] void  Node n int exitType String labelName [VARIABLES] AbstractCompiler compiler String labelName boolean int exitType Node allCatchNodes c catchCodeBlock catchNode elseBlock falseBlock finallyBlock ifBlock ifTree labelBlock n trueBlock tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5345224838248488	127	127	2	replace	
39	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] Node ifBlock = n.getFirstChild().getNext(); tryMinimizeExits(ifBlock, exitType, labelName); Node elseBlock = ifBlock.getNext(); if (elseBlock != null) { tryMinimizeExits(elseBlock, exitType, labelName); } return; }  [BUGGY] [BUGGY] if (n.isTry()) { Node tryBlock = n.getFirstChild(); tryMinimizeExits(tryBlock, exitType, labelName); Node allCatchNodes = NodeUtil.getCatchBlock(n); if (NodeUtil.hasCatchHandler(allCatchNodes)) { Preconditions.checkState(allCatchNodes.hasOneChild()); Node catchNode = allCatchNodes.getFirstChild(); Node catchCodeBlock = catchNode.getLastChild(); tryMinimizeExits(catchCodeBlock, exitType, labelName); }  [CLASS] MinimizeExitPoints [METHOD] tryMinimizeExits [RETURN_TYPE] void  Node n int exitType String labelName [VARIABLES] AbstractCompiler compiler String labelName boolean int exitType Node allCatchNodes c catchCodeBlock catchNode elseBlock falseBlock finallyBlock ifBlock ifTree labelBlock n trueBlock tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5345224838248488	127	127	2	add	
40	[BUG] [BUGGY] if (n.isLabel()) { [FE] AssertionFailedError [CONTEXT]    if (NodeUtil.hasFinally(n)) { Node finallyBlock = n.getLastChild(); tryMinimizeExits(finallyBlock, exitType, labelName); } }  [BUGGY] if (n.isLabel()) { [BUGGY] Node labelBlock = n.getLastChild(); tryMinimizeExits(labelBlock, exitType, labelName); }    if (!n.isBlock() || n.getLastChild() == null) { return; } [CLASS] MinimizeExitPoints [METHOD] tryMinimizeExits [RETURN_TYPE] void  Node n int exitType String labelName [VARIABLES] AbstractCompiler compiler String labelName boolean int exitType Node allCatchNodes c catchCodeBlock catchNode elseBlock falseBlock finallyBlock ifBlock ifTree labelBlock n trueBlock tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5345224838248488	148	148	2	replace	
41	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]    if (NodeUtil.hasFinally(n)) { Node finallyBlock = n.getLastChild(); tryMinimizeExits(finallyBlock, exitType, labelName); } }  [BUGGY] [BUGGY] if (n.isLabel()) { Node labelBlock = n.getLastChild(); tryMinimizeExits(labelBlock, exitType, labelName); }    if (!n.isBlock() || n.getLastChild() == null) { return; } [CLASS] MinimizeExitPoints [METHOD] tryMinimizeExits [RETURN_TYPE] void  Node n int exitType String labelName [VARIABLES] AbstractCompiler compiler String labelName boolean int exitType Node allCatchNodes c catchCodeBlock catchNode elseBlock falseBlock finallyBlock ifBlock ifTree labelBlock n trueBlock tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5345224838248488	148	148	2	add	
42	[BUG] [BUGGY] if (!n.isBlock() || n.getLastChild() == null) { [FE] AssertionFailedError [CONTEXT]  if (n.isLabel()) { Node labelBlock = n.getLastChild(); tryMinimizeExits(labelBlock, exitType, labelName); }    [BUGGY] if (!n.isBlock() || n.getLastChild() == null) { [BUGGY] return; }     for (Node c : n.children()) {   [CLASS] MinimizeExitPoints [METHOD] tryMinimizeExits [RETURN_TYPE] void  Node n int exitType String labelName [VARIABLES] AbstractCompiler compiler String labelName boolean int exitType Node allCatchNodes c catchCodeBlock catchNode elseBlock falseBlock finallyBlock ifBlock ifTree labelBlock n trueBlock tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5345224838248488	156	156	2	replace	
43	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]  if (n.isLabel()) { Node labelBlock = n.getLastChild(); tryMinimizeExits(labelBlock, exitType, labelName); }    [BUGGY] [BUGGY] if (!n.isBlock() || n.getLastChild() == null) { return; }     for (Node c : n.children()) {   [CLASS] MinimizeExitPoints [METHOD] tryMinimizeExits [RETURN_TYPE] void  Node n int exitType String labelName [VARIABLES] AbstractCompiler compiler String labelName boolean int exitType Node allCatchNodes c catchCodeBlock catchNode elseBlock falseBlock finallyBlock ifBlock ifTree labelBlock n trueBlock tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5345224838248488	156	156	2	add	
44	[BUG] [BUGGY] return; [FE] AssertionFailedError [CONTEXT]  if (n.isLabel()) { Node labelBlock = n.getLastChild(); tryMinimizeExits(labelBlock, exitType, labelName); }    if (!n.isBlock() || n.getLastChild() == null) { [BUGGY] return; [BUGGY] }     for (Node c : n.children()) {  if (c.isIf()) { [CLASS] MinimizeExitPoints [METHOD] tryMinimizeExits [RETURN_TYPE] void  Node n int exitType String labelName [VARIABLES] AbstractCompiler compiler String labelName boolean int exitType Node allCatchNodes c catchCodeBlock catchNode elseBlock falseBlock finallyBlock ifBlock ifTree labelBlock n trueBlock tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5345224838248488	157	157	2	replace	
45	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]  if (n.isLabel()) { Node labelBlock = n.getLastChild(); tryMinimizeExits(labelBlock, exitType, labelName); }    if (!n.isBlock() || n.getLastChild() == null) { [BUGGY] [BUGGY] return; }     for (Node c : n.children()) {  if (c.isIf()) { [CLASS] MinimizeExitPoints [METHOD] tryMinimizeExits [RETURN_TYPE] void  Node n int exitType String labelName [VARIABLES] AbstractCompiler compiler String labelName boolean int exitType Node allCatchNodes c catchCodeBlock catchNode elseBlock falseBlock finallyBlock ifBlock ifTree labelBlock n trueBlock tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5345224838248488	157	157	2	add	
46	[BUG] [BUGGY] for (Node c : n.children()) { [FE] AssertionFailedError [CONTEXT]  if (!n.isBlock() || n.getLastChild() == null) { return; }     [BUGGY] for (Node c : n.children()) { [BUGGY]   if (c.isIf()) { Node ifTree = c; Node trueBlock, falseBlock;  trueBlock = ifTree.getFirstChild().getNext(); falseBlock = trueBlock.getNext(); tryMinimizeIfBlockExits(trueBlock, falseBlock, [CLASS] MinimizeExitPoints [METHOD] tryMinimizeExits [RETURN_TYPE] void  Node n int exitType String labelName [VARIABLES] AbstractCompiler compiler String labelName boolean int exitType Node allCatchNodes c catchCodeBlock catchNode elseBlock falseBlock finallyBlock ifBlock ifTree labelBlock n trueBlock tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5345224838248488	164	164	2	replace	
47	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]  if (!n.isBlock() || n.getLastChild() == null) { return; }     [BUGGY] [BUGGY] for (Node c : n.children()) {  if (c.isIf()) { Node ifTree = c; Node trueBlock, falseBlock;  trueBlock = ifTree.getFirstChild().getNext(); falseBlock = trueBlock.getNext(); tryMinimizeIfBlockExits(trueBlock, falseBlock, [CLASS] MinimizeExitPoints [METHOD] tryMinimizeExits [RETURN_TYPE] void  Node n int exitType String labelName [VARIABLES] AbstractCompiler compiler String labelName boolean int exitType Node allCatchNodes c catchCodeBlock catchNode elseBlock falseBlock finallyBlock ifBlock ifTree labelBlock n trueBlock tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5345224838248488	164	164	2	add	
48	[BUG] [BUGGY] if (c.isIf()) { [FE] AssertionFailedError [CONTEXT] return; }     for (Node c : n.children()) {  [BUGGY] if (c.isIf()) { [BUGGY] Node ifTree = c; Node trueBlock, falseBlock;  trueBlock = ifTree.getFirstChild().getNext(); falseBlock = trueBlock.getNext(); tryMinimizeIfBlockExits(trueBlock, falseBlock, ifTree, exitType, labelName);   [CLASS] MinimizeExitPoints [METHOD] tryMinimizeExits [RETURN_TYPE] void  Node n int exitType String labelName [VARIABLES] AbstractCompiler compiler String labelName boolean int exitType Node allCatchNodes c catchCodeBlock catchNode elseBlock falseBlock finallyBlock ifBlock ifTree labelBlock n trueBlock tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5345224838248488	167	167	2	replace	
49	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] return; }     for (Node c : n.children()) {  [BUGGY] [BUGGY] if (c.isIf()) { Node ifTree = c; Node trueBlock, falseBlock;  trueBlock = ifTree.getFirstChild().getNext(); falseBlock = trueBlock.getNext(); tryMinimizeIfBlockExits(trueBlock, falseBlock, ifTree, exitType, labelName);   [CLASS] MinimizeExitPoints [METHOD] tryMinimizeExits [RETURN_TYPE] void  Node n int exitType String labelName [VARIABLES] AbstractCompiler compiler String labelName boolean int exitType Node allCatchNodes c catchCodeBlock catchNode elseBlock falseBlock finallyBlock ifBlock ifTree labelBlock n trueBlock tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5345224838248488	167	167	2	add	
