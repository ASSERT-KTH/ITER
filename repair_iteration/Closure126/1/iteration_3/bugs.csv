bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Node  finallyBlock  =  node.removeFirstChild();  [CE]  cannot  find  symbol  node  [FE]        IllegalStateException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  node.removeFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  node.removeFirstChild();	  Node    finallyBlock    =    n.removeFirstChild();    Node    finallyBlock    =    n.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol  node	19	None	replace
2	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkState(NodeUtil.hasFinally(n));  Preconditions.checkState(n.isLabel());  Preconditions.checkState(NodeUtil.hasFinally(n));  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	add	                Preconditions.checkState(n.isLabel());        Preconditions.checkState(NodeUtil.hasFinally(n));    Preconditions.checkState(n.isLabel());  Preconditions.checkState(NodeUtil.hasFinally(n));	  	compilable	  [FE]  RuntimeException  	65	2	add
3	[BUG]  [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkState(NodeUtil.hasFinally(n));  Preconditions.checkState(n.isLabel());  Preconditions.checkState(NodeUtil.hasFinally(n));  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkState(NodeUtil.hasFinally(n));  Preconditions.checkState(n.isLabel());  Preconditions.checkState(NodeUtil.hasFinally(n));  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	                Preconditions.checkState(n.isLabel());        Preconditions.checkState(NodeUtil.hasFinally(n));    Preconditions.checkState(n.isLabel());  Preconditions.checkState(NodeUtil.hasFinally(n));	  	compilable	  [FE]  RuntimeException  	65	2	add
4	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkState(NodeUtil.hasFinally(n));  Preconditions.checkState(NodeUtil.hasFinally(n));  Preconditions.checkState(NodeUtil.hasFinally(n));  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	add	                Preconditions.checkState(n.isLabel());        Preconditions.checkState(NodeUtil.hasFinally(n));    Preconditions.checkState(NodeUtil.hasFinally(n));  Preconditions.checkState(NodeUtil.hasFinally(n));	  	compilable	  [FE]  RuntimeException  	65	2	add
5	[BUG]  [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkState(NodeUtil.hasFinally(n));  Preconditions.checkState(NodeUtil.hasFinally(n));  Preconditions.checkState(NodeUtil.hasFinally(n));  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkState(NodeUtil.hasFinally(n));  Preconditions.checkState(NodeUtil.hasFinally(n));  Preconditions.checkState(NodeUtil.hasFinally(n));  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	                Preconditions.checkState(n.isLabel());        Preconditions.checkState(NodeUtil.hasFinally(n));    Preconditions.checkState(NodeUtil.hasFinally(n));  Preconditions.checkState(NodeUtil.hasFinally(n));	  	compilable	  [FE]  RuntimeException  	65	2	add
6	[BUG]  [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkState(NodeUtil.hasFinally(n));  Node  n  =  allCatchNodes.getFirstChild();  Preconditions.checkState(n.isLabel());  Preconditions.checkState(NodeUtil.hasFinally(n));  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkState(NodeUtil.hasFinally(n));  Node  n  =  allCatchNodes.getFirstChild();  Preconditions.checkState(n.isLabel());  Preconditions.checkState(NodeUtil.hasFinally(n));  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	                Preconditions.checkState(n.isLabel());        Preconditions.checkState(NodeUtil.hasFinally(n));    Node  n  =  allCatchNodes.getFirstChild();  Preconditions.checkState(n.isLabel());  Preconditions.checkState(NodeUtil.hasFinally(n));	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	65	None	add
7	[BUG]  [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkState(NodeUtil.hasFinally(n));  Preconditions.checkState(N.isLabel());  Preconditions.checkState(NodeUtil.hasFinally(n));  [CE]  cannot  find  symbol  N  [FE]          RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkState(NodeUtil.hasFinally(n));  Preconditions.checkState(N.isLabel());  Preconditions.checkState(NodeUtil.hasFinally(n));  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	                Preconditions.checkState(n.isLabel());        Preconditions.checkState(NodeUtil.hasFinally(n));    Preconditions.checkState(N.isLabel());  Preconditions.checkState(NodeUtil.hasFinally(n));	  	non-compiled	[CE]  cannot  find  symbol  N	65	None	add
8	[BUG]  [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkState(NodeUtil.hasFinally(n));  Preconditions.checkLabel());  Preconditions.checkState(NodeUtil.hasFinally(n));  [CE]  ';'  expected  [FE]            RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkState(NodeUtil.hasFinally(n));  Preconditions.checkLabel());  Preconditions.checkState(NodeUtil.hasFinally(n));  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	                Preconditions.checkState(n.isLabel());        Preconditions.checkState(NodeUtil.hasFinally(n));    Preconditions.checkLabel());  Preconditions.checkState(NodeUtil.hasFinally(n));	  	non-compiled	[CE]  ';'  expected	65	None	add
9	[BUG]  [BUGGY]  Node  finallyBlock  =  n.getFirstChild();  Node  finallyBlock  =  finallyBlock.removeFirstChild();  System.arraycopy(c,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName);  [CE]  ')'  expected  [FE]            IllegalStateException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  n.getFirstChild();  Node  finallyBlock  =  finallyBlock.removeFirstChild();  System.arraycopy(c,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName);  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  n.getFirstChild();  Node  finallyBlock  =  finallyBlock.removeFirstChild();  System.arraycopy(c,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName);	  Node    finallyBlock    =    n.removeFirstChild();    Node    finallyBlock    =    n.removeFirstChild();    System.arraycopy(c,    0,    tryMinimizeExits(finallyBlock,    exitType,    labelName);    	non-compiled	[CE]  ')'  expected	129	None	replace
10	[BUG]  [BUGGY]  Node  finallyBlock  =  n.removeFirstChild();  Node  finallyBlock  =  finallyBlock.removeFirstChild();  System.arraycopy(c,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName);  [CE]  ')'  expected  [FE]              IllegalStateException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  n.removeFirstChild();  Node  finallyBlock  =  finallyBlock.removeFirstChild();  System.arraycopy(c,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName);  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  n.removeFirstChild();  Node  finallyBlock  =  finallyBlock.removeFirstChild();  System.arraycopy(c,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName);	  Node    finallyBlock    =    n.removeFirstChild();    Node    finallyBlock    =    n.removeFirstChild();    System.arraycopy(c,    0,    tryMinimizeExits(finallyBlock,    exitType,    labelName);    	non-compiled	[CE]  ')'  expected	129	None	replace
11	[BUG]  [BUGGY]  Node  finallyBlock  =  n.getLastChild();  Node  finallyBlock  =  n.removeFirstChild();  System.arraycopy(c,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName);  [CE]  ')'  expected  [FE]                IllegalStateException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  n.getLastChild();  Node  finallyBlock  =  n.removeFirstChild();  System.arraycopy(c,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName);  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  n.getLastChild();  Node  finallyBlock  =  n.removeFirstChild();  System.arraycopy(c,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName);	  Node    finallyBlock    =    n.removeFirstChild();    Node    finallyBlock    =    n.removeFirstChild();    System.arraycopy(c,    0,    tryMinimizeExits(finallyBlock,    exitType,    labelName);    	non-compiled	[CE]  ')'  expected	129	None	replace
12	[BUG]  [BUGGY]  Node  finallyBlock  =  n.getFirstChild();  Node  finallyBlock  =  finallyBlock.removeFirstChild();  [CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                  IllegalStateException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  n.getFirstChild();  Node  finallyBlock  =  finallyBlock.removeFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  n.getFirstChild();  Node  finallyBlock  =  finallyBlock.removeFirstChild();	  Node    finallyBlock    =    n.removeFirstChild();    Node    finallyBlock    =    n.removeFirstChild();    System.arraycopy(c,    0,    tryMinimizeExits(finallyBlock,    exitType,    labelName);    	non-compiled	[CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	129	None	replace
13	[BUG]  [BUGGY]  Node  finallyBlock  =  n.removeFirstChild();  Node  finallyBlock  =  finallyBlock.removeFirstChild();  [CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                    IllegalStateException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  n.removeFirstChild();  Node  finallyBlock  =  finallyBlock.removeFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  n.removeFirstChild();  Node  finallyBlock  =  finallyBlock.removeFirstChild();	  Node    finallyBlock    =    n.removeFirstChild();    Node    finallyBlock    =    n.removeFirstChild();    System.arraycopy(c,    0,    tryMinimizeExits(finallyBlock,    exitType,    labelName);    	non-compiled	[CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	129	None	replace
14	[BUG]  [BUGGY]  Node  elseBlock  =  no.getFirstChild();  [CE]  cannot  find  symbol  no  [FE]        AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  elseBlock  =  no.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  elseBlock  =  no.getFirstChild();	          Node    elseBlock    =    n.getFirstChild();    Node    elseBlock    =    no.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  no	160	None	replace
15	[BUG]  [BUGGY]  n  =  catchNode.getFirstChild();  [CE]  cannot  find  symbol  catchNode  [FE]          RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  n  =  catchNode.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	n  =  catchNode.getFirstChild();	  n    =    node.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  catchNode	117	None	replace
16	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  c  =  allCatchNodes.getFirstChild();  [CE]  cannot  find  symbol  finallyBlock  [FE]          AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  c  =  allCatchNodes.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  c  =  allCatchNodes.getFirstChild();	          Node    c    =    allCatchNodes.getFirstChild();    Node    c    =    allCatchNodes.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	44	None	replace
17	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  c  =  allCatchNodes.getFirstChild();  [CE]  cannot  find  symbol  finallyBlock  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  c  =  allCatchNodes.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  c  =  allCatchNodes.getFirstChild();	          Node    c    =    allCatchNodes.getFirstChild();    Node    c    =    allCatchNodes.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	44	None	replace
18	[BUG]  [BUGGY]  Node  finallyBlock  =  catchNodes.getFirstChild();  [CE]  cannot  find  symbol  catchNodes  [FE]          IllegalStateException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  catchNodes.getFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  catchNodes.getFirstChild();	  Node    finallyBlock    =    catchNode.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  catchNodes	9	None	replace
19	[BUG]  [BUGGY]  Node  c  =  allCatchNodes.get(1);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  c  =  allCatchNodes.get(1);  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  c  =  allCatchNodes.get(1);	  Node    c    =    allCatchNodes.get(0);    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
20	[BUG]  [BUGGY]  Node  c  =  allCatchNodes.get(n);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  c  =  allCatchNodes.get(n);  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  c  =  allCatchNodes.get(n);	  Node    c    =    allCatchNodes.get(0);    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
21	[BUG]  [BUGGY]  Node  c  =  this.allCatchNodes.get(0);  [CE]  cannot  find  symbol  allCatchNodes  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  c  =  this.allCatchNodes.get(0);  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  c  =  this.allCatchNodes.get(0);	  Node    c    =    allCatchNodes.get(0);    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	41	None	replace
22	[BUG]  [BUGGY]  Node  c  =  anyCatchNodes.get(0);  [CE]  cannot  find  symbol  anyCatchNodes  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  c  =  anyCatchNodes.get(0);  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  c  =  anyCatchNodes.get(0);	  Node    c    =    allCatchNodes.get(0);    	non-compiled	[CE]  cannot  find  symbol  anyCatchNodes	41	None	replace
23	[BUG]  [BUGGY]  Node  finallyBlock  =  allCatchNodes.removeFirstChild();  Node  finallyBlock  =  allCatchNodes.removeFirstChild();  [CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  allCatchNodes.removeFirstChild();  Node  finallyBlock  =  allCatchNodes.removeFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node    finallyBlock    =    allCatchNodes.removeFirstChild();    Node  finallyBlock  =  allCatchNodes.removeFirstChild();	  	non-compiled	[CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	113	None	add
24	[BUG]  [BUGGY]  Node  finallyBlock  =  allCatchNodes.removeFirstChild();  Node  finallyBlock  =  allCatchNodes.removeLastChild();  [CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  allCatchNodes.removeFirstChild();  Node  finallyBlock  =  allCatchNodes.removeLastChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node    finallyBlock    =    allCatchNodes.removeFirstChild();    Node  finallyBlock  =  allCatchNodes.removeLastChild();	  	non-compiled	[CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	113	None	add
25	[BUG]  [BUGGY]  Node  finallyBlock  =  allCatchNodes.removeFirstChild();  Node  finallyBlock  =  anyCatchNodes.removeFirstChild();  [CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  allCatchNodes.removeFirstChild();  Node  finallyBlock  =  anyCatchNodes.removeFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node    finallyBlock    =    allCatchNodes.removeFirstChild();    Node  finallyBlock  =  anyCatchNodes.removeFirstChild();	  	non-compiled	[CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	113	None	add
26	[BUG]  [BUGGY]  Node  finallyBlock  =  allCatchNodes.removeFirstChild();  Node  finallyBlock  =  allSatchNodes.removeFirstChild();  [CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  allCatchNodes.removeFirstChild();  Node  finallyBlock  =  allSatchNodes.removeFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node    finallyBlock    =    allCatchNodes.removeFirstChild();    Node  finallyBlock  =  allSatchNodes.removeFirstChild();	  	non-compiled	[CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	113	None	add
27	[BUG]  [BUGGY]  Node  finallyBlock  =  allCatchNodes.removeFirstChild();  Node  finallyBlock  =  n.removeFirstChild();  [CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]            RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  allCatchNodes.removeFirstChild();  Node  finallyBlock  =  n.removeFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node    finallyBlock    =    allCatchNodes.removeFirstChild();    Node  finallyBlock  =  n.removeFirstChild();	  	non-compiled	[CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	113	None	add
28	[BUG]  [BUGGY]  Node  finallyBlock  =  allCatchNodes.removeFirstChild();  Node  finallyBlock  =  allCatchNodes.getFirstChild();  [CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]              RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  allCatchNodes.removeFirstChild();  Node  finallyBlock  =  allCatchNodes.getFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node    finallyBlock    =    allCatchNodes.removeFirstChild();    Node  finallyBlock  =  allCatchNodes.getFirstChild();	  	non-compiled	[CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	113	None	add
29	[BUG]  [BUGGY]  Node  finallyBlock  =  catchNode.cloneTree();  [CE]  cannot  find  symbol  catchNode  [FE]    StackOverflowError    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  catchNode.cloneTree();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  catchNode.cloneTree();	  Node    finallyBlock    =    n.cloneTree();    	non-compiled	[CE]  cannot  find  symbol  catchNode	139	None	replace
30	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      StackOverflowError    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  n.getNext();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	add	Node  finallyBlock  =  n.getNext();	  Node    finallyBlock    =    n.cloneTree();    	compilable	  [FE]  RuntimeException  	139	2	replace
31	[BUG]  [BUGGY]  Node  finallyBlock  =  n.getNext();  [FE]  RuntimeException  [FE]      StackOverflowError    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  n.getNext();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  n.getNext();	  Node    finallyBlock    =    n.cloneTree();    	compilable	  [FE]  RuntimeException  	139	2	replace
32	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkNotNull(n.isLabel());  Preconditions.checkState(n.isLabel());  Preconditions.checkNotNull(n.isLabel());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	add	                Preconditions.checkState(n.isLabel());        Preconditions.checkNotNull(n.isLabel());    Preconditions.checkState(n.isLabel());  Preconditions.checkNotNull(n.isLabel());	  	compilable	  [FE]  RuntimeException  	133	2	add
33	[BUG]  [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkNotNull(n.isLabel());  Preconditions.checkState(n.isLabel());  Preconditions.checkNotNull(n.isLabel());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkNotNull(n.isLabel());  Preconditions.checkState(n.isLabel());  Preconditions.checkNotNull(n.isLabel());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	                Preconditions.checkState(n.isLabel());        Preconditions.checkNotNull(n.isLabel());    Preconditions.checkState(n.isLabel());  Preconditions.checkNotNull(n.isLabel());	  	compilable	  [FE]  RuntimeException  	133	2	add
34	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkNotNull(n.isLabel());  Preconditions.checkNotNull(n.isLabel());  Preconditions.checkNotNull(n.isLabel());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	add	                Preconditions.checkState(n.isLabel());        Preconditions.checkNotNull(n.isLabel());    Preconditions.checkNotNull(n.isLabel());  Preconditions.checkNotNull(n.isLabel());	  	compilable	  [FE]  RuntimeException  	133	2	add
35	[BUG]  [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkNotNull(n.isLabel());  Preconditions.checkNotNull(n.isLabel());  Preconditions.checkNotNull(n.isLabel());  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkNotNull(n.isLabel());  Preconditions.checkNotNull(n.isLabel());  Preconditions.checkNotNull(n.isLabel());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	                Preconditions.checkState(n.isLabel());        Preconditions.checkNotNull(n.isLabel());    Preconditions.checkNotNull(n.isLabel());  Preconditions.checkNotNull(n.isLabel());	  	compilable	  [FE]  RuntimeException  	133	2	add
36	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkNotNull(n.isLabel());  Preconditions.checkState(NodeUtil.hasFinally(n));  Preconditions.checkNotNull(n.isLabel());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	add	                Preconditions.checkState(n.isLabel());        Preconditions.checkNotNull(n.isLabel());    Preconditions.checkState(NodeUtil.hasFinally(n));  Preconditions.checkNotNull(n.isLabel());	  	compilable	  [FE]  RuntimeException  	133	2	add
37	[BUG]  [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkNotNull(n.isLabel());  Preconditions.checkState(NodeUtil.hasFinally(n));  Preconditions.checkNotNull(n.isLabel());  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkNotNull(n.isLabel());  Preconditions.checkState(NodeUtil.hasFinally(n));  Preconditions.checkNotNull(n.isLabel());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	                Preconditions.checkState(n.isLabel());        Preconditions.checkNotNull(n.isLabel());    Preconditions.checkState(NodeUtil.hasFinally(n));  Preconditions.checkNotNull(n.isLabel());	  	compilable	  [FE]  RuntimeException  	133	2	add
38	[BUG]  [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkNotNull(n.isLabel());  Node  n  =  allCatchNodes.getFirstChild();  Preconditions.checkNotNull(n.isLabel());  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkNotNull(n.isLabel());  Node  n  =  allCatchNodes.getFirstChild();  Preconditions.checkNotNull(n.isLabel());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	                Preconditions.checkState(n.isLabel());        Preconditions.checkNotNull(n.isLabel());    Node  n  =  allCatchNodes.getFirstChild();  Preconditions.checkNotNull(n.isLabel());	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	133	None	add
39	[BUG]  [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkNotNull(n.isLabel());  Preconditions.checkLabel(n.isLabel());  Preconditions.checkNotNull(n.isLabel());  [CE]  cannot  find  symbol  [FE]            RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkNotNull(n.isLabel());  Preconditions.checkLabel(n.isLabel());  Preconditions.checkNotNull(n.isLabel());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	                Preconditions.checkState(n.isLabel());        Preconditions.checkNotNull(n.isLabel());    Preconditions.checkLabel(n.isLabel());  Preconditions.checkNotNull(n.isLabel());	  	non-compiled	[CE]  cannot  find  symbol	133	None	add
40	[BUG]  [BUGGY]  Node  finallyBlock  =  no.removeFirstChild();  [CE]  cannot  find  symbol  no  [FE]        IllegalStateException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  no.removeFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  no.removeFirstChild();	  Node    finallyBlock    =    n.removeFirstChild();    Node    finallyBlock    =    no.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol  no	155	None	replace
41	[BUG]  [BUGGY]  Node  finallyBlock  =  no.getFirstChild();  [CE]  cannot  find  symbol  no  [FE]          IllegalStateException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  no.getFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  no.getFirstChild();	  Node    finallyBlock    =    n.removeFirstChild();    Node    finallyBlock    =    no.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol  no	155	None	replace
42	[BUG]  [BUGGY]  Node  labelBlock  =  allCatchNodes.getLastChild();  [CE]  cannot  find  symbol  finallyBlock  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  labelBlock  =  allCatchNodes.getLastChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  labelBlock  =  allCatchNodes.getLastChild();	  Node    labelBlock    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	85	None	replace
43	[BUG]  [BUGGY]  Node  labelBlock  =  c.getFirstChild();  [CE]  cannot  find  symbol  c  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  labelBlock  =  c.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  labelBlock  =  c.getFirstChild();	  Node    labelBlock    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  c	85	None	replace
44	[BUG]  [BUGGY]  Node  labelBlock  =  catchNodes.getFirstChild();  [CE]  cannot  find  symbol  catchNodes  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  labelBlock  =  catchNodes.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  labelBlock  =  catchNodes.getFirstChild();	  Node    labelBlock    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  catchNodes	85	None	replace
45	[BUG]  [BUGGY]  Node  n  =  allCatchNodes.getFirstChild();  Preconditions.checkState(NodeUtil.hasFinally(n));  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  n  =  allCatchNodes.getFirstChild();  Preconditions.checkState(NodeUtil.hasFinally(n));  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  n  =  allCatchNodes.getFirstChild();  Preconditions.checkState(NodeUtil.hasFinally(n));	          Preconditions.checkState(NodeUtil.hasFinally(n));    Node    n    =    allCatchNodes.getFirstChild();    Preconditions.checkState(NodeUtil.hasFinally(n));    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	72	None	replace
46	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.hasFinally(allCatchNodes));  Node  n  =  allCatchNodes.getFirstChild();  Preconditions.checkState(NodeUtil.hasFinally(n));  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(NodeUtil.hasFinally(allCatchNodes));  Node  n  =  allCatchNodes.getFirstChild();  Preconditions.checkState(NodeUtil.hasFinally(n));  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(NodeUtil.hasFinally(allCatchNodes));  Node  n  =  allCatchNodes.getFirstChild();  Preconditions.checkState(NodeUtil.hasFinally(n));	          Preconditions.checkState(NodeUtil.hasFinally(n));    Node    n    =    allCatchNodes.getFirstChild();    Preconditions.checkState(NodeUtil.hasFinally(n));    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	72	None	replace
47	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.hasFinally(n));  n  =  allCatchNodes.getFirstChild();  Preconditions.checkState(NodeUtil.hasFinally(n));  [CE]  cannot  find  symbol  finallyBlock  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(NodeUtil.hasFinally(n));  n  =  allCatchNodes.getFirstChild();  Preconditions.checkState(NodeUtil.hasFinally(n));  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(NodeUtil.hasFinally(n));  n  =  allCatchNodes.getFirstChild();  Preconditions.checkState(NodeUtil.hasFinally(n));	          Preconditions.checkState(NodeUtil.hasFinally(n));    Node    n    =    allCatchNodes.getFirstChild();    Preconditions.checkState(NodeUtil.hasFinally(n));    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	72	None	replace
48	[BUG]  [BUGGY]  Node  elseBlock  =  n.get(labelName);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  elseBlock  =  n.get(labelName);  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  elseBlock  =  n.get(labelName);	  Node    elseBlock    =    n.get(0);    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
49	[BUG]  [BUGGY]  Node  nextBlock  =  n.getLastChild();  [CE]  cannot  find  symbol  finallyBlock  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  nextBlock  =  n.getLastChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  nextBlock  =  n.getLastChild();	  Node    finalBlock    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	112	None	replace
50	[BUG]  [BUGGY]  Node  elseBlock  =  n.get(2);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  elseBlock  =  n.get(2);  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  elseBlock  =  n.get(2);	  Node    elseBlock    =    n.get(1);    	non-compiled	[CE]  cannot  find  symbol	132	None	replace
51	[BUG]  [BUGGY]  Node  n  =  allCatchNodes.getfirstChild();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  n  =  allCatchNodes.getfirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  n  =  allCatchNodes.getfirstChild();	  Node    n    =    allCatchNodes.getLastChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	57	None	replace
52	[BUG]  [BUGGY]  Node  lastChild  =  allCatchNodes.getLastChild();  [CE]  cannot  find  symbol  finallyBlock  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  lastChild  =  allCatchNodes.getLastChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  lastChild  =  allCatchNodes.getLastChild();	  Node    lastChild    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	158	None	replace
53	[BUG]  [BUGGY]  Node  nextChild  =  n.getLastChild();  [CE]  cannot  find  symbol  finallyBlock  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  nextChild  =  n.getLastChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  nextChild  =  n.getLastChild();	  Node    lastChild    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	158	None	replace
54	[BUG]  [BUGGY]  Node  firstChild  =  n.getLastChild();  [CE]  cannot  find  symbol  finallyBlock  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  firstChild  =  n.getLastChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  firstChild  =  n.getLastChild();	  Node    lastChild    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	158	None	replace
55	[BUG]  [BUGGY]  Preconditions.checkState(n.isFinally());  Preconditions.checkNotNull(n.isLabel());  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.isFinally());  Preconditions.checkNotNull(n.isLabel());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.isFinally());  Preconditions.checkNotNull(n.isLabel());	          Preconditions.checkState(n.isLabel());    Preconditions.checkNotNull(n.isLabel());    	non-compiled	[CE]  cannot  find  symbol	134	None	replace
56	[BUG]  [BUGGY]  Preconditions.checkState(n.isTree());  Preconditions.checkNotNull(n.isLabel());  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.isTree());  Preconditions.checkNotNull(n.isLabel());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.isTree());  Preconditions.checkNotNull(n.isLabel());	          Preconditions.checkState(n.isLabel());    Preconditions.checkNotNull(n.isLabel());    	non-compiled	[CE]  cannot  find  symbol	134	None	replace
57	[BUG]  [BUGGY]  Preconditions.checkState(n.isName());  Preconditions.checkNotNull(n.isLabel());  [CE]  cannot  find  symbol  finallyBlock  [FE]        RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.isName());  Preconditions.checkNotNull(n.isLabel());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.isName());  Preconditions.checkNotNull(n.isLabel());	          Preconditions.checkState(n.isLabel());    Preconditions.checkNotNull(n.isLabel());    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	134	None	replace
58	[BUG]  [BUGGY]  Node  finallyBlock  =  getFinallyBlock(n,  n.getLastChild());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  getFinallyBlock(n,  n.getLastChild());  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  getFinallyBlock(n,  n.getLastChild());	  Node    finallyBlock    =    getFinallyBlock(n.getLastChild());    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
59	[BUG]  [BUGGY]  Node  finallyBlock  =  getFinallyBlock(n.getLastChild(),  n);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  getFinallyBlock(n.getLastChild(),  n);  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  getFinallyBlock(n.getLastChild(),  n);	  Node    finallyBlock    =    getFinallyBlock(n.getLastChild());    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
60	[BUG]  [BUGGY]  Node  finallyBlock  =  getFinallyBlock(n.getLastChild(),  n.getLastChild());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  getFinallyBlock(n.getLastChild(),  n.getLastChild());  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  getFinallyBlock(n.getLastChild(),  n.getLastChild());	  Node    finallyBlock    =    getFinallyBlock(n.getLastChild());    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
61	[BUG]  [BUGGY]  Node  c  =  anyCatchNodes.getFirstChild();  [CE]  cannot  find  symbol  anyCatchNodes  [FE]          AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  c  =  anyCatchNodes.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  c  =  anyCatchNodes.getFirstChild();	          Node    c    =    allCatchNodes.getFirstChild();    Node    c    =    anyCatchNodes.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  anyCatchNodes	168	None	replace
62	[BUG]  [BUGGY]  Preconditions.checkState(falseBlock.isLabel());  Preconditions.checkState(falseBlock.isLabel());  [CE]  cannot  find  symbol  falseBlock  [FE]    RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(falseBlock.isLabel());  Preconditions.checkState(falseBlock.isLabel());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(falseBlock.isLabel());  Preconditions.checkState(falseBlock.isLabel());	          Preconditions.checkState(n.isLabel());    Preconditions.checkState(n.isLabel());    	non-compiled	[CE]  cannot  find  symbol  falseBlock	62	None	replace
63	[BUG]  [BUGGY]  Preconditions.checkState(n.isNode());  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.isNode());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.isNode());	          Preconditions.checkState(n.isLabel());    Preconditions.checkState(n.isLabel());    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
64	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isFinally(n)||  NodeUtil.isFinally(n));  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(NodeUtil.isFinally(n)||  NodeUtil.isFinally(n));  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(NodeUtil.isFinally(n)||  NodeUtil.isFinally(n));	  Preconditions.checkState(NodeUtil.isFinally(n));    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
65	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isFinally(n)||  NodeUtil.isExpressionNode(n));  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(NodeUtil.isFinally(n)||  NodeUtil.isExpressionNode(n));  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(NodeUtil.isFinally(n)||  NodeUtil.isExpressionNode(n));	  Preconditions.checkState(NodeUtil.isFinally(n));    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
66	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isFinally(n),  c);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(NodeUtil.isFinally(n),  c);  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(NodeUtil.isFinally(n),  c);	  Preconditions.checkState(NodeUtil.isFinally(n));    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
67	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isFinally(n)||  n.getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(NodeUtil.isFinally(n)||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(NodeUtil.isFinally(n)||  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(NodeUtil.isFinally(n));    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
68	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  exitType);  n  =  n.getFirstChild();  [CE]  incomparable  types:  Node  and  int  [FE]                  RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  exitType);  n  =  n.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.getFirstChild()  ==  exitType);  n  =  n.getFirstChild();	          n    =    n.getFirstChild();    n    =    n.getFirstChild();    }    	non-compiled	[CE]  incomparable  types:  Node  and  int	56	None	replace
69	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild()!=  exitType);  n  =  n.getFirstChild();  [CE]  incomparable  types:  Node  and  int  [FE]                    RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.getFirstChild()!=  exitType);  n  =  n.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.getFirstChild()!=  exitType);  n  =  n.getFirstChild();	          n    =    n.getFirstChild();    n    =    n.getFirstChild();    }    	non-compiled	[CE]  incomparable  types:  Node  and  int	56	None	replace
70	[BUG]  [BUGGY]  Node  endBlock  =  allCatchNodes.getFirstChild();  [CE]  cannot  find  symbol  finallyBlock  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  endBlock  =  allCatchNodes.getFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  endBlock  =  allCatchNodes.getFirstChild();	  Node    endBlock    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	171	None	replace
71	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isExpressionNode(n)||  NodeUtil.isExpressionNode(n));  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(NodeUtil.isExpressionNode(n)||  NodeUtil.isExpressionNode(n));  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(NodeUtil.isExpressionNode(n)||  NodeUtil.isExpressionNode(n));	  Preconditions.checkState(NodeUtil.isExpressionNode(n));    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
72	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.hasExpressionNode(n));  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(NodeUtil.hasExpressionNode(n));  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(NodeUtil.hasExpressionNode(n));	  Preconditions.checkState(NodeUtil.isExpressionNode(n));    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
73	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isExpressionNode(n)&&  NodeUtil.hasFinally(n));  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(NodeUtil.isExpressionNode(n)&&  NodeUtil.hasFinally(n));  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(NodeUtil.isExpressionNode(n)&&  NodeUtil.hasFinally(n));	  Preconditions.checkState(NodeUtil.isExpressionNode(n));    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
74	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isExpressionNode(n)||  NodeUtil.hasFinally(n));  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(NodeUtil.isExpressionNode(n)||  NodeUtil.hasFinally(n));  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(NodeUtil.isExpressionNode(n)||  NodeUtil.hasFinally(n));	  Preconditions.checkState(NodeUtil.isExpressionNode(n));    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
75	[BUG]  [BUGGY]  Node  finallyBlock  =  allCatchNodes.getfirstChild();  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  allCatchNodes.getfirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  allCatchNodes.getfirstChild();	  Node    finallyBlock    =    allCatchNodes.getLastChild();    Node    finallyBlock    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
76	[BUG]  [BUGGY]  Node  nextBlock  =  n.getFirstChild();  [CE]  cannot  find  symbol  finallyBlock  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  nextBlock  =  n.getFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  nextBlock  =  n.getFirstChild();	  Node    finalBlock    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	170	None	replace
77	[BUG]  [BUGGY]  Node  n  =  allCatchNodes.getFirstChild();  tryMinimizeExits(n.isLabel());  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  n  =  allCatchNodes.getFirstChild();  tryMinimizeExits(n.isLabel());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  n  =  allCatchNodes.getFirstChild();  tryMinimizeExits(n.isLabel());	          Preconditions.checkState(n.isLabel());    Node    n    =    allCatchNodes.getFirstChild();    tryMinimizeExits(n.isLabel());    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	111	None	replace
78	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  n  =  allCatchNodes.getFirstChild();  tryMinimizeExits(n.isLabel());  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]            RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  n  =  allCatchNodes.getFirstChild();  tryMinimizeExits(n.isLabel());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(allCatchNodes.hasOneChild());  Node  n  =  allCatchNodes.getFirstChild();  tryMinimizeExits(n.isLabel());	          Preconditions.checkState(n.isLabel());    Node    n    =    allCatchNodes.getFirstChild();    tryMinimizeExits(n.isLabel());    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	111	None	replace
79	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  n  =  allCatchNodes.getFirstChild();  tryMinimizeExits(n,  exitType,  labelName);  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]              RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  n  =  allCatchNodes.getFirstChild();  tryMinimizeExits(n,  exitType,  labelName);  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(allCatchNodes.hasOneChild());  Node  n  =  allCatchNodes.getFirstChild();  tryMinimizeExits(n,  exitType,  labelName);	          Preconditions.checkState(n.isLabel());    Node    n    =    allCatchNodes.getFirstChild();    tryMinimizeExits(n.isLabel());    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	111	None	replace
80	[BUG]  [BUGGY]  Preconditions.checkState(n.isLabel());  Node  c  =  allCatchNodes.getFirstChild();  tryMinimizeExits(c,  n.isLabel());  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]                RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.isLabel());  Node  c  =  allCatchNodes.getFirstChild();  tryMinimizeExits(c,  n.isLabel());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.isLabel());  Node  c  =  allCatchNodes.getFirstChild();  tryMinimizeExits(c,  n.isLabel());	          Preconditions.checkState(n.isLabel());    Node    n    =    allCatchNodes.getFirstChild();    tryMinimizeExits(n.isLabel());    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	111	None	replace
81	[BUG]  [BUGGY]  int  n  =  n.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]              RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  int  n  =  n.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	int  n  =  n.getFirstChild();	          n    =    n.getFirstChild();    int    n    =    n.getFirstChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	54	None	replace
82	[BUG]  [BUGGY]  Integer  n  =  n.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Integer  n  =  n.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Integer  n  =  n.getFirstChild();	          n    =    n.getFirstChild();    int    n    =    n.getFirstChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	54	None	replace
83	[BUG]  [BUGGY]  Node  c  =  getCatchNodes().getFirstChild();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  c  =  getCatchNodes().getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  c  =  getCatchNodes().getFirstChild();	          Node    c    =    allCatchNodes.getFirstChild();    Node    c    =    getCatchNodes().getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	167	None	replace
84	[BUG]  [BUGGY]  Node  c  =  getCatchNodes().getLastChild();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  c  =  getCatchNodes().getLastChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  c  =  getCatchNodes().getLastChild();	          Node    c    =    allCatchNodes.getFirstChild();    Node    c    =    getCatchNodes().getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	167	None	replace
85	[BUG]  [BUGGY]  Node  c  =  getNodes().getFirstChild();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  c  =  getNodes().getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  c  =  getNodes().getFirstChild();	          Node    c    =    allCatchNodes.getFirstChild();    Node    c    =    getCatchNodes().getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	167	None	replace
86	[BUG]  [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  thenBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  Node  thenBlock  =  n.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  thenBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  Node  thenBlock  =  n.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	                Node        elseBlock        =        n.getFirstChild();        Node    thenBlock    =    n.getFirstChild();    Node  elseBlock  =  n.getFirstChild();  Node  thenBlock  =  n.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	81	None	add
87	[BUG]  [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  thenBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  Node  thenBlock  =  n.getLastChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      AssertionFailedError    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  thenBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  Node  thenBlock  =  n.getLastChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	                Node        elseBlock        =        n.getFirstChild();        Node    thenBlock    =    n.getFirstChild();    Node  elseBlock  =  n.getFirstChild();  Node  thenBlock  =  n.getLastChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	81	None	add
88	[BUG]  [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  thenBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getLastChild();  Node  thenBlock  =  n.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        AssertionFailedError    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  thenBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getLastChild();  Node  thenBlock  =  n.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	                Node        elseBlock        =        n.getFirstChild();        Node    thenBlock    =    n.getFirstChild();    Node  elseBlock  =  n.getLastChild();  Node  thenBlock  =  n.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	81	None	add
89	[BUG]  [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  thenBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getfirstChild();  Node  thenBlock  =  n.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          AssertionFailedError    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  thenBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getfirstChild();  Node  thenBlock  =  n.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	                Node        elseBlock        =        n.getFirstChild();        Node    thenBlock    =    n.getFirstChild();    Node  elseBlock  =  n.getfirstChild();  Node  thenBlock  =  n.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	81	None	add
90	[BUG]  [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  thenBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  Node  thenBlock  =  n.getfirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]            AssertionFailedError    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  thenBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  Node  thenBlock  =  n.getfirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	                Node        elseBlock        =        n.getFirstChild();        Node    thenBlock    =    n.getFirstChild();    Node  elseBlock  =  n.getFirstChild();  Node  thenBlock  =  n.getfirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	81	None	add
91	[BUG]  [BUGGY]  Preconditions.checkState(n.isFinally());  Preconditions.checkArgument(n.isLabel());  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.isFinally());  Preconditions.checkArgument(n.isLabel());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.isFinally());  Preconditions.checkArgument(n.isLabel());	          Preconditions.checkState(n.isLabel());    Preconditions.checkArgument(n.isLabel());    	non-compiled	[CE]  cannot  find  symbol	136	None	replace
92	[BUG]  [BUGGY]  Preconditions.checkState(n.isTree());  Preconditions.checkArgument(n.isLabel());  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.isTree());  Preconditions.checkArgument(n.isLabel());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.isTree());  Preconditions.checkArgument(n.isLabel());	          Preconditions.checkState(n.isLabel());    Preconditions.checkArgument(n.isLabel());    	non-compiled	[CE]  cannot  find  symbol	136	None	replace
93	[BUG]  [BUGGY]  Preconditions.checkState(n.isNode());  Preconditions.checkArgument(n.isLabel());  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.isNode());  Preconditions.checkArgument(n.isLabel());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.isNode());  Preconditions.checkArgument(n.isLabel());	          Preconditions.checkState(n.isLabel());    Preconditions.checkArgument(n.isLabel());    	non-compiled	[CE]  cannot  find  symbol	136	None	replace
94	[BUG]  [BUGGY]  Node  labelBlock  =  n.getFirstChild();  System.arraycopy(labelName,  0,  labelBlock,  1,  n.getLastChild());  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  labelBlock  =  n.getFirstChild();  System.arraycopy(labelName,  0,  labelBlock,  1,  n.getLastChild());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  labelBlock  =  n.getFirstChild();  System.arraycopy(labelName,  0,  labelBlock,  1,  n.getLastChild());	          Node    labelBlock    =    n.getFirstChild();    Node    labelBlock    =    n.getFirstChild();    System.arraycopy(labelName,    0,    labelBlock,    1,    n.getLastChild());    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	147	None	replace
95	[BUG]  [BUGGY]  Node  labelBlock  =  n.getLastChild();  System.arraycopy(labelName,  0,  labelBlock,  1,  n.getLastChild());  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  labelBlock  =  n.getLastChild();  System.arraycopy(labelName,  0,  labelBlock,  1,  n.getLastChild());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  labelBlock  =  n.getLastChild();  System.arraycopy(labelName,  0,  labelBlock,  1,  n.getLastChild());	          Node    labelBlock    =    n.getFirstChild();    Node    labelBlock    =    n.getFirstChild();    System.arraycopy(labelName,    0,    labelBlock,    1,    n.getLastChild());    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	147	None	replace
96	[BUG]  [BUGGY]  System.arraycopy(labelName,  0,  labelBlock,  1,  n.getLastChild());  [CE]  cannot  find  symbol  labelBlock  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  System.arraycopy(labelName,  0,  labelBlock,  1,  n.getLastChild());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	System.arraycopy(labelName,  0,  labelBlock,  1,  n.getLastChild());	          Node    labelBlock    =    n.getFirstChild();    Node    labelBlock    =    n.getFirstChild();    System.arraycopy(labelName,    0,    labelBlock,    1,    n.getLastChild());    	non-compiled	[CE]  cannot  find  symbol  labelBlock	147	None	replace
97	[BUG]  [BUGGY]  Node  n  =  catchNode.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  n  =  catchNode.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  n  =  catchNode.getFirstChild();	  Node    n    =    n.getFirstChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	169	None	replace
98	[BUG]  [BUGGY]  Node  n  =  allNodes.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  n  =  allNodes.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  n  =  allNodes.getFirstChild();	  Node    n    =    n.getFirstChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	169	None	replace
99	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          n    =    n.getFirstChild();    n  =  n.getFirstChild();  n  =  n.getFirstChild();  n  =  n.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	add	                n        =        n.getFirstChild();        n    =    n.getFirstChild();    n  =  n.getFirstChild();  n  =  n.getFirstChild();	  	compilable	  [FE]  RuntimeException  	49	2	add
100	[BUG]  [BUGGY]          n    =    n.getFirstChild();    n  =  n.getFirstChild();  n  =  n.getFirstChild();  n  =  n.getFirstChild();  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          n    =    n.getFirstChild();    n  =  n.getFirstChild();  n  =  n.getFirstChild();  n  =  n.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	                n        =        n.getFirstChild();        n    =    n.getFirstChild();    n  =  n.getFirstChild();  n  =  n.getFirstChild();	  	compilable	  [FE]  RuntimeException  	49	2	add
101	[BUG]  [BUGGY]          n    =    n.getFirstChild();    n  =  n.getFirstChild();  Node  n  =  n.getFirstChild();  n  =  n.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          n    =    n.getFirstChild();    n  =  n.getFirstChild();  Node  n  =  n.getFirstChild();  n  =  n.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	                n        =        n.getFirstChild();        n    =    n.getFirstChild();    Node  n  =  n.getFirstChild();  n  =  n.getFirstChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	49	None	add
102	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          n    =    n.getFirstChild();    n  =  n.getFirstChild();  n  =  n.getFirstChild();  n  =  n.getLastChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	add	                n        =        n.getFirstChild();        n    =    n.getFirstChild();    n  =  n.getFirstChild();  n  =  n.getLastChild();	  	compilable	  [FE]  RuntimeException  	49	2	add
103	[BUG]  [BUGGY]          n    =    n.getFirstChild();    n  =  n.getFirstChild();  n  =  n.getFirstChild();  n  =  n.getLastChild();  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          n    =    n.getFirstChild();    n  =  n.getFirstChild();  n  =  n.getFirstChild();  n  =  n.getLastChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	                n        =        n.getFirstChild();        n    =    n.getFirstChild();    n  =  n.getFirstChild();  n  =  n.getLastChild();	  	compilable	  [FE]  RuntimeException  	49	2	add
104	[BUG]  [BUGGY]          n    =    n.getFirstChild();    n  =  n.getFirstChild();  int  n  =  n.getFirstChild();  n  =  n.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          n    =    n.getFirstChild();    n  =  n.getFirstChild();  int  n  =  n.getFirstChild();  n  =  n.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	                n        =        n.getFirstChild();        n    =    n.getFirstChild();    int  n  =  n.getFirstChild();  n  =  n.getFirstChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	49	None	add
105	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          n    =    n.getFirstChild();    n  =  n.getFirstChild();  n  =  n.getLastChild();  n  =  n.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	add	                n        =        n.getFirstChild();        n    =    n.getFirstChild();    n  =  n.getLastChild();  n  =  n.getFirstChild();	  	compilable	  [FE]  RuntimeException  	49	2	add
106	[BUG]  [BUGGY]          n    =    n.getFirstChild();    n  =  n.getFirstChild();  n  =  n.getLastChild();  n  =  n.getFirstChild();  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          n    =    n.getFirstChild();    n  =  n.getFirstChild();  n  =  n.getLastChild();  n  =  n.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	                n        =        n.getFirstChild();        n    =    n.getFirstChild();    n  =  n.getLastChild();  n  =  n.getFirstChild();	  	compilable	  [FE]  RuntimeException  	49	2	add
107	[BUG]  [BUGGY]          n    =    n.getFirstChild();    n  =  n.getFirstChild();  node  =  n.getFirstChild();  n  =  n.getFirstChild();  [CE]  cannot  find  symbol  node  [FE]              RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          n    =    n.getFirstChild();    n  =  n.getFirstChild();  node  =  n.getFirstChild();  n  =  n.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	                n        =        n.getFirstChild();        n    =    n.getFirstChild();    node  =  n.getFirstChild();  n  =  n.getFirstChild();	  	non-compiled	[CE]  cannot  find  symbol  node	49	None	add
108	[BUG]  [BUGGY]  Node  finallyBlock  =  ALLCatchNodes.getLastChild();  [CE]  cannot  find  symbol  ALLCatchNodes  [FE]        RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  ALLCatchNodes.getLastChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  ALLCatchNodes.getLastChild();	  Node    finallyBlock    =    allCatchNodes.getLastChild();    Node    finallyBlock    =    ALLCatchNodes.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  ALLCatchNodes	121	None	replace
109	[BUG]  [BUGGY]  Node  finallyBlock  =  ALLCatchNodes.getFirstChild();  [CE]  cannot  find  symbol  ALLCatchNodes  [FE]          RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  ALLCatchNodes.getFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  ALLCatchNodes.getFirstChild();	  Node    finallyBlock    =    allCatchNodes.getLastChild();    Node    finallyBlock    =    ALLCatchNodes.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  ALLCatchNodes	121	None	replace
110	[BUG]  [BUGGY]  Node  finallyBlock  =  AllCatchNodes.getLastChild();  [CE]  cannot  find  symbol  AllCatchNodes  [FE]            RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  AllCatchNodes.getLastChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  AllCatchNodes.getLastChild();	  Node    finallyBlock    =    allCatchNodes.getLastChild();    Node    finallyBlock    =    ALLCatchNodes.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  AllCatchNodes	121	None	replace
111	[BUG]  [BUGGY]  Node  finallyBlock  =  allCatchNodes.getFirstChild();  Node  finallyBlock  =  finallyBlock.removeFirstChild();  System.arraycopy(allCatchNodes,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName);  [CE]  ')'  expected  [FE]              IllegalStateException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  allCatchNodes.getFirstChild();  Node  finallyBlock  =  finallyBlock.removeFirstChild();  System.arraycopy(allCatchNodes,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName);  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  allCatchNodes.getFirstChild();  Node  finallyBlock  =  finallyBlock.removeFirstChild();  System.arraycopy(allCatchNodes,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName);	  Node    finallyBlock    =    n.removeFirstChild();    Node    finallyBlock    =    n.removeFirstChild();    System.arraycopy(allCatchNodes,    0,    tryMinimizeExits(finallyBlock,    exitType,    labelName);    	non-compiled	[CE]  ')'  expected	130	None	replace
112	[BUG]  [BUGGY]  Node  finallyBlock  =  n.getFirstChild();  Node  finallyBlock  =  finallyBlock.removeFirstChild();  System.arraycopy(allCatchNodes,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName);  [CE]  ')'  expected  [FE]                IllegalStateException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  n.getFirstChild();  Node  finallyBlock  =  finallyBlock.removeFirstChild();  System.arraycopy(allCatchNodes,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName);  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  n.getFirstChild();  Node  finallyBlock  =  finallyBlock.removeFirstChild();  System.arraycopy(allCatchNodes,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName);	  Node    finallyBlock    =    n.removeFirstChild();    Node    finallyBlock    =    n.removeFirstChild();    System.arraycopy(allCatchNodes,    0,    tryMinimizeExits(finallyBlock,    exitType,    labelName);    	non-compiled	[CE]  ')'  expected	130	None	replace
113	[BUG]  [BUGGY]  Node  finallyBlock  =  n.removeFirstChild();  Node  finallyBlock  =  finallyBlock.removeFirstChild();  System.arraycopy(allCatchNodes,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName);  [CE]  ')'  expected  [FE]                  IllegalStateException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  n.removeFirstChild();  Node  finallyBlock  =  finallyBlock.removeFirstChild();  System.arraycopy(allCatchNodes,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName);  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  n.removeFirstChild();  Node  finallyBlock  =  finallyBlock.removeFirstChild();  System.arraycopy(allCatchNodes,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName);	  Node    finallyBlock    =    n.removeFirstChild();    Node    finallyBlock    =    n.removeFirstChild();    System.arraycopy(allCatchNodes,    0,    tryMinimizeExits(finallyBlock,    exitType,    labelName);    	non-compiled	[CE]  ')'  expected	130	None	replace
114	[BUG]  [BUGGY]  Node  finallyBlock  =  allCatchNodes.removeFirstChild();  Node  finallyBlock  =  finallyBlock.removeFirstChild();  System.arraycopy(allCatchNodes,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName);  [CE]  ')'  expected  [FE]                    IllegalStateException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  allCatchNodes.removeFirstChild();  Node  finallyBlock  =  finallyBlock.removeFirstChild();  System.arraycopy(allCatchNodes,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName);  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  allCatchNodes.removeFirstChild();  Node  finallyBlock  =  finallyBlock.removeFirstChild();  System.arraycopy(allCatchNodes,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName);	  Node    finallyBlock    =    n.removeFirstChild();    Node    finallyBlock    =    n.removeFirstChild();    System.arraycopy(allCatchNodes,    0,    tryMinimizeExits(finallyBlock,    exitType,    labelName);    	non-compiled	[CE]  ')'  expected	130	None	replace
115	[BUG]  [BUGGY]  Node  finallyBlock  =  allCatchNodes.getFirstChild();  Node  finallyBlock  =  n.removeFirstChild();  System.arraycopy(allCatchNodes,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName);  [CE]  ')'  expected  [FE]                      IllegalStateException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  allCatchNodes.getFirstChild();  Node  finallyBlock  =  n.removeFirstChild();  System.arraycopy(allCatchNodes,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName);  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  allCatchNodes.getFirstChild();  Node  finallyBlock  =  n.removeFirstChild();  System.arraycopy(allCatchNodes,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName);	  Node    finallyBlock    =    n.removeFirstChild();    Node    finallyBlock    =    n.removeFirstChild();    System.arraycopy(allCatchNodes,    0,    tryMinimizeExits(finallyBlock,    exitType,    labelName);    	non-compiled	[CE]  ')'  expected	130	None	replace
116	[BUG]  [BUGGY]  Node  finallyBlock  =  n.removeFirstChild();  tryMinimizeExits(labelName,  exitType,  labelName);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]              IllegalStateException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  n.removeFirstChild();  tryMinimizeExits(labelName,  exitType,  labelName);  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  n.removeFirstChild();  tryMinimizeExits(labelName,  exitType,  labelName);	  Node    finallyBlock    =    n.removeFirstChild();    Node    finallyBlock    =    n.removeFirstChild();    }    else    {    tryMinimizeExits(labelName,    exitType,    labelName);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	22	None	replace
117	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                IllegalStateException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.isLabel());  Node  finallyBlock  =  n.removeFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	add	Preconditions.checkState(n.isLabel());  Node  finallyBlock  =  n.removeFirstChild();	  Node    finallyBlock    =    n.removeFirstChild();    Node    finallyBlock    =    n.removeFirstChild();    }    else    {    tryMinimizeExits(labelName,    exitType,    labelName);    	compilable	  [FE]  RuntimeException  	22	2	replace
118	[BUG]  [BUGGY]  Preconditions.checkState(n.isLabel());  Node  finallyBlock  =  n.removeFirstChild();  [FE]  RuntimeException  [FE]                IllegalStateException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.isLabel());  Node  finallyBlock  =  n.removeFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.isLabel());  Node  finallyBlock  =  n.removeFirstChild();	  Node    finallyBlock    =    n.removeFirstChild();    Node    finallyBlock    =    n.removeFirstChild();    }    else    {    tryMinimizeExits(labelName,    exitType,    labelName);    	compilable	  [FE]  RuntimeException  	22	2	replace
119	[BUG]  [BUGGY]  Preconditions.checkState(n.isLabel());  Node  labelBlock  =  n.getFirstChild();  [CE]  cannot  find  symbol  finallyBlock  [FE]        AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.isLabel());  Node  labelBlock  =  n.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.isLabel());  Node  labelBlock  =  n.getFirstChild();	          Node    labelBlock    =    n.getFirstChild();    Preconditions.checkState(n.isLabel());    Node    labelBlock    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	102	None	replace
120	[BUG]  [BUGGY]  Preconditions.checkState(n.isLabel(),  n.isLabel());  Node  labelBlock  =  n.getFirstChild();  [CE]  cannot  find  symbol  finallyBlock  [FE]          AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.isLabel(),  n.isLabel());  Node  labelBlock  =  n.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.isLabel(),  n.isLabel());  Node  labelBlock  =  n.getFirstChild();	          Node    labelBlock    =    n.getFirstChild();    Preconditions.checkState(n.isLabel());    Node    labelBlock    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	102	None	replace
121	[BUG]  [BUGGY]  n  =  catchNode.getNext();  [CE]  cannot  find  symbol  catchNode  [FE]          RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  n  =  catchNode.getNext();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	n  =  catchNode.getNext();	  n    =    n.getNext();    	non-compiled	[CE]  cannot  find  symbol  catchNode	11	None	replace
122	[BUG]  [BUGGY]  Node  n  =  n.getNext();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]            RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  n  =  n.getNext();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  n  =  n.getNext();	  n    =    n.getNext();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	11	None	replace
123	[BUG]  [BUGGY]  n  =  n.getParent();  [CE]  cannot  find  symbol  finallyBlock  [FE]              RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  n  =  n.getParent();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	n  =  n.getParent();	  n    =    n.getNext();    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	11	None	replace
124	[BUG]  [BUGGY]  Node  finallyBlock  =  allCatchNodes.getFirstChild();  Node  finallyBlock  =  n.removeFirstChild();  [CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          IllegalStateException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  allCatchNodes.getFirstChild();  Node  finallyBlock  =  n.removeFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  allCatchNodes.getFirstChild();  Node  finallyBlock  =  n.removeFirstChild();	  Node    finallyBlock    =    n.removeFirstChild();    Node    finallyBlock    =    n.removeFirstChild();    }    tryMinimizeExits(finallyBlock,    exitType,    labelName);    	non-compiled	[CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	20	None	replace
125	[BUG]  [BUGGY]  Node  finallyBlock  =  allCatchNodes.getFirstChild();  Node  finallyBlock  =  finallyBlock.removeFirstChild();  [CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]            IllegalStateException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  allCatchNodes.getFirstChild();  Node  finallyBlock  =  finallyBlock.removeFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  allCatchNodes.getFirstChild();  Node  finallyBlock  =  finallyBlock.removeFirstChild();	  Node    finallyBlock    =    n.removeFirstChild();    Node    finallyBlock    =    n.removeFirstChild();    }    tryMinimizeExits(finallyBlock,    exitType,    labelName);    	non-compiled	[CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	20	None	replace
126	[BUG]  [BUGGY]  Node  labelBlock  =  catchNode.getNext();  [CE]  cannot  find  symbol  catchNode  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  labelBlock  =  catchNode.getNext();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  labelBlock  =  catchNode.getNext();	  Node    labelBlock    =    n.getNext();    	non-compiled	[CE]  cannot  find  symbol  catchNode	86	None	replace
127	[BUG]  [BUGGY]  Node  labelBlock  =  n.getParent();  [CE]  cannot  find  symbol  finallyBlock  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  labelBlock  =  n.getParent();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  labelBlock  =  n.getParent();	  Node    labelBlock    =    n.getNext();    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	86	None	replace
128	[BUG]  [BUGGY]  Preconditions.checkState(labelName.isLabel());  [CE]  cannot  find  symbol  [FE]        RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(labelName.isLabel());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(labelName.isLabel());	  Preconditions.checkState(falseBlock.isLabel());    	non-compiled	[CE]  cannot  find  symbol	115	None	replace
129	[BUG]  [BUGGY]  Preconditions.checkState(falseBlock.isFinally());  [CE]  cannot  find  symbol  falseBlock  [FE]          RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(falseBlock.isFinally());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(falseBlock.isFinally());	  Preconditions.checkState(falseBlock.isLabel());    	non-compiled	[CE]  cannot  find  symbol  falseBlock	115	None	replace
130	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.isLabel());  [CE]  cannot  find  symbol  finallyBlock  [FE]            RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(allCatchNodes.isLabel());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(allCatchNodes.isLabel());	  Preconditions.checkState(falseBlock.isLabel());    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	115	None	replace
131	[BUG]  [BUGGY]  Node  node  =  n.getFirstChild();  [CE]  cannot  find  symbol  finallyBlock  [FE]          RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  node  =  n.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  node  =  n.getFirstChild();	          n    =    n.getFirstChild();    node    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	120	None	replace
132	[BUG]  [BUGGY]  node  =  n.getFirstChild();  [CE]  cannot  find  symbol  node  [FE]            RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  node  =  n.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	node  =  n.getFirstChild();	          n    =    n.getFirstChild();    node    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  node	120	None	replace
133	[BUG]  [BUGGY]  Node  =  n.getFirstChild();  [CE]  cannot  find  symbol  Node  [FE]              RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  =  n.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  =  n.getFirstChild();	          n    =    n.getFirstChild();    node    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  Node	120	None	replace
134	[BUG]  [BUGGY]  Node  finallyBlock  =  allSatchNodes.getLastChild();  [CE]  cannot  find  symbol  allSatchNodes  [FE]            RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  allSatchNodes.getLastChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  allSatchNodes.getLastChild();	  Node    finallyBlock    =    allCatchNodes.getLastChild();    Node    finallyBlock    =    allSatchNodes.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  allSatchNodes	31	None	replace
135	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Preconditions.checkState(n.isLabel());  [CE]  cannot  find  symbol  finallyBlock  [FE]    RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Preconditions.checkState(n.isLabel());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(allCatchNodes.hasOneChild());  Preconditions.checkState(n.isLabel());	          Preconditions.checkState(n.isLabel());    Preconditions.checkState(n.isLabel());    }    else    if(NodeUtil.hasFinally(n))    {    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	69	None	replace
136	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Preconditions.checkState(n.isLabel());  }  else  if(NodeUtil.hasFinally(n))  {  [CE]  cannot  find  symbol  finallyBlock  [FE]      RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Preconditions.checkState(n.isLabel());  }  else  if(NodeUtil.hasFinally(n))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(allCatchNodes.hasOneChild());  Preconditions.checkState(n.isLabel());  }  else  if(NodeUtil.hasFinally(n))  {	          Preconditions.checkState(n.isLabel());    Preconditions.checkState(n.isLabel());    }    else    if(NodeUtil.hasFinally(n))    {    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	69	None	replace
137	[BUG]  [BUGGY]  Preconditions.checkState(n.isFunction()  &&  NodeUtil.hasFinally(n));  [CE]  cannot  find  symbol  finallyBlock  [FE]        RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.isFunction()  &&  NodeUtil.hasFinally(n));  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.isFunction()  &&  NodeUtil.hasFinally(n));	  Preconditions.checkState(n.isFunction());    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	162	None	replace
138	[BUG]  [BUGGY]  Preconditions.checkState(n.isFunction(),  exitType);  [CE]  cannot  find  symbol  finallyBlock  [FE]          RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.isFunction(),  exitType);  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.isFunction(),  exitType);	  Preconditions.checkState(n.isFunction());    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	162	None	replace
139	[BUG]  [BUGGY]  Preconditions.checkState(n.isFunction()  &&!NodeUtil.hasFinally(n));  [CE]  cannot  find  symbol  finallyBlock  [FE]            RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.isFunction()  &&!NodeUtil.hasFinally(n));  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.isFunction()  &&!NodeUtil.hasFinally(n));	  Preconditions.checkState(n.isFunction());    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	162	None	replace
140	[BUG]  [BUGGY]  Node  c  =  n.getLastChild();  [CE]  cannot  find  symbol  finallyBlock  [FE]          AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  c  =  n.getLastChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  c  =  n.getLastChild();	  Node    c    =    allCatchNodes.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	40	None	replace
141	[BUG]  [BUGGY]  Node  c  =  nodes.getLastChild();  [CE]  cannot  find  symbol  nodes  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  c  =  nodes.getLastChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  c  =  nodes.getLastChild();	  Node    c    =    allCatchNodes.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  nodes	40	None	replace
142	[BUG]  [BUGGY]  Node  c  =  this.allCatchNodes.getLastChild();  [CE]  cannot  find  symbol  allCatchNodes  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  c  =  this.allCatchNodes.getLastChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  c  =  this.allCatchNodes.getLastChild();	  Node    c    =    allCatchNodes.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	40	None	replace
143	[BUG]  [BUGGY]  Preconditions.checkState(n.isFinally()  ||  n.isFinally());  [CE]  cannot  find  symbol  [FE]        RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.isFinally()  ||  n.isFinally());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.isFinally()  ||  n.isFinally());	  Preconditions.checkState(n.isFinally());    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
144	[BUG]  [BUGGY]  Preconditions.checkState(n.isFinally(),  exitType);  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.isFinally(),  exitType);  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.isFinally(),  exitType);	  Preconditions.checkState(n.isFinally());    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
145	[BUG]  [BUGGY]  Preconditions.checkState(n.isFinally()  &&!NodeUtil.hasFinally(n));  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.isFinally()  &&!NodeUtil.hasFinally(n));  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.isFinally()  &&!NodeUtil.hasFinally(n));	  Preconditions.checkState(n.isFinally());    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
146	[BUG]  [BUGGY]  Preconditions.checkState(n.isFinally()  ||!NodeUtil.hasFinally(n));  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.isFinally()  ||!NodeUtil.hasFinally(n));  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.isFinally()  ||!NodeUtil.hasFinally(n));	  Preconditions.checkState(n.isFinally());    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
147	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getfirstChild();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  elseBlock  =  allCatchNodes.getfirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  elseBlock  =  allCatchNodes.getfirstChild();	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    elseBlock    =    allCatchNodes.getfirstChild();    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
148	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isExitBlock(n)||  NodeUtil.isExitBlock(n));  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(NodeUtil.isExitBlock(n)||  NodeUtil.isExitBlock(n));  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(NodeUtil.isExitBlock(n)||  NodeUtil.isExitBlock(n));	  Preconditions.checkState(NodeUtil.isExitBlock(n));    	non-compiled	[CE]  cannot  find  symbol	145	None	replace
149	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isExitBlock(n)&&  NodeUtil.hasFinally(n));  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(NodeUtil.isExitBlock(n)&&  NodeUtil.hasFinally(n));  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(NodeUtil.isExitBlock(n)&&  NodeUtil.hasFinally(n));	  Preconditions.checkState(NodeUtil.isExitBlock(n));    	non-compiled	[CE]  cannot  find  symbol	145	None	replace
150	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isExitBlock(n)||  NodeUtil.hasFinally(n));  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(NodeUtil.isExitBlock(n)||  NodeUtil.hasFinally(n));  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(NodeUtil.isExitBlock(n)||  NodeUtil.hasFinally(n));	  Preconditions.checkState(NodeUtil.isExitBlock(n));    	non-compiled	[CE]  cannot  find  symbol	145	None	replace
151	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.hasExitBlock(n));  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(NodeUtil.hasExitBlock(n));  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(NodeUtil.hasExitBlock(n));	  Preconditions.checkState(NodeUtil.isExitBlock(n));    	non-compiled	[CE]  cannot  find  symbol	145	None	replace
152	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isFinally(n)||  NodeUtil.hasFinally(n));  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(NodeUtil.isFinally(n)||  NodeUtil.hasFinally(n));  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(NodeUtil.isFinally(n)||  NodeUtil.hasFinally(n));	  Preconditions.checkState(NodeUtil.hasFinally(n)||    NodeUtil.hasFinally(n));    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
153	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.hasFinally(c)||  NodeUtil.hasFinally(n));  [CE]  cannot  find  symbol  c  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(NodeUtil.hasFinally(c)||  NodeUtil.hasFinally(n));  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(NodeUtil.hasFinally(c)||  NodeUtil.hasFinally(n));	  Preconditions.checkState(NodeUtil.hasFinally(n)||    NodeUtil.hasFinally(n));    	non-compiled	[CE]  cannot  find  symbol  c	27	None	replace
154	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.hasFinally(labelName)||  NodeUtil.hasFinally(n));  [CE]  method  hasFinally  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(NodeUtil.hasFinally(labelName)||  NodeUtil.hasFinally(n));  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(NodeUtil.hasFinally(labelName)||  NodeUtil.hasFinally(n));	  Preconditions.checkState(NodeUtil.hasFinally(n)||    NodeUtil.hasFinally(n));    	non-compiled	[CE]  method  hasFinally  in  class  NodeUtil  cannot  be  applied  to  given  types;	27	None	replace
155	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(n));  [CE]  cannot  find  symbol  finallyBlock  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(n));  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(NodeUtil.hasFinally(n)&&  NodeUtil.hasFinally(n));	  Preconditions.checkState(NodeUtil.hasFinally(n)||    NodeUtil.hasFinally(n));    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	27	None	replace
156	[BUG]  [BUGGY]  Node  finallyBlock  =  not.getFirstChild();  [CE]  cannot  find  symbol  not  [FE]        RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  not.getFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  not.getFirstChild();	  Node    finallyBlock    =    nodes.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  not	7	None	replace
157	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkArgument(n.isLabel());  Preconditions.checkState(n.isLabel());  Preconditions.checkArgument(n.isLabel());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	add	                Preconditions.checkState(n.isLabel());        Preconditions.checkArgument(n.isLabel());    Preconditions.checkState(n.isLabel());  Preconditions.checkArgument(n.isLabel());	  	compilable	  [FE]  RuntimeException  	135	2	add
158	[BUG]  [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkArgument(n.isLabel());  Preconditions.checkState(n.isLabel());  Preconditions.checkArgument(n.isLabel());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkArgument(n.isLabel());  Preconditions.checkState(n.isLabel());  Preconditions.checkArgument(n.isLabel());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	                Preconditions.checkState(n.isLabel());        Preconditions.checkArgument(n.isLabel());    Preconditions.checkState(n.isLabel());  Preconditions.checkArgument(n.isLabel());	  	compilable	  [FE]  RuntimeException  	135	2	add
159	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkArgument(n.isLabel());  Preconditions.checkArgument(n.isLabel());  Preconditions.checkArgument(n.isLabel());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	add	                Preconditions.checkState(n.isLabel());        Preconditions.checkArgument(n.isLabel());    Preconditions.checkArgument(n.isLabel());  Preconditions.checkArgument(n.isLabel());	  	compilable	  [FE]  RuntimeException  	135	2	add
160	[BUG]  [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkArgument(n.isLabel());  Preconditions.checkArgument(n.isLabel());  Preconditions.checkArgument(n.isLabel());  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkArgument(n.isLabel());  Preconditions.checkArgument(n.isLabel());  Preconditions.checkArgument(n.isLabel());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	                Preconditions.checkState(n.isLabel());        Preconditions.checkArgument(n.isLabel());    Preconditions.checkArgument(n.isLabel());  Preconditions.checkArgument(n.isLabel());	  	compilable	  [FE]  RuntimeException  	135	2	add
161	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkArgument(n.isLabel());  Preconditions.checkState(NodeUtil.hasFinally(n));  Preconditions.checkArgument(n.isLabel());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	add	                Preconditions.checkState(n.isLabel());        Preconditions.checkArgument(n.isLabel());    Preconditions.checkState(NodeUtil.hasFinally(n));  Preconditions.checkArgument(n.isLabel());	  	compilable	  [FE]  RuntimeException  	135	2	add
162	[BUG]  [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkArgument(n.isLabel());  Preconditions.checkState(NodeUtil.hasFinally(n));  Preconditions.checkArgument(n.isLabel());  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkArgument(n.isLabel());  Preconditions.checkState(NodeUtil.hasFinally(n));  Preconditions.checkArgument(n.isLabel());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	                Preconditions.checkState(n.isLabel());        Preconditions.checkArgument(n.isLabel());    Preconditions.checkState(NodeUtil.hasFinally(n));  Preconditions.checkArgument(n.isLabel());	  	compilable	  [FE]  RuntimeException  	135	2	add
163	[BUG]  [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkArgument(n.isLabel());  Preconditions.checkState(falseBlock.isLabel());  Preconditions.checkArgument(n.isLabel());  [CE]  cannot  find  symbol  falseBlock  [FE]          RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkArgument(n.isLabel());  Preconditions.checkState(falseBlock.isLabel());  Preconditions.checkArgument(n.isLabel());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	                Preconditions.checkState(n.isLabel());        Preconditions.checkArgument(n.isLabel());    Preconditions.checkState(falseBlock.isLabel());  Preconditions.checkArgument(n.isLabel());	  	non-compiled	[CE]  cannot  find  symbol  falseBlock	135	None	add
164	[BUG]  [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkArgument(n.isLabel());  Node  n  =  allCatchNodes.getFirstChild();  Preconditions.checkArgument(n.isLabel());  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]            RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkArgument(n.isLabel());  Node  n  =  allCatchNodes.getFirstChild();  Preconditions.checkArgument(n.isLabel());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	                Preconditions.checkState(n.isLabel());        Preconditions.checkArgument(n.isLabel());    Node  n  =  allCatchNodes.getFirstChild();  Preconditions.checkArgument(n.isLabel());	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	135	None	add
165	[BUG]  [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkArgument(n.isLabel());  Preconditions.checkState(labelName.isLabel());  Preconditions.checkArgument(n.isLabel());  [CE]  cannot  find  symbol  [FE]              RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkArgument(n.isLabel());  Preconditions.checkState(labelName.isLabel());  Preconditions.checkArgument(n.isLabel());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	                Preconditions.checkState(n.isLabel());        Preconditions.checkArgument(n.isLabel());    Preconditions.checkState(labelName.isLabel());  Preconditions.checkArgument(n.isLabel());	  	non-compiled	[CE]  cannot  find  symbol	135	None	add
166	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild()!=  null);  Node  labelBlock  =  n.getLastChild();  [CE]  cannot  find  symbol  finallyBlock  [FE]          AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.getFirstChild()!=  null);  Node  labelBlock  =  n.getLastChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.getFirstChild()!=  null);  Node  labelBlock  =  n.getLastChild();	          Node    labelBlock    =    n.getFirstChild();    Node    labelBlock    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	88	None	replace
167	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  null);  Node  labelBlock  =  n.getLastChild();  [CE]  cannot  find  symbol  finallyBlock  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  null);  Node  labelBlock  =  n.getLastChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.getFirstChild()  ==  null);  Node  labelBlock  =  n.getLastChild();	          Node    labelBlock    =    n.getFirstChild();    Node    labelBlock    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	88	None	replace
168	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  n);  Node  labelBlock  =  n.getLastChild();  [CE]  cannot  find  symbol  finallyBlock  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  n);  Node  labelBlock  =  n.getLastChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.getFirstChild()  ==  n);  Node  labelBlock  =  n.getLastChild();	          Node    labelBlock    =    n.getFirstChild();    Node    labelBlock    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	88	None	replace
169	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  n  =  allCatchNodes.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]            RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  n  =  allCatchNodes.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(allCatchNodes.hasOneChild());  Node  n  =  allCatchNodes.getFirstChild();	          Preconditions.checkState(n.isLabel());    Node    n    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	64	None	replace
170	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.isLabel());  Node  n  =  allCatchNodes.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]              RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(allCatchNodes.isLabel());  Node  n  =  allCatchNodes.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(allCatchNodes.isLabel());  Node  n  =  allCatchNodes.getFirstChild();	          Preconditions.checkState(n.isLabel());    Node    n    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	64	None	replace
171	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.getFirstChild());  Node  n  =  allCatchNodes.getFirstChild();  [CE]  no  suitable  method  found  for  checkState(Node)  [FE]                RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(allCatchNodes.getFirstChild());  Node  n  =  allCatchNodes.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(allCatchNodes.getFirstChild());  Node  n  =  allCatchNodes.getFirstChild();	          Preconditions.checkState(n.isLabel());    Node    n    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  no  suitable  method  found  for  checkState(Node)	64	None	replace
172	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  labelName);  [CE]  cannot  find  symbol  finallyBlock  [FE]              RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  labelName);  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  labelName);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	15	None	replace
173	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  c);  [CE]  cannot  find  symbol  c  [FE]                RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  c);  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  c);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  c	15	None	replace
174	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  exitType);  [CE]  cannot  find  symbol  finallyBlock  [FE]                  RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  exitType);  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  exitType);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	15	None	replace
175	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME);  [CE]  cannot  find  symbol  finallyBlock  [FE]                    RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME);  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.getType()!=  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	15	None	replace
176	[BUG]  [BUGGY]  AssertionFailedError.checkState(NodeUtil.hasFinally(n));  [CE]  cannot  find  symbol  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  AssertionFailedError.checkState(NodeUtil.hasFinally(n));  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	AssertionFailedError.checkState(NodeUtil.hasFinally(n));	          Preconditions.checkState(NodeUtil.hasFinally(n));    AssertionFailedError.checkState(NodeUtil.hasFinally(n));    	non-compiled	[CE]  cannot  find  symbol  AssertionFailedError	154	None	replace
177	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isFinally(n));  AssertionFailedError.checkState(NodeUtil.hasFinally(n));  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(NodeUtil.isFinally(n));  AssertionFailedError.checkState(NodeUtil.hasFinally(n));  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(NodeUtil.isFinally(n));  AssertionFailedError.checkState(NodeUtil.hasFinally(n));	          Preconditions.checkState(NodeUtil.hasFinally(n));    AssertionFailedError.checkState(NodeUtil.hasFinally(n));    	non-compiled	[CE]  cannot  find  symbol	154	None	replace
178	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.hasFinally(c));  AssertionFailedError.checkState(NodeUtil.hasFinally(n));  [CE]  cannot  find  symbol  c  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(NodeUtil.hasFinally(c));  AssertionFailedError.checkState(NodeUtil.hasFinally(n));  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(NodeUtil.hasFinally(c));  AssertionFailedError.checkState(NodeUtil.hasFinally(n));	          Preconditions.checkState(NodeUtil.hasFinally(n));    AssertionFailedError.checkState(NodeUtil.hasFinally(n));    	non-compiled	[CE]  cannot  find  symbol  c	154	None	replace
179	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Preconditions.checkState(NodeUtil.hasFinally(n));    Preconditions.checkState(NodeUtil.hasFinally(n));  n  =  n.getLastChild();  Preconditions.checkState(NodeUtil.hasFinally(n));  Preconditions.checkState(NodeUtil.hasFinally(n));  n  =  n.getLastChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	add	                Preconditions.checkState(NodeUtil.hasFinally(n));        Preconditions.checkState(NodeUtil.hasFinally(n));    n    =    n.getLastChild();    Preconditions.checkState(NodeUtil.hasFinally(n));  Preconditions.checkState(NodeUtil.hasFinally(n));  n  =  n.getLastChild();	  	compilable	  [FE]  RuntimeException  	74	2	add
180	[BUG]  [BUGGY]          Preconditions.checkState(NodeUtil.hasFinally(n));    Preconditions.checkState(NodeUtil.hasFinally(n));  n  =  n.getLastChild();  Preconditions.checkState(NodeUtil.hasFinally(n));  Preconditions.checkState(NodeUtil.hasFinally(n));  n  =  n.getLastChild();  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Preconditions.checkState(NodeUtil.hasFinally(n));    Preconditions.checkState(NodeUtil.hasFinally(n));  n  =  n.getLastChild();  Preconditions.checkState(NodeUtil.hasFinally(n));  Preconditions.checkState(NodeUtil.hasFinally(n));  n  =  n.getLastChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	                Preconditions.checkState(NodeUtil.hasFinally(n));        Preconditions.checkState(NodeUtil.hasFinally(n));    n    =    n.getLastChild();    Preconditions.checkState(NodeUtil.hasFinally(n));  Preconditions.checkState(NodeUtil.hasFinally(n));  n  =  n.getLastChild();	  	compilable	  [FE]  RuntimeException  	74	2	add
181	[BUG]  [BUGGY]          Preconditions.checkState(NodeUtil.hasFinally(n));    Preconditions.checkState(NodeUtil.hasFinally(n));  n  =  n.getLastChild();  Preconditions.checkState(NodeUtil.hasFinally(n));  preconditions.checkState(NodeUtil.hasFinally(n));  n  =  n.getLastChild();  [CE]  cannot  find  symbol  preconditions  [FE]      AssertionFailedError    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Preconditions.checkState(NodeUtil.hasFinally(n));    Preconditions.checkState(NodeUtil.hasFinally(n));  n  =  n.getLastChild();  Preconditions.checkState(NodeUtil.hasFinally(n));  preconditions.checkState(NodeUtil.hasFinally(n));  n  =  n.getLastChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	                Preconditions.checkState(NodeUtil.hasFinally(n));        Preconditions.checkState(NodeUtil.hasFinally(n));    n    =    n.getLastChild();    Preconditions.checkState(NodeUtil.hasFinally(n));  preconditions.checkState(NodeUtil.hasFinally(n));  n  =  n.getLastChild();	  	non-compiled	[CE]  cannot  find  symbol  preconditions	74	None	add
182	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Preconditions.checkState(NodeUtil.hasFinally(n));    Preconditions.checkState(NodeUtil.hasFinally(n));  n  =  n.getLastChild();  Preconditions.checkState(NodeUtil.hasFinally(n));  Preconditions.checkState(NodeUtil.hasFinally(n));  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	add	                Preconditions.checkState(NodeUtil.hasFinally(n));        Preconditions.checkState(NodeUtil.hasFinally(n));    n    =    n.getLastChild();    Preconditions.checkState(NodeUtil.hasFinally(n));  Preconditions.checkState(NodeUtil.hasFinally(n));	  	compilable	  [FE]  RuntimeException  	74	2	add
183	[BUG]  [BUGGY]          Preconditions.checkState(NodeUtil.hasFinally(n));    Preconditions.checkState(NodeUtil.hasFinally(n));  n  =  n.getLastChild();  Preconditions.checkState(NodeUtil.hasFinally(n));  Preconditions.checkState(NodeUtil.hasFinally(n));  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Preconditions.checkState(NodeUtil.hasFinally(n));    Preconditions.checkState(NodeUtil.hasFinally(n));  n  =  n.getLastChild();  Preconditions.checkState(NodeUtil.hasFinally(n));  Preconditions.checkState(NodeUtil.hasFinally(n));  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	                Preconditions.checkState(NodeUtil.hasFinally(n));        Preconditions.checkState(NodeUtil.hasFinally(n));    n    =    n.getLastChild();    Preconditions.checkState(NodeUtil.hasFinally(n));  Preconditions.checkState(NodeUtil.hasFinally(n));	  	compilable	  [FE]  RuntimeException  	74	2	add
184	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  finallyBlock  =  allCatchNodes.getFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	add	Preconditions.checkState(allCatchNodes.hasOneChild());  Node  finallyBlock  =  allCatchNodes.getFirstChild();	  Node    finallyBlock    =    allCatchNodes.getFirstChild();    Node    finallyBlock    =    allCatchNodes.getFirstChild();    	compilable	  [FE]  RuntimeException  	1	2	replace
185	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  finallyBlock  =  allCatchNodes.getFirstChild();  [FE]  RuntimeException  [FE]        RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  finallyBlock  =  allCatchNodes.getFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(allCatchNodes.hasOneChild());  Node  finallyBlock  =  allCatchNodes.getFirstChild();	  Node    finallyBlock    =    allCatchNodes.getFirstChild();    Node    finallyBlock    =    allCatchNodes.getFirstChild();    	compilable	  [FE]  RuntimeException  	1	2	replace
186	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild(),  Node  finallyBlock  =  allCatchNodes.getFirstChild();  [CE]  ')'  expected  [FE]          RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild(),  Node  finallyBlock  =  allCatchNodes.getFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(allCatchNodes.hasOneChild(),  Node  finallyBlock  =  allCatchNodes.getFirstChild();	  Node    finallyBlock    =    allCatchNodes.getFirstChild();    Node    finallyBlock    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  ')'  expected	1	None	replace
187	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION);  [CE]  cannot  find  symbol  finallyBlock  [FE]          RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION);  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.getType()!=  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	13	None	replace
188	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION,  labelName);  [CE]  cannot  find  symbol  finallyBlock  [FE]            RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION,  labelName);  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION,  labelName);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	13	None	replace
189	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  cannot  find  symbol  finallyBlock  [FE]              RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	13	None	replace
190	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&!NodeUtil.hasFinally(n));  [CE]  cannot  find  symbol  finallyBlock  [FE]                RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&!NodeUtil.hasFinally(n));  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&!NodeUtil.hasFinally(n));	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	13	None	replace
191	[BUG]  [BUGGY]  Node  finallyBlock  =  c.getFirstChild();  [CE]  cannot  find  symbol  c  [FE]        RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  c.getFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  c.getFirstChild();	  Node    finallyBlock    =    allCatchNodes.getFirstChild();    Node    finallyBlock    =    c.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  c	118	None	replace
192	[BUG]  [BUGGY]  Node  labelBlock  =  catchNode.getLastChild();  [CE]  cannot  find  symbol  catchNode  [FE]        AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  labelBlock  =  catchNode.getLastChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  labelBlock  =  catchNode.getLastChild();	  Node    labelBlock    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  catchNode	83	None	replace
193	[BUG]  [BUGGY]  Node  labelBlock  =  c.getLastChild();  [CE]  cannot  find  symbol  c  [FE]          AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  labelBlock  =  c.getLastChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  labelBlock  =  c.getLastChild();	  Node    labelBlock    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  c	83	None	replace
194	[BUG]  [BUGGY]  Node  n  =  allCatchNodes.getFirstChild();  Preconditions.checkState(n.isLabel());  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  n  =  allCatchNodes.getFirstChild();  Preconditions.checkState(n.isLabel());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  n  =  allCatchNodes.getFirstChild();  Preconditions.checkState(n.isLabel());	          Preconditions.checkState(n.isLabel());    Node    n    =    allCatchNodes.getFirstChild();    Preconditions.checkState(n.isLabel());    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	63	None	replace
195	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  n  =  allCatchNodes.getFirstChild();  Preconditions.checkState(n.isLabel());  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]            RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  n  =  allCatchNodes.getFirstChild();  Preconditions.checkState(n.isLabel());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(allCatchNodes.hasOneChild());  Node  n  =  allCatchNodes.getFirstChild();  Preconditions.checkState(n.isLabel());	          Preconditions.checkState(n.isLabel());    Node    n    =    allCatchNodes.getFirstChild();    Preconditions.checkState(n.isLabel());    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	63	None	replace
196	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild(),  n);  Node  n  =  allCatchNodes.getFirstChild();  Preconditions.checkState(n.isLabel());  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]              RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild(),  n);  Node  n  =  allCatchNodes.getFirstChild();  Preconditions.checkState(n.isLabel());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(allCatchNodes.hasOneChild(),  n);  Node  n  =  allCatchNodes.getFirstChild();  Preconditions.checkState(n.isLabel());	          Preconditions.checkState(n.isLabel());    Node    n    =    allCatchNodes.getFirstChild();    Preconditions.checkState(n.isLabel());    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	63	None	replace
197	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.getFirstChild()  ==  null);  Node  n  =  allCatchNodes.getFirstChild();  Preconditions.checkState(n.isLabel());  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(allCatchNodes.getFirstChild()  ==  null);  Node  n  =  allCatchNodes.getFirstChild();  Preconditions.checkState(n.isLabel());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(allCatchNodes.getFirstChild()  ==  null);  Node  n  =  allCatchNodes.getFirstChild();  Preconditions.checkState(n.isLabel());	          Preconditions.checkState(n.isLabel());    Node    n    =    allCatchNodes.getFirstChild();    Preconditions.checkState(n.isLabel());    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	63	None	replace
198	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkState(n.isLabel());  }  else  if(NodeUtil.hasFinally(n))  {  Preconditions.checkState(n.isLabel());  Preconditions.checkState(n.isLabel());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	add	                Preconditions.checkState(n.isLabel());        Preconditions.checkState(n.isLabel());    }    else    if(NodeUtil.hasFinally(n))    {    Preconditions.checkState(n.isLabel());  Preconditions.checkState(n.isLabel());	  	compilable	  [FE]  RuntimeException  	68	2	add
199	[BUG]  [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkState(n.isLabel());  }  else  if(NodeUtil.hasFinally(n))  {  Preconditions.checkState(n.isLabel());  Preconditions.checkState(n.isLabel());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkState(n.isLabel());  }  else  if(NodeUtil.hasFinally(n))  {  Preconditions.checkState(n.isLabel());  Preconditions.checkState(n.isLabel());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	                Preconditions.checkState(n.isLabel());        Preconditions.checkState(n.isLabel());    }    else    if(NodeUtil.hasFinally(n))    {    Preconditions.checkState(n.isLabel());  Preconditions.checkState(n.isLabel());	  	compilable	  [FE]  RuntimeException  	68	2	add
200	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkState(n.isLabel());  }  else  if(NodeUtil.hasFinally(n))  {  Preconditions.checkState(n.isLabel());  Preconditions.checkState(n.isLabel());  }  else  if(NodeUtil.hasFinally(n))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	add	                Preconditions.checkState(n.isLabel());        Preconditions.checkState(n.isLabel());    }    else    if(NodeUtil.hasFinally(n))    {    Preconditions.checkState(n.isLabel());  Preconditions.checkState(n.isLabel());  }  else  if(NodeUtil.hasFinally(n))  {	  	compilable	  [FE]  RuntimeException  	68	2	add
201	[BUG]  [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkState(n.isLabel());  }  else  if(NodeUtil.hasFinally(n))  {  Preconditions.checkState(n.isLabel());  Preconditions.checkState(n.isLabel());  }  else  if(NodeUtil.hasFinally(n))  {  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkState(n.isLabel());  }  else  if(NodeUtil.hasFinally(n))  {  Preconditions.checkState(n.isLabel());  Preconditions.checkState(n.isLabel());  }  else  if(NodeUtil.hasFinally(n))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	                Preconditions.checkState(n.isLabel());        Preconditions.checkState(n.isLabel());    }    else    if(NodeUtil.hasFinally(n))    {    Preconditions.checkState(n.isLabel());  Preconditions.checkState(n.isLabel());  }  else  if(NodeUtil.hasFinally(n))  {	  	compilable	  [FE]  RuntimeException  	68	2	add
202	[BUG]  [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkState(n.isLabel());  }  else  if(NodeUtil.hasFinally(n))  {  Preconditions.checkState(n.isLabel());  Preconditions.checkState(NodeUtil.hasFinally(n))  {  [CE]  ';'  expected  [FE]        RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkState(n.isLabel());  }  else  if(NodeUtil.hasFinally(n))  {  Preconditions.checkState(n.isLabel());  Preconditions.checkState(NodeUtil.hasFinally(n))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	                Preconditions.checkState(n.isLabel());        Preconditions.checkState(n.isLabel());    }    else    if(NodeUtil.hasFinally(n))    {    Preconditions.checkState(n.isLabel());  Preconditions.checkState(NodeUtil.hasFinally(n))  {	  	non-compiled	[CE]  ';'  expected	68	None	add
203	[BUG]  [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkState(n.isLabel());  }  else  if(NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  [CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkState(n.isLabel());  }  else  if(NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getLastChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	                Preconditions.checkState(n.isLabel());        Preconditions.checkState(n.isLabel());    }    else    if(NodeUtil.hasFinally(n))    {    Node  finallyBlock  =  n.getLastChild();	  	non-compiled	[CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	68	None	add
204	[BUG]  [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkState(n.isLabel());  }  else  if(NodeUtil.hasFinally(n))  {  Preconditions.checkState(n.isLabel());  Preconditions.checkState(n.isLabel());  else  if(NodeUtil.hasFinally(n))  {  [CE]  'else'  without  'if'  [FE]            RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkState(n.isLabel());  }  else  if(NodeUtil.hasFinally(n))  {  Preconditions.checkState(n.isLabel());  Preconditions.checkState(n.isLabel());  else  if(NodeUtil.hasFinally(n))  {  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	                Preconditions.checkState(n.isLabel());        Preconditions.checkState(n.isLabel());    }    else    if(NodeUtil.hasFinally(n))    {    Preconditions.checkState(n.isLabel());  Preconditions.checkState(n.isLabel());  else  if(NodeUtil.hasFinally(n))  {	  	non-compiled	[CE]  'else'  without  'if'	68	None	add
205	[BUG]  [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkState(n.isLabel());  }  else  if(NodeUtil.hasFinally(n))  {  Preconditions.checkState(n.isLabel());  Preconditions.checkState(n.isLabel());  Node  finallyBlock  =  n.getLastChild();  [CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]              RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkState(n.isLabel());  }  else  if(NodeUtil.hasFinally(n))  {  Preconditions.checkState(n.isLabel());  Preconditions.checkState(n.isLabel());  Node  finallyBlock  =  n.getLastChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	                Preconditions.checkState(n.isLabel());        Preconditions.checkState(n.isLabel());    }    else    if(NodeUtil.hasFinally(n))    {    Preconditions.checkState(n.isLabel());  Preconditions.checkState(n.isLabel());  Node  finallyBlock  =  n.getLastChild();	  	non-compiled	[CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	68	None	add
206	[BUG]  [BUGGY]  Node  finallyBlock  =  anyCatchNodes.getLastChild();  [CE]  cannot  find  symbol  anyCatchNodes  [FE]                RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  anyCatchNodes.getLastChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  anyCatchNodes.getLastChild();	  Node    finallyBlock    =    allCatchNodes.getLastChild();    Node    finallyBlock    =    anyCatchNodes.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  anyCatchNodes	33	None	replace
207	[BUG]  [BUGGY]  Node  finallyBlock  =  anyCatchNodes.getFirstChild();  [CE]  cannot  find  symbol  anyCatchNodes  [FE]                  RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  anyCatchNodes.getFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  anyCatchNodes.getFirstChild();	  Node    finallyBlock    =    allCatchNodes.getLastChild();    Node    finallyBlock    =    anyCatchNodes.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  anyCatchNodes	33	None	replace
208	[BUG]  [BUGGY]  Node  n  =  n.getFirstChild();  no  =  n.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  n  =  n.getFirstChild();  no  =  n.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  n  =  n.getFirstChild();  no  =  n.getFirstChild();	          n    =    n.getFirstChild();    no    =    n.getFirstChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	55	None	replace
209	[BUG]  [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  otherBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  Node  otherBlock  =  n.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  otherBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  Node  otherBlock  =  n.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	                Node        elseBlock        =        n.getFirstChild();        Node    otherBlock    =    n.getFirstChild();    Node  elseBlock  =  n.getFirstChild();  Node  otherBlock  =  n.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	79	None	add
210	[BUG]  [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  otherBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  Node  otherBlock  =  n.getLastChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      AssertionFailedError    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  otherBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  Node  otherBlock  =  n.getLastChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	                Node        elseBlock        =        n.getFirstChild();        Node    otherBlock    =    n.getFirstChild();    Node  elseBlock  =  n.getFirstChild();  Node  otherBlock  =  n.getLastChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	79	None	add
211	[BUG]  [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  otherBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getLastChild();  Node  otherBlock  =  n.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        AssertionFailedError    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  otherBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getLastChild();  Node  otherBlock  =  n.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	                Node        elseBlock        =        n.getFirstChild();        Node    otherBlock    =    n.getFirstChild();    Node  elseBlock  =  n.getLastChild();  Node  otherBlock  =  n.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	79	None	add
212	[BUG]  [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  otherBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getfirstChild();  Node  otherBlock  =  n.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          AssertionFailedError    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  otherBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getfirstChild();  Node  otherBlock  =  n.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	                Node        elseBlock        =        n.getFirstChild();        Node    otherBlock    =    n.getFirstChild();    Node  elseBlock  =  n.getfirstChild();  Node  otherBlock  =  n.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	79	None	add
213	[BUG]  [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  otherBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  Node  otherBlock  =  n.getfirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]            AssertionFailedError    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  otherBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  Node  otherBlock  =  n.getfirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	                Node        elseBlock        =        n.getFirstChild();        Node    otherBlock    =    n.getFirstChild();    Node  elseBlock  =  n.getFirstChild();  Node  otherBlock  =  n.getfirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	79	None	add
214	[BUG]  [BUGGY]  Node  labelBlock  =  n.getFirstChild();  this.labelName  =  n.getLastChild();  [CE]  cannot  find  symbol  labelName  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  labelBlock  =  n.getFirstChild();  this.labelName  =  n.getLastChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  labelBlock  =  n.getFirstChild();  this.labelName  =  n.getLastChild();	          Node    labelBlock    =    n.getFirstChild();    Node    labelBlock    =    n.getFirstChild();    this.labelName    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  labelName	105	None	replace
215	[BUG]  [BUGGY]  Node  labelBlock  =  n.getFirstChild();  nodeName  =  n.getLastChild();  [CE]  cannot  find  symbol  nodeName  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  labelBlock  =  n.getFirstChild();  nodeName  =  n.getLastChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  labelBlock  =  n.getFirstChild();  nodeName  =  n.getLastChild();	          Node    labelBlock    =    n.getFirstChild();    Node    labelBlock    =    n.getFirstChild();    this.labelName    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  nodeName	105	None	replace
216	[BUG]  [BUGGY]  Node  labelBlock  =  n.getFirstChild();  nodeLabelName  =  n.getLastChild();  [CE]  cannot  find  symbol  nodeLabelName  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  labelBlock  =  n.getFirstChild();  nodeLabelName  =  n.getLastChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  labelBlock  =  n.getFirstChild();  nodeLabelName  =  n.getLastChild();	          Node    labelBlock    =    n.getFirstChild();    Node    labelBlock    =    n.getFirstChild();    this.labelName    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  nodeLabelName	105	None	replace
217	[BUG]  [BUGGY]  Node  lastChild  =  allCatchNodes.getFirstChild();  [CE]  cannot  find  symbol  finallyBlock  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  lastChild  =  allCatchNodes.getFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  lastChild  =  allCatchNodes.getFirstChild();	  Node    lastChild    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	172	None	replace
218	[BUG]  [BUGGY]  Node  nextChild  =  n.getFirstChild();  [CE]  cannot  find  symbol  finallyBlock  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  nextChild  =  n.getFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  nextChild  =  n.getFirstChild();	  Node    lastChild    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	172	None	replace
219	[BUG]  [BUGGY]  Node  firstChild  =  n.getFirstChild();  [CE]  cannot  find  symbol  finallyBlock  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  firstChild  =  n.getFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  firstChild  =  n.getFirstChild();	  Node    lastChild    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	172	None	replace
220	[BUG]  [BUGGY]  Node  finallyBlock  =  n.removeLastChild();  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  n.removeLastChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  n.removeLastChild();	  Node    finallyBlock    =    n.removeFirstChild();    Node    finallyBlock    =    n.removeLastChild();    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
221	[BUG]  [BUGGY]  Node  finallyBlock  =  node.removeLastChild();  [CE]  cannot  find  symbol  node  [FE]                  IllegalStateException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  node.removeLastChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  node.removeLastChild();	  Node    finallyBlock    =    n.removeFirstChild();    Node    finallyBlock    =    n.removeLastChild();    	non-compiled	[CE]  cannot  find  symbol  node	23	None	replace
222	[BUG]  [BUGGY]  Node  elseBlock  =  node.getLastChild();  [CE]  cannot  find  symbol  node  [FE]          AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  elseBlock  =  node.getLastChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  elseBlock  =  node.getLastChild();	  Node    elseBlock    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  node	17	None	replace
223	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]            IllegalStateException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  n.removeFirstChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	add	Node  finallyBlock  =  n.removeFirstChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);	  Node    finallyBlock    =    n.removeFirstChild();    Node    finallyBlock    =    n.removeFirstChild();    }    else    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    	compilable	  [FE]  IllegalStateException  	21	2	replace
224	[BUG]  [BUGGY]  Node  finallyBlock  =  n.removeFirstChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  [FE]  IllegalStateException  [FE]            IllegalStateException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  n.removeFirstChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  n.removeFirstChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);	  Node    finallyBlock    =    n.removeFirstChild();    Node    finallyBlock    =    n.removeFirstChild();    }    else    {    tryMinimizeExits(finallyBlock,    exitType,    labelName);    	compilable	  [FE]  IllegalStateException  	21	2	replace
225	[BUG]  [BUGGY]  Node  labelBlock  =  allCatchNodes.getFirstChild().getNext();  [CE]  cannot  find  symbol  finallyBlock  [FE]          AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  labelBlock  =  allCatchNodes.getFirstChild().getNext();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  labelBlock  =  allCatchNodes.getFirstChild().getNext();	  Node    labelBlock    =    n.getFirstChild().getNext();    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	149	None	replace
226	[BUG]  [BUGGY]  Node  labelBlock  =  n.getLastChild().getNext();  [CE]  cannot  find  symbol  finallyBlock  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  labelBlock  =  n.getLastChild().getNext();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  labelBlock  =  n.getLastChild().getNext();	  Node    labelBlock    =    n.getFirstChild().getNext();    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	149	None	replace
227	[BUG]  [BUGGY]  Node  labelBlock  =  catchNode.getFirstChild().getNext();  [CE]  cannot  find  symbol  catchNode  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  labelBlock  =  catchNode.getFirstChild().getNext();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  labelBlock  =  catchNode.getFirstChild().getNext();	  Node    labelBlock    =    n.getFirstChild().getNext();    	non-compiled	[CE]  cannot  find  symbol  catchNode	149	None	replace
228	[BUG]  [BUGGY]  n  =  allCatchNodes.getLastChild();  [CE]  cannot  find  symbol  finallyBlock  [FE]        RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  n  =  allCatchNodes.getLastChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	n  =  allCatchNodes.getLastChild();	  n    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	116	None	replace
229	[BUG]  [BUGGY]  n  =  catchNodes.getFirstChild();  [CE]  cannot  find  symbol  catchNodes  [FE]          RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  n  =  catchNodes.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	n  =  catchNodes.getFirstChild();	  n    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  catchNodes	116	None	replace
230	[BUG]  [BUGGY]  Node  n  =  n.getLastChild();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  n  =  n.getLastChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  n  =  n.getLastChild();	  n    =    n.getLastChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	10	None	replace
231	[BUG]  [BUGGY]  Node  elseBlock  =  catchNodes.get(1);  [CE]  cannot  find  symbol  catchNodes  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  elseBlock  =  catchNodes.get(1);  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  elseBlock  =  catchNodes.get(1);	  Node    elseBlock    =    allCatchNodes.get(1);    	non-compiled	[CE]  cannot  find  symbol  catchNodes	92	None	replace
232	[BUG]  [BUGGY]  Node  n  =  n.getFirstChild();  n  =  n.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  n  =  n.getFirstChild();  n  =  n.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  n  =  n.getFirstChild();  n  =  n.getFirstChild();	          n    =    n.getFirstChild();    n    =    n.getfirstChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	119	None	replace
233	[BUG]  [BUGGY]  Node  finallyBlock  =  getFinallyBlock(n);  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  getFinallyBlock(n);  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  getFinallyBlock(n);	  Node    finallyBlock    =    allCatchNodes.getLastChild();    Node    finallyBlock    =    getFinallyBlock(n);    	non-compiled	[CE]  cannot  find  symbol	151	None	replace
234	[BUG]  [BUGGY]  Node  finallyBlock  =  getFinallyBlock(n,  allCatchNodes.getLastChild());  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  getFinallyBlock(n,  allCatchNodes.getLastChild());  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  getFinallyBlock(n,  allCatchNodes.getLastChild());	  Node    finallyBlock    =    allCatchNodes.getLastChild();    Node    finallyBlock    =    getFinallyBlock(n);    	non-compiled	[CE]  cannot  find  symbol	151	None	replace
235	[BUG]  [BUGGY]  Node  finallyBlock  =  getFinallyBlock(n,  allCatchNodes.getFirstChild());  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  getFinallyBlock(n,  allCatchNodes.getFirstChild());  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  getFinallyBlock(n,  allCatchNodes.getFirstChild());	  Node    finallyBlock    =    allCatchNodes.getLastChild();    Node    finallyBlock    =    getFinallyBlock(n);    	non-compiled	[CE]  cannot  find  symbol	151	None	replace
236	[BUG]  [BUGGY]  Node  finallyBlock  =  getFinallyBlock(allCatchNodes.getFirstChild());  [CE]  cannot  find  symbol  [FE]                RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  getFinallyBlock(allCatchNodes.getFirstChild());  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  getFinallyBlock(allCatchNodes.getFirstChild());	  Node    finallyBlock    =    allCatchNodes.getLastChild();    Node    finallyBlock    =    getFinallyBlock(n);    	non-compiled	[CE]  cannot  find  symbol	151	None	replace
237	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.hasFinally(n));  n  =  n.getFirstChild();  [CE]  cannot  find  symbol  finallyBlock  [FE]    AssertionFailedError    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(NodeUtil.hasFinally(n));  n  =  n.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(NodeUtil.hasFinally(n));  n  =  n.getFirstChild();	          Preconditions.checkState(NodeUtil.hasFinally(n));    Preconditions.checkState(NodeUtil.hasFinally(n));    n    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	75	None	replace
238	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.hasFinally(n));  n  =  n.getLastChild();  [CE]  cannot  find  symbol  finallyBlock  [FE]      AssertionFailedError    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(NodeUtil.hasFinally(n));  n  =  n.getLastChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(NodeUtil.hasFinally(n));  n  =  n.getLastChild();	          Preconditions.checkState(NodeUtil.hasFinally(n));    Preconditions.checkState(NodeUtil.hasFinally(n));    n    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	75	None	replace
239	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(n));  n  =  n.getLastChild();  [CE]  cannot  find  symbol  finallyBlock  [FE]        AssertionFailedError    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(n));  n  =  n.getLastChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(n));  n  =  n.getLastChild();	          Preconditions.checkState(NodeUtil.hasFinally(n));    Preconditions.checkState(NodeUtil.hasFinally(n));    n    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	75	None	replace
240	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isFinally(n));  n  =  n.getLastChild();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(NodeUtil.isFinally(n));  n  =  n.getLastChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(NodeUtil.isFinally(n));  n  =  n.getLastChild();	          Preconditions.checkState(NodeUtil.hasFinally(n));    Preconditions.checkState(NodeUtil.hasFinally(n));    n    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
241	[BUG]  [BUGGY]  Node  finallyBlock  =  allCatchNodes.getLestChild();  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  allCatchNodes.getLestChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  allCatchNodes.getLestChild();	  Node    finallyBlock    =    allCatchNodes.getLastChild();    Node    finallyBlock    =    allCatchNodes.getLestChild();    	non-compiled	[CE]  cannot  find  symbol	122	None	replace
242	[BUG]  [BUGGY]  Node  finallyBlock  =  allCatchNodes.getLeastChild();  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  allCatchNodes.getLeastChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  allCatchNodes.getLeastChild();	  Node    finallyBlock    =    allCatchNodes.getLastChild();    Node    finallyBlock    =    allCatchNodes.getLestChild();    	non-compiled	[CE]  cannot  find  symbol	122	None	replace
243	[BUG]  [BUGGY]  Node  finallyBlock  =  allCatchNodes.getlestChild();  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  allCatchNodes.getlestChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  allCatchNodes.getlestChild();	  Node    finallyBlock    =    allCatchNodes.getLastChild();    Node    finallyBlock    =    allCatchNodes.getLestChild();    	non-compiled	[CE]  cannot  find  symbol	122	None	replace
244	[BUG]  [BUGGY]  Node  elseBlock  =  getCatchNodes().getFirstChild();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  elseBlock  =  getCatchNodes().getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  elseBlock  =  getCatchNodes().getFirstChild();	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    elseBlock    =    getCatchNodes().getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	141	None	replace
245	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  getCatchNodes().getLastChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  getCatchNodes().getLastChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  getCatchNodes().getLastChild();	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    elseBlock    =    getCatchNodes().getFirstChild();    	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	141	None	replace
246	[BUG]  [BUGGY]  Node  finallyBlock  =  n.getFirstChild();  Node  finallyBlock  =  finallyBlock.removeFirstChild();  System.arraycopy(labelName,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName);  [CE]  ')'  expected  [FE]        IllegalStateException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  n.getFirstChild();  Node  finallyBlock  =  finallyBlock.removeFirstChild();  System.arraycopy(labelName,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName);  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  n.getFirstChild();  Node  finallyBlock  =  finallyBlock.removeFirstChild();  System.arraycopy(labelName,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName);	  Node    finallyBlock    =    n.removeFirstChild();    Node    finallyBlock    =    n.removeFirstChild();    System.arraycopy(labelName,    0,    tryMinimizeExits(finallyBlock,    exitType,    labelName);    	non-compiled	[CE]  ')'  expected	127	None	replace
247	[BUG]  [BUGGY]  Node  finallyBlock  =  n.removeFirstChild();  Node  finallyBlock  =  finallyBlock.removeFirstChild();  System.arraycopy(labelName,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName);  [CE]  ')'  expected  [FE]          IllegalStateException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  n.removeFirstChild();  Node  finallyBlock  =  finallyBlock.removeFirstChild();  System.arraycopy(labelName,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName);  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  n.removeFirstChild();  Node  finallyBlock  =  finallyBlock.removeFirstChild();  System.arraycopy(labelName,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName);	  Node    finallyBlock    =    n.removeFirstChild();    Node    finallyBlock    =    n.removeFirstChild();    System.arraycopy(labelName,    0,    tryMinimizeExits(finallyBlock,    exitType,    labelName);    	non-compiled	[CE]  ')'  expected	127	None	replace
248	[BUG]  [BUGGY]  Node  finallyBlock  =  n.getLastChild();  Node  finallyBlock  =  n.removeFirstChild();  System.arraycopy(labelName,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName);  [CE]  ')'  expected  [FE]            IllegalStateException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  n.getLastChild();  Node  finallyBlock  =  n.removeFirstChild();  System.arraycopy(labelName,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName);  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  n.getLastChild();  Node  finallyBlock  =  n.removeFirstChild();  System.arraycopy(labelName,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName);	  Node    finallyBlock    =    n.removeFirstChild();    Node    finallyBlock    =    n.removeFirstChild();    System.arraycopy(labelName,    0,    tryMinimizeExits(finallyBlock,    exitType,    labelName);    	non-compiled	[CE]  ')'  expected	127	None	replace
249	[BUG]  [BUGGY]  Node  finallyBlock  =  otherCatchNodes.getFirstChild();  [CE]  cannot  find  symbol  otherCatchNodes  [FE]                  RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  otherCatchNodes.getFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  otherCatchNodes.getFirstChild();	  Node    finallyBlock    =    allCatchNodes.getFirstChild();    Node    finallyBlock    =    anyCatchNodes.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  otherCatchNodes	6	None	replace
250	[BUG]  [BUGGY]  Node  elseBlock  =  n.getLastChild();  Node  thenBlock  =  n.getFirstChild();  [CE]  cannot  find  symbol  finallyBlock  [FE]    AssertionFailedError    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  elseBlock  =  n.getLastChild();  Node  thenBlock  =  n.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  elseBlock  =  n.getLastChild();  Node  thenBlock  =  n.getFirstChild();	          Node    elseBlock    =    n.getFirstChild();    Node    thenBlock    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	82	None	replace
251	[BUG]  [BUGGY]  Node  elseBlock  =  n.getFirstChild();  Node  thenBlock  =  n.getLastChild();  [CE]  cannot  find  symbol  finallyBlock  [FE]      AssertionFailedError    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  elseBlock  =  n.getFirstChild();  Node  thenBlock  =  n.getLastChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  elseBlock  =  n.getFirstChild();  Node  thenBlock  =  n.getLastChild();	          Node    elseBlock    =    n.getFirstChild();    Node    thenBlock    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	82	None	replace
252	[BUG]  [BUGGY]  Node  elseBlock  =  n.getFirstChild();  Node  thenBlock  =  node.getFirstChild();  [CE]  cannot  find  symbol  node  [FE]        AssertionFailedError    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  elseBlock  =  n.getFirstChild();  Node  thenBlock  =  node.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  elseBlock  =  n.getFirstChild();  Node  thenBlock  =  node.getFirstChild();	          Node    elseBlock    =    n.getFirstChild();    Node    thenBlock    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  node	82	None	replace
253	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  thenBlock  =  n.getFirstChild();  [CE]  cannot  find  symbol  finallyBlock  [FE]          AssertionFailedError    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  thenBlock  =  n.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  thenBlock  =  n.getFirstChild();	          Node    elseBlock    =    n.getFirstChild();    Node    thenBlock    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	82	None	replace
254	[BUG]  [BUGGY]  Preconditions.checkState(labelName.isLabel());  Preconditions.checkLabel(n.isLabel());  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(labelName.isLabel());  Preconditions.checkLabel(n.isLabel());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(labelName.isLabel());  Preconditions.checkLabel(n.isLabel());	          Preconditions.checkState(n.isLabel());    Preconditions.checkLabel(n.isLabel());    	non-compiled	[CE]  cannot  find  symbol	137	None	replace
255	[BUG]  [BUGGY]  Preconditions.checkState(n.isLabel(),  n.isLabel());  [CE]  cannot  find  symbol  finallyBlock  [FE]              RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.isLabel(),  n.isLabel());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.isLabel(),  n.isLabel());	          Preconditions.checkState(n.isLabel());    Preconditions.checkLabel(n.isLabel());    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	137	None	replace
256	[BUG]  [BUGGY]  Preconditions.checkState(false,  n.isLabel());  Preconditions.checkLabel(n.isLabel());  [CE]  cannot  find  symbol  [FE]                RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(false,  n.isLabel());  Preconditions.checkLabel(n.isLabel());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(false,  n.isLabel());  Preconditions.checkLabel(n.isLabel());	          Preconditions.checkState(n.isLabel());    Preconditions.checkLabel(n.isLabel());    	non-compiled	[CE]  cannot  find  symbol	137	None	replace
257	[BUG]  [BUGGY]  Node  c  =  allCatchNodes.getfirstChild();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  c  =  allCatchNodes.getfirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  c  =  allCatchNodes.getfirstChild();	          Node    c    =    allCatchNodes.getFirstChild();    Node    c    =    allCatchNodes.getfirstChild();    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
258	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.hasFinally(n),  NodeUtil.isFinally(n));  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(NodeUtil.hasFinally(n),  NodeUtil.isFinally(n));  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(NodeUtil.hasFinally(n),  NodeUtil.isFinally(n));	          Preconditions.checkState(NodeUtil.hasFinally(n));    Preconditions.checkState(NodeUtil.isFinally(n));    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
259	[BUG]  [BUGGY]  Node  c  =  catchNode.getFirstChild();  [CE]  cannot  find  symbol  catchNode  [FE]        AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  c  =  catchNode.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  c  =  catchNode.getFirstChild();	  Node    c    =    node.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  catchNode	166	None	replace
260	[BUG]  [BUGGY]  Node  c  =  startNode.getFirstChild();  [CE]  cannot  find  symbol  startNode  [FE]          AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  c  =  startNode.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  c  =  startNode.getFirstChild();	  Node    c    =    node.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  startNode	166	None	replace
261	[BUG]  [BUGGY]  Node  finallyBlock  =  null.removeFirstChild();  [CE]  <null>  cannot  be  dereferenced  [FE]          IllegalStateException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  null.removeFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  null.removeFirstChild();	  Node    finallyBlock    =    n.removeFirstChild();    Node    finallyBlock    =    null.removeFirstChild();    	non-compiled	[CE]  <null>  cannot  be  dereferenced	156	None	replace
262	[BUG]  [BUGGY]  Node  finallyBlock  =  not.removeFirstChild();  [CE]  cannot  find  symbol  not  [FE]            IllegalStateException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  not.removeFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  not.removeFirstChild();	  Node    finallyBlock    =    n.removeFirstChild();    Node    finallyBlock    =    null.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol  not	156	None	replace
263	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(NodeUtil.hasFinally(n));  Node  finallyBlock  =  n.getLastChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	add	Preconditions.checkState(NodeUtil.hasFinally(n));  Node  finallyBlock  =  n.getLastChild();	          Preconditions.checkState(NodeUtil.hasFinally(n));    Preconditions.checkState(NodeUtil.hasFinally(n));    }    else    {    Node    finallyBlock    =    n.getLastChild();    	compilable	  [FE]  AssertionFailedError  	73	2	replace
264	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.hasFinally(n));  Node  finallyBlock  =  n.getLastChild();  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(NodeUtil.hasFinally(n));  Node  finallyBlock  =  n.getLastChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(NodeUtil.hasFinally(n));  Node  finallyBlock  =  n.getLastChild();	          Preconditions.checkState(NodeUtil.hasFinally(n));    Preconditions.checkState(NodeUtil.hasFinally(n));    }    else    {    Node    finallyBlock    =    n.getLastChild();    	compilable	  [FE]  AssertionFailedError  	73	2	replace
265	[BUG]  [BUGGY]  Node  c  =  allSatchNodes.getFirstChild();  [CE]  cannot  find  symbol  allSatchNodes  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  c  =  allSatchNodes.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  c  =  allSatchNodes.getFirstChild();	          Node    c    =    allCatchNodes.getFirstChild();    Node    c    =    allSatchNodes.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  allSatchNodes	45	None	replace
266	[BUG]  [BUGGY]  Node  c  =  allNodes.getFirstChild();  [CE]  cannot  find  symbol  allNodes  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  c  =  allNodes.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  c  =  allNodes.getFirstChild();	          Node    c    =    allCatchNodes.getFirstChild();    Node    c    =    allSatchNodes.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  allNodes	45	None	replace
267	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGet(n)&&  NodeUtil.hasFinally(n));  [CE]  cannot  find  symbol  finallyBlock  [FE]        AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(NodeUtil.isGet(n)&&  NodeUtil.hasFinally(n));  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(NodeUtil.isGet(n)&&  NodeUtil.hasFinally(n));	  Preconditions.checkState(NodeUtil.isGet(n));    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	123	None	replace
268	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGet(n),  exitType);  [CE]  cannot  find  symbol  finallyBlock  [FE]          AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(NodeUtil.isGet(n),  exitType);  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(NodeUtil.isGet(n),  exitType);	  Preconditions.checkState(NodeUtil.isGet(n));    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	123	None	replace
269	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGet(n)||  NodeUtil.isGet(n));  [CE]  cannot  find  symbol  finallyBlock  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(NodeUtil.isGet(n)||  NodeUtil.isGet(n));  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(NodeUtil.isGet(n)||  NodeUtil.isGet(n));	  Preconditions.checkState(NodeUtil.isGet(n));    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	123	None	replace
270	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGet(c));  [CE]  cannot  find  symbol  c  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(NodeUtil.isGet(c));  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(NodeUtil.isGet(c));	  Preconditions.checkState(NodeUtil.isGet(n));    	non-compiled	[CE]  cannot  find  symbol  c	123	None	replace
271	[BUG]  [BUGGY]          Preconditions.checkState(n.isLabel());    Node  labelBlock  =  n.getFirstChild();  Preconditions.checkState(n.isLabel());  Preconditions.checkState(n.isLabel());  Node  labelBlock  =  n.getFirstChild();  Preconditions.checkState(n.isLabel());  [CE]  variable  labelBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Preconditions.checkState(n.isLabel());    Node  labelBlock  =  n.getFirstChild();  Preconditions.checkState(n.isLabel());  Preconditions.checkState(n.isLabel());  Node  labelBlock  =  n.getFirstChild();  Preconditions.checkState(n.isLabel());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	                Preconditions.checkState(n.isLabel());        Node    labelBlock    =    n.getFirstChild();    Preconditions.checkState(n.isLabel());    Preconditions.checkState(n.isLabel());  Node  labelBlock  =  n.getFirstChild();  Preconditions.checkState(n.isLabel());	  	non-compiled	[CE]  variable  labelBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	109	None	add
272	[BUG]  [BUGGY]          Preconditions.checkState(n.isLabel());    Node  labelBlock  =  n.getFirstChild();  Preconditions.checkState(n.isLabel());  Preconditions.checkState(n.isLabel());  Node  labelBlock  =  n.getLastChild();  Preconditions.checkState(n.isLabel());  [CE]  variable  labelBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Preconditions.checkState(n.isLabel());    Node  labelBlock  =  n.getFirstChild();  Preconditions.checkState(n.isLabel());  Preconditions.checkState(n.isLabel());  Node  labelBlock  =  n.getLastChild();  Preconditions.checkState(n.isLabel());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	                Preconditions.checkState(n.isLabel());        Node    labelBlock    =    n.getFirstChild();    Preconditions.checkState(n.isLabel());    Preconditions.checkState(n.isLabel());  Node  labelBlock  =  n.getLastChild();  Preconditions.checkState(n.isLabel());	  	non-compiled	[CE]  variable  labelBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	109	None	add
273	[BUG]  [BUGGY]          Preconditions.checkState(n.isLabel());    Node  labelBlock  =  n.getFirstChild();  Preconditions.checkState(n.isLabel());  Preconditions.checkState(labelBlock.isLabel());  Node  labelBlock  =  n.getFirstChild();  Preconditions.checkState(n.isLabel());  [CE]  variable  labelBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Preconditions.checkState(n.isLabel());    Node  labelBlock  =  n.getFirstChild();  Preconditions.checkState(n.isLabel());  Preconditions.checkState(labelBlock.isLabel());  Node  labelBlock  =  n.getFirstChild();  Preconditions.checkState(n.isLabel());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	                Preconditions.checkState(n.isLabel());        Node    labelBlock    =    n.getFirstChild();    Preconditions.checkState(n.isLabel());    Preconditions.checkState(labelBlock.isLabel());  Node  labelBlock  =  n.getFirstChild();  Preconditions.checkState(n.isLabel());	  	non-compiled	[CE]  variable  labelBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	109	None	add
274	[BUG]  [BUGGY]          Preconditions.checkState(n.isLabel());    Node  labelBlock  =  n.getFirstChild();  Preconditions.checkState(n.isLabel());  Preconditions.checkState(labelName.isLabel());  Node  labelBlock  =  n.getFirstChild();  Preconditions.checkState(n.isLabel());  [CE]  cannot  find  symbol  [FE]          RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Preconditions.checkState(n.isLabel());    Node  labelBlock  =  n.getFirstChild();  Preconditions.checkState(n.isLabel());  Preconditions.checkState(labelName.isLabel());  Node  labelBlock  =  n.getFirstChild();  Preconditions.checkState(n.isLabel());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	                Preconditions.checkState(n.isLabel());        Node    labelBlock    =    n.getFirstChild();    Preconditions.checkState(n.isLabel());    Preconditions.checkState(labelName.isLabel());  Node  labelBlock  =  n.getFirstChild();  Preconditions.checkState(n.isLabel());	  	non-compiled	[CE]  cannot  find  symbol	109	None	add
275	[BUG]  [BUGGY]          Preconditions.checkState(n.isLabel());    Node  labelBlock  =  n.getFirstChild();  Preconditions.checkState(n.isLabel());  Preconditions.checkState(n.isLabel());  Node  n  =  n.getFirstChild();  Preconditions.checkState(n.isLabel());  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]            RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Preconditions.checkState(n.isLabel());    Node  labelBlock  =  n.getFirstChild();  Preconditions.checkState(n.isLabel());  Preconditions.checkState(n.isLabel());  Node  n  =  n.getFirstChild();  Preconditions.checkState(n.isLabel());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	                Preconditions.checkState(n.isLabel());        Node    labelBlock    =    n.getFirstChild();    Preconditions.checkState(n.isLabel());    Preconditions.checkState(n.isLabel());  Node  n  =  n.getFirstChild();  Preconditions.checkState(n.isLabel());	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	109	None	add
276	[BUG]  [BUGGY]          Preconditions.checkState(n.isLabel());    Node  labelBlock  =  n.getFirstChild();  Preconditions.checkState(n.isLabel());  Node  labelBlock  =  n.getFirstChild();  Preconditions.checkState(n.isLabel());  [CE]  variable  labelBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]              RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Preconditions.checkState(n.isLabel());    Node  labelBlock  =  n.getFirstChild();  Preconditions.checkState(n.isLabel());  Node  labelBlock  =  n.getFirstChild();  Preconditions.checkState(n.isLabel());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	                Preconditions.checkState(n.isLabel());        Node    labelBlock    =    n.getFirstChild();    Preconditions.checkState(n.isLabel());    Node  labelBlock  =  n.getFirstChild();  Preconditions.checkState(n.isLabel());	  	non-compiled	[CE]  variable  labelBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	109	None	add
277	[BUG]  [BUGGY]  Node  n  =  allCatchNodes.get(n);  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  n  =  allCatchNodes.get(n);  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  n  =  allCatchNodes.get(n);	  Node    n    =    allCatchNodes.get(0);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	59	None	replace
278	[BUG]  [BUGGY]  Node  n  =  allCatchNodes.get(1);  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  n  =  allCatchNodes.get(1);  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  n  =  allCatchNodes.get(1);	  Node    n    =    allCatchNodes.get(0);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	59	None	replace
279	[BUG]  [BUGGY]  Node  n  =  allCatchNodes.get(0).getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  n  =  allCatchNodes.get(0).getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  n  =  allCatchNodes.get(0).getFirstChild();	  Node    n    =    allCatchNodes.get(0);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	59	None	replace
280	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  thenBlock  =  allCatchNodes.getLastChild();  [CE]  cannot  find  symbol  finallyBlock  [FE]    AssertionFailedError    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  thenBlock  =  allCatchNodes.getLastChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  thenBlock  =  allCatchNodes.getLastChild();	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    thenBlock    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	126	None	replace
281	[BUG]  [BUGGY]  Node  elseBlock  =  n.getFirstChild();  Node  thenBlock  =  allCatchNodes.getFirstChild();  [CE]  cannot  find  symbol  finallyBlock  [FE]      AssertionFailedError    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  elseBlock  =  n.getFirstChild();  Node  thenBlock  =  allCatchNodes.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  elseBlock  =  n.getFirstChild();  Node  thenBlock  =  allCatchNodes.getFirstChild();	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    thenBlock    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	126	None	replace
282	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getLastChild();  Node  thenBlock  =  allCatchNodes.getFirstChild();  [CE]  cannot  find  symbol  finallyBlock  [FE]        AssertionFailedError    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  elseBlock  =  allCatchNodes.getLastChild();  Node  thenBlock  =  allCatchNodes.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  elseBlock  =  allCatchNodes.getLastChild();  Node  thenBlock  =  allCatchNodes.getFirstChild();	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    thenBlock    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	126	None	replace
283	[BUG]  [BUGGY]  Node  labelBlock  =  n.getFirstChild();  Item  labelBlock  =  n.getLastChild();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  labelBlock  =  n.getFirstChild();  Item  labelBlock  =  n.getLastChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  labelBlock  =  n.getFirstChild();  Item  labelBlock  =  n.getLastChild();	          Node    labelBlock    =    n.getFirstChild();    Node    labelBlock    =    n.getFirstChild();    Item    labelBlock    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
284	[BUG]  [BUGGY]  Node  labelBlock  =  n.getFirstChild();  Item  labelBlock  =  c.getLastChild();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  labelBlock  =  n.getFirstChild();  Item  labelBlock  =  c.getLastChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  labelBlock  =  n.getFirstChild();  Item  labelBlock  =  c.getLastChild();	          Node    labelBlock    =    n.getFirstChild();    Node    labelBlock    =    n.getFirstChild();    Item    labelBlock    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
285	[BUG]  [BUGGY]  Node  elseBlock  =  anyCatchNodes.getFirstChild();  [CE]  cannot  find  symbol  anyCatchNodes  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  elseBlock  =  anyCatchNodes.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  elseBlock  =  anyCatchNodes.getFirstChild();	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    elseBlock    =    nodes.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  anyCatchNodes	143	None	replace
286	[BUG]  [BUGGY]  Node  finallyBlock  =  n.replaceChild(n,  catchNode);  [CE]  cannot  find  symbol  catchNode  [FE]          IllegalStateException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  n.replaceChild(n,  catchNode);  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  n.replaceChild(n,  catchNode);	  Node    finallyBlock    =    n.replaceChild(n,    falseBlock);    	non-compiled	[CE]  cannot  find  symbol  catchNode	140	None	replace
287	[BUG]  [BUGGY]  Node  finallyBlock  =  n.replaceChild(n,  tryBlock);  [CE]  incompatible  types  [FE]            IllegalStateException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  n.replaceChild(n,  tryBlock);  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  n.replaceChild(n,  tryBlock);	  Node    finallyBlock    =    n.replaceChild(n,    falseBlock);    	non-compiled	[CE]  incompatible  types	140	None	replace
288	[BUG]  [BUGGY]  Node  finallyBlock  =  n.replaceChild(n,  trueBlock);  [CE]  cannot  find  symbol  trueBlock  [FE]              IllegalStateException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  n.replaceChild(n,  trueBlock);  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  n.replaceChild(n,  trueBlock);	  Node    finallyBlock    =    n.replaceChild(n,    falseBlock);    	non-compiled	[CE]  cannot  find  symbol  trueBlock	140	None	replace
289	[BUG]  [BUGGY]  Node  finallyBlock  =  n.replaceChild(n,  catchCodeBlock);  [CE]  cannot  find  symbol  catchCodeBlock  [FE]                IllegalStateException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  n.replaceChild(n,  catchCodeBlock);  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  n.replaceChild(n,  catchCodeBlock);	  Node    finallyBlock    =    n.replaceChild(n,    falseBlock);    	non-compiled	[CE]  cannot  find  symbol  catchCodeBlock	140	None	replace
290	[BUG]  [BUGGY]  Node  finallyBlock  =  n.replaceChild(n,  tryMinimizeExits);  [CE]  cannot  find  symbol  tryMinimizeExits  [FE]                  IllegalStateException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  n.replaceChild(n,  tryMinimizeExits);  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  n.replaceChild(n,  tryMinimizeExits);	  Node    finallyBlock    =    n.replaceChild(n,    falseBlock);    	non-compiled	[CE]  cannot  find  symbol  tryMinimizeExits	140	None	replace
291	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkState(n.isLabel());  Preconditions.checkState(n.isLabel());  Preconditions.checkState(n.isLabel());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	add	                Preconditions.checkState(n.isLabel());        Preconditions.checkState(n.isLabel());    Preconditions.checkState(n.isLabel());  Preconditions.checkState(n.isLabel());	  	compilable	  [FE]  RuntimeException  	61	2	add
292	[BUG]  [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkState(n.isLabel());  Preconditions.checkState(n.isLabel());  Preconditions.checkState(n.isLabel());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkState(n.isLabel());  Preconditions.checkState(n.isLabel());  Preconditions.checkState(n.isLabel());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	                Preconditions.checkState(n.isLabel());        Preconditions.checkState(n.isLabel());    Preconditions.checkState(n.isLabel());  Preconditions.checkState(n.isLabel());	  	compilable	  [FE]  RuntimeException  	61	2	add
293	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkState(n.isLabel());  Preconditions.checkState(NodeUtil.hasFinally(n));  Preconditions.checkState(n.isLabel());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	add	                Preconditions.checkState(n.isLabel());        Preconditions.checkState(n.isLabel());    Preconditions.checkState(NodeUtil.hasFinally(n));  Preconditions.checkState(n.isLabel());	  	compilable	  [FE]  RuntimeException  	61	2	add
294	[BUG]  [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkState(n.isLabel());  Preconditions.checkState(NodeUtil.hasFinally(n));  Preconditions.checkState(n.isLabel());  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkState(n.isLabel());  Preconditions.checkState(NodeUtil.hasFinally(n));  Preconditions.checkState(n.isLabel());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	                Preconditions.checkState(n.isLabel());        Preconditions.checkState(n.isLabel());    Preconditions.checkState(NodeUtil.hasFinally(n));  Preconditions.checkState(n.isLabel());	  	compilable	  [FE]  RuntimeException  	61	2	add
295	[BUG]  [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkState(n.isLabel());  Preconditions.checkState(falseBlock.isLabel());  Preconditions.checkState(falseBlock.isLabel());  [CE]  cannot  find  symbol  falseBlock  [FE]        RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkState(n.isLabel());  Preconditions.checkState(falseBlock.isLabel());  Preconditions.checkState(falseBlock.isLabel());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	                Preconditions.checkState(n.isLabel());        Preconditions.checkState(n.isLabel());    Preconditions.checkState(falseBlock.isLabel());  Preconditions.checkState(falseBlock.isLabel());	  	non-compiled	[CE]  cannot  find  symbol  falseBlock	61	None	add
296	[BUG]  [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkState(n.isLabel());  Preconditions.checkState(falseBlock.isLabel());  Preconditions.checkState(n.isLabel());  [CE]  cannot  find  symbol  falseBlock  [FE]          RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkState(n.isLabel());  Preconditions.checkState(falseBlock.isLabel());  Preconditions.checkState(n.isLabel());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	                Preconditions.checkState(n.isLabel());        Preconditions.checkState(n.isLabel());    Preconditions.checkState(falseBlock.isLabel());  Preconditions.checkState(n.isLabel());	  	non-compiled	[CE]  cannot  find  symbol  falseBlock	61	None	add
297	[BUG]  [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkState(n.isLabel());  Preconditions.checkState(n.isFinally());  Preconditions.checkState(n.isLabel());  [CE]  cannot  find  symbol  [FE]            RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkState(n.isLabel());  Preconditions.checkState(n.isFinally());  Preconditions.checkState(n.isLabel());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	                Preconditions.checkState(n.isLabel());        Preconditions.checkState(n.isLabel());    Preconditions.checkState(n.isFinally());  Preconditions.checkState(n.isLabel());	  	non-compiled	[CE]  cannot  find  symbol	61	None	add
298	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkState(n.isLabel());  Preconditions.checkState(n.isName());  Preconditions.checkState(n.isLabel());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	add	                Preconditions.checkState(n.isLabel());        Preconditions.checkState(n.isLabel());    Preconditions.checkState(n.isName());  Preconditions.checkState(n.isLabel());	  	compilable	  [FE]  RuntimeException  	61	2	add
299	[BUG]  [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkState(n.isLabel());  Preconditions.checkState(n.isName());  Preconditions.checkState(n.isLabel());  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkState(n.isLabel());  Preconditions.checkState(n.isName());  Preconditions.checkState(n.isLabel());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	                Preconditions.checkState(n.isLabel());        Preconditions.checkState(n.isLabel());    Preconditions.checkState(n.isName());  Preconditions.checkState(n.isLabel());	  	compilable	  [FE]  RuntimeException  	61	2	add
300	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  null);  Node  n  =  n.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]            RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  null);  Node  n  =  n.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.getFirstChild()  ==  null);  Node  n  =  n.getFirstChild();	          n    =    n.getFirstChild();    Node    n    =    n.getFirstChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	53	None	replace
301	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild()!=  null);  Node  n  =  n.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]              RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.getFirstChild()!=  null);  Node  n  =  n.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.getFirstChild()!=  null);  Node  n  =  n.getFirstChild();	          n    =    n.getFirstChild();    Node    n    =    n.getFirstChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	53	None	replace
302	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  exitType);  Node  n  =  n.getFirstChild();  [CE]  incomparable  types:  Node  and  int  [FE]                RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  exitType);  Node  n  =  n.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.getFirstChild()  ==  exitType);  Node  n  =  n.getFirstChild();	          n    =    n.getFirstChild();    Node    n    =    n.getFirstChild();    	non-compiled	[CE]  incomparable  types:  Node  and  int	53	None	replace
303	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild()!=  exitType);  Node  n  =  n.getFirstChild();  [CE]  incomparable  types:  Node  and  int  [FE]                  RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.getFirstChild()!=  exitType);  Node  n  =  n.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.getFirstChild()!=  exitType);  Node  n  =  n.getFirstChild();	          n    =    n.getFirstChild();    Node    n    =    n.getFirstChild();    	non-compiled	[CE]  incomparable  types:  Node  and  int	53	None	replace
304	[BUG]  [BUGGY]  Node  c  =  ALLCatchNodes.getFirstChild();  [CE]  cannot  find  symbol  ALLCatchNodes  [FE]        AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  c  =  ALLCatchNodes.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  c  =  ALLCatchNodes.getFirstChild();	          Node    c    =    allCatchNodes.getFirstChild();    Node    c    =    ALLCatchNodes.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  ALLCatchNodes	101	None	replace
305	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  c  =  ALLCatchNodes.getFirstChild();  [CE]  cannot  find  symbol  ALLCatchNodes  [FE]          AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  c  =  ALLCatchNodes.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(allCatchNodes.hasOneChild());  Node  c  =  ALLCatchNodes.getFirstChild();	          Node    c    =    allCatchNodes.getFirstChild();    Node    c    =    ALLCatchNodes.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  ALLCatchNodes	101	None	replace
306	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  c  =  allCatchNodes.getFirstChild();  [CE]  cannot  find  symbol  finallyBlock  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  c  =  allCatchNodes.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(allCatchNodes.hasOneChild());  Node  c  =  allCatchNodes.getFirstChild();	          Node    c    =    allCatchNodes.getFirstChild();    Node    c    =    ALLCatchNodes.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	101	None	replace
307	[BUG]  [BUGGY]  Node  c  =  AllCatchNodes.getFirstChild();  [CE]  cannot  find  symbol  AllCatchNodes  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  c  =  AllCatchNodes.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  c  =  AllCatchNodes.getFirstChild();	          Node    c    =    allCatchNodes.getFirstChild();    Node    c    =    ALLCatchNodes.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  AllCatchNodes	101	None	replace
308	[BUG]  [BUGGY]  Node  elseBlock  =  AllCatchNodes.getFirstChild();  [CE]  cannot  find  symbol  AllCatchNodes  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  elseBlock  =  AllCatchNodes.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  elseBlock  =  AllCatchNodes.getFirstChild();	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    elseBlock    =    AllCatchNodes.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  AllCatchNodes	98	None	replace
309	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isLabelVar(n),  n.getFirstChild());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(NodeUtil.isLabelVar(n),  n.getFirstChild());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(NodeUtil.isLabelVar(n),  n.getFirstChild());	  Preconditions.checkState(NodeUtil.isLabelVar(n));    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
310	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isLabelVar(n),  c);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(NodeUtil.isLabelVar(n),  c);  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(NodeUtil.isLabelVar(n),  c);	  Preconditions.checkState(NodeUtil.isLabelVar(n));    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
311	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isLabelVar(n)||  NodeUtil.isLabelVar(n));  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(NodeUtil.isLabelVar(n)||  NodeUtil.isLabelVar(n));  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(NodeUtil.isLabelVar(n)||  NodeUtil.isLabelVar(n));	  Preconditions.checkState(NodeUtil.isLabelVar(n));    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
312	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isLabelVar(n),  n.getType());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(NodeUtil.isLabelVar(n),  n.getType());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(NodeUtil.isLabelVar(n),  n.getType());	  Preconditions.checkState(NodeUtil.isLabelVar(n));    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
313	[BUG]  [BUGGY]  Node  c  =  this.allCatchNodes.getFirstChild();  [CE]  cannot  find  symbol  allCatchNodes  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  c  =  this.allCatchNodes.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  c  =  this.allCatchNodes.getFirstChild();	  Node    c    =    nodes.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	42	None	replace
314	[BUG]  [BUGGY]  Node  elseBlock  =  catchNode.removeFirstChild();  [CE]  cannot  find  symbol  catchNode  [FE]        AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  elseBlock  =  catchNode.removeFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  elseBlock  =  catchNode.removeFirstChild();	  Node    elseBlock    =    n.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol  catchNode	144	None	replace
315	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.removeFirstChild();  [CE]  cannot  find  symbol  finallyBlock  [FE]          AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  elseBlock  =  allCatchNodes.removeFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  elseBlock  =  allCatchNodes.removeFirstChild();	  Node    elseBlock    =    n.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	144	None	replace
316	[BUG]  [BUGGY]  Node  labelBlock  =  n.getFirstChild();  System.arraycopy(labelName,  0,  labelBlock,  0,  n.getLastChild());  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  labelBlock  =  n.getFirstChild();  System.arraycopy(labelName,  0,  labelBlock,  0,  n.getLastChild());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  labelBlock  =  n.getFirstChild();  System.arraycopy(labelName,  0,  labelBlock,  0,  n.getLastChild());	          Node    labelBlock    =    n.getFirstChild();    Node    labelBlock    =    n.getFirstChild();    System.arraycopy(labelName,    0,    labelBlock,    0,    n.getLastChild());    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	146	None	replace
317	[BUG]  [BUGGY]  Node  labelBlock  =  n.getLastChild();  System.arraycopy(labelName,  0,  labelBlock,  0,  n.getLastChild());  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  labelBlock  =  n.getLastChild();  System.arraycopy(labelName,  0,  labelBlock,  0,  n.getLastChild());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  labelBlock  =  n.getLastChild();  System.arraycopy(labelName,  0,  labelBlock,  0,  n.getLastChild());	          Node    labelBlock    =    n.getFirstChild();    Node    labelBlock    =    n.getFirstChild();    System.arraycopy(labelName,    0,    labelBlock,    0,    n.getLastChild());    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	146	None	replace
318	[BUG]  [BUGGY]  System.arraycopy(labelName,  0,  labelBlock,  0,  n.getLastChild());  [CE]  cannot  find  symbol  labelBlock  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  System.arraycopy(labelName,  0,  labelBlock,  0,  n.getLastChild());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	System.arraycopy(labelName,  0,  labelBlock,  0,  n.getLastChild());	          Node    labelBlock    =    n.getFirstChild();    Node    labelBlock    =    n.getFirstChild();    System.arraycopy(labelName,    0,    labelBlock,    0,    n.getLastChild());    	non-compiled	[CE]  cannot  find  symbol  labelBlock	146	None	replace
319	[BUG]  [BUGGY]  Preconditions.checkState(n.isLabel()  ||  NodeUtil.hasFinally(n));  [CE]  cannot  find  symbol  finallyBlock  [FE]    RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.isLabel()  ||  NodeUtil.hasFinally(n));  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.isLabel()  ||  NodeUtil.hasFinally(n));	          Preconditions.checkState(n.isLabel());    Preconditions.checkState(NodeUtil.hasFinally(n));    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	66	None	replace
320	[BUG]  [BUGGY]  Preconditions.checkState(n.isLabel()  &&  NodeUtil.hasFinally(n));  [CE]  cannot  find  symbol  finallyBlock  [FE]      RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.isLabel()  &&  NodeUtil.hasFinally(n));  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.isLabel()  &&  NodeUtil.hasFinally(n));	          Preconditions.checkState(n.isLabel());    Preconditions.checkState(NodeUtil.hasFinally(n));    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	66	None	replace
321	[BUG]  [BUGGY]  Node  finallyBlock  =  n.getFirstChild();  Node  finallyBlock  =  finallyBlock.removeFirstChild();  System.arraycopy(labelName,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName));  [CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          IllegalStateException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  n.getFirstChild();  Node  finallyBlock  =  finallyBlock.removeFirstChild();  System.arraycopy(labelName,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName));  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  n.getFirstChild();  Node  finallyBlock  =  finallyBlock.removeFirstChild();  System.arraycopy(labelName,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName));	  Node    finallyBlock    =    n.removeFirstChild();    Node    finallyBlock    =    n.removeFirstChild();    System.arraycopy(labelName,    0,    tryMinimizeExits(finallyBlock,    exitType,    labelName));    	non-compiled	[CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	128	None	replace
322	[BUG]  [BUGGY]  Node  finallyBlock  =  n.removeFirstChild();  Node  finallyBlock  =  finallyBlock.removeFirstChild();  System.arraycopy(labelName,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName));  [CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]            IllegalStateException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  n.removeFirstChild();  Node  finallyBlock  =  finallyBlock.removeFirstChild();  System.arraycopy(labelName,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName));  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  n.removeFirstChild();  Node  finallyBlock  =  finallyBlock.removeFirstChild();  System.arraycopy(labelName,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName));	  Node    finallyBlock    =    n.removeFirstChild();    Node    finallyBlock    =    n.removeFirstChild();    System.arraycopy(labelName,    0,    tryMinimizeExits(finallyBlock,    exitType,    labelName));    	non-compiled	[CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	128	None	replace
323	[BUG]  [BUGGY]  Node  finallyBlock  =  allCatchNodes.getFirstChild();  Node  finallyBlock  =  finallyBlock.removeFirstChild();  System.arraycopy(labelName,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName));  [CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]              IllegalStateException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  allCatchNodes.getFirstChild();  Node  finallyBlock  =  finallyBlock.removeFirstChild();  System.arraycopy(labelName,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName));  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  allCatchNodes.getFirstChild();  Node  finallyBlock  =  finallyBlock.removeFirstChild();  System.arraycopy(labelName,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName));	  Node    finallyBlock    =    n.removeFirstChild();    Node    finallyBlock    =    n.removeFirstChild();    System.arraycopy(labelName,    0,    tryMinimizeExits(finallyBlock,    exitType,    labelName));    	non-compiled	[CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	128	None	replace
324	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  n  =  allCatchNodes.getFirstChild();  preconditions.checkState(n.isLabel());  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  n  =  allCatchNodes.getFirstChild();  preconditions.checkState(n.isLabel());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(allCatchNodes.hasOneChild());  Node  n  =  allCatchNodes.getFirstChild();  preconditions.checkState(n.isLabel());	          Preconditions.checkState(n.isLabel());    Node    n    =    allCatchNodes.getFirstChild();    preconditions.checkState(n.isLabel());    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	67	None	replace
325	[BUG]  [BUGGY]  Node  n  =  allCatchNodes.getFirstChild();  preconditions.checkState(n.isLabel());  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                  RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  n  =  allCatchNodes.getFirstChild();  preconditions.checkState(n.isLabel());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  n  =  allCatchNodes.getFirstChild();  preconditions.checkState(n.isLabel());	          Preconditions.checkState(n.isLabel());    Node    n    =    allCatchNodes.getFirstChild();    preconditions.checkState(n.isLabel());    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	67	None	replace
326	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild(),  n);  Node  n  =  allCatchNodes.getFirstChild();  preconditions.checkState(n.isLabel());  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                    RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild(),  n);  Node  n  =  allCatchNodes.getFirstChild();  preconditions.checkState(n.isLabel());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(allCatchNodes.hasOneChild(),  n);  Node  n  =  allCatchNodes.getFirstChild();  preconditions.checkState(n.isLabel());	          Preconditions.checkState(n.isLabel());    Node    n    =    allCatchNodes.getFirstChild();    preconditions.checkState(n.isLabel());    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	67	None	replace
327	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.getFirstChild()  ==  null);  Node  n  =  allCatchNodes.getFirstChild();  preconditions.checkState(n.isLabel());  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                      RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(allCatchNodes.getFirstChild()  ==  null);  Node  n  =  allCatchNodes.getFirstChild();  preconditions.checkState(n.isLabel());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(allCatchNodes.getFirstChild()  ==  null);  Node  n  =  allCatchNodes.getFirstChild();  preconditions.checkState(n.isLabel());	          Preconditions.checkState(n.isLabel());    Node    n    =    allCatchNodes.getFirstChild();    preconditions.checkState(n.isLabel());    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	67	None	replace
328	[BUG]  [BUGGY]  Node  labelBlock  =  n.getFirstChild();  Preconditions.checkState(labelName.isLabel());  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  labelBlock  =  n.getFirstChild();  Preconditions.checkState(labelName.isLabel());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  labelBlock  =  n.getFirstChild();  Preconditions.checkState(labelName.isLabel());	          Preconditions.checkState(n.isLabel());    Node    labelBlock    =    n.getFirstChild();    Preconditions.checkState(n.isLabel());    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
329	[BUG]  [BUGGY]  Node  labelBlock  =  n.getFirstChild();  Preconditions.checkState(n.isLabel());  [CE]  cannot  find  symbol  finallyBlock  [FE]      RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  labelBlock  =  n.getFirstChild();  Preconditions.checkState(n.isLabel());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  labelBlock  =  n.getFirstChild();  Preconditions.checkState(n.isLabel());	          Preconditions.checkState(n.isLabel());    Node    labelBlock    =    n.getFirstChild();    Preconditions.checkState(n.isLabel());    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	110	None	replace
330	[BUG]  [BUGGY]  Preconditions.checkState(labelName.isLabel());  Node  labelBlock  =  n.getFirstChild();  Preconditions.checkState(n.isLabel());  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(labelName.isLabel());  Node  labelBlock  =  n.getFirstChild();  Preconditions.checkState(n.isLabel());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(labelName.isLabel());  Node  labelBlock  =  n.getFirstChild();  Preconditions.checkState(n.isLabel());	          Preconditions.checkState(n.isLabel());    Node    labelBlock    =    n.getFirstChild();    Preconditions.checkState(n.isLabel());    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
331	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  null);  n  =  n.getLastChild();  [CE]  cannot  find  symbol  finallyBlock  [FE]    RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  null);  n  =  n.getLastChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.getFirstChild()  ==  null);  n  =  n.getLastChild();	          n    =    n.getFirstChild();    n    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	52	None	replace
332	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild()!=  null);  n  =  n.getLastChild();  [CE]  cannot  find  symbol  finallyBlock  [FE]      RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.getFirstChild()!=  null);  n  =  n.getLastChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.getFirstChild()!=  null);  n  =  n.getLastChild();	          n    =    n.getFirstChild();    n    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	52	None	replace
333	[BUG]  [BUGGY]  Node  n  =  allCatchNodes.getFirstChild();  n  =  n.getLastChild();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  n  =  allCatchNodes.getFirstChild();  n  =  n.getLastChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  n  =  allCatchNodes.getFirstChild();  n  =  n.getLastChild();	          n    =    n.getFirstChild();    n    =    n.getLastChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	52	None	replace
334	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isExitType(n)||  NodeUtil.isExitType(n));  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(NodeUtil.isExitType(n)||  NodeUtil.isExitType(n));  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(NodeUtil.isExitType(n)||  NodeUtil.isExitType(n));	  Preconditions.checkState(NodeUtil.isExitType(n));    	non-compiled	[CE]  cannot  find  symbol	124	None	replace
335	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isExitType(labelName));  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(NodeUtil.isExitType(labelName));  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(NodeUtil.isExitType(labelName));	  Preconditions.checkState(NodeUtil.isExitType(n));    	non-compiled	[CE]  cannot  find  symbol	124	None	replace
336	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isExitType(n,  exitType));  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(NodeUtil.isExitType(n,  exitType));  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(NodeUtil.isExitType(n,  exitType));	  Preconditions.checkState(NodeUtil.isExitType(n));    	non-compiled	[CE]  cannot  find  symbol	124	None	replace
337	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isExitType(n)||  NodeUtil.hasFinally(n));  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(NodeUtil.isExitType(n)||  NodeUtil.hasFinally(n));  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(NodeUtil.isExitType(n)||  NodeUtil.hasFinally(n));	  Preconditions.checkState(NodeUtil.isExitType(n));    	non-compiled	[CE]  cannot  find  symbol	124	None	replace
338	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isLabelVar(n));  Preconditions.checkState(NodeUtil.hasFinally(n));  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(NodeUtil.isLabelVar(n));  Preconditions.checkState(NodeUtil.hasFinally(n));  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(NodeUtil.isLabelVar(n));  Preconditions.checkState(NodeUtil.hasFinally(n));	          Preconditions.checkState(NodeUtil.hasFinally(n));    Preconditions.checkState(NodeUtil.hasFinally(n));    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
339	[BUG]  [BUGGY]  Node  endBlock  =  allCatchNodes.getLastChild();  [CE]  cannot  find  symbol  finallyBlock  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  endBlock  =  allCatchNodes.getLastChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  endBlock  =  allCatchNodes.getLastChild();	  Node    endBlock    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	159	None	replace
340	[BUG]  [BUGGY]  Node  finallyBlock  =  catchNodes.removeFirstChild();  [CE]  cannot  find  symbol  catchNodes  [FE]        IllegalStateException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  catchNodes.removeFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  catchNodes.removeFirstChild();	  Node    finallyBlock    =    catchNode.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol  catchNodes	8	None	replace
341	[BUG]  [BUGGY]  Node  elseBlock  =  catchNode.getNext();  [CE]  cannot  find  symbol  catchNode  [FE]        AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  elseBlock  =  catchNode.getNext();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  elseBlock  =  catchNode.getNext();	  Node    elseBlock    =    n.getNext();    	non-compiled	[CE]  cannot  find  symbol  catchNode	100	None	replace
342	[BUG]  [BUGGY]  Node  nextBlock  =  n.getNext();  [CE]  cannot  find  symbol  finallyBlock  [FE]          AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  nextBlock  =  n.getNext();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  nextBlock  =  n.getNext();	  Node    elseBlock    =    n.getNext();    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	100	None	replace
343	[BUG]  [BUGGY]  Node  finallyBlock  =  catchNodes.get(0);  [CE]  cannot  find  symbol  catchNodes  [FE]        RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  catchNodes.get(0);  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  catchNodes.get(0);	  Node    finallyBlock    =    allCatchNodes.get(0);    	non-compiled	[CE]  cannot  find  symbol  catchNodes	48	None	replace
344	[BUG]  [BUGGY]  Node  finallyBlock  =  n.get(0);  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  n.get(0);  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  n.get(0);	  Node    finallyBlock    =    allCatchNodes.get(0);    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
345	[BUG]  [BUGGY]  Node  finallyBlock  =  allCatchNodes.get(1);  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  allCatchNodes.get(1);  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  allCatchNodes.get(1);	  Node    finallyBlock    =    allCatchNodes.get(0);    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
346	[BUG]  [BUGGY]  Node  finallyBlock  =  allCatchNodes.get(n);  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  allCatchNodes.get(n);  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  allCatchNodes.get(n);	  Node    finallyBlock    =    allCatchNodes.get(0);    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
347	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild()!=  null);  Node  labelBlock  =  n.getFirstChild();  [CE]  cannot  find  symbol  finallyBlock  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.getFirstChild()!=  null);  Node  labelBlock  =  n.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.getFirstChild()!=  null);  Node  labelBlock  =  n.getFirstChild();	          Node    labelBlock    =    n.getFirstChild();    Node    labelBlock    =    n.getfirstChild();    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	89	None	replace
348	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  null);  Node  labelBlock  =  n.getFirstChild();  [CE]  cannot  find  symbol  finallyBlock  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  null);  Node  labelBlock  =  n.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.getFirstChild()  ==  null);  Node  labelBlock  =  n.getFirstChild();	          Node    labelBlock    =    n.getFirstChild();    Node    labelBlock    =    n.getfirstChild();    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	89	None	replace
349	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  n);  Node  labelBlock  =  n.getFirstChild();  [CE]  cannot  find  symbol  finallyBlock  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  n);  Node  labelBlock  =  n.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.getFirstChild()  ==  n);  Node  labelBlock  =  n.getFirstChild();	          Node    labelBlock    =    n.getFirstChild();    Node    labelBlock    =    n.getfirstChild();    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	89	None	replace
350	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          n    =    n.getFirstChild();    n  =  n.getLastChild();  n  =  n.getFirstChild();  n  =  n.getLastChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	add	                n        =        n.getFirstChild();        n    =    n.getLastChild();    n  =  n.getFirstChild();  n  =  n.getLastChild();	  	compilable	  [FE]  RuntimeException  	51	2	add
351	[BUG]  [BUGGY]          n    =    n.getFirstChild();    n  =  n.getLastChild();  n  =  n.getFirstChild();  n  =  n.getLastChild();  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          n    =    n.getFirstChild();    n  =  n.getLastChild();  n  =  n.getFirstChild();  n  =  n.getLastChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	                n        =        n.getFirstChild();        n    =    n.getLastChild();    n  =  n.getFirstChild();  n  =  n.getLastChild();	  	compilable	  [FE]  RuntimeException  	51	2	add
352	[BUG]  [BUGGY]          n    =    n.getFirstChild();    n  =  n.getLastChild();  Node  n  =  n.getFirstChild();  n  =  n.getLastChild();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          n    =    n.getFirstChild();    n  =  n.getLastChild();  Node  n  =  n.getFirstChild();  n  =  n.getLastChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	                n        =        n.getFirstChild();        n    =    n.getLastChild();    Node  n  =  n.getFirstChild();  n  =  n.getLastChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	51	None	add
353	[BUG]  [BUGGY]          n    =    n.getFirstChild();    n  =  n.getLastChild();  int  n  =  n.getFirstChild();  n  =  n.getLastChild();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          n    =    n.getFirstChild();    n  =  n.getLastChild();  int  n  =  n.getFirstChild();  n  =  n.getLastChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	                n        =        n.getFirstChild();        n    =    n.getLastChild();    int  n  =  n.getFirstChild();  n  =  n.getLastChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	51	None	add
354	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          n    =    n.getFirstChild();    n  =  n.getLastChild();  n  =  n.getLastChild();  n  =  n.getLastChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	add	                n        =        n.getFirstChild();        n    =    n.getLastChild();    n  =  n.getLastChild();  n  =  n.getLastChild();	  	compilable	  [FE]  RuntimeException  	51	2	add
355	[BUG]  [BUGGY]          n    =    n.getFirstChild();    n  =  n.getLastChild();  n  =  n.getLastChild();  n  =  n.getLastChild();  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          n    =    n.getFirstChild();    n  =  n.getLastChild();  n  =  n.getLastChild();  n  =  n.getLastChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	                n        =        n.getFirstChild();        n    =    n.getLastChild();    n  =  n.getLastChild();  n  =  n.getLastChild();	  	compilable	  [FE]  RuntimeException  	51	2	add
356	[BUG]  [BUGGY]          n    =    n.getFirstChild();    n  =  n.getLastChild();  node  =  n.getFirstChild();  n  =  n.getLastChild();  [CE]  cannot  find  symbol  node  [FE]            RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          n    =    n.getFirstChild();    n  =  n.getLastChild();  node  =  n.getFirstChild();  n  =  n.getLastChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	                n        =        n.getFirstChild();        n    =    n.getLastChild();    node  =  n.getFirstChild();  n  =  n.getLastChild();	  	non-compiled	[CE]  cannot  find  symbol  node	51	None	add
357	[BUG]  [BUGGY]  Node  n  =  nodes.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  n  =  nodes.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  n  =  nodes.getFirstChild();	  Node    n    =    anyCatchNodes.getFirstChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	60	None	replace
358	[BUG]  [BUGGY]  Node  elseBlock  =  n.getLastChild();  Node  otherBlock  =  n.getFirstChild();  [CE]  cannot  find  symbol  finallyBlock  [FE]    AssertionFailedError    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  elseBlock  =  n.getLastChild();  Node  otherBlock  =  n.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  elseBlock  =  n.getLastChild();  Node  otherBlock  =  n.getFirstChild();	          Node    elseBlock    =    n.getFirstChild();    Node    otherBlock    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	80	None	replace
359	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  otherBlock  =  n.getFirstChild();  [CE]  cannot  find  symbol  finallyBlock  [FE]      AssertionFailedError    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  otherBlock  =  n.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  otherBlock  =  n.getFirstChild();	          Node    elseBlock    =    n.getFirstChild();    Node    otherBlock    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	80	None	replace
360	[BUG]  [BUGGY]  Node  elseBlock  =  n.getFirstChild();  Node  otherBlock  =  n.getLastChild();  [CE]  cannot  find  symbol  finallyBlock  [FE]        AssertionFailedError    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  elseBlock  =  n.getFirstChild();  Node  otherBlock  =  n.getLastChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  elseBlock  =  n.getFirstChild();  Node  otherBlock  =  n.getLastChild();	          Node    elseBlock    =    n.getFirstChild();    Node    otherBlock    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	80	None	replace
361	[BUG]  [BUGGY]  Node  elseBlock  =  catchNode.getLastChild();  [CE]  cannot  find  symbol  catchNode  [FE]        AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  elseBlock  =  catchNode.getLastChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  elseBlock  =  catchNode.getLastChild();	  Node    elseBlock    =    allCatchNodes.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  catchNode	16	None	replace
362	[BUG]  [BUGGY]  Node  elseBlock  =  nodes.getLastChild();  [CE]  cannot  find  symbol  nodes  [FE]          AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  elseBlock  =  nodes.getLastChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  elseBlock  =  nodes.getLastChild();	  Node    elseBlock    =    allCatchNodes.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  nodes	16	None	replace
363	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  exitType);  [CE]  incomparable  types:  Node  and  int  [FE]          AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  exitType);  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.getFirstChild()  ==  exitType);	          Node    labelBlock    =    n.getFirstChild();    Node    labelBlock    =    n.getFirstChild();    }    else    {    tryMinimizeExits(labelName,    exitType,    labelName);    	non-compiled	[CE]  incomparable  types:  Node  and  int	103	None	replace
364	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild()!=  exitType);  [CE]  incomparable  types:  Node  and  int  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.getFirstChild()!=  exitType);  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.getFirstChild()!=  exitType);	          Node    labelBlock    =    n.getFirstChild();    Node    labelBlock    =    n.getFirstChild();    }    else    {    tryMinimizeExits(labelName,    exitType,    labelName);    	non-compiled	[CE]  incomparable  types:  Node  and  int	103	None	replace
365	[BUG]  [BUGGY]  Node  elseBlock  =  c.getFirstChild();  [CE]  cannot  find  symbol  c  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  elseBlock  =  c.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  elseBlock  =  c.getFirstChild();	  Node    elseBlock    =    nodes.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  c	18	None	replace
366	[BUG]  [BUGGY]  Preconditions.checkArgument(n.isFinally());  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkArgument(n.isFinally());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkArgument(n.isFinally());	  Preconditions.checkArgument(n.isLabel());    	non-compiled	[CE]  cannot  find  symbol	164	None	replace
367	[BUG]  [BUGGY]  Preconditions.checkArgument(n.isLabel()  &&  NodeUtil.hasFinally(n));  [CE]  cannot  find  symbol  finallyBlock  [FE]              RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkArgument(n.isLabel()  &&  NodeUtil.hasFinally(n));  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkArgument(n.isLabel()  &&  NodeUtil.hasFinally(n));	  Preconditions.checkArgument(n.isLabel());    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	164	None	replace
368	[BUG]  [BUGGY]  Preconditions.checkArgument(n.isLabel(),  exitType);  [CE]  cannot  find  symbol  finallyBlock  [FE]                RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkArgument(n.isLabel(),  exitType);  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkArgument(n.isLabel(),  exitType);	  Preconditions.checkArgument(n.isLabel());    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	164	None	replace
369	[BUG]  [BUGGY]          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  thenBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  thenBlock  =  allCatchNodes.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  thenBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  thenBlock  =  allCatchNodes.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	                Node        elseBlock        =        allCatchNodes.getFirstChild();        Node    thenBlock    =    allCatchNodes.getFirstChild();    Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  thenBlock  =  allCatchNodes.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	125	None	add
370	[BUG]  [BUGGY]          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  thenBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  thenBlock  =  allCatchNodes.getLastChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      AssertionFailedError    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  thenBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  thenBlock  =  allCatchNodes.getLastChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	                Node        elseBlock        =        allCatchNodes.getFirstChild();        Node    thenBlock    =    allCatchNodes.getFirstChild();    Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  thenBlock  =  allCatchNodes.getLastChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	125	None	add
371	[BUG]  [BUGGY]          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  thenBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getLastChild();  Node  thenBlock  =  allCatchNodes.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        AssertionFailedError    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  thenBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getLastChild();  Node  thenBlock  =  allCatchNodes.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	                Node        elseBlock        =        allCatchNodes.getFirstChild();        Node    thenBlock    =    allCatchNodes.getFirstChild();    Node  elseBlock  =  allCatchNodes.getLastChild();  Node  thenBlock  =  allCatchNodes.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	125	None	add
372	[BUG]  [BUGGY]          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  thenBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getfirstChild();  Node  thenBlock  =  allCatchNodes.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          AssertionFailedError    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  thenBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getfirstChild();  Node  thenBlock  =  allCatchNodes.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	                Node        elseBlock        =        allCatchNodes.getFirstChild();        Node    thenBlock    =    allCatchNodes.getFirstChild();    Node  elseBlock  =  allCatchNodes.getfirstChild();  Node  thenBlock  =  allCatchNodes.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	125	None	add
373	[BUG]  [BUGGY]          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  thenBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  AllCatchNodes.getFirstChild();  Node  thenBlock  =  allCatchNodes.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]            AssertionFailedError    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  thenBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  AllCatchNodes.getFirstChild();  Node  thenBlock  =  allCatchNodes.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	                Node        elseBlock        =        allCatchNodes.getFirstChild();        Node    thenBlock    =    allCatchNodes.getFirstChild();    Node  elseBlock  =  AllCatchNodes.getFirstChild();  Node  thenBlock  =  allCatchNodes.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	125	None	add
374	[BUG]  [BUGGY]          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  thenBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  Node  thenBlock  =  allCatchNodes.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]              AssertionFailedError    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  thenBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  Node  thenBlock  =  allCatchNodes.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	                Node        elseBlock        =        allCatchNodes.getFirstChild();        Node    thenBlock    =    allCatchNodes.getFirstChild();    Node  elseBlock  =  n.getFirstChild();  Node  thenBlock  =  allCatchNodes.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	125	None	add
375	[BUG]  [BUGGY]  Node  finallyBlock  =  n.getFirstChild();  Node  finallyBlock  =  n.removeFirstChild();  [CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                  IllegalStateException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  n.getFirstChild();  Node  finallyBlock  =  n.removeFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  n.getFirstChild();  Node  finallyBlock  =  n.removeFirstChild();	  Node    finallyBlock    =    n.removeFirstChild();    Node    finallyBlock    =    n.removeFirstChild();    }    elseBlock.setLabelName(labelName);    	non-compiled	[CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	24	None	replace
376	[BUG]  [BUGGY]  Node  finallyBlock  =  n.cloneTree();  Node  finallyBlock  =  n.cloneTree();  [CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    StackOverflowError    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  n.cloneTree();  Node  finallyBlock  =  n.cloneTree();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node    finallyBlock    =    n.cloneTree();    Node  finallyBlock  =  n.cloneTree();	  	non-compiled	[CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	138	None	add
377	[BUG]  [BUGGY]  Node  finallyBlock  =  n.cloneTree();  Node  finallyBlock  =  n.cloneTree();  }  tryMinimizeExits(finallyBlock,  exitType,  labelName);  [CE]  illegal  start  of  type  [FE]      StackOverflowError    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  n.cloneTree();  Node  finallyBlock  =  n.cloneTree();  }  tryMinimizeExits(finallyBlock,  exitType,  labelName);  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node    finallyBlock    =    n.cloneTree();    Node  finallyBlock  =  n.cloneTree();  }  tryMinimizeExits(finallyBlock,  exitType,  labelName);	  	non-compiled	[CE]  illegal  start  of  type	138	None	add
378	[BUG]  [BUGGY]  Node  finallyBlock  =  n.cloneTree();  Node  finallyBlock  =  n.cloneTree();  System.arraycopy(c,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName);  [CE]  ')'  expected  [FE]        StackOverflowError    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  n.cloneTree();  Node  finallyBlock  =  n.cloneTree();  System.arraycopy(c,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName);  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node    finallyBlock    =    n.cloneTree();    Node  finallyBlock  =  n.cloneTree();  System.arraycopy(c,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName);	  	non-compiled	[CE]  ')'  expected	138	None	add
379	[BUG]  [BUGGY]  Node  finallyBlock  =  n.cloneTree();  Node  finallyBlock  =  n.cloneTree();  }  else  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  [CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          StackOverflowError    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  n.cloneTree();  Node  finallyBlock  =  n.cloneTree();  }  else  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node    finallyBlock    =    n.cloneTree();    Node  finallyBlock  =  n.cloneTree();  }  else  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);	  	non-compiled	[CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	138	None	add
380	[BUG]  [BUGGY]  Node  finallyBlock  =  n.cloneTree();  Node  finallyBlock  =  n.cloneTree();  System.arraycopy(c,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName));  [CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]            StackOverflowError    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  n.cloneTree();  Node  finallyBlock  =  n.cloneTree();  System.arraycopy(c,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName));  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node    finallyBlock    =    n.cloneTree();    Node  finallyBlock  =  n.cloneTree();  System.arraycopy(c,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName));	  	non-compiled	[CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	138	None	add
381	[BUG]  [BUGGY]  Node  finallyBlock  =  n.cloneTree();  Node  finallyBlock  =  n.cloneTree();  }  elseBlock  =  n.cloneTree();  [CE]  illegal  start  of  type  [FE]              StackOverflowError    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  n.cloneTree();  Node  finallyBlock  =  n.cloneTree();  }  elseBlock  =  n.cloneTree();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node    finallyBlock    =    n.cloneTree();    Node  finallyBlock  =  n.cloneTree();  }  elseBlock  =  n.cloneTree();	  	non-compiled	[CE]  illegal  start  of  type	138	None	add
382	[BUG]  [BUGGY]  Preconditions.checkState(n.isTree(),  exitType);  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.isTree(),  exitType);  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.isTree(),  exitType);	  Preconditions.checkState(n.isTree());    	non-compiled	[CE]  cannot  find  symbol	163	None	replace
383	[BUG]  [BUGGY]  Preconditions.checkState(n.isTree()  ||  n.isTree());  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.isTree()  ||  n.isTree());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.isTree()  ||  n.isTree());	  Preconditions.checkState(n.isTree());    	non-compiled	[CE]  cannot  find  symbol	163	None	replace
384	[BUG]  [BUGGY]  Preconditions.checkState(n.isTree()  &&!NodeUtil.hasFinally(n));  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.isTree()  &&!NodeUtil.hasFinally(n));  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.isTree()  &&!NodeUtil.hasFinally(n));	  Preconditions.checkState(n.isTree());    	non-compiled	[CE]  cannot  find  symbol	163	None	replace
385	[BUG]  [BUGGY]  Preconditions.checkState(n.isTree()  &&  NodeUtil.hasFinally(n));  [CE]  cannot  find  symbol  [FE]                RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.isTree()  &&  NodeUtil.hasFinally(n));  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.isTree()  &&  NodeUtil.hasFinally(n));	  Preconditions.checkState(n.isTree());    	non-compiled	[CE]  cannot  find  symbol	163	None	replace
386	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  Preconditions.checkState(allCatchNodes.hasLastChild());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  Preconditions.checkState(allCatchNodes.hasLastChild());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  elseBlock  =  allCatchNodes.getFirstChild();  Preconditions.checkState(allCatchNodes.hasLastChild());	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    elseBlock    =    allCatchNodes.getLastChild();    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
387	[BUG]  [BUGGY]  Node  finallyBlock  =  allSatchNodes.getFirstChild();  [CE]  cannot  find  symbol  allSatchNodes  [FE]              RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  allSatchNodes.getFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  allSatchNodes.getFirstChild();	  Node    finallyBlock    =    allCatchNodes.getFirstChild();    Node    finallyBlock    =    allSatchNodes.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  allSatchNodes	4	None	replace
388	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.hasFinally(callNode));  [CE]  cannot  find  symbol  callNode  [FE]        AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(NodeUtil.hasFinally(callNode));  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(NodeUtil.hasFinally(callNode));	          Preconditions.checkState(NodeUtil.hasFinally(n));    preconditions.checkState(NodeUtil.hasFinally(n));    	non-compiled	[CE]  cannot  find  symbol  callNode	107	None	replace
389	[BUG]  [BUGGY]  Node  finallyBlock  =  getFinallyBlock(n,  n.getFirstChild());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  getFinallyBlock(n,  n.getFirstChild());  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  getFinallyBlock(n,  n.getFirstChild());	  Node    finallyBlock    =    getFinallyBlock(n.getFirstChild());    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
390	[BUG]  [BUGGY]  Node  finallyBlock  =  getFinallyBlock(n.getFirstChild(),  n.getLastChild());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  getFinallyBlock(n.getFirstChild(),  n.getLastChild());  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  getFinallyBlock(n.getFirstChild(),  n.getLastChild());	  Node    finallyBlock    =    getFinallyBlock(n.getFirstChild());    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
391	[BUG]  [BUGGY]  Node  finallyBlock  =  getFinallyBlock(n,  c.getFirstChild());  [CE]  cannot  find  symbol  c  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  getFinallyBlock(n,  c.getFirstChild());  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  getFinallyBlock(n,  c.getFirstChild());	  Node    finallyBlock    =    getFinallyBlock(n.getFirstChild());    	non-compiled	[CE]  cannot  find  symbol  c	38	None	replace
392	[BUG]  [BUGGY]  Node  labelBlock  =  catchNode.removeFirstChild();  [CE]  cannot  find  symbol  catchNode  [FE]        AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  labelBlock  =  catchNode.removeFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  labelBlock  =  catchNode.removeFirstChild();	  Node    labelBlock    =    n.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol  catchNode	148	None	replace
393	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.BLOCK);  [CE]  cannot  find  symbol  finallyBlock  [FE]            RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.BLOCK);  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.getType()!=  Token.BLOCK);	  Preconditions.checkState(n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	14	None	replace
394	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.BLOCK);  [CE]  cannot  find  symbol  finallyBlock  [FE]              RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.BLOCK);  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.BLOCK);	  Preconditions.checkState(n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	14	None	replace
395	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK,  exitType);  [CE]  cannot  find  symbol  finallyBlock  [FE]                RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK,  exitType);  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.getType()  ==  Token.BLOCK,  exitType);	  Preconditions.checkState(n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	14	None	replace
396	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  &&!NodeUtil.hasFinally(n));  [CE]  cannot  find  symbol  finallyBlock  [FE]                  RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  &&!NodeUtil.hasFinally(n));  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.getType()  ==  Token.BLOCK  &&!NodeUtil.hasFinally(n));	  Preconditions.checkState(n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	14	None	replace
397	[BUG]  [BUGGY]  Node  elseBlock  =  n.get(allCatchNodes);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  elseBlock  =  n.get(allCatchNodes);  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  elseBlock  =  n.get(allCatchNodes);	  Node    elseBlock    =    allCatchNodes.get(n);    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
398	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.get(n,  catchCodeBlock);  [CE]  cannot  find  symbol  catchCodeBlock  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  elseBlock  =  allCatchNodes.get(n,  catchCodeBlock);  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  elseBlock  =  allCatchNodes.get(n,  catchCodeBlock);	  Node    elseBlock    =    allCatchNodes.get(n);    	non-compiled	[CE]  cannot  find  symbol  catchCodeBlock	94	None	replace
399	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.get(n,  catchNode);  [CE]  cannot  find  symbol  catchNode  [FE]                                AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  elseBlock  =  allCatchNodes.get(n,  catchNode);  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  elseBlock  =  allCatchNodes.get(n,  catchNode);	  Node    elseBlock    =    allCatchNodes.get(n);    	non-compiled	[CE]  cannot  find  symbol  catchNode	94	None	replace
400	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.get(labelName);  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  elseBlock  =  allCatchNodes.get(labelName);  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  elseBlock  =  allCatchNodes.get(labelName);	  Node    elseBlock    =    allCatchNodes.get(n);    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
401	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Preconditions.checkState(NodeUtil.hasFinally(n));    Preconditions.checkState(NodeUtil.hasFinally(n));  Preconditions.checkState(NodeUtil.hasFinally(n));  Preconditions.checkState(NodeUtil.hasFinally(n));  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	add	                Preconditions.checkState(NodeUtil.hasFinally(n));        Preconditions.checkState(NodeUtil.hasFinally(n));    Preconditions.checkState(NodeUtil.hasFinally(n));  Preconditions.checkState(NodeUtil.hasFinally(n));	  	compilable	  [FE]  AssertionFailedError  	70	2	add
402	[BUG]  [BUGGY]          Preconditions.checkState(NodeUtil.hasFinally(n));    Preconditions.checkState(NodeUtil.hasFinally(n));  Preconditions.checkState(NodeUtil.hasFinally(n));  Preconditions.checkState(NodeUtil.hasFinally(n));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Preconditions.checkState(NodeUtil.hasFinally(n));    Preconditions.checkState(NodeUtil.hasFinally(n));  Preconditions.checkState(NodeUtil.hasFinally(n));  Preconditions.checkState(NodeUtil.hasFinally(n));  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	                Preconditions.checkState(NodeUtil.hasFinally(n));        Preconditions.checkState(NodeUtil.hasFinally(n));    Preconditions.checkState(NodeUtil.hasFinally(n));  Preconditions.checkState(NodeUtil.hasFinally(n));	  	compilable	  [FE]  AssertionFailedError  	70	2	add
403	[BUG]  [BUGGY]          Preconditions.checkState(NodeUtil.hasFinally(n));    Preconditions.checkState(NodeUtil.hasFinally(n));  Node  n  =  allCatchNodes.getFirstChild();  Preconditions.checkState(NodeUtil.hasFinally(n));  Preconditions.checkState(NodeUtil.hasFinally(n));  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      AssertionFailedError    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Preconditions.checkState(NodeUtil.hasFinally(n));    Preconditions.checkState(NodeUtil.hasFinally(n));  Node  n  =  allCatchNodes.getFirstChild();  Preconditions.checkState(NodeUtil.hasFinally(n));  Preconditions.checkState(NodeUtil.hasFinally(n));  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	                Preconditions.checkState(NodeUtil.hasFinally(n));        Preconditions.checkState(NodeUtil.hasFinally(n));    Node  n  =  allCatchNodes.getFirstChild();  Preconditions.checkState(NodeUtil.hasFinally(n));  Preconditions.checkState(NodeUtil.hasFinally(n));	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	70	None	add
404	[BUG]  [BUGGY]          Preconditions.checkState(NodeUtil.hasFinally(n));    Preconditions.checkState(NodeUtil.hasFinally(n));  Preconditions.checkState(NodeUtil.isFinally(n));  Preconditions.checkState(NodeUtil.hasFinally(n));  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Preconditions.checkState(NodeUtil.hasFinally(n));    Preconditions.checkState(NodeUtil.hasFinally(n));  Preconditions.checkState(NodeUtil.isFinally(n));  Preconditions.checkState(NodeUtil.hasFinally(n));  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	                Preconditions.checkState(NodeUtil.hasFinally(n));        Preconditions.checkState(NodeUtil.hasFinally(n));    Preconditions.checkState(NodeUtil.isFinally(n));  Preconditions.checkState(NodeUtil.hasFinally(n));	  	non-compiled	[CE]  cannot  find  symbol	70	None	add
405	[BUG]  [BUGGY]          Preconditions.checkState(NodeUtil.hasFinally(n));    Preconditions.checkState(NodeUtil.hasFinally(n));  Preconditions.checkState(NodeUtil.hasFinally(n));  Preconditions.checkState(NodeUtil.hasFinally(n));  NodeUtil.hasFinally(n));  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Preconditions.checkState(NodeUtil.hasFinally(n));    Preconditions.checkState(NodeUtil.hasFinally(n));  Preconditions.checkState(NodeUtil.hasFinally(n));  Preconditions.checkState(NodeUtil.hasFinally(n));  NodeUtil.hasFinally(n));  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	                Preconditions.checkState(NodeUtil.hasFinally(n));        Preconditions.checkState(NodeUtil.hasFinally(n));    Preconditions.checkState(NodeUtil.hasFinally(n));  Preconditions.checkState(NodeUtil.hasFinally(n));  NodeUtil.hasFinally(n));	  	non-compiled	[CE]  ';'  expected	70	None	add
406	[BUG]  [BUGGY]  Node  finallyBlock  =  allCatchNodes.removeFirstChild();  Node  finallyBlock  =  n.removeFirstChild();  System.arraycopy(allCatchNodes,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName);  [CE]  ')'  expected  [FE]              IllegalStateException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  allCatchNodes.removeFirstChild();  Node  finallyBlock  =  n.removeFirstChild();  System.arraycopy(allCatchNodes,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName);  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  allCatchNodes.removeFirstChild();  Node  finallyBlock  =  n.removeFirstChild();  System.arraycopy(allCatchNodes,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName);	  Node    finallyBlock    =    n.removeFirstChild();    Node    finallyBlock    =    n.removeFirstChild();    System.arraycopy(allCatchNodes,    0,    tryMinimizeExits(finallyBlock,    exitType,    labelName);    	non-compiled	[CE]  ')'  expected	130	None	replace
407	[BUG]  [BUGGY]  Node  finallyBlock  =  n.getFirstChild();  Node  finallyBlock  =  n.removeFirstChild();  System.arraycopy(allCatchNodes,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName);  [CE]  ')'  expected  [FE]                IllegalStateException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  n.getFirstChild();  Node  finallyBlock  =  n.removeFirstChild();  System.arraycopy(allCatchNodes,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName);  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  n.getFirstChild();  Node  finallyBlock  =  n.removeFirstChild();  System.arraycopy(allCatchNodes,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName);	  Node    finallyBlock    =    n.removeFirstChild();    Node    finallyBlock    =    n.removeFirstChild();    System.arraycopy(allCatchNodes,    0,    tryMinimizeExits(finallyBlock,    exitType,    labelName);    	non-compiled	[CE]  ')'  expected	130	None	replace
408	[BUG]  [BUGGY]  Node  labelBlock  =  node.getLastChild();  [CE]  cannot  find  symbol  node  [FE]        AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  labelBlock  =  node.getLastChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  labelBlock  =  node.getLastChild();	  Node    labelBlock    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  node	83	None	replace
409	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  [CE]  cannot  find  symbol  finallyBlock  [FE]    RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(allCatchNodes.hasOneChild());	          Preconditions.checkState(n.isLabel());    Preconditions.checkState(n.isLabel());    }    else    if(NodeUtil.hasFinally(n))    {    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	69	None	replace
410	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.hasFinally(n));  preconditions.checkState(NodeUtil.isFinally(n));  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(NodeUtil.hasFinally(n));  preconditions.checkState(NodeUtil.isFinally(n));  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(NodeUtil.hasFinally(n));  preconditions.checkState(NodeUtil.isFinally(n));	          Preconditions.checkState(NodeUtil.hasFinally(n));    Preconditions.checkState(NodeUtil.isFinally(n));    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
411	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkState(n.isLabel());  }  else  if(NodeUtil.hasFinally(n))  {  Preconditions.checkState(n.isLabel());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	add	                Preconditions.checkState(n.isLabel());        Preconditions.checkState(n.isLabel());    }    else    if(NodeUtil.hasFinally(n))    {    Preconditions.checkState(n.isLabel());	  	compilable	  [FE]  RuntimeException  	68	2	add
412	[BUG]  [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkState(n.isLabel());  }  else  if(NodeUtil.hasFinally(n))  {  Preconditions.checkState(n.isLabel());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkState(n.isLabel());  }  else  if(NodeUtil.hasFinally(n))  {  Preconditions.checkState(n.isLabel());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	                Preconditions.checkState(n.isLabel());        Preconditions.checkState(n.isLabel());    }    else    if(NodeUtil.hasFinally(n))    {    Preconditions.checkState(n.isLabel());	  	compilable	  [FE]  RuntimeException  	68	2	add
413	[BUG]  [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkState(n.isLabel());  }  else  if(NodeUtil.hasFinally(n))  {  Preconditions.checkState(n.isLabel());  Preconditions.checkState(n.isLabel());  preconditions.checkState(n.isLabel());  [CE]  cannot  find  symbol  preconditions  [FE]      RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkState(n.isLabel());  }  else  if(NodeUtil.hasFinally(n))  {  Preconditions.checkState(n.isLabel());  Preconditions.checkState(n.isLabel());  preconditions.checkState(n.isLabel());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	                Preconditions.checkState(n.isLabel());        Preconditions.checkState(n.isLabel());    }    else    if(NodeUtil.hasFinally(n))    {    Preconditions.checkState(n.isLabel());  Preconditions.checkState(n.isLabel());  preconditions.checkState(n.isLabel());	  	non-compiled	[CE]  cannot  find  symbol  preconditions	68	None	add
414	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  finallyBlock  =  allSatchNodes.getFirstChild();  [CE]  cannot  find  symbol  allSatchNodes  [FE]              RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  finallyBlock  =  allSatchNodes.getFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(allCatchNodes.hasOneChild());  Node  finallyBlock  =  allSatchNodes.getFirstChild();	  Node    finallyBlock    =    allCatchNodes.getFirstChild();    Node    finallyBlock    =    allSatchNodes.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  allSatchNodes	4	None	replace
415	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  finallyBlock  =  allCatchNodes.getLastChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	add	Preconditions.checkState(allCatchNodes.hasOneChild());  Node  finallyBlock  =  allCatchNodes.getLastChild();	  Node    finallyBlock    =    allCatchNodes.getFirstChild();    Node    finallyBlock    =    allCatchNodes.getLastChild();    	compilable	  [FE]  RuntimeException  	2	2	replace
416	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  finallyBlock  =  allCatchNodes.getLastChild();  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  finallyBlock  =  allCatchNodes.getLastChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(allCatchNodes.hasOneChild());  Node  finallyBlock  =  allCatchNodes.getLastChild();	  Node    finallyBlock    =    allCatchNodes.getFirstChild();    Node    finallyBlock    =    allCatchNodes.getLastChild();    	compilable	  [FE]  RuntimeException  	2	2	replace
417	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  allCatchNodes.getFirstChild();  n  =  allCatchNodes.getLastChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	add	Node  finallyBlock  =  allCatchNodes.getFirstChild();  n  =  allCatchNodes.getLastChild();	  Node    finallyBlock    =    allCatchNodes.getFirstChild();    Node    finallyBlock    =    allCatchNodes.getLastChild();    	compilable	  [FE]  RuntimeException  	2	2	replace
418	[BUG]  [BUGGY]  Node  finallyBlock  =  allCatchNodes.getFirstChild();  n  =  allCatchNodes.getLastChild();  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  allCatchNodes.getFirstChild();  n  =  allCatchNodes.getLastChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  allCatchNodes.getFirstChild();  n  =  allCatchNodes.getLastChild();	  Node    finallyBlock    =    allCatchNodes.getFirstChild();    Node    finallyBlock    =    allCatchNodes.getLastChild();    	compilable	  [FE]  RuntimeException  	2	2	replace
419	[BUG]  [BUGGY]  Preconditions.checkState(n.hasOneChild());  [CE]  cannot  find  symbol  finallyBlock  [FE]                  IllegalStateException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.hasOneChild());  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.hasOneChild());	  Node    finallyBlock    =    n.removeFirstChild();    Node    finallyBlock    =    n.removeFirstChild();    }    elseBlock.setLabelName(labelName);    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	24	None	replace
420	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  c  =  allCatchNodes.getLastChild();  [CE]  cannot  find  symbol  finallyBlock  [FE]          AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  c  =  allCatchNodes.getLastChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(allCatchNodes.hasOneChild());  Node  c  =  allCatchNodes.getLastChild();	          Node    c    =    allCatchNodes.getFirstChild();    Node    c    =    allCatchNodes.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	44	None	replace
421	[BUG]  [BUGGY]  Node  c  =  allCatchNodes.getFirstChild();  Node  c  =  n.getLastChild();  [CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  c  =  allCatchNodes.getFirstChild();  Node  c  =  n.getLastChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  c  =  allCatchNodes.getFirstChild();  Node  c  =  n.getLastChild();	          Node    c    =    allCatchNodes.getFirstChild();    Node    c    =    allCatchNodes.getLastChild();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	44	None	replace
422	[BUG]  [BUGGY]          Preconditions.checkState(NodeUtil.hasFinally(n));    Preconditions.checkState(NodeUtil.hasFinally(n));  preconditions.checkState(NodeUtil.hasFinally(n));  Preconditions.checkState(NodeUtil.hasFinally(n));  [CE]  cannot  find  symbol  preconditions  [FE]    AssertionFailedError    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Preconditions.checkState(NodeUtil.hasFinally(n));    Preconditions.checkState(NodeUtil.hasFinally(n));  preconditions.checkState(NodeUtil.hasFinally(n));  Preconditions.checkState(NodeUtil.hasFinally(n));  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	                Preconditions.checkState(NodeUtil.hasFinally(n));        Preconditions.checkState(NodeUtil.hasFinally(n));    preconditions.checkState(NodeUtil.hasFinally(n));  Preconditions.checkState(NodeUtil.hasFinally(n));	  	non-compiled	[CE]  cannot  find  symbol  preconditions	70	None	add
423	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  &&  NodeUtil.hasFinally(n));  [CE]  cannot  find  symbol  finallyBlock  [FE]            RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  &&  NodeUtil.hasFinally(n));  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.getType()  ==  Token.BLOCK  &&  NodeUtil.hasFinally(n));	  Preconditions.checkState(n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	14	None	replace
424	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  NodeUtil.hasFinally(n));  [CE]  cannot  find  symbol  finallyBlock  [FE]              RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  NodeUtil.hasFinally(n));  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  NodeUtil.hasFinally(n));	  Preconditions.checkState(n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	14	None	replace
425	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  Preconditions.checkState(allCatchNodes.hasOneChild());  [CE]  cannot  find  symbol  finallyBlock  [FE]        AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  elseBlock  =  allCatchNodes.getFirstChild();  Preconditions.checkState(allCatchNodes.hasOneChild());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  elseBlock  =  allCatchNodes.getFirstChild();  Preconditions.checkState(allCatchNodes.hasOneChild());	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    elseBlock    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	95	None	replace
426	[BUG]  [BUGGY]  Node  n  =  allCatchNodes.get(n.size()  -  1);  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  n  =  allCatchNodes.get(n.size()  -  1);  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  n  =  allCatchNodes.get(n.size()  -  1);	  Node    n    =    allCatchNodes.get(0);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	59	None	replace
427	[BUG]  [BUGGY]  LabelName  labelName  =  n.getFirstChild();  System.arraycopy(labelName,  0,  labelBlock,  0,  n.getLastChild());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  LabelName  labelName  =  n.getFirstChild();  System.arraycopy(labelName,  0,  labelBlock,  0,  n.getLastChild());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	LabelName  labelName  =  n.getFirstChild();  System.arraycopy(labelName,  0,  labelBlock,  0,  n.getLastChild());	          Node    labelBlock    =    n.getFirstChild();    Node    labelBlock    =    n.getFirstChild();    System.arraycopy(labelName,    0,    labelBlock,    0,    n.getLastChild());    	non-compiled	[CE]  cannot  find  symbol	146	None	replace
428	[BUG]  [BUGGY]  Label  labelBlock  =  n.getFirstChild();  System.arraycopy(labelName,  0,  labelBlock,  0,  n.getLastChild());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Label  labelBlock  =  n.getFirstChild();  System.arraycopy(labelName,  0,  labelBlock,  0,  n.getLastChild());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Label  labelBlock  =  n.getFirstChild();  System.arraycopy(labelName,  0,  labelBlock,  0,  n.getLastChild());	          Node    labelBlock    =    n.getFirstChild();    Node    labelBlock    =    n.getFirstChild();    System.arraycopy(labelName,    0,    labelBlock,    0,    n.getLastChild());    	non-compiled	[CE]  cannot  find  symbol	146	None	replace
429	[BUG]  [BUGGY]  Node  finallyBlock  =  n.cloneFinally();  [CE]  cannot  find  symbol  [FE]    StackOverflowError    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  n.cloneFinally();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  n.cloneFinally();	  Node    finallyBlock    =    n.cloneTree();    	non-compiled	[CE]  cannot  find  symbol	139	None	replace
430	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGet(n)||  NodeUtil.hasFinally(n));  [CE]  cannot  find  symbol  finallyBlock  [FE]        AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(NodeUtil.isGet(n)||  NodeUtil.hasFinally(n));  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(NodeUtil.isGet(n)||  NodeUtil.hasFinally(n));	  Preconditions.checkState(NodeUtil.isGet(n));    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	123	None	replace
431	[BUG]  [BUGGY]  Node  catchNodeBlock  =  n.getFirstChild();  [CE]  cannot  find  symbol  finallyBlock  [FE]          AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  catchNodeBlock  =  n.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  catchNodeBlock  =  n.getFirstChild();	  Node    labelBlock    =    catchNode.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	84	None	replace
432	[BUG]  [BUGGY]  Node  catchNode  =  n.getFirstChild();  [CE]  cannot  find  symbol  finallyBlock  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  catchNode  =  n.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  catchNode  =  n.getFirstChild();	  Node    labelBlock    =    catchNode.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	84	None	replace
433	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.hasFinally(n),  n  =  allCatchNodes.getFirstChild();  Preconditions.checkState(NodeUtil.hasFinally(n));  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(NodeUtil.hasFinally(n),  n  =  allCatchNodes.getFirstChild();  Preconditions.checkState(NodeUtil.hasFinally(n));  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(NodeUtil.hasFinally(n),  n  =  allCatchNodes.getFirstChild();  Preconditions.checkState(NodeUtil.hasFinally(n));	          Preconditions.checkState(NodeUtil.hasFinally(n));    Node    n    =    allCatchNodes.getFirstChild();    Preconditions.checkState(NodeUtil.hasFinally(n));    	non-compiled	[CE]  ')'  expected	72	None	replace
434	[BUG]  [BUGGY]  Node  labelBlock  =  n.getFirstChild();  nodeBlock  =  n.getFirstChild();  this.labelName  =  n.getLastChild();  [CE]  cannot  find  symbol  nodeBlock  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  labelBlock  =  n.getFirstChild();  nodeBlock  =  n.getFirstChild();  this.labelName  =  n.getLastChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  labelBlock  =  n.getFirstChild();  nodeBlock  =  n.getFirstChild();  this.labelName  =  n.getLastChild();	          Node    labelBlock    =    n.getFirstChild();    Node    labelBlock    =    n.getFirstChild();    this.labelName    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  nodeBlock	105	None	replace
435	[BUG]  [BUGGY]  Node  labelBlock  =  n.getFirstChild();  this.labelName  =(n.getLastChild()  ==  null)?  null  :  n.getLastChild();  [CE]  cannot  find  symbol  labelName  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  labelBlock  =  n.getFirstChild();  this.labelName  =(n.getLastChild()  ==  null)?  null  :  n.getLastChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  labelBlock  =  n.getFirstChild();  this.labelName  =(n.getLastChild()  ==  null)?  null  :  n.getLastChild();	          Node    labelBlock    =    n.getFirstChild();    Node    labelBlock    =    n.getFirstChild();    this.labelName    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  labelName	105	None	replace
436	[BUG]  [BUGGY]  Node  labelBlock  =  nodes.getFirstChild();  [CE]  cannot  find  symbol  nodes  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  labelBlock  =  nodes.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  labelBlock  =  nodes.getFirstChild();	  Node    labelBlock    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  nodes	85	None	replace
437	[BUG]  [BUGGY]  Node  elseBlock  =  this.allCatchNodes.getFirstChild();  [CE]  cannot  find  symbol  allCatchNodes  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  elseBlock  =  this.allCatchNodes.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  elseBlock  =  this.allCatchNodes.getFirstChild();	  Node    elseBlock    =    nodes.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  allCatchNodes	18	None	replace
438	[BUG]  [BUGGY]  Node  elseBlock  =  allNodes.getFirstChild();  [CE]  cannot  find  symbol  allNodes  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  elseBlock  =  allNodes.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  elseBlock  =  allNodes.getFirstChild();	  Node    elseBlock    =    nodes.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  allNodes	18	None	replace
439	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.get(2);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  elseBlock  =  allCatchNodes.get(2);  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  elseBlock  =  allCatchNodes.get(2);	  Node    elseBlock    =    allCatchNodes.get(1);    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
440	[BUG]  [BUGGY]  Node  finallyBlock  =  firstChild.removeFirstChild();  [CE]  cannot  find  symbol  firstChild  [FE]        IllegalStateException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  firstChild.removeFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  firstChild.removeFirstChild();	  Node    finallyBlock    =    n.removeFirstChild();    Node    finallyBlock    =    no.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol  firstChild	155	None	replace
441	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isExitType(n),  exitType);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(NodeUtil.isExitType(n),  exitType);  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(NodeUtil.isExitType(n),  exitType);	  Preconditions.checkState(NodeUtil.isExitType(n));    	non-compiled	[CE]  cannot  find  symbol	124	None	replace
442	[BUG]  [BUGGY]  Preconditions.checkState(n.isExitType(NodeUtil.isExitType(n));  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.isExitType(NodeUtil.isExitType(n));  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.isExitType(NodeUtil.isExitType(n));	  Preconditions.checkState(NodeUtil.isExitType(n));    	non-compiled	[CE]  ')'  expected	124	None	replace
443	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isExitType(n),  n.getFirstChild());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(NodeUtil.isExitType(n),  n.getFirstChild());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(NodeUtil.isExitType(n),  n.getFirstChild());	  Preconditions.checkState(NodeUtil.isExitType(n));    	non-compiled	[CE]  cannot  find  symbol	124	None	replace
444	[BUG]  [BUGGY]  Node  lastChild  =  node.getLastChild();  [CE]  cannot  find  symbol  node  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  lastChild  =  node.getLastChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  lastChild  =  node.getLastChild();	  Node    lastChild    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  node	158	None	replace
445	[BUG]  [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkState(NodeUtil.hasFinally(n));  Preconditions.checkLabel();  Preconditions.checkState(NodeUtil.hasFinally(n));  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkState(NodeUtil.hasFinally(n));  Preconditions.checkLabel();  Preconditions.checkState(NodeUtil.hasFinally(n));  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	                Preconditions.checkState(n.isLabel());        Preconditions.checkState(NodeUtil.hasFinally(n));    Preconditions.checkLabel();  Preconditions.checkState(NodeUtil.hasFinally(n));	  	non-compiled	[CE]  cannot  find  symbol	65	None	add
446	[BUG]  [BUGGY]  Preconditions.checkState(falseBlock  ==  null);  Node  labelBlock  =  n.getFirstChild();  [CE]  cannot  find  symbol  falseBlock  [FE]        AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(falseBlock  ==  null);  Node  labelBlock  =  n.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(falseBlock  ==  null);  Node  labelBlock  =  n.getFirstChild();	          Node    labelBlock    =    n.getFirstChild();    Preconditions.checkState(n.isLabel());    Node    labelBlock    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  falseBlock	102	None	replace
447	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild()!=  null);  Preconditions.checkState(n.getLastChild()  ==  n);  [CE]  cannot  find  symbol  finallyBlock  [FE]          AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.getFirstChild()!=  null);  Preconditions.checkState(n.getLastChild()  ==  n);  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.getFirstChild()!=  null);  Preconditions.checkState(n.getLastChild()  ==  n);	          Node    labelBlock    =    n.getFirstChild();    Node    labelBlock    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	88	None	replace
448	[BUG]  [BUGGY]  Node  catchNode  =  n.getLastChild();  [CE]  cannot  find  symbol  finallyBlock  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  catchNode  =  n.getLastChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  catchNode  =  n.getLastChild();	  Node    finallyBlock    =    catchNode.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	36	None	replace
449	[BUG]  [BUGGY]  Node  labelBlock  =  n.getFirstChild().getParent();  [CE]  cannot  find  symbol  finallyBlock  [FE]          AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  labelBlock  =  n.getFirstChild().getParent();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  labelBlock  =  n.getFirstChild().getParent();	  Node    labelBlock    =    n.getFirstChild().getNext();    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	149	None	replace
450	[BUG]  [BUGGY]  Node  labelBlock  =  n.getFirstChild().getLastChild();  [CE]  cannot  find  symbol  finallyBlock  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  labelBlock  =  n.getFirstChild().getLastChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  labelBlock  =  n.getFirstChild().getLastChild();	  Node    labelBlock    =    n.getFirstChild().getNext();    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	149	None	replace
451	[BUG]  [BUGGY]  Node  labelBlock  =  node.getFirstChild().getNext();  [CE]  cannot  find  symbol  node  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  labelBlock  =  node.getFirstChild().getNext();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  labelBlock  =  node.getFirstChild().getNext();	  Node    labelBlock    =    n.getFirstChild().getNext();    	non-compiled	[CE]  cannot  find  symbol  node	149	None	replace
452	[BUG]  [BUGGY]  Preconditions.checkState(n.hasOneChild());  Node  c  =  getCatchNodes().getFirstChild();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.hasOneChild());  Node  c  =  getCatchNodes().getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.hasOneChild());  Node  c  =  getCatchNodes().getFirstChild();	          Node    c    =    allCatchNodes.getFirstChild();    Node    c    =    getCatchNodes().getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	167	None	replace
453	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  Node  c  =  allCatchNodes.getFirstChild();  [CE]  cannot  find  symbol  finallyBlock  [FE]          AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  Node  c  =  allCatchNodes.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.getType()  ==  Token.BLOCK);  Node  c  =  allCatchNodes.getFirstChild();	          Node    c    =    allCatchNodes.getFirstChild();    Node    c    =    getCatchNodes().getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	167	None	replace
454	[BUG]  [BUGGY]  Node  c  =  node.getLastChild();  [CE]  cannot  find  symbol  node  [FE]          AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  c  =  node.getLastChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  c  =  node.getLastChild();	  Node    c    =    allCatchNodes.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  node	40	None	replace
455	[BUG]  [BUGGY]  Node  elseBlock  =  n.getFirstChild();  Node  elseBlock  =  allCatchNodes.getLastChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  elseBlock  =  n.getFirstChild();  Node  elseBlock  =  allCatchNodes.getLastChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  elseBlock  =  n.getFirstChild();  Node  elseBlock  =  allCatchNodes.getLastChild();	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    elseBlock    =    allCatchNodes.getLastChild();    	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	96	None	replace
456	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  labelBlock  =  n.getFirstChild();  [CE]  cannot  find  symbol  finallyBlock  [FE]        AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  labelBlock  =  n.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  labelBlock  =  n.getFirstChild();	          Node    labelBlock    =    n.getFirstChild();    Node    labelBlock    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	87	None	replace
457	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  elseBlock  =  AllCatchNodes.getFirstChild();  [CE]  cannot  find  symbol  AllCatchNodes  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  elseBlock  =  AllCatchNodes.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(allCatchNodes.hasOneChild());  Node  elseBlock  =  AllCatchNodes.getFirstChild();	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    elseBlock    =    AllCatchNodes.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  AllCatchNodes	98	None	replace
458	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  elseBlock  =  allCatchNodes.getFirstChild();  [CE]  cannot  find  symbol  finallyBlock  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  elseBlock  =  allCatchNodes.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(allCatchNodes.hasOneChild());  Node  elseBlock  =  allCatchNodes.getFirstChild();	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    elseBlock    =    AllCatchNodes.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	98	None	replace
459	[BUG]  [BUGGY]  Node  finallyBlock  =  n.getFirstChild();  Node  finallyBlock  =  n.removeFirstChild();  System.arraycopy(labelName,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName);  [CE]  ')'  expected  [FE]        IllegalStateException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  n.getFirstChild();  Node  finallyBlock  =  n.removeFirstChild();  System.arraycopy(labelName,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName);  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  n.getFirstChild();  Node  finallyBlock  =  n.removeFirstChild();  System.arraycopy(labelName,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName);	  Node    finallyBlock    =    n.removeFirstChild();    Node    finallyBlock    =    n.removeFirstChild();    System.arraycopy(labelName,    0,    tryMinimizeExits(finallyBlock,    exitType,    labelName);    	non-compiled	[CE]  ')'  expected	127	None	replace
460	[BUG]  [BUGGY]  Node  finallyBlock  =  n.removeFirstChild();  System.arraycopy(labelName,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName);  [CE]  ')'  expected  [FE]          IllegalStateException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  n.removeFirstChild();  System.arraycopy(labelName,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName);  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  n.removeFirstChild();  System.arraycopy(labelName,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName);	  Node    finallyBlock    =    n.removeFirstChild();    Node    finallyBlock    =    n.removeFirstChild();    System.arraycopy(labelName,    0,    tryMinimizeExits(finallyBlock,    exitType,    labelName);    	non-compiled	[CE]  ')'  expected	127	None	replace
461	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  null);  Node  elseBlock  =  n.getLastChild();  [CE]  cannot  find  symbol  finallyBlock  [FE]          AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  null);  Node  elseBlock  =  n.getLastChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.getFirstChild()  ==  null);  Node  elseBlock  =  n.getLastChild();	          Node    elseBlock    =    n.getFirstChild();    Node    elseBlock    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	77	None	replace
462	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild()!=  null);  Node  elseBlock  =  n.getLastChild();  [CE]  cannot  find  symbol  finallyBlock  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.getFirstChild()!=  null);  Node  elseBlock  =  n.getLastChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.getFirstChild()!=  null);  Node  elseBlock  =  n.getLastChild();	          Node    elseBlock    =    n.getFirstChild();    Node    elseBlock    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	77	None	replace
463	[BUG]  [BUGGY]  Node  n  =  nodes.removeFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  n  =  nodes.removeFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  n  =  nodes.removeFirstChild();	  Node    n    =    allCatchNodes.removeFirstChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	161	None	replace
464	[BUG]  [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkState(n.isLabel());  Node  n  =  allCatchNodes.getFirstChild();  Preconditions.checkState(n.isLabel());  Preconditions.checkState(n.isLabel());  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkState(n.isLabel());  Node  n  =  allCatchNodes.getFirstChild();  Preconditions.checkState(n.isLabel());  Preconditions.checkState(n.isLabel());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	                Preconditions.checkState(n.isLabel());        Preconditions.checkState(n.isLabel());    Node  n  =  allCatchNodes.getFirstChild();  Preconditions.checkState(n.isLabel());  Preconditions.checkState(n.isLabel());	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	61	None	add
465	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkState(n.isLabel());  Preconditions.checkNotNull(n);  Preconditions.checkState(n.isLabel());  Preconditions.checkState(n.isLabel());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	add	                Preconditions.checkState(n.isLabel());        Preconditions.checkState(n.isLabel());    Preconditions.checkNotNull(n);  Preconditions.checkState(n.isLabel());  Preconditions.checkState(n.isLabel());	  	compilable	  [FE]  RuntimeException  	61	2	add
466	[BUG]  [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkState(n.isLabel());  Preconditions.checkNotNull(n);  Preconditions.checkState(n.isLabel());  Preconditions.checkState(n.isLabel());  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkState(n.isLabel());  Preconditions.checkNotNull(n);  Preconditions.checkState(n.isLabel());  Preconditions.checkState(n.isLabel());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	                Preconditions.checkState(n.isLabel());        Preconditions.checkState(n.isLabel());    Preconditions.checkNotNull(n);  Preconditions.checkState(n.isLabel());  Preconditions.checkState(n.isLabel());	  	compilable	  [FE]  RuntimeException  	61	2	add
467	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.hasFinally(n),  falseBlock);  [CE]  cannot  find  symbol  falseBlock  [FE]        AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(NodeUtil.hasFinally(n),  falseBlock);  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(NodeUtil.hasFinally(n),  falseBlock);	          Preconditions.checkState(NodeUtil.hasFinally(n));    preconditions.checkState(NodeUtil.hasFinally(n));    	non-compiled	[CE]  cannot  find  symbol  falseBlock	107	None	replace
468	[BUG]  [BUGGY]  Preconditions.checkState(n.hasFinally(n));  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.hasFinally(n));  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.hasFinally(n));	          Preconditions.checkState(NodeUtil.hasFinally(n));    preconditions.checkState(NodeUtil.hasFinally(n));    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
469	[BUG]  [BUGGY]  Preconditions.checkState(n.isTree()  ||  n.isLabel());  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.isTree()  ||  n.isLabel());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.isTree()  ||  n.isLabel());	  Preconditions.checkState(n.isTree());    	non-compiled	[CE]  cannot  find  symbol	163	None	replace
470	[BUG]  [BUGGY]  Node  finallyBlock  =  n.removeFirstChild();  System.arraycopy(labelName,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName));  [CE]  'void'  type  not  allowed  here  [FE]          IllegalStateException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  n.removeFirstChild();  System.arraycopy(labelName,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName));  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  n.removeFirstChild();  System.arraycopy(labelName,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName));	  Node    finallyBlock    =    n.removeFirstChild();    Node    finallyBlock    =    n.removeFirstChild();    System.arraycopy(labelName,    0,    tryMinimizeExits(finallyBlock,    exitType,    labelName));    	non-compiled	[CE]  'void'  type  not  allowed  here	128	None	replace
471	[BUG]  [BUGGY]  Node  finallyBlock  =  n.removeFirstChild();  System.arraycopy(labelName,  0,  tryMinimizeExits(falseBlock,  exitType,  labelName));  [CE]  cannot  find  symbol  falseBlock  [FE]            IllegalStateException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  n.removeFirstChild();  System.arraycopy(labelName,  0,  tryMinimizeExits(falseBlock,  exitType,  labelName));  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  n.removeFirstChild();  System.arraycopy(labelName,  0,  tryMinimizeExits(falseBlock,  exitType,  labelName));	  Node    finallyBlock    =    n.removeFirstChild();    Node    finallyBlock    =    n.removeFirstChild();    System.arraycopy(labelName,    0,    tryMinimizeExits(finallyBlock,    exitType,    labelName));    	non-compiled	[CE]  cannot  find  symbol  falseBlock	128	None	replace
472	[BUG]  [BUGGY]  Node  finallyBlock  =  n.removeFirstChild();  System.arraycopy(labelName,  0,  tryMinimizeExits(lastBlock,  exitType,  labelName));  [CE]  cannot  find  symbol  lastBlock  [FE]              IllegalStateException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  n.removeFirstChild();  System.arraycopy(labelName,  0,  tryMinimizeExits(lastBlock,  exitType,  labelName));  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  n.removeFirstChild();  System.arraycopy(labelName,  0,  tryMinimizeExits(lastBlock,  exitType,  labelName));	  Node    finallyBlock    =    n.removeFirstChild();    Node    finallyBlock    =    n.removeFirstChild();    System.arraycopy(labelName,    0,    tryMinimizeExits(finallyBlock,    exitType,    labelName));    	non-compiled	[CE]  cannot  find  symbol  lastBlock	128	None	replace
473	[BUG]  [BUGGY]  Node  elseBlock  =  node.get(1);  [CE]  cannot  find  symbol  node  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  elseBlock  =  node.get(1);  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  elseBlock  =  node.get(1);	  Node    elseBlock    =    n.get(1);    	non-compiled	[CE]  cannot  find  symbol  node	132	None	replace
474	[BUG]  [BUGGY]  Node  elseBlock  =  n,  catchNode.get(1);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  elseBlock  =  n,  catchNode.get(1);  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  elseBlock  =  n,  catchNode.get(1);	  Node    elseBlock    =    n.get(1);    	non-compiled	[CE]  ';'  expected	132	None	replace
475	[BUG]  [BUGGY]  Node  node  =  allCatchNodes.getFirstChild();  [CE]  cannot  find  symbol  finallyBlock  [FE]        AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  node  =  allCatchNodes.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  node  =  allCatchNodes.getFirstChild();	  Node    c    =    node.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	166	None	replace
476	[BUG]  [BUGGY]  Node  finallyBlock  =  n.cloneTree();  Node  finallyBlock  =  n.cloneTree();  System.arraycopy(labelName,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName);  [CE]  ')'  expected  [FE]    StackOverflowError    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  n.cloneTree();  Node  finallyBlock  =  n.cloneTree();  System.arraycopy(labelName,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName);  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node    finallyBlock    =    n.cloneTree();    Node  finallyBlock  =  n.cloneTree();  System.arraycopy(labelName,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName);	  	non-compiled	[CE]  ')'  expected	138	None	add
477	[BUG]  [BUGGY]  Node  finallyBlock  =  n.cloneTree();  Node  finallyBlock  =  n.cloneTree();  System.arraycopy(labelName,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName));  [CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      StackOverflowError    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  n.cloneTree();  Node  finallyBlock  =  n.cloneTree();  System.arraycopy(labelName,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName));  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node    finallyBlock    =    n.cloneTree();    Node  finallyBlock  =  n.cloneTree();  System.arraycopy(labelName,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName));	  	non-compiled	[CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	138	None	add
478	[BUG]  [BUGGY]  Node  elseBlock  =  n.getParent();  [CE]  cannot  find  symbol  finallyBlock  [FE]        AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  elseBlock  =  n.getParent();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  elseBlock  =  n.getParent();	  Node    elseBlock    =    n.getNext();    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	100	None	replace
479	[BUG]  [BUGGY]  Node  n  =  node.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  n  =  node.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  n  =  node.getFirstChild();	  Node    n    =    n.getFirstChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	169	None	replace
480	[BUG]  [BUGGY]  Node  finallyBlock  =  n.get(1);  [CE]  cannot  find  symbol  [FE]        RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  n.get(1);  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  n.get(1);	  Node    finallyBlock    =    allCatchNodes.get(0);    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
481	[BUG]  [BUGGY]  Node  lastBlock  =  n.getLastChild();  [CE]  cannot  find  symbol  finallyBlock  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  lastBlock  =  n.getLastChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  lastBlock  =  n.getLastChild();	  Node    finalBlock    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	112	None	replace
482	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.getFirstChild());  Node  n  =  allCatchNodes.getFirstChild();  Preconditions.checkState(n.isLabel());  [CE]  no  suitable  method  found  for  checkState(Node)  [FE]          RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(allCatchNodes.getFirstChild());  Node  n  =  allCatchNodes.getFirstChild();  Preconditions.checkState(n.isLabel());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(allCatchNodes.getFirstChild());  Node  n  =  allCatchNodes.getFirstChild();  Preconditions.checkState(n.isLabel());	          Preconditions.checkState(n.isLabel());    Node    n    =    allCatchNodes.getFirstChild();    Preconditions.checkState(n.isLabel());    	non-compiled	[CE]  no  suitable  method  found  for  checkState(Node)	63	None	replace
483	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          IllegalStateException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(NodeUtil.hasFinally(n));  Node  finallyBlock  =  n.removeFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	add	Preconditions.checkState(NodeUtil.hasFinally(n));  Node  finallyBlock  =  n.removeFirstChild();	  Node    finallyBlock    =    n.removeFirstChild();    Node    finallyBlock    =    n.removeFirstChild();    }    tryMinimizeExits(finallyBlock,    exitType,    labelName);    	compilable	  [FE]  IllegalStateException  	20	2	replace
484	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.hasFinally(n));  Node  finallyBlock  =  n.removeFirstChild();  [FE]  IllegalStateException  [FE]          IllegalStateException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(NodeUtil.hasFinally(n));  Node  finallyBlock  =  n.removeFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(NodeUtil.hasFinally(n));  Node  finallyBlock  =  n.removeFirstChild();	  Node    finallyBlock    =    n.removeFirstChild();    Node    finallyBlock    =    n.removeFirstChild();    }    tryMinimizeExits(finallyBlock,    exitType,    labelName);    	compilable	  [FE]  IllegalStateException  	20	2	replace
485	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            IllegalStateException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.hasOneChild());  Node  finallyBlock  =  n.removeFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	add	Preconditions.checkState(n.hasOneChild());  Node  finallyBlock  =  n.removeFirstChild();	  Node    finallyBlock    =    n.removeFirstChild();    Node    finallyBlock    =    n.removeFirstChild();    }    tryMinimizeExits(finallyBlock,    exitType,    labelName);    	compilable	  [FE]  RuntimeException  	20	2	replace
486	[BUG]  [BUGGY]  Preconditions.checkState(n.hasOneChild());  Node  finallyBlock  =  n.removeFirstChild();  [FE]  RuntimeException  [FE]            IllegalStateException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.hasOneChild());  Node  finallyBlock  =  n.removeFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.hasOneChild());  Node  finallyBlock  =  n.removeFirstChild();	  Node    finallyBlock    =    n.removeFirstChild();    Node    finallyBlock    =    n.removeFirstChild();    }    tryMinimizeExits(finallyBlock,    exitType,    labelName);    	compilable	  [FE]  RuntimeException  	20	2	replace
487	[BUG]  [BUGGY]  Node  lastChild  =  node.getFirstChild();  [CE]  cannot  find  symbol  node  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  lastChild  =  node.getFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  lastChild  =  node.getFirstChild();	  Node    lastChild    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  node	172	None	replace
488	[BUG]  [BUGGY]  Node  nextBlock  =  allCatchNodes.getLastChild();  [CE]  cannot  find  symbol  finallyBlock  [FE]        AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  nextBlock  =  allCatchNodes.getLastChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  nextBlock  =  allCatchNodes.getLastChild();	  Node    elseBlock    =    allCatchNodes.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	16	None	replace
489	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  null);  int  n  =  n.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]              RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  null);  int  n  =  n.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.getFirstChild()  ==  null);  int  n  =  n.getFirstChild();	          n    =    n.getFirstChild();    int    n    =    n.getFirstChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	54	None	replace
490	[BUG]  [BUGGY]  int  n  =  allCatchNodes.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  int  n  =  allCatchNodes.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	int  n  =  allCatchNodes.getFirstChild();	          n    =    n.getFirstChild();    int    n    =    n.getFirstChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	54	None	replace
491	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  null);  n  =  n.getFirstChild();  [CE]  cannot  find  symbol  finallyBlock  [FE]    RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  null);  n  =  n.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.getFirstChild()  ==  null);  n  =  n.getFirstChild();	          n    =    n.getFirstChild();    n    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	50	None	replace
492	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild()!=  null);  n  =  n.getFirstChild();  [CE]  cannot  find  symbol  finallyBlock  [FE]      RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.getFirstChild()!=  null);  n  =  n.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.getFirstChild()!=  null);  n  =  n.getFirstChild();	          n    =    n.getFirstChild();    n    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	50	None	replace
493	[BUG]  [BUGGY]  Node  finallyBlock  =  firstCatchNodes.getFirstChild();  [CE]  cannot  find  symbol  firstCatchNodes  [FE]        RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  firstCatchNodes.getFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  firstCatchNodes.getFirstChild();	  Node    finallyBlock    =    nodes.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  firstCatchNodes	7	None	replace
494	[BUG]  [BUGGY]  Node  finallyBlock  =  allNodes.getFirstChild();  [CE]  cannot  find  symbol  allNodes  [FE]          RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  allNodes.getFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  allNodes.getFirstChild();	  Node    finallyBlock    =    nodes.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  allNodes	7	None	replace
495	[BUG]  [BUGGY]  Node  finallyBlock  =  getFinallyBlock(n.getLastChild(),  exitType);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  getFinallyBlock(n.getLastChild(),  exitType);  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  getFinallyBlock(n.getLastChild(),  exitType);	  Node    finallyBlock    =    getFinallyBlock(n.getLastChild());    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
496	[BUG]  [BUGGY]  Node  n  =  nodes.getLastChild();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  n  =  nodes.getLastChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  n  =  nodes.getLastChild();	  Node    n    =    allCatchNodes.getLastChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	57	None	replace
497	[BUG]  [BUGGY]  Node  finallyBlock  =  n.replaceFirst(n,  falseBlock);  [CE]  cannot  find  symbol  falseBlock  [FE]        IllegalStateException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  n.replaceFirst(n,  falseBlock);  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  n.replaceFirst(n,  falseBlock);	  Node    finallyBlock    =    n.removeFirstChild();    Node    finallyBlock    =    n.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol  falseBlock	19	None	replace
498	[BUG]  [BUGGY]          Preconditions.checkState(n.isLabel());    Node  labelBlock  =  n.getFirstChild();  Preconditions.checkState(n.isLabel());  Preconditions.checkState(NodeUtil.hasFinally(n));  Node  labelBlock  =  n.getFirstChild();  Preconditions.checkState(n.isLabel());  [CE]  variable  labelBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Preconditions.checkState(n.isLabel());    Node  labelBlock  =  n.getFirstChild();  Preconditions.checkState(n.isLabel());  Preconditions.checkState(NodeUtil.hasFinally(n));  Node  labelBlock  =  n.getFirstChild();  Preconditions.checkState(n.isLabel());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	                Preconditions.checkState(n.isLabel());        Node    labelBlock    =    n.getFirstChild();    Preconditions.checkState(n.isLabel());    Preconditions.checkState(NodeUtil.hasFinally(n));  Node  labelBlock  =  n.getFirstChild();  Preconditions.checkState(n.isLabel());	  	non-compiled	[CE]  variable  labelBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	109	None	add
499	[BUG]  [BUGGY]          Preconditions.checkState(n.isLabel());    Node  labelBlock  =  n.getFirstChild();  Preconditions.checkState(n.isLabel());  Preconditions.checkState(n.isLabel());  Node  labelBlock  =  n.getFirstChild();  [CE]  variable  labelBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Preconditions.checkState(n.isLabel());    Node  labelBlock  =  n.getFirstChild();  Preconditions.checkState(n.isLabel());  Preconditions.checkState(n.isLabel());  Node  labelBlock  =  n.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	                Preconditions.checkState(n.isLabel());        Node    labelBlock    =    n.getFirstChild();    Preconditions.checkState(n.isLabel());    Preconditions.checkState(n.isLabel());  Node  labelBlock  =  n.getFirstChild();	  	non-compiled	[CE]  variable  labelBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	109	None	add
500	[BUG]  [BUGGY]  Preconditions.checkState(n.isFinally()  ||  NodeUtil.hasFinally(n));  [CE]  cannot  find  symbol  [FE]        RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.isFinally()  ||  NodeUtil.hasFinally(n));  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.isFinally()  ||  NodeUtil.hasFinally(n));	  Preconditions.checkState(n.isFinally());    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
501	[BUG]  [BUGGY]  Preconditions.checkState(n.isFinally()  &&  NodeUtil.hasFinally(n));  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.isFinally()  &&  NodeUtil.hasFinally(n));  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.isFinally()  &&  NodeUtil.hasFinally(n));	  Preconditions.checkState(n.isFinally());    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
502	[BUG]  [BUGGY]  Preconditions.checkState(n.isFinally()  ||  n.isLabel());  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.isFinally()  ||  n.isLabel());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.isFinally()  ||  n.isLabel());	  Preconditions.checkState(n.isFinally());    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
503	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION,  exitType);  [CE]  cannot  find  symbol  finallyBlock  [FE]          RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION,  exitType);  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION,  exitType);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	13	None	replace
504	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  NodeUtil.hasFinally(n));  [CE]  cannot  find  symbol  finallyBlock  [FE]            RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  NodeUtil.hasFinally(n));  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  NodeUtil.hasFinally(n));	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	13	None	replace
505	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.hasFinally(n));  [CE]  cannot  find  symbol  finallyBlock  [FE]              RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.hasFinally(n));  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.hasFinally(n));	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	13	None	replace
506	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isLabelVar(n));  AssertionFailedError.checkState(NodeUtil.hasFinally(n));  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(NodeUtil.isLabelVar(n));  AssertionFailedError.checkState(NodeUtil.hasFinally(n));  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(NodeUtil.isLabelVar(n));  AssertionFailedError.checkState(NodeUtil.hasFinally(n));	          Preconditions.checkState(NodeUtil.hasFinally(n));    AssertionFailedError.checkState(NodeUtil.hasFinally(n));    	non-compiled	[CE]  cannot  find  symbol	154	None	replace
507	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.get(n  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  elseBlock  =  allCatchNodes.get(n  +  1);  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  elseBlock  =  allCatchNodes.get(n  +  1);	  Node    elseBlock    =    allCatchNodes.get(n);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	94	None	replace
508	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.get(n  -  1);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  elseBlock  =  allCatchNodes.get(n  -  1);  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  elseBlock  =  allCatchNodes.get(n  -  1);	  Node    elseBlock    =    allCatchNodes.get(n);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	94	None	replace
509	[BUG]  [BUGGY]  Preconditions.checkState(n.isFunction()  ||  NodeUtil.hasFinally(n));  [CE]  cannot  find  symbol  finallyBlock  [FE]        RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.isFunction()  ||  NodeUtil.hasFinally(n));  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.isFunction()  ||  NodeUtil.hasFinally(n));	  Preconditions.checkState(n.isFunction());    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	162	None	replace
510	[BUG]  [BUGGY]  Preconditions.checkNotNull(n);  [CE]  cannot  find  symbol  finallyBlock  [FE]    RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkNotNull(n);  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkNotNull(n);	          Preconditions.checkState(n.isLabel());    Preconditions.checkNotNull(n.isLabel());    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	134	None	replace
511	[BUG]  [BUGGY]  Preconditions.checkNotNull(false);  [CE]  cannot  find  symbol  finallyBlock  [FE]      RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkNotNull(false);  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkNotNull(false);	          Preconditions.checkState(n.isLabel());    Preconditions.checkNotNull(n.isLabel());    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	134	None	replace
512	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  escapeType);  [CE]  cannot  find  symbol  escapeType  [FE]              RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  escapeType);  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  escapeType);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  escapeType	15	None	replace
513	[BUG]  [BUGGY]  Node  finallyBlock  =  n.getFirstChild();  Node  finallyBlock  =  n.removeFirstChild();  System.arraycopy(c,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName);  [CE]  ')'  expected  [FE]            IllegalStateException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  n.getFirstChild();  Node  finallyBlock  =  n.removeFirstChild();  System.arraycopy(c,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName);  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  n.getFirstChild();  Node  finallyBlock  =  n.removeFirstChild();  System.arraycopy(c,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName);	  Node    finallyBlock    =    n.removeFirstChild();    Node    finallyBlock    =    n.removeFirstChild();    System.arraycopy(c,    0,    tryMinimizeExits(finallyBlock,    exitType,    labelName);    	non-compiled	[CE]  ')'  expected	129	None	replace
514	[BUG]  [BUGGY]  Node  finallyBlock  =  n.removeFirstChild();  System.arraycopy(c,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName);  [CE]  ')'  expected  [FE]              IllegalStateException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  n.removeFirstChild();  System.arraycopy(c,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName);  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  n.removeFirstChild();  System.arraycopy(c,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName);	  Node    finallyBlock    =    n.removeFirstChild();    Node    finallyBlock    =    n.removeFirstChild();    System.arraycopy(c,    0,    tryMinimizeExits(finallyBlock,    exitType,    labelName);    	non-compiled	[CE]  ')'  expected	129	None	replace
515	[BUG]  [BUGGY]  Node  finallyBlock  =  allCatchNodes.getFirstChild();  Node  finallyBlock  =  n.removeFirstChild();  System.arraycopy(c,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName);  [CE]  ')'  expected  [FE]                IllegalStateException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  allCatchNodes.getFirstChild();  Node  finallyBlock  =  n.removeFirstChild();  System.arraycopy(c,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName);  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  allCatchNodes.getFirstChild();  Node  finallyBlock  =  n.removeFirstChild();  System.arraycopy(c,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName);	  Node    finallyBlock    =    n.removeFirstChild();    Node    finallyBlock    =    n.removeFirstChild();    System.arraycopy(c,    0,    tryMinimizeExits(finallyBlock,    exitType,    labelName);    	non-compiled	[CE]  ')'  expected	129	None	replace
516	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isExitBlock(n),  exitType);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(NodeUtil.isExitBlock(n),  exitType);  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(NodeUtil.isExitBlock(n),  exitType);	  Preconditions.checkState(NodeUtil.isExitBlock(n));    	non-compiled	[CE]  cannot  find  symbol	145	None	replace
517	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isExitBlock(n,  exitType));  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(NodeUtil.isExitBlock(n,  exitType));  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(NodeUtil.isExitBlock(n,  exitType));	  Preconditions.checkState(NodeUtil.isExitBlock(n));    	non-compiled	[CE]  cannot  find  symbol	145	None	replace
518	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isName(n)||  NodeUtil.hasFinally(n));  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(NodeUtil.isName(n)||  NodeUtil.hasFinally(n));  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(NodeUtil.isName(n)||  NodeUtil.hasFinally(n));	  Preconditions.checkState(NodeUtil.hasFinally(n)||    NodeUtil.hasFinally(n));    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
519	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  labelBlock  =  n.getFirstChild();  [CE]  cannot  find  symbol  finallyBlock  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  labelBlock  =  n.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  labelBlock  =  n.getFirstChild();	          Node    labelBlock    =    n.getFirstChild();    Node    labelBlock    =    n.getFirstChild();    Item    labelBlock    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	104	None	replace
520	[BUG]  [BUGGY]  Node  labelBlock  =  n.getfirstChild();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  labelBlock  =  n.getfirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  labelBlock  =  n.getfirstChild();	          Node    labelBlock    =    n.getFirstChild();    Node    labelBlock    =    n.getfirstChild();    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
521	[BUG]  [BUGGY]  Node  labelBlock  =  allCatchNodes.removeFirstChild();  [CE]  cannot  find  symbol  finallyBlock  [FE]        AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  labelBlock  =  allCatchNodes.removeFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  labelBlock  =  allCatchNodes.removeFirstChild();	  Node    labelBlock    =    n.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	148	None	replace
522	[BUG]  [BUGGY]  Node  finallyBlock  =  allCatchNodes.removeFirstChild();  Node  finallyBlock  =  ALLCatchNodes.removeFirstChild();  [CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  allCatchNodes.removeFirstChild();  Node  finallyBlock  =  ALLCatchNodes.removeFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node    finallyBlock    =    allCatchNodes.removeFirstChild();    Node  finallyBlock  =  ALLCatchNodes.removeFirstChild();	  	non-compiled	[CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	113	None	add
523	[BUG]  [BUGGY]  Node  finallyBlock  =  allCatchNodes.removeFirstChild();  Node  finallyBlock  =  c.removeFirstChild();  [CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  allCatchNodes.removeFirstChild();  Node  finallyBlock  =  c.removeFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node    finallyBlock    =    allCatchNodes.removeFirstChild();    Node  finallyBlock  =  c.removeFirstChild();	  	non-compiled	[CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	113	None	add
524	[BUG]  [BUGGY]  Preconditions.checkLabel(n.isLabel());  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkLabel(n.isLabel());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkLabel(n.isLabel());	          Preconditions.checkState(n.isLabel());    Preconditions.checkLabel(n.isLabel());    	non-compiled	[CE]  cannot  find  symbol	137	None	replace
525	[BUG]  [BUGGY]  Preconditions.checkState(falseBlock.isLabel());  Preconditions.checkLabel(n.isLabel());  [CE]  cannot  find  symbol  falseBlock  [FE]              RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(falseBlock.isLabel());  Preconditions.checkLabel(n.isLabel());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(falseBlock.isLabel());  Preconditions.checkLabel(n.isLabel());	          Preconditions.checkState(n.isLabel());    Preconditions.checkLabel(n.isLabel());    	non-compiled	[CE]  cannot  find  symbol  falseBlock	137	None	replace
526	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isLabelVar(n),  exitType);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(NodeUtil.isLabelVar(n),  exitType);  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(NodeUtil.isLabelVar(n),  exitType);	  Preconditions.checkState(NodeUtil.isLabelVar(n));    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
527	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isLabelVar(n,  exitType));  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(NodeUtil.isLabelVar(n,  exitType));  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(NodeUtil.isLabelVar(n,  exitType));	  Preconditions.checkState(NodeUtil.isLabelVar(n));    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
528	[BUG]  [BUGGY]  Label  labelBlock  =  n.getFirstChild();  System.arraycopy(labelName,  0,  labelBlock,  1,  n.getLastChild());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Label  labelBlock  =  n.getFirstChild();  System.arraycopy(labelName,  0,  labelBlock,  1,  n.getLastChild());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Label  labelBlock  =  n.getFirstChild();  System.arraycopy(labelName,  0,  labelBlock,  1,  n.getLastChild());	          Node    labelBlock    =    n.getFirstChild();    Node    labelBlock    =    n.getFirstChild();    System.arraycopy(labelName,    0,    labelBlock,    1,    n.getLastChild());    	non-compiled	[CE]  cannot  find  symbol	147	None	replace
529	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isExpressionNode(n),  exitType);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(NodeUtil.isExpressionNode(n),  exitType);  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(NodeUtil.isExpressionNode(n),  exitType);	  Preconditions.checkState(NodeUtil.isExpressionNode(n));    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
530	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isExpressionNode(n,  exitType));  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(NodeUtil.isExpressionNode(n,  exitType));  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(NodeUtil.isExpressionNode(n,  exitType));	  Preconditions.checkState(NodeUtil.isExpressionNode(n));    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
531	[BUG]  [BUGGY]  Node  finallyBlock  =  startCatchNodes.getFirstChild();  [CE]  cannot  find  symbol  startCatchNodes  [FE]          IllegalStateException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  startCatchNodes.getFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  startCatchNodes.getFirstChild();	  Node    finallyBlock    =    catchNode.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  startCatchNodes	9	None	replace
532	[BUG]  [BUGGY]  Node  lastBlock  =  n.getFirstChild();  [CE]  cannot  find  symbol  finallyBlock  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  lastBlock  =  n.getFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  lastBlock  =  n.getFirstChild();	  Node    finalBlock    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	170	None	replace
533	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isFinally(n),  n.getFirstChild());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(NodeUtil.isFinally(n),  n.getFirstChild());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(NodeUtil.isFinally(n),  n.getFirstChild());	  Preconditions.checkState(NodeUtil.isFinally(n));    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
534	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isFinally(n,  falseBlock));  [CE]  cannot  find  symbol  falseBlock  [FE]          AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(NodeUtil.isFinally(n,  falseBlock));  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(NodeUtil.isFinally(n,  falseBlock));	  Preconditions.checkState(NodeUtil.isFinally(n));    	non-compiled	[CE]  cannot  find  symbol  falseBlock	25	None	replace
535	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isFinally(n),  exitType);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(NodeUtil.isFinally(n),  exitType);  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(NodeUtil.isFinally(n),  exitType);	  Preconditions.checkState(NodeUtil.isFinally(n));    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
536	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isLabelFunction(n));  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(NodeUtil.isLabelFunction(n));  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(NodeUtil.isLabelFunction(n));	          Preconditions.checkState(NodeUtil.hasFinally(n));    Preconditions.checkState(NodeUtil.hasFinally(n));    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
537	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild(), "Finally ");  Node  finallyBlock  =  allCatchNodes.getFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	add	Preconditions.checkState(allCatchNodes.hasOneChild(), "Finally ");  Node  finallyBlock  =  allCatchNodes.getFirstChild();	  Node    finallyBlock    =    allCatchNodes.getFirstChild();    Node    finallyBlock    =    allCatchNodes.getFirstChild();    	compilable	  [FE]  RuntimeException  	1	2	replace
538	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild(), "Finally ");  Node  finallyBlock  =  allCatchNodes.getFirstChild();  [FE]  RuntimeException  [FE]        RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild(), "Finally ");  Node  finallyBlock  =  allCatchNodes.getFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(allCatchNodes.hasOneChild(), "Finally ");  Node  finallyBlock  =  allCatchNodes.getFirstChild();	  Node    finallyBlock    =    allCatchNodes.getFirstChild();    Node    finallyBlock    =    allCatchNodes.getFirstChild();    	compilable	  [FE]  RuntimeException  	1	2	replace
539	[BUG]  [BUGGY]  Node  finallyBlock  =  getFinallyBlock(n.getFirstChild(),  exitType);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  getFinallyBlock(n.getFirstChild(),  exitType);  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  getFinallyBlock(n.getFirstChild(),  exitType);	  Node    finallyBlock    =    getFinallyBlock(n.getFirstChild());    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
540	[BUG]  [BUGGY]  Preconditions.checkState(n.hasChildren());  n  =  n.getLastChild();  [CE]  cannot  find  symbol  finallyBlock  [FE]    AssertionFailedError    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.hasChildren());  n  =  n.getLastChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.hasChildren());  n  =  n.getLastChild();	          Preconditions.checkState(NodeUtil.hasFinally(n));    Preconditions.checkState(NodeUtil.hasFinally(n));    n    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	75	None	replace
541	[BUG]  [BUGGY]  Node  labelBlock  =  n.getFirstChild();  Preconditions.checkState(labelBlock.isLabel());  [CE]  cannot  find  symbol  finallyBlock  [FE]    RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  labelBlock  =  n.getFirstChild();  Preconditions.checkState(labelBlock.isLabel());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  labelBlock  =  n.getFirstChild();  Preconditions.checkState(labelBlock.isLabel());	          Preconditions.checkState(n.isLabel());    Node    labelBlock    =    n.getFirstChild();    Preconditions.checkState(n.isLabel());    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	110	None	replace
542	[BUG]  [BUGGY]  Preconditions.checkState(falseBlock  ==  null);  [CE]  cannot  find  symbol  falseBlock  [FE]      RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(falseBlock  ==  null);  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(falseBlock  ==  null);	          Preconditions.checkState(n.isLabel());    Node    labelBlock    =    n.getFirstChild();    Preconditions.checkState(n.isLabel());    	non-compiled	[CE]  cannot  find  symbol  falseBlock	110	None	replace
543	[BUG]  [BUGGY]  Node  elseBlock  =  node.removeFirstChild();  [CE]  cannot  find  symbol  node  [FE]        AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  elseBlock  =  node.removeFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  elseBlock  =  node.removeFirstChild();	  Node    elseBlock    =    n.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol  node	144	None	replace
544	[BUG]  [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkNotNull(n.isLabel());  Preconditions.checkEquals(n.isLabel());  Preconditions.checkNotNull(n.isLabel());  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkNotNull(n.isLabel());  Preconditions.checkEquals(n.isLabel());  Preconditions.checkNotNull(n.isLabel());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	                Preconditions.checkState(n.isLabel());        Preconditions.checkNotNull(n.isLabel());    Preconditions.checkEquals(n.isLabel());  Preconditions.checkNotNull(n.isLabel());	  	non-compiled	[CE]  cannot  find  symbol	133	None	add
545	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  n);  [CE]  cannot  find  symbol  finallyBlock  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  n);  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.getFirstChild()  ==  n);	          Preconditions.checkState(NodeUtil.hasFinally(n));    Preconditions.checkState(NodeUtil.hasFinally(n));    }    else    {    Node    finallyBlock    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	73	None	replace
546	[BUG]  [BUGGY]  Preconditions.checkState(n.hasOneChild());  Node  n  =  allCatchNodes.getFirstChild();  tryMinimizeExits(n.isLabel());  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.hasOneChild());  Node  n  =  allCatchNodes.getFirstChild();  tryMinimizeExits(n.isLabel());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.hasOneChild());  Node  n  =  allCatchNodes.getFirstChild();  tryMinimizeExits(n.isLabel());	          Preconditions.checkState(n.isLabel());    Node    n    =    allCatchNodes.getFirstChild();    tryMinimizeExits(n.isLabel());    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	111	None	replace
547	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.hasFirstChild());  Node  n  =  allCatchNodes.getFirstChild();  preconditions.checkState(n.isLabel());  [CE]  cannot  find  symbol  [FE]                RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(allCatchNodes.hasFirstChild());  Node  n  =  allCatchNodes.getFirstChild();  preconditions.checkState(n.isLabel());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(allCatchNodes.hasFirstChild());  Node  n  =  allCatchNodes.getFirstChild();  preconditions.checkState(n.isLabel());	          Preconditions.checkState(n.isLabel());    Node    n    =    allCatchNodes.getFirstChild();    preconditions.checkState(n.isLabel());    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
548	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.getFirstChild());  Node  n  =  allCatchNodes.getFirstChild();  preconditions.checkState(n.isLabel());  [CE]  no  suitable  method  found  for  checkState(Node)  [FE]                  RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(allCatchNodes.getFirstChild());  Node  n  =  allCatchNodes.getFirstChild();  preconditions.checkState(n.isLabel());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(allCatchNodes.getFirstChild());  Node  n  =  allCatchNodes.getFirstChild();  preconditions.checkState(n.isLabel());	          Preconditions.checkState(n.isLabel());    Node    n    =    allCatchNodes.getFirstChild();    preconditions.checkState(n.isLabel());    	non-compiled	[CE]  no  suitable  method  found  for  checkState(Node)	67	None	replace
549	[BUG]  [BUGGY]  Node  finallyBlock  =  getFinallyBlock(allCatchNodes.getLastChild());  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  getFinallyBlock(allCatchNodes.getLastChild());  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  getFinallyBlock(allCatchNodes.getLastChild());	  Node    finallyBlock    =    allCatchNodes.getLastChild();    Node    finallyBlock    =    getFinallyBlock(n);    	non-compiled	[CE]  cannot  find  symbol	151	None	replace
550	[BUG]  [BUGGY]          n    =    n.getFirstChild();    n  =  n.getLastChild();  n  =  n.getFirstChild();  n  =  n.getLastChild()  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          n    =    n.getFirstChild();    n  =  n.getLastChild();  n  =  n.getFirstChild();  n  =  n.getLastChild()  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	                n        =        n.getFirstChild();        n    =    n.getLastChild();    n  =  n.getFirstChild();  n  =  n.getLastChild()	  	non-compiled	[CE]  ';'  expected	51	None	add
551	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.hasFinally(n));  AssertionFailedError.checkState(NodeUtil.isFinally(n));  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(NodeUtil.hasFinally(n));  AssertionFailedError.checkState(NodeUtil.isFinally(n));  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(NodeUtil.hasFinally(n));  AssertionFailedError.checkState(NodeUtil.isFinally(n));	          Preconditions.checkState(NodeUtil.hasFinally(n));    AssertionFailedError.checkState(NodeUtil.hasFinally(n));    	non-compiled	[CE]  cannot  find  symbol	154	None	replace
552	[BUG]  [BUGGY]  Node  finallyBlock  =  n.getFirstChild();  System.arraycopy(labelName,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName));  [CE]  'void'  type  not  allowed  here  [FE]          IllegalStateException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  n.getFirstChild();  System.arraycopy(labelName,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName));  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  n.getFirstChild();  System.arraycopy(labelName,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName));	  Node    finallyBlock    =    n.removeFirstChild();    Node    finallyBlock    =    n.removeFirstChild();    System.arraycopy(labelName,    0,    tryMinimizeExits(finallyBlock,    exitType,    labelName));    	non-compiled	[CE]  'void'  type  not  allowed  here	128	None	replace
553	[BUG]  [BUGGY]  Node  labelName  =  n.removeFirstChild();  System.arraycopy(labelName,  0,  tryMinimizeExits(labelName,  exitType,  labelName));  [CE]  variable  labelName  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]            IllegalStateException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  labelName  =  n.removeFirstChild();  System.arraycopy(labelName,  0,  tryMinimizeExits(labelName,  exitType,  labelName));  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  labelName  =  n.removeFirstChild();  System.arraycopy(labelName,  0,  tryMinimizeExits(labelName,  exitType,  labelName));	  Node    finallyBlock    =    n.removeFirstChild();    Node    finallyBlock    =    n.removeFirstChild();    System.arraycopy(labelName,    0,    tryMinimizeExits(finallyBlock,    exitType,    labelName));    	non-compiled	[CE]  variable  labelName  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	128	None	replace
554	[BUG]  [BUGGY]  Preconditions.checkState(n.isFunction()  ||  n.isFunction());  [CE]  cannot  find  symbol  finallyBlock  [FE]        RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.isFunction()  ||  n.isFunction());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.isFunction()  ||  n.isFunction());	  Preconditions.checkState(n.isFunction());    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	162	None	replace
555	[BUG]  [BUGGY]  Preconditions.checkState(n.isFunction()  ||!NodeUtil.hasFinally(n));  [CE]  cannot  find  symbol  finallyBlock  [FE]          RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.isFunction()  ||!NodeUtil.hasFinally(n));  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.isFunction()  ||!NodeUtil.hasFinally(n));	  Preconditions.checkState(n.isFunction());    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	162	None	replace
556	[BUG]  [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkState(NodeUtil.hasFinally(n));  Preconditions.check(n.isLabel());  Preconditions.checkState(NodeUtil.hasFinally(n));  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkState(NodeUtil.hasFinally(n));  Preconditions.check(n.isLabel());  Preconditions.checkState(NodeUtil.hasFinally(n));  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	                Preconditions.checkState(n.isLabel());        Preconditions.checkState(NodeUtil.hasFinally(n));    Preconditions.check(n.isLabel());  Preconditions.checkState(NodeUtil.hasFinally(n));	  	non-compiled	[CE]  cannot  find  symbol	65	None	add
557	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkState(NodeUtil.hasFinally(n));  Preconditions.checkNotNull(n);  Preconditions.checkState(NodeUtil.hasFinally(n));  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	add	                Preconditions.checkState(n.isLabel());        Preconditions.checkState(NodeUtil.hasFinally(n));    Preconditions.checkNotNull(n);  Preconditions.checkState(NodeUtil.hasFinally(n));	  	compilable	  [FE]  RuntimeException  	65	2	add
558	[BUG]  [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkState(NodeUtil.hasFinally(n));  Preconditions.checkNotNull(n);  Preconditions.checkState(NodeUtil.hasFinally(n));  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkState(NodeUtil.hasFinally(n));  Preconditions.checkNotNull(n);  Preconditions.checkState(NodeUtil.hasFinally(n));  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	                Preconditions.checkState(n.isLabel());        Preconditions.checkState(NodeUtil.hasFinally(n));    Preconditions.checkNotNull(n);  Preconditions.checkState(NodeUtil.hasFinally(n));	  	compilable	  [FE]  RuntimeException  	65	2	add
559	[BUG]  [BUGGY]  Node  elseBlock  =  n.get(n.getFirstChild());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  elseBlock  =  n.get(n.getFirstChild());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  elseBlock  =  n.get(n.getFirstChild());	  Node    elseBlock    =    n.get(0);    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
560	[BUG]  [BUGGY]  Node  elseBlock  =  JsonScope.getAllCatchNodes().getFirstChild();  [CE]  cannot  find  symbol  JsonScope  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  elseBlock  =  JsonScope.getAllCatchNodes().getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  elseBlock  =  JsonScope.getAllCatchNodes().getFirstChild();	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    elseBlock    =    AllCatchNodes.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  JsonScope	98	None	replace
561	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.CATCH);  [CE]  cannot  find  symbol  finallyBlock  [FE]            RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.CATCH);  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.CATCH);	  Preconditions.checkState(n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	14	None	replace
562	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  finallyBlock  [FE]              RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.NAME);  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	14	None	replace
563	[BUG]  [BUGGY]  Node  finallyBlock  =  getFinallyBlock(n,  exitType.getFirstChild());  [CE]  int  cannot  be  dereferenced  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  getFinallyBlock(n,  exitType.getFirstChild());  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  getFinallyBlock(n,  exitType.getFirstChild());	  Node    finallyBlock    =    getFinallyBlock(n.getFirstChild());    	non-compiled	[CE]  int  cannot  be  dereferenced	38	None	replace
564	[BUG]  [BUGGY]  Node  finallyBlock  =  b.getFirstChild();  [CE]  cannot  find  symbol  b  [FE]        RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  b.getFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  b.getFirstChild();	  Node    finallyBlock    =    allCatchNodes.getFirstChild();    Node    finallyBlock    =    c.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  b	118	None	replace
565	[BUG]  [BUGGY]  n  =  n.getFirstChild();  this.labelName  =  n.getLastChild();  [CE]  cannot  find  symbol  labelName  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  n  =  n.getFirstChild();  this.labelName  =  n.getLastChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	n  =  n.getFirstChild();  this.labelName  =  n.getLastChild();	          Node    labelBlock    =    n.getFirstChild();    Node    labelBlock    =    n.getFirstChild();    this.labelName    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  labelName	105	None	replace
566	[BUG]  [BUGGY]  Node  labelBlock  =  n.getFirstChild();  this.labelName  =  new  String(n.getLastChild());  [CE]  cannot  find  symbol  labelName  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  labelBlock  =  n.getFirstChild();  this.labelName  =  new  String(n.getLastChild());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  labelBlock  =  n.getFirstChild();  this.labelName  =  new  String(n.getLastChild());	          Node    labelBlock    =    n.getFirstChild();    Node    labelBlock    =    n.getFirstChild();    this.labelName    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  labelName	105	None	replace
567	[BUG]  [BUGGY]  Preconditions.checkState(n.isLabel());  Node  elseBlock  =  allCatchNodes.getFirstChild();  [CE]  cannot  find  symbol  finallyBlock  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.isLabel());  Node  elseBlock  =  allCatchNodes.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.isLabel());  Node  elseBlock  =  allCatchNodes.getFirstChild();	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    elseBlock    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	99	None	replace
568	[BUG]  [BUGGY]  Preconditions.checkState(n.isLabel());  Node  elseBlock  =  n.getFirstChild();  [CE]  cannot  find  symbol  finallyBlock  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.isLabel());  Node  elseBlock  =  n.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.isLabel());  Node  elseBlock  =  n.getFirstChild();	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    elseBlock    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	99	None	replace
569	[BUG]  [BUGGY]  Preconditions.checkArgument(n.isLabel());  Node  n  =  allCatchNodes.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]            RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkArgument(n.isLabel());  Node  n  =  allCatchNodes.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkArgument(n.isLabel());  Node  n  =  allCatchNodes.getFirstChild();	          Preconditions.checkState(n.isLabel());    Node    n    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	64	None	replace
570	[BUG]  [BUGGY]  Node  finalChild  =  n.getLastChild();  [CE]  cannot  find  symbol  finallyBlock  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finalChild  =  n.getLastChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finalChild  =  n.getLastChild();	  Node    lastChild    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	158	None	replace
571	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  null);  Node  labelBlock  =  n.getfirstChild();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  null);  Node  labelBlock  =  n.getfirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.getFirstChild()  ==  null);  Node  labelBlock  =  n.getfirstChild();	          Node    labelBlock    =    n.getFirstChild();    Node    labelBlock    =    n.getfirstChild();    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
572	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.isLabel());  Node  finallyBlock  =  allCatchNodes.getFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	add	Preconditions.checkState(n.isLabel());  Node  finallyBlock  =  allCatchNodes.getFirstChild();	  Node    finallyBlock    =    allCatchNodes.getFirstChild();    Node    finallyBlock    =    n.getFirstChild();    	compilable	  [FE]  RuntimeException  	3	2	replace
573	[BUG]  [BUGGY]  Preconditions.checkState(n.isLabel());  Node  finallyBlock  =  allCatchNodes.getFirstChild();  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.isLabel());  Node  finallyBlock  =  allCatchNodes.getFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.isLabel());  Node  finallyBlock  =  allCatchNodes.getFirstChild();	  Node    finallyBlock    =    allCatchNodes.getFirstChild();    Node    finallyBlock    =    n.getFirstChild();    	compilable	  [FE]  RuntimeException  	3	2	replace
574	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.isLabel());  Node  finallyBlock  =  n.getFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	add	Preconditions.checkState(n.isLabel());  Node  finallyBlock  =  n.getFirstChild();	  Node    finallyBlock    =    allCatchNodes.getFirstChild();    Node    finallyBlock    =    n.getFirstChild();    	compilable	  [FE]  RuntimeException  	3	2	replace
575	[BUG]  [BUGGY]  Preconditions.checkState(n.isLabel());  Node  finallyBlock  =  n.getFirstChild();  [FE]  RuntimeException  [FE]              RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.isLabel());  Node  finallyBlock  =  n.getFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.isLabel());  Node  finallyBlock  =  n.getFirstChild();	  Node    finallyBlock    =    allCatchNodes.getFirstChild();    Node    finallyBlock    =    n.getFirstChild();    	compilable	  [FE]  RuntimeException  	3	2	replace
576	[BUG]  [BUGGY]  Preconditions.checkArgument(n.isLabel());  Preconditions.checkArgument(NodeUtil.hasFinally(n));  [CE]  cannot  find  symbol  finallyBlock  [FE]    RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkArgument(n.isLabel());  Preconditions.checkArgument(NodeUtil.hasFinally(n));  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkArgument(n.isLabel());  Preconditions.checkArgument(NodeUtil.hasFinally(n));	          Preconditions.checkState(n.isLabel());    Preconditions.checkState(NodeUtil.hasFinally(n));    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	66	None	replace
577	[BUG]  [BUGGY]  Preconditions.checkArgument(NodeUtil.hasFinally(n));  [CE]  cannot  find  symbol  finallyBlock  [FE]      RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkArgument(NodeUtil.hasFinally(n));  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkArgument(NodeUtil.hasFinally(n));	          Preconditions.checkState(n.isLabel());    Preconditions.checkState(NodeUtil.hasFinally(n));    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	66	None	replace
578	[BUG]  [BUGGY]  Node  otherBlock  =  n.getFirstChild();  [CE]  cannot  find  symbol  finallyBlock  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  otherBlock  =  n.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  otherBlock  =  n.getFirstChild();	  Node    elseBlock    =    nodes.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	18	None	replace
579	[BUG]  [BUGGY]  Node  anotherBlock  =  n.getFirstChild();  [CE]  cannot  find  symbol  finallyBlock  [FE]          AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  anotherBlock  =  n.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  anotherBlock  =  n.getFirstChild();	  Node    elseBlock    =    node.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	35	None	replace
580	[BUG]  [BUGGY]  Item  labelBlock  =  n.getLastChild();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Item  labelBlock  =  n.getLastChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Item  labelBlock  =  n.getLastChild();	          Node    labelBlock    =    n.getFirstChild();    Node    labelBlock    =    n.getFirstChild();    Item    labelBlock    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
581	[BUG]  [BUGGY]  Node  elseBlock  =  n.getfirstChild();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  elseBlock  =  n.getfirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  elseBlock  =  n.getfirstChild();	          Node    elseBlock    =    n.getFirstChild();    Node    elseBlock    =    n.getfirstChild();    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
582	[BUG]  [BUGGY]  Node  c  =  n.get(0);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  c  =  n.get(0);  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  c  =  n.get(0);	  Node    c    =    allCatchNodes.get(0);    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
583	[BUG]  [BUGGY]  Node  c  =  n.get(1);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  c  =  n.get(1);  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  c  =  n.get(1);	  Node    c    =    allCatchNodes.get(0);    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
584	[BUG]  [BUGGY]  Node  catchBlock  =  n.getFirstChild();  [CE]  cannot  find  symbol  finallyBlock  [FE]          AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  catchBlock  =  n.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  catchBlock  =  n.getFirstChild();	  Node    labelBlock    =    catchNode.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	84	None	replace
585	[BUG]  [BUGGY]  Node  finallyBlock  =  getFinallyBlock(n,  allCatchNodes);  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  getFinallyBlock(n,  allCatchNodes);  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  getFinallyBlock(n,  allCatchNodes);	  Node    finallyBlock    =    allCatchNodes.getLastChild();    Node    finallyBlock    =    getFinallyBlock(n);    	non-compiled	[CE]  cannot  find  symbol	151	None	replace
586	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.BLOCK);  [CE]  cannot  find  symbol  finallyBlock  [FE]              RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.BLOCK);  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.BLOCK);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	15	None	replace
587	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  NodeUtil.hasFinally(n));  [CE]  cannot  find  symbol  finallyBlock  [FE]                RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  NodeUtil.hasFinally(n));  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  &&  NodeUtil.hasFinally(n));	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	15	None	replace
588	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isLiteralValue(n));  [CE]  method  isLiteralValue  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(NodeUtil.isLiteralValue(n));  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(NodeUtil.isLiteralValue(n));	          Preconditions.checkState(NodeUtil.hasFinally(n));    Preconditions.checkState(NodeUtil.hasFinally(n));    	non-compiled	[CE]  method  isLiteralValue  in  class  NodeUtil  cannot  be  applied  to  given  types;	71	None	replace
589	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.getFirstChild());  Preconditions.checkState(n.isLabel());  [CE]  no  suitable  method  found  for  checkState(Node)  [FE]          RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(allCatchNodes.getFirstChild());  Preconditions.checkState(n.isLabel());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(allCatchNodes.getFirstChild());  Preconditions.checkState(n.isLabel());	          Preconditions.checkState(n.isLabel());    Node    n    =    allCatchNodes.getFirstChild();    Preconditions.checkState(n.isLabel());    	non-compiled	[CE]  no  suitable  method  found  for  checkState(Node)	63	None	replace
590	[BUG]  [BUGGY]  Node  exitType  =  n.getFirstChild();  [CE]  variable  exitType  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  exitType  =  n.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  exitType  =  n.getFirstChild();	          Preconditions.checkState(NodeUtil.hasFinally(n));    Preconditions.checkState(NodeUtil.hasFinally(n));    }    else    {    Node    finallyBlock    =    n.getLastChild();    	non-compiled	[CE]  variable  exitType  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	73	None	replace
591	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  c  =  getCatchNodes().getFirstChild();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  c  =  getCatchNodes().getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  c  =  getCatchNodes().getFirstChild();	          Node    c    =    allCatchNodes.getFirstChild();    Node    c    =    getCatchNodes().getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	167	None	replace
592	[BUG]  [BUGGY]          Preconditions.checkState(n.isLabel());    Node  labelBlock  =  n.getFirstChild();  Preconditions.checkState(n.isLabel());  Preconditions.checkState(labelName.length());  Node  labelBlock  =  n.getFirstChild();  Preconditions.checkState(n.isLabel());  [CE]  no  suitable  method  found  for  checkState(int)  [FE]    RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Preconditions.checkState(n.isLabel());    Node  labelBlock  =  n.getFirstChild();  Preconditions.checkState(n.isLabel());  Preconditions.checkState(labelName.length());  Node  labelBlock  =  n.getFirstChild();  Preconditions.checkState(n.isLabel());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	                Preconditions.checkState(n.isLabel());        Node    labelBlock    =    n.getFirstChild();    Preconditions.checkState(n.isLabel());    Preconditions.checkState(labelName.length());  Node  labelBlock  =  n.getFirstChild();  Preconditions.checkState(n.isLabel());	  	non-compiled	[CE]  no  suitable  method  found  for  checkState(int)	109	None	add
593	[BUG]  [BUGGY]          Preconditions.checkState(n.isLabel());    Node  labelBlock  =  n.getFirstChild();  Preconditions.checkState(n.isLabel());  Preconditions.checkArgument(n.isLabel());  Node  labelBlock  =  n.getFirstChild();  Preconditions.checkState(n.isLabel());  [CE]  variable  labelBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Preconditions.checkState(n.isLabel());    Node  labelBlock  =  n.getFirstChild();  Preconditions.checkState(n.isLabel());  Preconditions.checkArgument(n.isLabel());  Node  labelBlock  =  n.getFirstChild();  Preconditions.checkState(n.isLabel());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	                Preconditions.checkState(n.isLabel());        Node    labelBlock    =    n.getFirstChild();    Preconditions.checkState(n.isLabel());    Preconditions.checkArgument(n.isLabel());  Node  labelBlock  =  n.getFirstChild();  Preconditions.checkState(n.isLabel());	  	non-compiled	[CE]  variable  labelBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	109	None	add
594	[BUG]  [BUGGY]          Preconditions.checkState(n.isLabel());    Node  labelBlock  =  n.getFirstChild();  Preconditions.checkState(n.isLabel());  Preconditions.checkState(labelName.equals( " "));  Node  labelBlock  =  n.getFirstChild();  Preconditions.checkState(n.isLabel());  [CE]  variable  labelBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Preconditions.checkState(n.isLabel());    Node  labelBlock  =  n.getFirstChild();  Preconditions.checkState(n.isLabel());  Preconditions.checkState(labelName.equals( " "));  Node  labelBlock  =  n.getFirstChild();  Preconditions.checkState(n.isLabel());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	                Preconditions.checkState(n.isLabel());        Node    labelBlock    =    n.getFirstChild();    Preconditions.checkState(n.isLabel());    Preconditions.checkState(labelName.equals( " "));  Node  labelBlock  =  n.getFirstChild();  Preconditions.checkState(n.isLabel());	  	non-compiled	[CE]  variable  labelBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	109	None	add
595	[BUG]  [BUGGY]  Node  elseBlock  =  n,  exitType.get(1);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  elseBlock  =  n,  exitType.get(1);  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  elseBlock  =  n,  exitType.get(1);	  Node    elseBlock    =    n.get(1);    	non-compiled	[CE]  ';'  expected	132	None	replace
596	[BUG]  [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkState(n.isLabel());  }  else  if(NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getFirstChild();  [CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkState(n.isLabel());  }  else  if(NodeUtil.hasFinally(n))  {  Node  finallyBlock  =  n.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	                Preconditions.checkState(n.isLabel());        Preconditions.checkState(n.isLabel());    }    else    if(NodeUtil.hasFinally(n))    {    Node  finallyBlock  =  n.getFirstChild();	  	non-compiled	[CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	68	None	add
597	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkState(n.isLabel());  }  else  if(NodeUtil.hasFinally(n))  {  Preconditions.checkState(NodeUtil.hasFinally(n));  Preconditions.checkState(n.isLabel());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	add	                Preconditions.checkState(n.isLabel());        Preconditions.checkState(n.isLabel());    }    else    if(NodeUtil.hasFinally(n))    {    Preconditions.checkState(NodeUtil.hasFinally(n));  Preconditions.checkState(n.isLabel());	  	compilable	  [FE]  RuntimeException  	68	2	add
598	[BUG]  [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkState(n.isLabel());  }  else  if(NodeUtil.hasFinally(n))  {  Preconditions.checkState(NodeUtil.hasFinally(n));  Preconditions.checkState(n.isLabel());  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkState(n.isLabel());  }  else  if(NodeUtil.hasFinally(n))  {  Preconditions.checkState(NodeUtil.hasFinally(n));  Preconditions.checkState(n.isLabel());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	                Preconditions.checkState(n.isLabel());        Preconditions.checkState(n.isLabel());    }    else    if(NodeUtil.hasFinally(n))    {    Preconditions.checkState(NodeUtil.hasFinally(n));  Preconditions.checkState(n.isLabel());	  	compilable	  [FE]  RuntimeException  	68	2	add
599	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkState(n.isLabel());  }  else  if(NodeUtil.hasFinally(n))  {  Preconditions.checkState(n.isLabel());  Preconditions.checkState(NodeUtil.hasFinally(n));  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	add	                Preconditions.checkState(n.isLabel());        Preconditions.checkState(n.isLabel());    }    else    if(NodeUtil.hasFinally(n))    {    Preconditions.checkState(n.isLabel());  Preconditions.checkState(NodeUtil.hasFinally(n));	  	compilable	  [FE]  RuntimeException  	68	2	add
600	[BUG]  [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkState(n.isLabel());  }  else  if(NodeUtil.hasFinally(n))  {  Preconditions.checkState(n.isLabel());  Preconditions.checkState(NodeUtil.hasFinally(n));  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkState(n.isLabel());  }  else  if(NodeUtil.hasFinally(n))  {  Preconditions.checkState(n.isLabel());  Preconditions.checkState(NodeUtil.hasFinally(n));  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	                Preconditions.checkState(n.isLabel());        Preconditions.checkState(n.isLabel());    }    else    if(NodeUtil.hasFinally(n))    {    Preconditions.checkState(n.isLabel());  Preconditions.checkState(NodeUtil.hasFinally(n));	  	compilable	  [FE]  RuntimeException  	68	2	add
601	[BUG]  [BUGGY]  Node  n  =  this.allCatchNodes.removeFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  n  =  this.allCatchNodes.removeFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  n  =  this.allCatchNodes.removeFirstChild();	  Node    n    =    allCatchNodes.removeFirstChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	161	None	replace
602	[BUG]  [BUGGY]  Node  n  =  allCatchNodes.removeLastChild();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  n  =  allCatchNodes.removeLastChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  n  =  allCatchNodes.removeLastChild();	  Node    n    =    allCatchNodes.removeFirstChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	161	None	replace
603	[BUG]  [BUGGY]  Node  finallyBlock  =  firstChild.getFirstChild();  [CE]  cannot  find  symbol  firstChild  [FE]        RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  firstChild.getFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  firstChild.getFirstChild();	  Node    finallyBlock    =    allCatchNodes.getFirstChild();    Node    finallyBlock    =    nodes.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  firstChild	152	None	replace
604	[BUG]  [BUGGY]  Node  finallyBlock  =  n.getFirstChild();  System.arraycopy(labelName,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName);  [CE]  ')'  expected  [FE]        IllegalStateException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  n.getFirstChild();  System.arraycopy(labelName,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName);  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  n.getFirstChild();  System.arraycopy(labelName,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName);	  Node    finallyBlock    =    n.removeFirstChild();    Node    finallyBlock    =    n.removeFirstChild();    System.arraycopy(labelName,    0,    tryMinimizeExits(finallyBlock,    exitType,    labelName);    	non-compiled	[CE]  ')'  expected	127	None	replace
605	[BUG]  [BUGGY]  Preconditions.checkState(n.isLabel());  Node  finallyBlock  =  n.removeFirstChild();  System.arraycopy(labelName,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName);  [CE]  ')'  expected  [FE]          IllegalStateException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.isLabel());  Node  finallyBlock  =  n.removeFirstChild();  System.arraycopy(labelName,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName);  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.isLabel());  Node  finallyBlock  =  n.removeFirstChild();  System.arraycopy(labelName,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName);	  Node    finallyBlock    =    n.removeFirstChild();    Node    finallyBlock    =    n.removeFirstChild();    System.arraycopy(labelName,    0,    tryMinimizeExits(finallyBlock,    exitType,    labelName);    	non-compiled	[CE]  ')'  expected	127	None	replace
606	[BUG]  [BUGGY]  n  =  n.getFirstChild();  System.arraycopy(labelName,  0,  n,  0,  n.getLastChild());  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  n  =  n.getFirstChild();  System.arraycopy(labelName,  0,  n,  0,  n.getLastChild());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	n  =  n.getFirstChild();  System.arraycopy(labelName,  0,  n,  0,  n.getLastChild());	          Node    labelBlock    =    n.getFirstChild();    Node    labelBlock    =    n.getFirstChild();    System.arraycopy(labelName,    0,    labelBlock,    0,    n.getLastChild());    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	146	None	replace
607	[BUG]  [BUGGY]  tryMinimizeExits(labelName,  exitType,  labelName);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]              IllegalStateException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  tryMinimizeExits(labelName,  exitType,  labelName);  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	tryMinimizeExits(labelName,  exitType,  labelName);	  Node    finallyBlock    =    n.removeFirstChild();    Node    finallyBlock    =    n.removeFirstChild();    }    else    {    tryMinimizeExits(labelName,    exitType,    labelName);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	22	None	replace
608	[BUG]  [BUGGY]  Preconditions.checkArgument(n.isLabel()  ||  n.isLabel());  [CE]  cannot  find  symbol  finallyBlock  [FE]            RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkArgument(n.isLabel()  ||  n.isLabel());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkArgument(n.isLabel()  ||  n.isLabel());	  Preconditions.checkArgument(n.isLabel());    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	164	None	replace
609	[BUG]  [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  thenBlock  =  n.getFirstChild();  Node  elseBlock  =  node.getFirstChild();  Node  thenBlock  =  n.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  thenBlock  =  n.getFirstChild();  Node  elseBlock  =  node.getFirstChild();  Node  thenBlock  =  n.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	                Node        elseBlock        =        n.getFirstChild();        Node    thenBlock    =    n.getFirstChild();    Node  elseBlock  =  node.getFirstChild();  Node  thenBlock  =  n.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	81	None	add
610	[BUG]  [BUGGY]  Node  elseBlock  =  n.getFirstChild();  Node  thenBlock  =  thenNode.getFirstChild();  [CE]  cannot  find  symbol  thenNode  [FE]    AssertionFailedError    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  elseBlock  =  n.getFirstChild();  Node  thenBlock  =  thenNode.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  elseBlock  =  n.getFirstChild();  Node  thenBlock  =  thenNode.getFirstChild();	          Node    elseBlock    =    n.getFirstChild();    Node    thenBlock    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  thenNode	82	None	replace
611	[BUG]  [BUGGY]  Node  elseBlock  =  n.getFirstChild();  Node  thenBlock  =  thenCatchNodes.getFirstChild();  [CE]  cannot  find  symbol  thenCatchNodes  [FE]      AssertionFailedError    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  elseBlock  =  n.getFirstChild();  Node  thenBlock  =  thenCatchNodes.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  elseBlock  =  n.getFirstChild();  Node  thenBlock  =  thenCatchNodes.getFirstChild();	          Node    elseBlock    =    n.getFirstChild();    Node    thenBlock    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  thenCatchNodes	82	None	replace
612	[BUG]  [BUGGY]  Node  exitType  =  allCatchNodes.getFirstChild();  [CE]  variable  exitType  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  exitType  =  allCatchNodes.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  exitType  =  allCatchNodes.getFirstChild();	          Preconditions.checkState(n.isLabel());    Preconditions.checkState(n.isLabel());    }    else    if(NodeUtil.hasFinally(n))    {    	non-compiled	[CE]  variable  exitType  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	69	None	replace
613	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Preconditions.checkState(allCatchNodes.hasFirstChild());  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Preconditions.checkState(allCatchNodes.hasFirstChild());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(allCatchNodes.hasOneChild());  Preconditions.checkState(allCatchNodes.hasFirstChild());	          Preconditions.checkState(n.isLabel());    Preconditions.checkState(n.isLabel());    }    else    if(NodeUtil.hasFinally(n))    {    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
614	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGet(n)||  NodeUtil.isFinally(n));  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(NodeUtil.isGet(n)||  NodeUtil.isFinally(n));  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(NodeUtil.isGet(n)||  NodeUtil.isFinally(n));	  Preconditions.checkState(NodeUtil.isGet(n));    	non-compiled	[CE]  cannot  find  symbol	123	None	replace
615	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Preconditions.checkState(NodeUtil.hasFinally(n));    Preconditions.checkState(NodeUtil.hasFinally(n));  Preconditions.checkArgument(NodeUtil.hasFinally(n));  Preconditions.checkState(NodeUtil.hasFinally(n));  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	add	                Preconditions.checkState(NodeUtil.hasFinally(n));        Preconditions.checkState(NodeUtil.hasFinally(n));    Preconditions.checkArgument(NodeUtil.hasFinally(n));  Preconditions.checkState(NodeUtil.hasFinally(n));	  	compilable	  [FE]  AssertionFailedError  	70	2	add
616	[BUG]  [BUGGY]          Preconditions.checkState(NodeUtil.hasFinally(n));    Preconditions.checkState(NodeUtil.hasFinally(n));  Preconditions.checkArgument(NodeUtil.hasFinally(n));  Preconditions.checkState(NodeUtil.hasFinally(n));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Preconditions.checkState(NodeUtil.hasFinally(n));    Preconditions.checkState(NodeUtil.hasFinally(n));  Preconditions.checkArgument(NodeUtil.hasFinally(n));  Preconditions.checkState(NodeUtil.hasFinally(n));  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	                Preconditions.checkState(NodeUtil.hasFinally(n));        Preconditions.checkState(NodeUtil.hasFinally(n));    Preconditions.checkArgument(NodeUtil.hasFinally(n));  Preconditions.checkState(NodeUtil.hasFinally(n));	  	compilable	  [FE]  AssertionFailedError  	70	2	add
617	[BUG]  [BUGGY]          Preconditions.checkState(NodeUtil.hasFinally(n));    Preconditions.checkState(NodeUtil.hasFinally(n));  Preconditions.check(NodeUtil.hasFinally(n));  Preconditions.checkState(NodeUtil.hasFinally(n));  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Preconditions.checkState(NodeUtil.hasFinally(n));    Preconditions.checkState(NodeUtil.hasFinally(n));  Preconditions.check(NodeUtil.hasFinally(n));  Preconditions.checkState(NodeUtil.hasFinally(n));  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	                Preconditions.checkState(NodeUtil.hasFinally(n));        Preconditions.checkState(NodeUtil.hasFinally(n));    Preconditions.check(NodeUtil.hasFinally(n));  Preconditions.checkState(NodeUtil.hasFinally(n));	  	non-compiled	[CE]  cannot  find  symbol	70	None	add
618	[BUG]  [BUGGY]          Preconditions.checkState(NodeUtil.hasFinally(n));    Preconditions.checkState(NodeUtil.hasFinally(n));  Node  n  =  allCatchNodes.getFirstChild();  Preconditions.checkState(NodeUtil.hasFinally(n));  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        AssertionFailedError    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Preconditions.checkState(NodeUtil.hasFinally(n));    Preconditions.checkState(NodeUtil.hasFinally(n));  Node  n  =  allCatchNodes.getFirstChild();  Preconditions.checkState(NodeUtil.hasFinally(n));  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	                Preconditions.checkState(NodeUtil.hasFinally(n));        Preconditions.checkState(NodeUtil.hasFinally(n));    Node  n  =  allCatchNodes.getFirstChild();  Preconditions.checkState(NodeUtil.hasFinally(n));	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	70	None	add
619	[BUG]  [BUGGY]  Preconditions.checkState(n.isAll());  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.isAll());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.isAll());	          Preconditions.checkState(n.isLabel());    Preconditions.checkState(n.isLabel());    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
620	[BUG]  [BUGGY]  Node  catchNode  =  n.removeFirstChild();  [CE]  cannot  find  symbol  finallyBlock  [FE]        IllegalStateException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  catchNode  =  n.removeFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  catchNode  =  n.removeFirstChild();	  Node    finallyBlock    =    catchNode.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	8	None	replace
621	[BUG]  [BUGGY]  Node  finallyBlock  =  n.removeFirstChild();  }  else  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  [CE]  cannot  find  symbol  finallyBlock  [FE]          IllegalStateException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  n.removeFirstChild();  }  else  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  n.removeFirstChild();  }  else  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);	  Node    finallyBlock    =    n.removeFirstChild();    Node    finallyBlock    =    n.removeFirstChild();    }    tryMinimizeExits(finallyBlock,    exitType,    labelName);    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	20	None	replace
622	[BUG]  [BUGGY]  Node  finallyBlock  =  allCatchNodes.removeFirstChild();  Node  finallyBlock  =  this.allCatchNodes.removeFirstChild();  [CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  allCatchNodes.removeFirstChild();  Node  finallyBlock  =  this.allCatchNodes.removeFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node    finallyBlock    =    allCatchNodes.removeFirstChild();    Node  finallyBlock  =  this.allCatchNodes.removeFirstChild();	  	non-compiled	[CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	113	None	add
623	[BUG]  [BUGGY]  Node  finallyBlock  =  allCatchNodes.removeFirstChild();  Node  finallyBlock  =  nodes.removeFirstChild();  [CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  allCatchNodes.removeFirstChild();  Node  finallyBlock  =  nodes.removeFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node    finallyBlock    =    allCatchNodes.removeFirstChild();    Node  finallyBlock  =  nodes.removeFirstChild();	  	non-compiled	[CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	113	None	add
624	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isFinally(n,  exitType));  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(NodeUtil.isFinally(n,  exitType));  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(NodeUtil.isFinally(n,  exitType));	  Preconditions.checkState(NodeUtil.isFinally(n));    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
625	[BUG]  [BUGGY]  Preconditions.checkState(n.isTree()  ||!NodeUtil.hasFinally(n));  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.isTree()  ||!NodeUtil.hasFinally(n));  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.isTree()  ||!NodeUtil.hasFinally(n));	  Preconditions.checkState(n.isTree());    	non-compiled	[CE]  cannot  find  symbol	163	None	replace
626	[BUG]  [BUGGY]  Preconditions.checkState(n.isTree()  &&  n.isTree());  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.isTree()  &&  n.isTree());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.isTree()  &&  n.isTree());	  Preconditions.checkState(n.isTree());    	non-compiled	[CE]  cannot  find  symbol	163	None	replace
627	[BUG]  [BUGGY]  Preconditions.checkState(c.isLabel());  [CE]  cannot  find  symbol  c  [FE]        RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(c.isLabel());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(c.isLabel());	  Preconditions.checkState(falseBlock.isLabel());    	non-compiled	[CE]  cannot  find  symbol  c	115	None	replace
628	[BUG]  [BUGGY]  Node  finallyBlock  =  n.removeFirstChild();  }  elseBlock.setLabelName(labelName);  [CE]  illegal  start  of  type  [FE]                  IllegalStateException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  n.removeFirstChild();  }  elseBlock.setLabelName(labelName);  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  n.removeFirstChild();  }  elseBlock.setLabelName(labelName);	  Node    finallyBlock    =    n.removeFirstChild();    Node    finallyBlock    =    n.removeFirstChild();    }    elseBlock.setLabelName(labelName);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
629	[BUG]  [BUGGY]  Node  finallyBlock  =  n.removeFirstChild();  elseBlock.setLabelName(labelName);  [CE]  cannot  find  symbol  elseBlock  [FE]                    IllegalStateException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  n.removeFirstChild();  elseBlock.setLabelName(labelName);  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  n.removeFirstChild();  elseBlock.setLabelName(labelName);	  Node    finallyBlock    =    n.removeFirstChild();    Node    finallyBlock    =    n.removeFirstChild();    }    elseBlock.setLabelName(labelName);    	non-compiled	[CE]  cannot  find  symbol  elseBlock	24	None	replace
630	[BUG]  [BUGGY]  Preconditions.checkState(n.removeFirstChild());  Node  finallyBlock  =  n.removeFirstChild();  [CE]  no  suitable  method  found  for  checkState(Node)  [FE]                      IllegalStateException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.removeFirstChild());  Node  finallyBlock  =  n.removeFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.removeFirstChild());  Node  finallyBlock  =  n.removeFirstChild();	  Node    finallyBlock    =    n.removeFirstChild();    Node    finallyBlock    =    n.removeFirstChild();    }    elseBlock.setLabelName(labelName);    	non-compiled	[CE]  no  suitable  method  found  for  checkState(Node)	24	None	replace
631	[BUG]  [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkState(n.isLabel());  Preconditions.checkState(n.isTree());  Preconditions.checkState(n.isLabel());  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkState(n.isLabel());  Preconditions.checkState(n.isTree());  Preconditions.checkState(n.isLabel());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	                Preconditions.checkState(n.isLabel());        Preconditions.checkState(n.isLabel());    Preconditions.checkState(n.isTree());  Preconditions.checkState(n.isLabel());	  	non-compiled	[CE]  cannot  find  symbol	61	None	add
632	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkState(n.isLabel());  Preconditions.checkArgument(n.isLabel());  Preconditions.checkState(n.isLabel());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	add	                Preconditions.checkState(n.isLabel());        Preconditions.checkState(n.isLabel());    Preconditions.checkArgument(n.isLabel());  Preconditions.checkState(n.isLabel());	  	compilable	  [FE]  RuntimeException  	61	2	add
633	[BUG]  [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkState(n.isLabel());  Preconditions.checkArgument(n.isLabel());  Preconditions.checkState(n.isLabel());  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkState(n.isLabel());  Preconditions.checkArgument(n.isLabel());  Preconditions.checkState(n.isLabel());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	                Preconditions.checkState(n.isLabel());        Preconditions.checkState(n.isLabel());    Preconditions.checkArgument(n.isLabel());  Preconditions.checkState(n.isLabel());	  	compilable	  [FE]  RuntimeException  	61	2	add
634	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkState(n.isLabel());  Preconditions.checkArgument(n.isLabel());  Preconditions.checkArgument(n.isLabel());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	add	                Preconditions.checkState(n.isLabel());        Preconditions.checkState(n.isLabel());    Preconditions.checkArgument(n.isLabel());  Preconditions.checkArgument(n.isLabel());	  	compilable	  [FE]  RuntimeException  	61	2	add
635	[BUG]  [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkState(n.isLabel());  Preconditions.checkArgument(n.isLabel());  Preconditions.checkArgument(n.isLabel());  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkState(n.isLabel());  Preconditions.checkArgument(n.isLabel());  Preconditions.checkArgument(n.isLabel());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	                Preconditions.checkState(n.isLabel());        Preconditions.checkState(n.isLabel());    Preconditions.checkArgument(n.isLabel());  Preconditions.checkArgument(n.isLabel());	  	compilable	  [FE]  RuntimeException  	61	2	add
636	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkNotNull(n.isLabel());  Preconditions.checkNotNull(n.isLabel());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	add	                Preconditions.checkState(n.isLabel());        Preconditions.checkNotNull(n.isLabel());    Preconditions.checkNotNull(n.isLabel());	  	compilable	  [FE]  RuntimeException  	133	2	add
637	[BUG]  [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkNotNull(n.isLabel());  Preconditions.checkNotNull(n.isLabel());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkNotNull(n.isLabel());  Preconditions.checkNotNull(n.isLabel());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	                Preconditions.checkState(n.isLabel());        Preconditions.checkNotNull(n.isLabel());    Preconditions.checkNotNull(n.isLabel());	  	compilable	  [FE]  RuntimeException  	133	2	add
638	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkNotNull(n.isLabel());  Preconditions.checkArgument(n.isLabel());  Preconditions.checkNotNull(n.isLabel());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	add	                Preconditions.checkState(n.isLabel());        Preconditions.checkNotNull(n.isLabel());    Preconditions.checkArgument(n.isLabel());  Preconditions.checkNotNull(n.isLabel());	  	compilable	  [FE]  RuntimeException  	133	2	add
639	[BUG]  [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkNotNull(n.isLabel());  Preconditions.checkArgument(n.isLabel());  Preconditions.checkNotNull(n.isLabel());  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkNotNull(n.isLabel());  Preconditions.checkArgument(n.isLabel());  Preconditions.checkNotNull(n.isLabel());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	                Preconditions.checkState(n.isLabel());        Preconditions.checkNotNull(n.isLabel());    Preconditions.checkArgument(n.isLabel());  Preconditions.checkNotNull(n.isLabel());	  	compilable	  [FE]  RuntimeException  	133	2	add
640	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isName(n));  Preconditions.checkState(NodeUtil.isFinally(n));  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(NodeUtil.isName(n));  Preconditions.checkState(NodeUtil.isFinally(n));  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(NodeUtil.isName(n));  Preconditions.checkState(NodeUtil.isFinally(n));	          Preconditions.checkState(NodeUtil.hasFinally(n));    Preconditions.checkState(NodeUtil.isFinally(n));    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
641	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  n);  Node  n  =  n.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]            RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  n);  Node  n  =  n.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.getFirstChild()  ==  n);  Node  n  =  n.getFirstChild();	          n    =    n.getFirstChild();    Node    n    =    n.getFirstChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	53	None	replace
642	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  finallyBlock  [FE]          RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	13	None	replace
643	[BUG]  [BUGGY]  Node  nextBlock  =  n.removeFirstChild();  [CE]  cannot  find  symbol  finallyBlock  [FE]        AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  nextBlock  =  n.removeFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  nextBlock  =  n.removeFirstChild();	  Node    elseBlock    =    n.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	144	None	replace
644	[BUG]  [BUGGY]          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  thenBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  getCatchNodes().getFirstChild();  Node  thenBlock  =  allCatchNodes.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  thenBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  getCatchNodes().getFirstChild();  Node  thenBlock  =  allCatchNodes.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	                Node        elseBlock        =        allCatchNodes.getFirstChild();        Node    thenBlock    =    allCatchNodes.getFirstChild();    Node  elseBlock  =  getCatchNodes().getFirstChild();  Node  thenBlock  =  allCatchNodes.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	125	None	add
645	[BUG]  [BUGGY]          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  thenBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  anyCatchNodes.getFirstChild();  Node  thenBlock  =  allCatchNodes.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      AssertionFailedError    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  thenBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  anyCatchNodes.getFirstChild();  Node  thenBlock  =  allCatchNodes.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	                Node        elseBlock        =        allCatchNodes.getFirstChild();        Node    thenBlock    =    allCatchNodes.getFirstChild();    Node  elseBlock  =  anyCatchNodes.getFirstChild();  Node  thenBlock  =  allCatchNodes.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	125	None	add
646	[BUG]  [BUGGY]          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  thenBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  node.getFirstChild();  Node  thenBlock  =  allCatchNodes.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        AssertionFailedError    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  thenBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  node.getFirstChild();  Node  thenBlock  =  allCatchNodes.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	                Node        elseBlock        =        allCatchNodes.getFirstChild();        Node    thenBlock    =    allCatchNodes.getFirstChild();    Node  elseBlock  =  node.getFirstChild();  Node  thenBlock  =  allCatchNodes.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	125	None	add
647	[BUG]  [BUGGY]          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  thenBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  nodes.getFirstChild();  Node  thenBlock  =  allCatchNodes.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          AssertionFailedError    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  thenBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  nodes.getFirstChild();  Node  thenBlock  =  allCatchNodes.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	                Node        elseBlock        =        allCatchNodes.getFirstChild();        Node    thenBlock    =    allCatchNodes.getFirstChild();    Node  elseBlock  =  nodes.getFirstChild();  Node  thenBlock  =  allCatchNodes.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	125	None	add
648	[BUG]  [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkArgument(n.isLabel());  Preconditions.checkLabel(n.isLabel());  Preconditions.checkArgument(n.isLabel());  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkArgument(n.isLabel());  Preconditions.checkLabel(n.isLabel());  Preconditions.checkArgument(n.isLabel());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	                Preconditions.checkState(n.isLabel());        Preconditions.checkArgument(n.isLabel());    Preconditions.checkLabel(n.isLabel());  Preconditions.checkArgument(n.isLabel());	  	non-compiled	[CE]  cannot  find  symbol	135	None	add
649	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkArgument(n.isLabel());  Preconditions.checkNotNull(n);  Preconditions.checkArgument(n.isLabel());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	add	                Preconditions.checkState(n.isLabel());        Preconditions.checkArgument(n.isLabel());    Preconditions.checkNotNull(n);  Preconditions.checkArgument(n.isLabel());	  	compilable	  [FE]  RuntimeException  	135	2	add
650	[BUG]  [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkArgument(n.isLabel());  Preconditions.checkNotNull(n);  Preconditions.checkArgument(n.isLabel());  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkArgument(n.isLabel());  Preconditions.checkNotNull(n);  Preconditions.checkArgument(n.isLabel());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	                Preconditions.checkState(n.isLabel());        Preconditions.checkArgument(n.isLabel());    Preconditions.checkNotNull(n);  Preconditions.checkArgument(n.isLabel());	  	compilable	  [FE]  RuntimeException  	135	2	add
651	[BUG]  [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkArgument(n.isLabel());  Preconditions.check(n.isLabel());  Preconditions.checkArgument(n.isLabel());  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Preconditions.checkState(n.isLabel());    Preconditions.checkArgument(n.isLabel());  Preconditions.check(n.isLabel());  Preconditions.checkArgument(n.isLabel());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	                Preconditions.checkState(n.isLabel());        Preconditions.checkArgument(n.isLabel());    Preconditions.check(n.isLabel());  Preconditions.checkArgument(n.isLabel());	  	non-compiled	[CE]  cannot  find  symbol	135	None	add
652	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.hasFinally(n),  exitType);  [CE]  cannot  find  symbol  finallyBlock  [FE]        AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(NodeUtil.hasFinally(n),  exitType);  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(NodeUtil.hasFinally(n),  exitType);	          Preconditions.checkState(NodeUtil.hasFinally(n));    preconditions.checkState(NodeUtil.hasFinally(n));    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	107	None	replace
653	[BUG]  [BUGGY]  Node  elseBlock  =  getCatchNodes().getLastChild();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  elseBlock  =  getCatchNodes().getLastChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  elseBlock  =  getCatchNodes().getLastChild();	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    elseBlock    =    getCatchNodes().getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	141	None	replace
654	[BUG]  [BUGGY]  Node  n  =  this.allCatchNodes.getLastChild();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  n  =  this.allCatchNodes.getLastChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  n  =  this.allCatchNodes.getLastChild();	  Node    n    =    allCatchNodes.getLastChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	57	None	replace
655	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.getFirstChild());  preconditions.checkState(n.isLabel());  [CE]  no  suitable  method  found  for  checkState(Node)  [FE]                RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(allCatchNodes.getFirstChild());  preconditions.checkState(n.isLabel());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(allCatchNodes.getFirstChild());  preconditions.checkState(n.isLabel());	          Preconditions.checkState(n.isLabel());    Node    n    =    allCatchNodes.getFirstChild();    preconditions.checkState(n.isLabel());    	non-compiled	[CE]  no  suitable  method  found  for  checkState(Node)	67	None	replace
656	[BUG]  [BUGGY]  Node  catchBlock  =  n.getLastChild();  [CE]  cannot  find  symbol  finallyBlock  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  catchBlock  =  n.getLastChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  catchBlock  =  n.getLastChild();	  Node    finallyBlock    =    catchNode.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	36	None	replace
657	[BUG]  [BUGGY]  Node  catchNodeBlock  =  n.getLastChild();  [CE]  cannot  find  symbol  finallyBlock  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  catchNodeBlock  =  n.getLastChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  catchNodeBlock  =  n.getLastChild();	  Node    finallyBlock    =    catchNode.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	36	None	replace
658	[BUG]  [BUGGY]  Node  c  =  n.removeFirstChild();  [CE]  cannot  find  symbol  finallyBlock  [FE]        AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  c  =  n.removeFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  c  =  n.removeFirstChild();	  Node    c    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	39	None	replace
659	[BUG]  [BUGGY]  n  =  n.getFirstChild();  System.arraycopy(labelName,  0,  labelBlock,  1,  n.getLastChild());  [CE]  cannot  find  symbol  labelBlock  [FE]          AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  n  =  n.getFirstChild();  System.arraycopy(labelName,  0,  labelBlock,  1,  n.getLastChild());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	n  =  n.getFirstChild();  System.arraycopy(labelName,  0,  labelBlock,  1,  n.getLastChild());	          Node    labelBlock    =    n.getFirstChild();    Node    labelBlock    =    n.getFirstChild();    System.arraycopy(labelName,    0,    labelBlock,    1,    n.getLastChild());    	non-compiled	[CE]  cannot  find  symbol  labelBlock	147	None	replace
660	[BUG]  [BUGGY]  LabelName  labelName  =  n.getFirstChild();  System.arraycopy(labelName,  0,  labelBlock,  1,  n.getLastChild());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  LabelName  labelName  =  n.getFirstChild();  System.arraycopy(labelName,  0,  labelBlock,  1,  n.getLastChild());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	LabelName  labelName  =  n.getFirstChild();  System.arraycopy(labelName,  0,  labelBlock,  1,  n.getLastChild());	          Node    labelBlock    =    n.getFirstChild();    Node    labelBlock    =    n.getFirstChild();    System.arraycopy(labelName,    0,    labelBlock,    1,    n.getLastChild());    	non-compiled	[CE]  cannot  find  symbol	147	None	replace
661	[BUG]  [BUGGY]  Preconditions.checkState(n.isLabel());  Node  elseBlock  =  n.getLastChild();  [CE]  cannot  find  symbol  finallyBlock  [FE]          AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.isLabel());  Node  elseBlock  =  n.getLastChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.isLabel());  Node  elseBlock  =  n.getLastChild();	          Node    elseBlock    =    allCatchNodes.getFirstChild();    Node    elseBlock    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	142	None	replace
662	[BUG]  [BUGGY]  Preconditions.checkState(n.isLabel());  n  =  n.getLastChild();  [CE]  cannot  find  symbol  finallyBlock  [FE]    AssertionFailedError    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.isLabel());  n  =  n.getLastChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.isLabel());  n  =  n.getLastChild();	          Preconditions.checkState(NodeUtil.hasFinally(n));    Preconditions.checkState(NodeUtil.hasFinally(n));    n    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	75	None	replace
663	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isExpressionNode(n));  n  =  n.getLastChild();  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(NodeUtil.isExpressionNode(n));  n  =  n.getLastChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(NodeUtil.isExpressionNode(n));  n  =  n.getLastChild();	          Preconditions.checkState(NodeUtil.hasFinally(n));    Preconditions.checkState(NodeUtil.hasFinally(n));    n    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
664	[BUG]  [BUGGY]  Node  finallyBlock  =  n.cloneTree();  Node  finallyBlock  =  no.cloneTree();  [CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    StackOverflowError    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  n.cloneTree();  Node  finallyBlock  =  no.cloneTree();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node    finallyBlock    =    n.cloneTree();    Node  finallyBlock  =  no.cloneTree();	  	non-compiled	[CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	138	None	add
665	[BUG]  [BUGGY]  Node  finallyBlock  =  n.cloneTree();  Node  finallyBlock  =  nu.cloneTree();  [CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      StackOverflowError    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  n.cloneTree();  Node  finallyBlock  =  nu.cloneTree();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node    finallyBlock    =    n.cloneTree();    Node  finallyBlock  =  nu.cloneTree();	  	non-compiled	[CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	138	None	add
666	[BUG]  [BUGGY]  Node  finallyBlock  =  n.cloneTree();  Node  finallyBlock  =  n.cloneTree());  [CE]  ';'  expected  [FE]        StackOverflowError    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  n.cloneTree();  Node  finallyBlock  =  n.cloneTree());  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node    finallyBlock    =    n.cloneTree();    Node  finallyBlock  =  n.cloneTree());	  	non-compiled	[CE]  ';'  expected	138	None	add
667	[BUG]  [BUGGY]  Preconditions.checkState(n.isLabel()  ||  n.isLabel());  [CE]  cannot  find  symbol  finallyBlock  [FE]            RuntimeException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.isLabel()  ||  n.isLabel());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.isLabel()  ||  n.isLabel());	          Preconditions.checkState(n.isLabel());    Preconditions.checkLabel(n.isLabel());    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	137	None	replace
668	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.get(n,  exitType);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  elseBlock  =  allCatchNodes.get(n,  exitType);  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  elseBlock  =  allCatchNodes.get(n,  exitType);	  Node    elseBlock    =    allCatchNodes.get(n);    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
669	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.remove(n);  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  elseBlock  =  allCatchNodes.remove(n);  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  elseBlock  =  allCatchNodes.remove(n);	  Node    elseBlock    =    allCatchNodes.get(n);    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
670	[BUG]  [BUGGY]          Preconditions.checkState(NodeUtil.hasFinally(n));    Preconditions.checkState(NodeUtil.hasFinally(n));  n  =  n.getLastChild();  Preconditions.checkState(NodeUtil.isFinally(n));  Preconditions.checkState(NodeUtil.hasFinally(n));  n  =  n.getLastChild();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Preconditions.checkState(NodeUtil.hasFinally(n));    Preconditions.checkState(NodeUtil.hasFinally(n));  n  =  n.getLastChild();  Preconditions.checkState(NodeUtil.isFinally(n));  Preconditions.checkState(NodeUtil.hasFinally(n));  n  =  n.getLastChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	                Preconditions.checkState(NodeUtil.hasFinally(n));        Preconditions.checkState(NodeUtil.hasFinally(n));    n    =    n.getLastChild();    Preconditions.checkState(NodeUtil.isFinally(n));  Preconditions.checkState(NodeUtil.hasFinally(n));  n  =  n.getLastChild();	  	non-compiled	[CE]  cannot  find  symbol	74	None	add
671	[BUG]  [BUGGY]          Preconditions.checkState(NodeUtil.hasFinally(n));    Preconditions.checkState(NodeUtil.hasFinally(n));  n  =  n.getLastChild();  Preconditions.checkState(NodeUtil.hasFinally(n));  Preconditions.checkState(NodeUtil.hasFinally(n));  n  =  n.getLastChild()  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Preconditions.checkState(NodeUtil.hasFinally(n));    Preconditions.checkState(NodeUtil.hasFinally(n));  n  =  n.getLastChild();  Preconditions.checkState(NodeUtil.hasFinally(n));  Preconditions.checkState(NodeUtil.hasFinally(n));  n  =  n.getLastChild()  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	                Preconditions.checkState(NodeUtil.hasFinally(n));        Preconditions.checkState(NodeUtil.hasFinally(n));    n    =    n.getLastChild();    Preconditions.checkState(NodeUtil.hasFinally(n));  Preconditions.checkState(NodeUtil.hasFinally(n));  n  =  n.getLastChild()	  	non-compiled	[CE]  ';'  expected	74	None	add
672	[BUG]  [BUGGY]  Node  finallyBlock  =  n.getFirstChild();  System.arraycopy(c,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName);  [CE]  ')'  expected  [FE]            IllegalStateException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  n.getFirstChild();  System.arraycopy(c,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName);  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  n.getFirstChild();  System.arraycopy(c,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName);	  Node    finallyBlock    =    n.removeFirstChild();    Node    finallyBlock    =    n.removeFirstChild();    System.arraycopy(c,    0,    tryMinimizeExits(finallyBlock,    exitType,    labelName);    	non-compiled	[CE]  ')'  expected	129	None	replace
673	[BUG]  [BUGGY]  Preconditions.checkState(n.isLabel());  Node  finallyBlock  =  n.removeFirstChild();  System.arraycopy(c,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName);  [CE]  ')'  expected  [FE]              IllegalStateException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.isLabel());  Node  finallyBlock  =  n.removeFirstChild();  System.arraycopy(c,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName);  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.isLabel());  Node  finallyBlock  =  n.removeFirstChild();  System.arraycopy(c,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName);	  Node    finallyBlock    =    n.removeFirstChild();    Node    finallyBlock    =    n.removeFirstChild();    System.arraycopy(c,    0,    tryMinimizeExits(finallyBlock,    exitType,    labelName);    	non-compiled	[CE]  ')'  expected	129	None	replace
674	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isExitType(n)&&  NodeUtil.hasFinally(n));  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(NodeUtil.isExitType(n)&&  NodeUtil.hasFinally(n));  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(NodeUtil.isExitType(n)&&  NodeUtil.hasFinally(n));	  Preconditions.checkState(NodeUtil.isExitType(n));    	non-compiled	[CE]  cannot  find  symbol	124	None	replace
675	[BUG]  [BUGGY]  Node  labelBlock  =  n.replaceChild(n,  falseBlock);  [CE]  cannot  find  symbol  falseBlock  [FE]        AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  labelBlock  =  n.replaceChild(n,  falseBlock);  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  labelBlock  =  n.replaceChild(n,  falseBlock);	  Node    labelBlock    =    n.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol  falseBlock	148	None	replace
676	[BUG]  [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  otherBlock  =  n.getFirstChild();  Node  elseBlock  =  node.getFirstChild();  Node  otherBlock  =  n.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]          Node    elseBlock    =    n.getFirstChild();    Node  otherBlock  =  n.getFirstChild();  Node  elseBlock  =  node.getFirstChild();  Node  otherBlock  =  n.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	                Node        elseBlock        =        n.getFirstChild();        Node    otherBlock    =    n.getFirstChild();    Node  elseBlock  =  node.getFirstChild();  Node  otherBlock  =  n.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	79	None	add
677	[BUG]  [BUGGY]  Node  n  =  allCatchNodes.remove(0);  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  n  =  allCatchNodes.remove(0);  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  n  =  allCatchNodes.remove(0);	  Node    n    =    allCatchNodes.get(0);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	59	None	replace
678	[BUG]  [BUGGY]  Node  labelBlock  =  n.getFirstChild();  Preconditions.checkState(c.isLabel());  [CE]  cannot  find  symbol  c  [FE]    RuntimeException    [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  labelBlock  =  n.getFirstChild();  Preconditions.checkState(c.isLabel());  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  labelBlock  =  n.getFirstChild();  Preconditions.checkState(c.isLabel());	          Preconditions.checkState(n.isLabel());    Node    labelBlock    =    n.getFirstChild();    Preconditions.checkState(n.isLabel());    	non-compiled	[CE]  cannot  find  symbol  c	110	None	replace
679	[BUG]  [BUGGY]  Node  finallyBlock  =  n.removeFirstChild();  System.arraycopy(allCatchNodes,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName);  [CE]  ')'  expected  [FE]              IllegalStateException      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  finallyBlock  =  n.removeFirstChild();  System.arraycopy(allCatchNodes,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName);  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  n.removeFirstChild();  System.arraycopy(allCatchNodes,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName);	  Node    finallyBlock    =    n.removeFirstChild();    Node    finallyBlock    =    n.removeFirstChild();    System.arraycopy(allCatchNodes,    0,    tryMinimizeExits(finallyBlock,    exitType,    labelName);    	non-compiled	[CE]  ')'  expected	130	None	replace
680	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild()!=  n);  Node  labelBlock  =  n.getFirstChild();  [CE]  cannot  find  symbol  finallyBlock  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Preconditions.checkState(n.getFirstChild()!=  n);  Node  labelBlock  =  n.getFirstChild();  [BUGGY]      Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.getFirstChild()!=  n);  Node  labelBlock  =  n.getFirstChild();	          Node    labelBlock    =    n.getFirstChild();    Node    labelBlock    =    n.getFirstChild());    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	90	None	replace
681	[BUG]  [BUGGY]  Node  endNode  =  n.getFirstChild();  [CE]  cannot  find  symbol  finallyBlock  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  endNode  =  n.getFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  endNode  =  n.getFirstChild();	  Node    finallyBlock    =    startNode.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	131	None	replace
682	[BUG]  [BUGGY]  Node  startNode  =  n.getFirstChild();  [CE]  cannot  find  symbol  finallyBlock  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {      [BUGGY]  Node  startNode  =  n.getFirstChild();  [BUGGY]      tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  startNode  =  n.getFirstChild();	  Node    finallyBlock    =    startNode.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	131	None	replace
