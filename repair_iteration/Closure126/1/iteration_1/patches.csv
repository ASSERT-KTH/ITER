bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Node  finallyBlock  =  allCatchNodes.getFirstChild();  Node  finallyBlock  =  allCatchNodes.getFirstChild();  [CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    RuntimeException    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]  Node  finallyBlock  =  allCatchNodes.getFirstChild();  Node  finallyBlock  =  allCatchNodes.getFirstChild();  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node    finallyBlock    =    allCatchNodes.getFirstChild();    Node  finallyBlock  =  allCatchNodes.getFirstChild();	  	non-compiled	[CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	11	None	add
2	[BUG]  [BUGGY]  Node  finallyBlock  =  allCatchNodes.getFirstChild();  Node  finallyBlock  =  allCatchNodes.getLastChild();  [CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      RuntimeException    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]  Node  finallyBlock  =  allCatchNodes.getFirstChild();  Node  finallyBlock  =  allCatchNodes.getLastChild();  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node    finallyBlock    =    allCatchNodes.getFirstChild();    Node  finallyBlock  =  allCatchNodes.getLastChild();	  	non-compiled	[CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	11	None	add
3	[BUG]  [BUGGY]  Node  finallyBlock  =  allCatchNodes.getFirstChild();  Node  finallyBlock  =  n.getFirstChild();  [CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        RuntimeException    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]  Node  finallyBlock  =  allCatchNodes.getFirstChild();  Node  finallyBlock  =  n.getFirstChild();  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node    finallyBlock    =    allCatchNodes.getFirstChild();    Node  finallyBlock  =  n.getFirstChild();	  	non-compiled	[CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	11	None	add
4	[BUG]  [BUGGY]  Node  finallyBlock  =  allCatchNodes.getFirstChild();  Node  finallyBlock  =  allSatchNodes.getFirstChild();  [CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          RuntimeException    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]  Node  finallyBlock  =  allCatchNodes.getFirstChild();  Node  finallyBlock  =  allSatchNodes.getFirstChild();  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node    finallyBlock    =    allCatchNodes.getFirstChild();    Node  finallyBlock  =  allSatchNodes.getFirstChild();	  	non-compiled	[CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	11	None	add
5	[BUG]  [BUGGY]  Node  finallyBlock  =  allCatchNodes.getFirstChild();  Node  finallyBlock  =  n.getLastChild();  [CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]            RuntimeException    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]  Node  finallyBlock  =  allCatchNodes.getFirstChild();  Node  finallyBlock  =  n.getLastChild();  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node    finallyBlock    =    allCatchNodes.getFirstChild();    Node  finallyBlock  =  n.getLastChild();	  	non-compiled	[CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	11	None	add
6	[BUG]  [BUGGY]  Node  finallyBlock  =  allCatchNodes.getFirstChild();  Node  finallyBlock  =  anyCatchNodes.getFirstChild();  [CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]              RuntimeException    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]  Node  finallyBlock  =  allCatchNodes.getFirstChild();  Node  finallyBlock  =  anyCatchNodes.getFirstChild();  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node    finallyBlock    =    allCatchNodes.getFirstChild();    Node  finallyBlock  =  anyCatchNodes.getFirstChild();	  	non-compiled	[CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	11	None	add
7	[BUG]  [BUGGY]  Node  finallyBlock  =  nodes.getFirstChild();  [CE]  cannot  find  symbol  nodes  [FE]    RuntimeException    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]  Node  finallyBlock  =  nodes.getFirstChild();  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  nodes.getFirstChild();	  Node    finallyBlock    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  nodes	12	None	replace
8	[BUG]  [BUGGY]  Node  finallyBlock  =  catchNode.removeFirstChild();  [CE]  cannot  find  symbol  catchNode  [FE]    IllegalStateException    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]  Node  finallyBlock  =  catchNode.removeFirstChild();  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  catchNode.removeFirstChild();	  Node    finallyBlock    =    n.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol  catchNode	21	None	replace
9	[BUG]  [BUGGY]  Node  finallyBlock  =  catchNode.getFirstChild();  [CE]  cannot  find  symbol  catchNode  [FE]      IllegalStateException    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]  Node  finallyBlock  =  catchNode.getFirstChild();  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  catchNode.getFirstChild();	  Node    finallyBlock    =    n.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol  catchNode	21	None	replace
10	[BUG]  [BUGGY]  n  =  n.getLastChild();  [CE]  cannot  find  symbol  finallyBlock  [FE]    RuntimeException    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]  n  =  n.getLastChild();  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	n  =  n.getLastChild();	      n    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	24	None	replace
11	[BUG]  [BUGGY]  n  =  n.getNext();  [CE]  cannot  find  symbol  finallyBlock  [FE]      RuntimeException    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]  n  =  n.getNext();  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	n  =  n.getNext();	      n    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	24	None	replace
12	[BUG]  [BUGGY]  Preconditions.checkState(n.isFinally());  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]  Preconditions.checkState(n.isFinally());  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.isFinally());	      Preconditions.checkState(n.isLabel());    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
13	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  finallyBlock  [FE]      RuntimeException    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	      Preconditions.checkState(n.isLabel());    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	19	None	replace
14	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  [CE]  cannot  find  symbol  finallyBlock  [FE]        RuntimeException    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.getType()  ==  Token.BLOCK);	      Preconditions.checkState(n.isLabel());    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	19	None	replace
15	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  finallyBlock  [FE]          RuntimeException    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);	      Preconditions.checkState(n.isLabel());    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	19	None	replace
16	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getLastChild();  [CE]  cannot  find  symbol  finallyBlock  [FE]    AssertionFailedError    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]  Node  elseBlock  =  allCatchNodes.getLastChild();  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  elseBlock  =  allCatchNodes.getLastChild();	      Node    elseBlock    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	2	None	replace
17	[BUG]  [BUGGY]  Node  elseBlock  =  n.getLastChild();  [CE]  cannot  find  symbol  finallyBlock  [FE]      AssertionFailedError    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]  Node  elseBlock  =  n.getLastChild();  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  elseBlock  =  n.getLastChild();	      Node    elseBlock    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	2	None	replace
18	[BUG]  [BUGGY]  Node  elseBlock  =  nodes.getFirstChild();  [CE]  cannot  find  symbol  nodes  [FE]        AssertionFailedError    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]  Node  elseBlock  =  nodes.getFirstChild();  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  elseBlock  =  nodes.getFirstChild();	      Node    elseBlock    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  nodes	2	None	replace
19	[BUG]  [BUGGY]  Node  finallyBlock  =  n.removeFirstChild();  Node  finallyBlock  =  n.removeFirstChild();  [CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    IllegalStateException    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]  Node  finallyBlock  =  n.removeFirstChild();  Node  finallyBlock  =  n.removeFirstChild();  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node    finallyBlock    =    n.removeFirstChild();    Node  finallyBlock  =  n.removeFirstChild();	  	non-compiled	[CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	20	None	add
20	[BUG]  [BUGGY]  Node  finallyBlock  =  n.removeFirstChild();  Node  finallyBlock  =  n.removeFirstChild();  }  tryMinimizeExits(finallyBlock,  exitType,  labelName);  [CE]  illegal  start  of  type  [FE]      IllegalStateException    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]  Node  finallyBlock  =  n.removeFirstChild();  Node  finallyBlock  =  n.removeFirstChild();  }  tryMinimizeExits(finallyBlock,  exitType,  labelName);  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node    finallyBlock    =    n.removeFirstChild();    Node  finallyBlock  =  n.removeFirstChild();  }  tryMinimizeExits(finallyBlock,  exitType,  labelName);	  	non-compiled	[CE]  illegal  start  of  type	20	None	add
21	[BUG]  [BUGGY]  Node  finallyBlock  =  n.removeFirstChild();  Node  finallyBlock  =  n.removeFirstChild();  }  else  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  [CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        IllegalStateException    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]  Node  finallyBlock  =  n.removeFirstChild();  Node  finallyBlock  =  n.removeFirstChild();  }  else  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node    finallyBlock    =    n.removeFirstChild();    Node  finallyBlock  =  n.removeFirstChild();  }  else  {  tryMinimizeExits(finallyBlock,  exitType,  labelName);	  	non-compiled	[CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	20	None	add
22	[BUG]  [BUGGY]  Node  finallyBlock  =  n.removeFirstChild();  Node  finallyBlock  =  n.removeFirstChild();  }  else  {  tryMinimizeExits(labelName,  exitType,  labelName);  [CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          IllegalStateException    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]  Node  finallyBlock  =  n.removeFirstChild();  Node  finallyBlock  =  n.removeFirstChild();  }  else  {  tryMinimizeExits(labelName,  exitType,  labelName);  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node    finallyBlock    =    n.removeFirstChild();    Node  finallyBlock  =  n.removeFirstChild();  }  else  {  tryMinimizeExits(labelName,  exitType,  labelName);	  	non-compiled	[CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	20	None	add
23	[BUG]  [BUGGY]  Node  finallyBlock  =  n.removeFirstChild();  Node  finallyBlock  =  n.removeLastChild();  [CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]            IllegalStateException    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]  Node  finallyBlock  =  n.removeFirstChild();  Node  finallyBlock  =  n.removeLastChild();  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node    finallyBlock    =    n.removeFirstChild();    Node  finallyBlock  =  n.removeLastChild();	  	non-compiled	[CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	20	None	add
24	[BUG]  [BUGGY]  Node  finallyBlock  =  n.removeFirstChild();  Node  finallyBlock  =  n.removeFirstChild();  }  elseBlock.setLabelName(labelName);  [CE]  illegal  start  of  type  [FE]              IllegalStateException    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]  Node  finallyBlock  =  n.removeFirstChild();  Node  finallyBlock  =  n.removeFirstChild();  }  elseBlock.setLabelName(labelName);  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node    finallyBlock    =    n.removeFirstChild();    Node  finallyBlock  =  n.removeFirstChild();  }  elseBlock.setLabelName(labelName);	  	non-compiled	[CE]  illegal  start  of  type	20	None	add
25	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isFinally(n));  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]  Preconditions.checkState(NodeUtil.isFinally(n));  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(NodeUtil.isFinally(n));	      Preconditions.checkState(NodeUtil.hasFinally(n));    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
26	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isExpressionNode(n));  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]  Preconditions.checkState(NodeUtil.isExpressionNode(n));  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(NodeUtil.isExpressionNode(n));	      Preconditions.checkState(NodeUtil.hasFinally(n));    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
27	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(n));  [CE]  cannot  find  symbol  finallyBlock  [FE]        AssertionFailedError    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]  Preconditions.checkState(NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(n));  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(NodeUtil.hasFinally(n)||  NodeUtil.hasFinally(n));	      Preconditions.checkState(NodeUtil.hasFinally(n));    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	17	None	replace
28	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isLabelVar(n));  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]  Preconditions.checkState(NodeUtil.isLabelVar(n));  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(NodeUtil.isLabelVar(n));	      Preconditions.checkState(NodeUtil.hasFinally(n));    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
29	[BUG]  [BUGGY]  Node  finallyBlock  =  allCatchNodes.getLastChild();  Node  finallyBlock  =  allCatchNodes.getLastChild();  [CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    RuntimeException    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]  Node  finallyBlock  =  allCatchNodes.getLastChild();  Node  finallyBlock  =  allCatchNodes.getLastChild();  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node    finallyBlock    =    allCatchNodes.getLastChild();    Node  finallyBlock  =  allCatchNodes.getLastChild();	  	non-compiled	[CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	13	None	add
30	[BUG]  [BUGGY]  Node  finallyBlock  =  allCatchNodes.getLastChild();  Node  finallyBlock  =  allCatchNodes.getFirstChild();  [CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      RuntimeException    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]  Node  finallyBlock  =  allCatchNodes.getLastChild();  Node  finallyBlock  =  allCatchNodes.getFirstChild();  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node    finallyBlock    =    allCatchNodes.getLastChild();    Node  finallyBlock  =  allCatchNodes.getFirstChild();	  	non-compiled	[CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	13	None	add
31	[BUG]  [BUGGY]  Node  finallyBlock  =  allCatchNodes.getLastChild();  Node  finallyBlock  =  allSatchNodes.getLastChild();  [CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        RuntimeException    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]  Node  finallyBlock  =  allCatchNodes.getLastChild();  Node  finallyBlock  =  allSatchNodes.getLastChild();  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node    finallyBlock    =    allCatchNodes.getLastChild();    Node  finallyBlock  =  allSatchNodes.getLastChild();	  	non-compiled	[CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	13	None	add
32	[BUG]  [BUGGY]  Node  finallyBlock  =  allCatchNodes.getLastChild();  Node  finallyBlock  =  n.getLastChild();  [CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          RuntimeException    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]  Node  finallyBlock  =  allCatchNodes.getLastChild();  Node  finallyBlock  =  n.getLastChild();  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node    finallyBlock    =    allCatchNodes.getLastChild();    Node  finallyBlock  =  n.getLastChild();	  	non-compiled	[CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	13	None	add
33	[BUG]  [BUGGY]  Node  finallyBlock  =  allCatchNodes.getLastChild();  Node  finallyBlock  =  anyCatchNodes.getLastChild();  [CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]            RuntimeException    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]  Node  finallyBlock  =  allCatchNodes.getLastChild();  Node  finallyBlock  =  anyCatchNodes.getLastChild();  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node    finallyBlock    =    allCatchNodes.getLastChild();    Node  finallyBlock  =  anyCatchNodes.getLastChild();	  	non-compiled	[CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	13	None	add
34	[BUG]  [BUGGY]  Node  elseBlock  =  catchNode.getFirstChild();  [CE]  cannot  find  symbol  catchNode  [FE]    AssertionFailedError    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]  Node  elseBlock  =  catchNode.getFirstChild();  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  elseBlock  =  catchNode.getFirstChild();	      Node    elseBlock    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  catchNode	4	None	replace
35	[BUG]  [BUGGY]  Node  elseBlock  =  node.getFirstChild();  [CE]  cannot  find  symbol  node  [FE]      AssertionFailedError    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]  Node  elseBlock  =  node.getFirstChild();  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  elseBlock  =  node.getFirstChild();	      Node    elseBlock    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  node	4	None	replace
36	[BUG]  [BUGGY]  Node  finallyBlock  =  catchNode.getLastChild();  [CE]  cannot  find  symbol  catchNode  [FE]              AssertionFailedError    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]  Node  finallyBlock  =  catchNode.getLastChild();  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  catchNode.getLastChild();	  Node    finallyBlock    =    node.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  catchNode	15	None	replace
37	[BUG]  [BUGGY]  Node  finallyBlock  =  getFinallyBlock(n.getLastChild());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]  Node  finallyBlock  =  getFinallyBlock(n.getLastChild());  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  getFinallyBlock(n.getLastChild());	  Node    finallyBlock    =    node.getLastChild();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
38	[BUG]  [BUGGY]  Node  finallyBlock  =  getFinallyBlock(n.getFirstChild());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]  Node  finallyBlock  =  getFinallyBlock(n.getFirstChild());  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  getFinallyBlock(n.getFirstChild());	  Node    finallyBlock    =    node.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
39	[BUG]  [BUGGY]  Node  c  =  n.getFirstChild();  [CE]  cannot  find  symbol  finallyBlock  [FE]    AssertionFailedError    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]  Node  c  =  n.getFirstChild();  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  c  =  n.getFirstChild();	      Node    c    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	9	None	replace
40	[BUG]  [BUGGY]  Node  c  =  allCatchNodes.getLastChild();  [CE]  cannot  find  symbol  finallyBlock  [FE]      AssertionFailedError    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]  Node  c  =  allCatchNodes.getLastChild();  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  c  =  allCatchNodes.getLastChild();	      Node    c    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	9	None	replace
41	[BUG]  [BUGGY]  Node  c  =  allCatchNodes.get(0);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]  Node  c  =  allCatchNodes.get(0);  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  c  =  allCatchNodes.get(0);	      Node    c    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
42	[BUG]  [BUGGY]  Node  c  =  nodes.getFirstChild();  [CE]  cannot  find  symbol  nodes  [FE]          AssertionFailedError    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]  Node  c  =  nodes.getFirstChild();  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  c  =  nodes.getFirstChild();	      Node    c    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  nodes	9	None	replace
43	[BUG]  [BUGGY]      Node  c  =  allCatchNodes.getFirstChild();  Node  c  =  allCatchNodes.getFirstChild();  [CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]      Node  c  =  allCatchNodes.getFirstChild();  Node  c  =  allCatchNodes.getFirstChild();  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	        Node    c    =    allCatchNodes.getFirstChild();    Node  c  =  allCatchNodes.getFirstChild();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	8	None	add
44	[BUG]  [BUGGY]      Node  c  =  allCatchNodes.getFirstChild();  Node  c  =  allCatchNodes.getLastChild();  [CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      AssertionFailedError    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]      Node  c  =  allCatchNodes.getFirstChild();  Node  c  =  allCatchNodes.getLastChild();  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	        Node    c    =    allCatchNodes.getFirstChild();    Node  c  =  allCatchNodes.getLastChild();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	8	None	add
45	[BUG]  [BUGGY]      Node  c  =  allCatchNodes.getFirstChild();  Node  c  =  allSatchNodes.getFirstChild();  [CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        AssertionFailedError    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]      Node  c  =  allCatchNodes.getFirstChild();  Node  c  =  allSatchNodes.getFirstChild();  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	        Node    c    =    allCatchNodes.getFirstChild();    Node  c  =  allSatchNodes.getFirstChild();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	8	None	add
46	[BUG]  [BUGGY]      Node  c  =  allCatchNodes.getFirstChild();  Node  c  =  allCatchNodes.getfirstChild();  [CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          AssertionFailedError    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]      Node  c  =  allCatchNodes.getFirstChild();  Node  c  =  allCatchNodes.getfirstChild();  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	        Node    c    =    allCatchNodes.getFirstChild();    Node  c  =  allCatchNodes.getfirstChild();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	8	None	add
47	[BUG]  [BUGGY]      Node  c  =  allCatchNodes.getFirstChild();  Node  c  =  AllCatchNodes.getFirstChild();  [CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]            AssertionFailedError    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]      Node  c  =  allCatchNodes.getFirstChild();  Node  c  =  AllCatchNodes.getFirstChild();  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	        Node    c    =    allCatchNodes.getFirstChild();    Node  c  =  AllCatchNodes.getFirstChild();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	8	None	add
48	[BUG]  [BUGGY]  Node  finallyBlock  =  allCatchNodes.get(0);  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]  Node  finallyBlock  =  allCatchNodes.get(0);  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  allCatchNodes.get(0);	  Node    finallyBlock    =    allCatchNodes.getLastChild();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
49	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]      n  =  n.getFirstChild();  n  =  n.getFirstChild();  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	add	        n    =    n.getFirstChild();    n  =  n.getFirstChild();	  	compilable	  [FE]  RuntimeException  	23	1	add
50	[BUG]  [BUGGY]      n  =  n.getFirstChild();  n  =  n.getFirstChild();  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]      n  =  n.getFirstChild();  n  =  n.getFirstChild();  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	        n    =    n.getFirstChild();    n  =  n.getFirstChild();	  	compilable	  [FE]  RuntimeException  	23	1	add
51	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]      n  =  n.getFirstChild();  n  =  n.getLastChild();  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	add	        n    =    n.getFirstChild();    n  =  n.getLastChild();	  	compilable	  [FE]  RuntimeException  	23	1	add
52	[BUG]  [BUGGY]      n  =  n.getFirstChild();  n  =  n.getLastChild();  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]      n  =  n.getFirstChild();  n  =  n.getLastChild();  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	        n    =    n.getFirstChild();    n  =  n.getLastChild();	  	compilable	  [FE]  RuntimeException  	23	1	add
53	[BUG]  [BUGGY]      n  =  n.getFirstChild();  Node  n  =  n.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        RuntimeException    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]      n  =  n.getFirstChild();  Node  n  =  n.getFirstChild();  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	        n    =    n.getFirstChild();    Node  n  =  n.getFirstChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	23	None	add
54	[BUG]  [BUGGY]      n  =  n.getFirstChild();  int  n  =  n.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          RuntimeException    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]      n  =  n.getFirstChild();  int  n  =  n.getFirstChild();  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	        n    =    n.getFirstChild();    int  n  =  n.getFirstChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	23	None	add
55	[BUG]  [BUGGY]      n  =  n.getFirstChild();  no  =  n.getFirstChild();  [CE]  cannot  find  symbol  no  [FE]            RuntimeException    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]      n  =  n.getFirstChild();  no  =  n.getFirstChild();  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	        n    =    n.getFirstChild();    no  =  n.getFirstChild();	  	non-compiled	[CE]  cannot  find  symbol  no	23	None	add
56	[BUG]  [BUGGY]      n  =  n.getFirstChild();  n  =  n.getFirstChild();  }  [CE]  illegal  start  of  type  [FE]              RuntimeException    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]      n  =  n.getFirstChild();  n  =  n.getFirstChild();  }  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	        n    =    n.getFirstChild();    n  =  n.getFirstChild();  }	  	non-compiled	[CE]  illegal  start  of  type	23	None	add
57	[BUG]  [BUGGY]  Node  n  =  allCatchNodes.getLastChild();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]            AssertionFailedError    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]  Node  n  =  allCatchNodes.getLastChild();  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  n  =  allCatchNodes.getLastChild();	      Node    n    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	5	None	replace
58	[BUG]  [BUGGY]  Node  n  =  this.allCatchNodes.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]              AssertionFailedError    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]  Node  n  =  this.allCatchNodes.getFirstChild();  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  n  =  this.allCatchNodes.getFirstChild();	      Node    n    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	5	None	replace
59	[BUG]  [BUGGY]  Node  n  =  allCatchNodes.get(0);  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                AssertionFailedError    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]  Node  n  =  allCatchNodes.get(0);  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  n  =  allCatchNodes.get(0);	      Node    n    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	5	None	replace
60	[BUG]  [BUGGY]  Node  n  =  anyCatchNodes.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                  AssertionFailedError    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]  Node  n  =  anyCatchNodes.getFirstChild();  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  n  =  anyCatchNodes.getFirstChild();	      Node    n    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	5	None	replace
61	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]      Preconditions.checkState(n.isLabel());  Preconditions.checkState(n.isLabel());  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	add	        Preconditions.checkState(n.isLabel());    Preconditions.checkState(n.isLabel());	  	compilable	  [FE]  RuntimeException  	18	2	add
62	[BUG]  [BUGGY]      Preconditions.checkState(n.isLabel());  Preconditions.checkState(n.isLabel());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]      Preconditions.checkState(n.isLabel());  Preconditions.checkState(n.isLabel());  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	        Preconditions.checkState(n.isLabel());    Preconditions.checkState(n.isLabel());	  	compilable	  [FE]  RuntimeException  	18	2	add
63	[BUG]  [BUGGY]      Preconditions.checkState(n.isLabel());  Node  n  =  allCatchNodes.getFirstChild();  Preconditions.checkState(n.isLabel());  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      RuntimeException    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]      Preconditions.checkState(n.isLabel());  Node  n  =  allCatchNodes.getFirstChild();  Preconditions.checkState(n.isLabel());  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	        Preconditions.checkState(n.isLabel());    Node  n  =  allCatchNodes.getFirstChild();  Preconditions.checkState(n.isLabel());	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	18	None	add
64	[BUG]  [BUGGY]      Preconditions.checkState(n.isLabel());  Node  n  =  allCatchNodes.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        RuntimeException    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]      Preconditions.checkState(n.isLabel());  Node  n  =  allCatchNodes.getFirstChild();  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	        Preconditions.checkState(n.isLabel());    Node  n  =  allCatchNodes.getFirstChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	18	None	add
65	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]      Preconditions.checkState(n.isLabel());  Preconditions.checkState(NodeUtil.hasFinally(n));  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	add	        Preconditions.checkState(n.isLabel());    Preconditions.checkState(NodeUtil.hasFinally(n));	  	compilable	  [FE]  RuntimeException  	18	2	add
66	[BUG]  [BUGGY]      Preconditions.checkState(n.isLabel());  Preconditions.checkState(NodeUtil.hasFinally(n));  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]      Preconditions.checkState(n.isLabel());  Preconditions.checkState(NodeUtil.hasFinally(n));  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	        Preconditions.checkState(n.isLabel());    Preconditions.checkState(NodeUtil.hasFinally(n));	  	compilable	  [FE]  RuntimeException  	18	2	add
67	[BUG]  [BUGGY]      Preconditions.checkState(n.isLabel());  Node  n  =  allCatchNodes.getFirstChild();  preconditions.checkState(n.isLabel());  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]            RuntimeException    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]      Preconditions.checkState(n.isLabel());  Node  n  =  allCatchNodes.getFirstChild();  preconditions.checkState(n.isLabel());  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	        Preconditions.checkState(n.isLabel());    Node  n  =  allCatchNodes.getFirstChild();  preconditions.checkState(n.isLabel());	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	18	None	add
68	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]      Preconditions.checkState(n.isLabel());  Preconditions.checkState(n.isLabel());  }  else  if(NodeUtil.hasFinally(n))  {  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	add	        Preconditions.checkState(n.isLabel());    Preconditions.checkState(n.isLabel());  }  else  if(NodeUtil.hasFinally(n))  {	  	compilable	  [FE]  RuntimeException  	18	2	add
69	[BUG]  [BUGGY]      Preconditions.checkState(n.isLabel());  Preconditions.checkState(n.isLabel());  }  else  if(NodeUtil.hasFinally(n))  {  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]      Preconditions.checkState(n.isLabel());  Preconditions.checkState(n.isLabel());  }  else  if(NodeUtil.hasFinally(n))  {  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	        Preconditions.checkState(n.isLabel());    Preconditions.checkState(n.isLabel());  }  else  if(NodeUtil.hasFinally(n))  {	  	compilable	  [FE]  RuntimeException  	18	2	add
70	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]      Preconditions.checkState(NodeUtil.hasFinally(n));  Preconditions.checkState(NodeUtil.hasFinally(n));  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	add	        Preconditions.checkState(NodeUtil.hasFinally(n));    Preconditions.checkState(NodeUtil.hasFinally(n));	  	compilable	  [FE]  AssertionFailedError  	16	2	add
71	[BUG]  [BUGGY]      Preconditions.checkState(NodeUtil.hasFinally(n));  Preconditions.checkState(NodeUtil.hasFinally(n));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]      Preconditions.checkState(NodeUtil.hasFinally(n));  Preconditions.checkState(NodeUtil.hasFinally(n));  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	        Preconditions.checkState(NodeUtil.hasFinally(n));    Preconditions.checkState(NodeUtil.hasFinally(n));	  	compilable	  [FE]  AssertionFailedError  	16	2	add
72	[BUG]  [BUGGY]      Preconditions.checkState(NodeUtil.hasFinally(n));  Node  n  =  allCatchNodes.getFirstChild();  Preconditions.checkState(NodeUtil.hasFinally(n));  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      AssertionFailedError    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]      Preconditions.checkState(NodeUtil.hasFinally(n));  Node  n  =  allCatchNodes.getFirstChild();  Preconditions.checkState(NodeUtil.hasFinally(n));  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	        Preconditions.checkState(NodeUtil.hasFinally(n));    Node  n  =  allCatchNodes.getFirstChild();  Preconditions.checkState(NodeUtil.hasFinally(n));	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	16	None	add
73	[BUG]  [BUGGY]      Preconditions.checkState(NodeUtil.hasFinally(n));  Preconditions.checkState(NodeUtil.hasFinally(n));  }  else  {  Node  finallyBlock  =  n.getLastChild();  [CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        AssertionFailedError    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]      Preconditions.checkState(NodeUtil.hasFinally(n));  Preconditions.checkState(NodeUtil.hasFinally(n));  }  else  {  Node  finallyBlock  =  n.getLastChild();  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	        Preconditions.checkState(NodeUtil.hasFinally(n));    Preconditions.checkState(NodeUtil.hasFinally(n));  }  else  {  Node  finallyBlock  =  n.getLastChild();	  	non-compiled	[CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	16	None	add
74	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]      Preconditions.checkState(NodeUtil.hasFinally(n));  Preconditions.checkState(NodeUtil.hasFinally(n));  n  =  n.getLastChild();  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	add	        Preconditions.checkState(NodeUtil.hasFinally(n));    Preconditions.checkState(NodeUtil.hasFinally(n));  n  =  n.getLastChild();	  	compilable	  [FE]  AssertionFailedError  	16	2	add
75	[BUG]  [BUGGY]      Preconditions.checkState(NodeUtil.hasFinally(n));  Preconditions.checkState(NodeUtil.hasFinally(n));  n  =  n.getLastChild();  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]      Preconditions.checkState(NodeUtil.hasFinally(n));  Preconditions.checkState(NodeUtil.hasFinally(n));  n  =  n.getLastChild();  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	        Preconditions.checkState(NodeUtil.hasFinally(n));    Preconditions.checkState(NodeUtil.hasFinally(n));  n  =  n.getLastChild();	  	compilable	  [FE]  AssertionFailedError  	16	2	add
76	[BUG]  [BUGGY]      Node  elseBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]      Node  elseBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	        Node    elseBlock    =    n.getFirstChild();    Node  elseBlock  =  n.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	3	None	add
77	[BUG]  [BUGGY]      Node  elseBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getLastChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      AssertionFailedError    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]      Node  elseBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getLastChild();  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	        Node    elseBlock    =    n.getFirstChild();    Node  elseBlock  =  n.getLastChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	3	None	add
78	[BUG]  [BUGGY]      Node  elseBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getfirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        AssertionFailedError    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]      Node  elseBlock  =  n.getFirstChild();  Node  elseBlock  =  n.getfirstChild();  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	        Node    elseBlock    =    n.getFirstChild();    Node  elseBlock  =  n.getfirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	3	None	add
79	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]      Node  elseBlock  =  n.getFirstChild();  Node  otherBlock  =  n.getFirstChild();  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	add	        Node    elseBlock    =    n.getFirstChild();    Node  otherBlock  =  n.getFirstChild();	  	compilable	  [FE]  AssertionFailedError  	3	2	add
80	[BUG]  [BUGGY]      Node  elseBlock  =  n.getFirstChild();  Node  otherBlock  =  n.getFirstChild();  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]      Node  elseBlock  =  n.getFirstChild();  Node  otherBlock  =  n.getFirstChild();  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	        Node    elseBlock    =    n.getFirstChild();    Node  otherBlock  =  n.getFirstChild();	  	compilable	  [FE]  AssertionFailedError  	3	2	add
81	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]      Node  elseBlock  =  n.getFirstChild();  Node  thenBlock  =  n.getFirstChild();  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	add	        Node    elseBlock    =    n.getFirstChild();    Node  thenBlock  =  n.getFirstChild();	  	compilable	  [FE]  AssertionFailedError  	3	2	add
82	[BUG]  [BUGGY]      Node  elseBlock  =  n.getFirstChild();  Node  thenBlock  =  n.getFirstChild();  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]      Node  elseBlock  =  n.getFirstChild();  Node  thenBlock  =  n.getFirstChild();  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	        Node    elseBlock    =    n.getFirstChild();    Node  thenBlock  =  n.getFirstChild();	  	compilable	  [FE]  AssertionFailedError  	3	2	add
83	[BUG]  [BUGGY]  Node  labelBlock  =  n.getLastChild();  [CE]  cannot  find  symbol  finallyBlock  [FE]    AssertionFailedError    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]  Node  labelBlock  =  n.getLastChild();  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  labelBlock  =  n.getLastChild();	      Node    labelBlock    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	7	None	replace
84	[BUG]  [BUGGY]  Node  labelBlock  =  catchNode.getFirstChild();  [CE]  cannot  find  symbol  catchNode  [FE]      AssertionFailedError    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]  Node  labelBlock  =  catchNode.getFirstChild();  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  labelBlock  =  catchNode.getFirstChild();	      Node    labelBlock    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  catchNode	7	None	replace
85	[BUG]  [BUGGY]  Node  labelBlock  =  allCatchNodes.getFirstChild();  [CE]  cannot  find  symbol  finallyBlock  [FE]        AssertionFailedError    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]  Node  labelBlock  =  allCatchNodes.getFirstChild();  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  labelBlock  =  allCatchNodes.getFirstChild();	      Node    labelBlock    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	7	None	replace
86	[BUG]  [BUGGY]  Node  labelBlock  =  n.getNext();  [CE]  cannot  find  symbol  finallyBlock  [FE]          AssertionFailedError    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]  Node  labelBlock  =  n.getNext();  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  labelBlock  =  n.getNext();	      Node    labelBlock    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	7	None	replace
87	[BUG]  [BUGGY]      Node  labelBlock  =  n.getFirstChild();  Node  labelBlock  =  n.getFirstChild();  [CE]  variable  labelBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]      Node  labelBlock  =  n.getFirstChild();  Node  labelBlock  =  n.getFirstChild();  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	        Node    labelBlock    =    n.getFirstChild();    Node  labelBlock  =  n.getFirstChild();	  	non-compiled	[CE]  variable  labelBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	6	None	add
88	[BUG]  [BUGGY]      Node  labelBlock  =  n.getFirstChild();  Node  labelBlock  =  n.getLastChild();  [CE]  variable  labelBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      AssertionFailedError    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]      Node  labelBlock  =  n.getFirstChild();  Node  labelBlock  =  n.getLastChild();  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	        Node    labelBlock    =    n.getFirstChild();    Node  labelBlock  =  n.getLastChild();	  	non-compiled	[CE]  variable  labelBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	6	None	add
89	[BUG]  [BUGGY]      Node  labelBlock  =  n.getFirstChild();  Node  labelBlock  =  n.getfirstChild();  [CE]  variable  labelBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        AssertionFailedError    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]      Node  labelBlock  =  n.getFirstChild();  Node  labelBlock  =  n.getfirstChild();  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	        Node    labelBlock    =    n.getFirstChild();    Node  labelBlock  =  n.getfirstChild();	  	non-compiled	[CE]  variable  labelBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	6	None	add
90	[BUG]  [BUGGY]      Node  labelBlock  =  n.getFirstChild();  Node  labelBlock  =  n.getFirstChild());  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]      Node  labelBlock  =  n.getFirstChild();  Node  labelBlock  =  n.getFirstChild());  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	        Node    labelBlock    =    n.getFirstChild();    Node  labelBlock  =  n.getFirstChild());	  	non-compiled	[CE]  ';'  expected	6	None	add
91	[BUG]  [BUGGY]  Node  elseBlock  =  n.get(0);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]  Node  elseBlock  =  n.get(0);  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  elseBlock  =  n.get(0);	      Node    elseBlock    =    allCatchNodes.get(0);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
92	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.get(1);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]  Node  elseBlock  =  allCatchNodes.get(1);  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  elseBlock  =  allCatchNodes.get(1);	      Node    elseBlock    =    allCatchNodes.get(0);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
93	[BUG]  [BUGGY]  Node  elseBlock  =  catchNodes.get(0);  [CE]  cannot  find  symbol  catchNodes  [FE]                      AssertionFailedError    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]  Node  elseBlock  =  catchNodes.get(0);  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  elseBlock  =  catchNodes.get(0);	      Node    elseBlock    =    allCatchNodes.get(0);    	non-compiled	[CE]  cannot  find  symbol  catchNodes	10	None	replace
94	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.get(n);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]  Node  elseBlock  =  allCatchNodes.get(n);  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  elseBlock  =  allCatchNodes.get(n);	      Node    elseBlock    =    allCatchNodes.get(0);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
95	[BUG]  [BUGGY]      Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]      Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	        Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  elseBlock  =  allCatchNodes.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	1	None	add
96	[BUG]  [BUGGY]      Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getLastChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      AssertionFailedError    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]      Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getLastChild();  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	        Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  elseBlock  =  allCatchNodes.getLastChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	1	None	add
97	[BUG]  [BUGGY]      Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getfirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        AssertionFailedError    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]      Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getfirstChild();  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	        Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  elseBlock  =  allCatchNodes.getfirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	1	None	add
98	[BUG]  [BUGGY]      Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  AllCatchNodes.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          AssertionFailedError    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]      Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  AllCatchNodes.getFirstChild();  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	        Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  elseBlock  =  AllCatchNodes.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	1	None	add
99	[BUG]  [BUGGY]      Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]            AssertionFailedError    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]      Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  n.getFirstChild();  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	        Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  elseBlock  =  n.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	1	None	add
100	[BUG]  [BUGGY]  Node  elseBlock  =  n.getNext();  [CE]  cannot  find  symbol  finallyBlock  [FE]    AssertionFailedError    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]  Node  elseBlock  =  n.getNext();  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  elseBlock  =  n.getNext();	      Node    elseBlock    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	4	None	replace
101	[BUG]  [BUGGY]      Node  c  =  allCatchNodes.getFirstChild();  Node  c  =  ALLCatchNodes.getFirstChild();  [CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]      Node  c  =  allCatchNodes.getFirstChild();  Node  c  =  ALLCatchNodes.getFirstChild();  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	        Node    c    =    allCatchNodes.getFirstChild();    Node  c  =  ALLCatchNodes.getFirstChild();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	8	None	add
102	[BUG]  [BUGGY]      Node  labelBlock  =  n.getFirstChild();  Preconditions.checkState(n.isLabel());  Node  labelBlock  =  n.getFirstChild();  [CE]  variable  labelBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]      Node  labelBlock  =  n.getFirstChild();  Preconditions.checkState(n.isLabel());  Node  labelBlock  =  n.getFirstChild();  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	        Node    labelBlock    =    n.getFirstChild();    Preconditions.checkState(n.isLabel());  Node  labelBlock  =  n.getFirstChild();	  	non-compiled	[CE]  variable  labelBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	6	None	add
103	[BUG]  [BUGGY]      Node  labelBlock  =  n.getFirstChild();  Node  labelBlock  =  n.getFirstChild();  }  else  {  tryMinimizeExits(labelName,  exitType,  labelName);  [CE]  variable  labelBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      AssertionFailedError    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]      Node  labelBlock  =  n.getFirstChild();  Node  labelBlock  =  n.getFirstChild();  }  else  {  tryMinimizeExits(labelName,  exitType,  labelName);  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	        Node    labelBlock    =    n.getFirstChild();    Node  labelBlock  =  n.getFirstChild();  }  else  {  tryMinimizeExits(labelName,  exitType,  labelName);	  	non-compiled	[CE]  variable  labelBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	6	None	add
104	[BUG]  [BUGGY]      Node  labelBlock  =  n.getFirstChild();  Node  labelBlock  =  n.getFirstChild();  Item  labelBlock  =  n.getLastChild();  [CE]  variable  labelBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        AssertionFailedError    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]      Node  labelBlock  =  n.getFirstChild();  Node  labelBlock  =  n.getFirstChild();  Item  labelBlock  =  n.getLastChild();  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	        Node    labelBlock    =    n.getFirstChild();    Node  labelBlock  =  n.getFirstChild();  Item  labelBlock  =  n.getLastChild();	  	non-compiled	[CE]  variable  labelBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	6	None	add
105	[BUG]  [BUGGY]      Node  labelBlock  =  n.getFirstChild();  Node  labelBlock  =  n.getFirstChild();  this.labelName  =  n.getLastChild();  [CE]  variable  labelBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          AssertionFailedError    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]      Node  labelBlock  =  n.getFirstChild();  Node  labelBlock  =  n.getFirstChild();  this.labelName  =  n.getLastChild();  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	        Node    labelBlock    =    n.getFirstChild();    Node  labelBlock  =  n.getFirstChild();  this.labelName  =  n.getLastChild();	  	non-compiled	[CE]  variable  labelBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	6	None	add
106	[BUG]  [BUGGY]  Node  labelBlock  =  node.getFirstChild();  [CE]  cannot  find  symbol  node  [FE]    AssertionFailedError    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]  Node  labelBlock  =  node.getFirstChild();  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  labelBlock  =  node.getFirstChild();	      Node    labelBlock    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  node	7	None	replace
107	[BUG]  [BUGGY]      Preconditions.checkState(NodeUtil.hasFinally(n));  preconditions.checkState(NodeUtil.hasFinally(n));  [CE]  cannot  find  symbol  preconditions  [FE]    AssertionFailedError    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]      Preconditions.checkState(NodeUtil.hasFinally(n));  preconditions.checkState(NodeUtil.hasFinally(n));  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	        Preconditions.checkState(NodeUtil.hasFinally(n));    preconditions.checkState(NodeUtil.hasFinally(n));	  	non-compiled	[CE]  cannot  find  symbol  preconditions	16	None	add
108	[BUG]  [BUGGY]      Preconditions.checkState(NodeUtil.hasFinally(n));  Preconditions.checkState(NodeUtil.isFinally(n));  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]      Preconditions.checkState(NodeUtil.hasFinally(n));  Preconditions.checkState(NodeUtil.isFinally(n));  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	        Preconditions.checkState(NodeUtil.hasFinally(n));    Preconditions.checkState(NodeUtil.isFinally(n));	  	non-compiled	[CE]  cannot  find  symbol	16	None	add
109	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]      Preconditions.checkState(n.isLabel());  Node  labelBlock  =  n.getFirstChild();  Preconditions.checkState(n.isLabel());  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	add	        Preconditions.checkState(n.isLabel());    Node  labelBlock  =  n.getFirstChild();  Preconditions.checkState(n.isLabel());	  	compilable	  [FE]  RuntimeException  	18	2	add
110	[BUG]  [BUGGY]      Preconditions.checkState(n.isLabel());  Node  labelBlock  =  n.getFirstChild();  Preconditions.checkState(n.isLabel());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]      Preconditions.checkState(n.isLabel());  Node  labelBlock  =  n.getFirstChild();  Preconditions.checkState(n.isLabel());  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	        Preconditions.checkState(n.isLabel());    Node  labelBlock  =  n.getFirstChild();  Preconditions.checkState(n.isLabel());	  	compilable	  [FE]  RuntimeException  	18	2	add
111	[BUG]  [BUGGY]      Preconditions.checkState(n.isLabel());  Node  n  =  allCatchNodes.getFirstChild();  tryMinimizeExits(n.isLabel());  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      RuntimeException    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]      Preconditions.checkState(n.isLabel());  Node  n  =  allCatchNodes.getFirstChild();  tryMinimizeExits(n.isLabel());  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	        Preconditions.checkState(n.isLabel());    Node  n  =  allCatchNodes.getFirstChild();  tryMinimizeExits(n.isLabel());	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	18	None	add
112	[BUG]  [BUGGY]  Node  finalBlock  =  n.getLastChild();  [CE]  cannot  find  symbol  finallyBlock  [FE]              AssertionFailedError    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]  Node  finalBlock  =  n.getLastChild();  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finalBlock  =  n.getLastChild();	  Node    finallyBlock    =    node.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	15	None	replace
113	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    IllegalStateException    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]  Node  finallyBlock  =  allCatchNodes.removeFirstChild();  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	add	Node  finallyBlock  =  allCatchNodes.removeFirstChild();	  Node    finallyBlock    =    n.removeFirstChild();    	compilable	  [FE]  RuntimeException  	21	2	replace
114	[BUG]  [BUGGY]  Node  finallyBlock  =  allCatchNodes.removeFirstChild();  [FE]  RuntimeException  [FE]    IllegalStateException    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]  Node  finallyBlock  =  allCatchNodes.removeFirstChild();  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  allCatchNodes.removeFirstChild();	  Node    finallyBlock    =    n.removeFirstChild();    	compilable	  [FE]  RuntimeException  	21	2	replace
115	[BUG]  [BUGGY]  Preconditions.checkState(falseBlock.isLabel());  [CE]  cannot  find  symbol  falseBlock  [FE]    RuntimeException    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]  Preconditions.checkState(falseBlock.isLabel());  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(falseBlock.isLabel());	      Preconditions.checkState(n.isLabel());    	non-compiled	[CE]  cannot  find  symbol  falseBlock	19	None	replace
116	[BUG]  [BUGGY]  n  =  allCatchNodes.getFirstChild();  [CE]  cannot  find  symbol  finallyBlock  [FE]    RuntimeException    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]  n  =  allCatchNodes.getFirstChild();  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	n  =  allCatchNodes.getFirstChild();	      n    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	24	None	replace
117	[BUG]  [BUGGY]  n  =  node.getFirstChild();  [CE]  cannot  find  symbol  node  [FE]      RuntimeException    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]  n  =  node.getFirstChild();  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	n  =  node.getFirstChild();	      n    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  node	24	None	replace
118	[BUG]  [BUGGY]  Node  finallyBlock  =  allCatchNodes.getFirstChild();  Node  finallyBlock  =  c.getFirstChild();  [CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    RuntimeException    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]  Node  finallyBlock  =  allCatchNodes.getFirstChild();  Node  finallyBlock  =  c.getFirstChild();  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node    finallyBlock    =    allCatchNodes.getFirstChild();    Node  finallyBlock  =  c.getFirstChild();	  	non-compiled	[CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	11	None	add
119	[BUG]  [BUGGY]      n  =  n.getFirstChild();  n  =  n.getfirstChild();  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]      n  =  n.getFirstChild();  n  =  n.getfirstChild();  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	        n    =    n.getFirstChild();    n  =  n.getfirstChild();	  	non-compiled	[CE]  cannot  find  symbol	23	None	add
120	[BUG]  [BUGGY]      n  =  n.getFirstChild();  node  =  n.getFirstChild();  [CE]  cannot  find  symbol  node  [FE]      RuntimeException    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]      n  =  n.getFirstChild();  node  =  n.getFirstChild();  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	        n    =    n.getFirstChild();    node  =  n.getFirstChild();	  	non-compiled	[CE]  cannot  find  symbol  node	23	None	add
121	[BUG]  [BUGGY]  Node  finallyBlock  =  allCatchNodes.getLastChild();  Node  finallyBlock  =  ALLCatchNodes.getLastChild();  [CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    RuntimeException    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]  Node  finallyBlock  =  allCatchNodes.getLastChild();  Node  finallyBlock  =  ALLCatchNodes.getLastChild();  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node    finallyBlock    =    allCatchNodes.getLastChild();    Node  finallyBlock  =  ALLCatchNodes.getLastChild();	  	non-compiled	[CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	13	None	add
122	[BUG]  [BUGGY]  Node  finallyBlock  =  allCatchNodes.getLastChild();  Node  finallyBlock  =  allCatchNodes.getLestChild();  [CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      RuntimeException    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]  Node  finallyBlock  =  allCatchNodes.getLastChild();  Node  finallyBlock  =  allCatchNodes.getLestChild();  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node    finallyBlock    =    allCatchNodes.getLastChild();    Node  finallyBlock  =  allCatchNodes.getLestChild();	  	non-compiled	[CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	13	None	add
123	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGet(n));  [CE]  cannot  find  symbol  finallyBlock  [FE]    AssertionFailedError    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]  Preconditions.checkState(NodeUtil.isGet(n));  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(NodeUtil.isGet(n));	      Preconditions.checkState(NodeUtil.hasFinally(n));    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	17	None	replace
124	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isExitType(n));  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]  Preconditions.checkState(NodeUtil.isExitType(n));  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(NodeUtil.isExitType(n));	      Preconditions.checkState(NodeUtil.hasFinally(n));    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
125	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]      Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  thenBlock  =  allCatchNodes.getFirstChild();  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	add	        Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  thenBlock  =  allCatchNodes.getFirstChild();	  	compilable	  [FE]  AssertionFailedError  	1	2	add
126	[BUG]  [BUGGY]      Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  thenBlock  =  allCatchNodes.getFirstChild();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]      Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  thenBlock  =  allCatchNodes.getFirstChild();  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	        Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  thenBlock  =  allCatchNodes.getFirstChild();	  	compilable	  [FE]  AssertionFailedError  	1	2	add
127	[BUG]  [BUGGY]  Node  finallyBlock  =  n.removeFirstChild();  Node  finallyBlock  =  n.removeFirstChild();  System.arraycopy(labelName,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName);  [CE]  ')'  expected  [FE]    IllegalStateException    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]  Node  finallyBlock  =  n.removeFirstChild();  Node  finallyBlock  =  n.removeFirstChild();  System.arraycopy(labelName,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName);  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node    finallyBlock    =    n.removeFirstChild();    Node  finallyBlock  =  n.removeFirstChild();  System.arraycopy(labelName,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName);	  	non-compiled	[CE]  ')'  expected	20	None	add
128	[BUG]  [BUGGY]  Node  finallyBlock  =  n.removeFirstChild();  Node  finallyBlock  =  n.removeFirstChild();  System.arraycopy(labelName,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName));  [CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      IllegalStateException    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]  Node  finallyBlock  =  n.removeFirstChild();  Node  finallyBlock  =  n.removeFirstChild();  System.arraycopy(labelName,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName));  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node    finallyBlock    =    n.removeFirstChild();    Node  finallyBlock  =  n.removeFirstChild();  System.arraycopy(labelName,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName));	  	non-compiled	[CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	20	None	add
129	[BUG]  [BUGGY]  Node  finallyBlock  =  n.removeFirstChild();  Node  finallyBlock  =  n.removeFirstChild();  System.arraycopy(c,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName);  [CE]  ')'  expected  [FE]        IllegalStateException    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]  Node  finallyBlock  =  n.removeFirstChild();  Node  finallyBlock  =  n.removeFirstChild();  System.arraycopy(c,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName);  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node    finallyBlock    =    n.removeFirstChild();    Node  finallyBlock  =  n.removeFirstChild();  System.arraycopy(c,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName);	  	non-compiled	[CE]  ')'  expected	20	None	add
130	[BUG]  [BUGGY]  Node  finallyBlock  =  n.removeFirstChild();  Node  finallyBlock  =  n.removeFirstChild();  System.arraycopy(allCatchNodes,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName);  [CE]  ')'  expected  [FE]          IllegalStateException    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]  Node  finallyBlock  =  n.removeFirstChild();  Node  finallyBlock  =  n.removeFirstChild();  System.arraycopy(allCatchNodes,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName);  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node    finallyBlock    =    n.removeFirstChild();    Node  finallyBlock  =  n.removeFirstChild();  System.arraycopy(allCatchNodes,  0,  tryMinimizeExits(finallyBlock,  exitType,  labelName);	  	non-compiled	[CE]  ')'  expected	20	None	add
131	[BUG]  [BUGGY]  Node  finallyBlock  =  startNode.getFirstChild();  [CE]  cannot  find  symbol  startNode  [FE]          AssertionFailedError    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]  Node  finallyBlock  =  startNode.getFirstChild();  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  startNode.getFirstChild();	  Node    finallyBlock    =    node.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  startNode	22	None	replace
132	[BUG]  [BUGGY]  Node  elseBlock  =  n.get(1);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]  Node  elseBlock  =  n.get(1);  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  elseBlock  =  n.get(1);	      Node    elseBlock    =    allCatchNodes.get(0);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
133	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]      Preconditions.checkState(n.isLabel());  Preconditions.checkNotNull(n.isLabel());  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	add	        Preconditions.checkState(n.isLabel());    Preconditions.checkNotNull(n.isLabel());	  	compilable	  [FE]  RuntimeException  	18	2	add
134	[BUG]  [BUGGY]      Preconditions.checkState(n.isLabel());  Preconditions.checkNotNull(n.isLabel());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]      Preconditions.checkState(n.isLabel());  Preconditions.checkNotNull(n.isLabel());  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	        Preconditions.checkState(n.isLabel());    Preconditions.checkNotNull(n.isLabel());	  	compilable	  [FE]  RuntimeException  	18	2	add
135	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]      Preconditions.checkState(n.isLabel());  Preconditions.checkArgument(n.isLabel());  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	add	        Preconditions.checkState(n.isLabel());    Preconditions.checkArgument(n.isLabel());	  	compilable	  [FE]  RuntimeException  	18	2	add
136	[BUG]  [BUGGY]      Preconditions.checkState(n.isLabel());  Preconditions.checkArgument(n.isLabel());  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]      Preconditions.checkState(n.isLabel());  Preconditions.checkArgument(n.isLabel());  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	        Preconditions.checkState(n.isLabel());    Preconditions.checkArgument(n.isLabel());	  	compilable	  [FE]  RuntimeException  	18	2	add
137	[BUG]  [BUGGY]      Preconditions.checkState(n.isLabel());  Preconditions.checkLabel(n.isLabel());  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]      Preconditions.checkState(n.isLabel());  Preconditions.checkLabel(n.isLabel());  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	        Preconditions.checkState(n.isLabel());    Preconditions.checkLabel(n.isLabel());	  	non-compiled	[CE]  cannot  find  symbol	18	None	add
138	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    IllegalStateException    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]  Node  finallyBlock  =  n.cloneTree();  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	add	Node  finallyBlock  =  n.cloneTree();	  Node    finallyBlock    =    n.removeFirstChild();    	compilable	  [FE]  StackOverflowError  	21	2	replace
139	[BUG]  [BUGGY]  Node  finallyBlock  =  n.cloneTree();  [FE]  StackOverflowError  [FE]    IllegalStateException    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]  Node  finallyBlock  =  n.cloneTree();  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  n.cloneTree();	  Node    finallyBlock    =    n.removeFirstChild();    	compilable	  [FE]  StackOverflowError  	21	2	replace
140	[BUG]  [BUGGY]  Node  finallyBlock  =  n.replaceChild(n,  falseBlock);  [CE]  cannot  find  symbol  falseBlock  [FE]      IllegalStateException    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]  Node  finallyBlock  =  n.replaceChild(n,  falseBlock);  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  n.replaceChild(n,  falseBlock);	  Node    finallyBlock    =    n.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol  falseBlock	21	None	replace
141	[BUG]  [BUGGY]      Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  getCatchNodes().getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]      Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  getCatchNodes().getFirstChild();  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	        Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  elseBlock  =  getCatchNodes().getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	1	None	add
142	[BUG]  [BUGGY]      Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  n.getLastChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      AssertionFailedError    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]      Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  n.getLastChild();  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	        Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  elseBlock  =  n.getLastChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	1	None	add
143	[BUG]  [BUGGY]      Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  nodes.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        AssertionFailedError    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]      Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  nodes.getFirstChild();  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	        Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  elseBlock  =  nodes.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	1	None	add
144	[BUG]  [BUGGY]  Node  elseBlock  =  n.removeFirstChild();  [CE]  cannot  find  symbol  finallyBlock  [FE]    AssertionFailedError    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]  Node  elseBlock  =  n.removeFirstChild();  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  elseBlock  =  n.removeFirstChild();	      Node    elseBlock    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	4	None	replace
145	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isExitBlock(n));  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]  Preconditions.checkState(NodeUtil.isExitBlock(n));  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(NodeUtil.isExitBlock(n));	      Preconditions.checkState(NodeUtil.hasFinally(n));    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
146	[BUG]  [BUGGY]      Node  labelBlock  =  n.getFirstChild();  Node  labelBlock  =  n.getFirstChild();  System.arraycopy(labelName,  0,  labelBlock,  0,  n.getLastChild());  [CE]  variable  labelBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]      Node  labelBlock  =  n.getFirstChild();  Node  labelBlock  =  n.getFirstChild();  System.arraycopy(labelName,  0,  labelBlock,  0,  n.getLastChild());  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	        Node    labelBlock    =    n.getFirstChild();    Node  labelBlock  =  n.getFirstChild();  System.arraycopy(labelName,  0,  labelBlock,  0,  n.getLastChild());	  	non-compiled	[CE]  variable  labelBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	6	None	add
147	[BUG]  [BUGGY]      Node  labelBlock  =  n.getFirstChild();  Node  labelBlock  =  n.getFirstChild();  System.arraycopy(labelName,  0,  labelBlock,  1,  n.getLastChild());  [CE]  variable  labelBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      AssertionFailedError    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]      Node  labelBlock  =  n.getFirstChild();  Node  labelBlock  =  n.getFirstChild();  System.arraycopy(labelName,  0,  labelBlock,  1,  n.getLastChild());  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	        Node    labelBlock    =    n.getFirstChild();    Node  labelBlock  =  n.getFirstChild();  System.arraycopy(labelName,  0,  labelBlock,  1,  n.getLastChild());	  	non-compiled	[CE]  variable  labelBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	6	None	add
148	[BUG]  [BUGGY]  Node  labelBlock  =  n.removeFirstChild();  [CE]  cannot  find  symbol  finallyBlock  [FE]    AssertionFailedError    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]  Node  labelBlock  =  n.removeFirstChild();  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  labelBlock  =  n.removeFirstChild();	      Node    labelBlock    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	7	None	replace
149	[BUG]  [BUGGY]  Node  labelBlock  =  n.getFirstChild().getNext();  [CE]  cannot  find  symbol  finallyBlock  [FE]      AssertionFailedError    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]  Node  labelBlock  =  n.getFirstChild().getNext();  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  labelBlock  =  n.getFirstChild().getNext();	      Node    labelBlock    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	7	None	replace
150	[BUG]  [BUGGY]  Node  finallyBlock  =  allCatchNodes.getLastChild();  Node  finallyBlock  =  n.getFirstChild();  [CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    RuntimeException    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]  Node  finallyBlock  =  allCatchNodes.getLastChild();  Node  finallyBlock  =  n.getFirstChild();  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node    finallyBlock    =    allCatchNodes.getLastChild();    Node  finallyBlock  =  n.getFirstChild();	  	non-compiled	[CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	13	None	add
151	[BUG]  [BUGGY]  Node  finallyBlock  =  allCatchNodes.getLastChild();  Node  finallyBlock  =  getFinallyBlock(n);  [CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      RuntimeException    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]  Node  finallyBlock  =  allCatchNodes.getLastChild();  Node  finallyBlock  =  getFinallyBlock(n);  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node    finallyBlock    =    allCatchNodes.getLastChild();    Node  finallyBlock  =  getFinallyBlock(n);	  	non-compiled	[CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	13	None	add
152	[BUG]  [BUGGY]  Node  finallyBlock  =  allCatchNodes.getFirstChild();  Node  finallyBlock  =  nodes.getFirstChild();  [CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    RuntimeException    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]  Node  finallyBlock  =  allCatchNodes.getFirstChild();  Node  finallyBlock  =  nodes.getFirstChild();  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node    finallyBlock    =    allCatchNodes.getFirstChild();    Node  finallyBlock  =  nodes.getFirstChild();	  	non-compiled	[CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	11	None	add
153	[BUG]  [BUGGY]  Node  finallyBlock  =  allCatchNodes.getFirstChild();  Node  finallyBlock  =  getFinallyBlock(n);  [CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      RuntimeException    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]  Node  finallyBlock  =  allCatchNodes.getFirstChild();  Node  finallyBlock  =  getFinallyBlock(n);  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node    finallyBlock    =    allCatchNodes.getFirstChild();    Node  finallyBlock  =  getFinallyBlock(n);	  	non-compiled	[CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	11	None	add
154	[BUG]  [BUGGY]      Preconditions.checkState(NodeUtil.hasFinally(n));  AssertionFailedError.checkState(NodeUtil.hasFinally(n));  [CE]  cannot  find  symbol  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]      Preconditions.checkState(NodeUtil.hasFinally(n));  AssertionFailedError.checkState(NodeUtil.hasFinally(n));  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	        Preconditions.checkState(NodeUtil.hasFinally(n));    AssertionFailedError.checkState(NodeUtil.hasFinally(n));	  	non-compiled	[CE]  cannot  find  symbol  AssertionFailedError	16	None	add
155	[BUG]  [BUGGY]  Node  finallyBlock  =  n.removeFirstChild();  Node  finallyBlock  =  no.removeFirstChild();  [CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    IllegalStateException    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]  Node  finallyBlock  =  n.removeFirstChild();  Node  finallyBlock  =  no.removeFirstChild();  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node    finallyBlock    =    n.removeFirstChild();    Node  finallyBlock  =  no.removeFirstChild();	  	non-compiled	[CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	20	None	add
156	[BUG]  [BUGGY]  Node  finallyBlock  =  n.removeFirstChild();  Node  finallyBlock  =  null.removeFirstChild();  [CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      IllegalStateException    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]  Node  finallyBlock  =  n.removeFirstChild();  Node  finallyBlock  =  null.removeFirstChild();  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node    finallyBlock    =    n.removeFirstChild();    Node  finallyBlock  =  null.removeFirstChild();	  	non-compiled	[CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	20	None	add
157	[BUG]  [BUGGY]  Node  finallyBlock  =  n.removeFirstChild();  Node  finallyBlock  =  nu.removeFirstChild();  [CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        IllegalStateException    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]  Node  finallyBlock  =  n.removeFirstChild();  Node  finallyBlock  =  nu.removeFirstChild();  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node    finallyBlock    =    n.removeFirstChild();    Node  finallyBlock  =  nu.removeFirstChild();	  	non-compiled	[CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	20	None	add
158	[BUG]  [BUGGY]  Node  lastChild  =  n.getLastChild();  [CE]  cannot  find  symbol  finallyBlock  [FE]              AssertionFailedError    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]  Node  lastChild  =  n.getLastChild();  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  lastChild  =  n.getLastChild();	  Node    finallyBlock    =    node.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	15	None	replace
159	[BUG]  [BUGGY]  Node  endBlock  =  n.getLastChild();  [CE]  cannot  find  symbol  finallyBlock  [FE]                AssertionFailedError    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]  Node  endBlock  =  n.getLastChild();  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  endBlock  =  n.getLastChild();	  Node    finallyBlock    =    node.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	15	None	replace
160	[BUG]  [BUGGY]      Node  elseBlock  =  n.getFirstChild();  Node  elseBlock  =  no.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]      Node  elseBlock  =  n.getFirstChild();  Node  elseBlock  =  no.getFirstChild();  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	        Node    elseBlock    =    n.getFirstChild();    Node  elseBlock  =  no.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	3	None	add
161	[BUG]  [BUGGY]  Node  n  =  allCatchNodes.removeFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]            AssertionFailedError    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]  Node  n  =  allCatchNodes.removeFirstChild();  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  n  =  allCatchNodes.removeFirstChild();	      Node    n    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	5	None	replace
162	[BUG]  [BUGGY]  Preconditions.checkState(n.isFunction());  [CE]  cannot  find  symbol  finallyBlock  [FE]    RuntimeException    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]  Preconditions.checkState(n.isFunction());  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.isFunction());	      Preconditions.checkState(n.isLabel());    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	19	None	replace
163	[BUG]  [BUGGY]  Preconditions.checkState(n.isTree());  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]  Preconditions.checkState(n.isTree());  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkState(n.isTree());	      Preconditions.checkState(n.isLabel());    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
164	[BUG]  [BUGGY]  Preconditions.checkArgument(n.isLabel());  [CE]  cannot  find  symbol  finallyBlock  [FE]        RuntimeException    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]  Preconditions.checkArgument(n.isLabel());  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Preconditions.checkArgument(n.isLabel());	      Preconditions.checkState(n.isLabel());    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	19	None	replace
165	[BUG]  [BUGGY]  Node  finallyBlock  =  n.getfirstChild();  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]  Node  finallyBlock  =  n.getfirstChild();  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finallyBlock  =  n.getfirstChild();	  Node    finallyBlock    =    allCatchNodes.getLastChild();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
166	[BUG]  [BUGGY]  Node  c  =  node.getFirstChild();  [CE]  cannot  find  symbol  node  [FE]    AssertionFailedError    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]  Node  c  =  node.getFirstChild();  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  c  =  node.getFirstChild();	      Node    c    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  node	9	None	replace
167	[BUG]  [BUGGY]      Node  c  =  allCatchNodes.getFirstChild();  Node  c  =  getCatchNodes().getFirstChild();  [CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]      Node  c  =  allCatchNodes.getFirstChild();  Node  c  =  getCatchNodes().getFirstChild();  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	        Node    c    =    allCatchNodes.getFirstChild();    Node  c  =  getCatchNodes().getFirstChild();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	8	None	add
168	[BUG]  [BUGGY]      Node  c  =  allCatchNodes.getFirstChild();  Node  c  =  anyCatchNodes.getFirstChild();  [CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      AssertionFailedError    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]      Node  c  =  allCatchNodes.getFirstChild();  Node  c  =  anyCatchNodes.getFirstChild();  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	        Node    c    =    allCatchNodes.getFirstChild();    Node  c  =  anyCatchNodes.getFirstChild();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	8	None	add
169	[BUG]  [BUGGY]  Node  n  =  n.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    RuntimeException    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]  Node  n  =  n.getFirstChild();  [BUGGY]    Node  finallyBlock  =  n.getLastChild();  tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  n  =  n.getFirstChild();	      n    =    n.getFirstChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	24	None	replace
170	[BUG]  [BUGGY]  Node  finalBlock  =  n.getFirstChild();  [CE]  cannot  find  symbol  finallyBlock  [FE]          AssertionFailedError    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]  Node  finalBlock  =  n.getFirstChild();  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  finalBlock  =  n.getFirstChild();	  Node    finallyBlock    =    node.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	22	None	replace
171	[BUG]  [BUGGY]  Node  endBlock  =  n.getFirstChild();  [CE]  cannot  find  symbol  finallyBlock  [FE]            AssertionFailedError    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]  Node  endBlock  =  n.getFirstChild();  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  endBlock  =  n.getFirstChild();	  Node    finallyBlock    =    node.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	22	None	replace
172	[BUG]  [BUGGY]  Node  lastChild  =  n.getFirstChild();  [CE]  cannot  find  symbol  finallyBlock  [FE]              AssertionFailedError    [CONTEXT]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {    [BUGGY]  Node  lastChild  =  n.getFirstChild();  [BUGGY]    tryMinimizeExits(finallyBlock,  exitType,  labelName);  }  }  if  (n.isLabel())  {  Node  labelBlock  =  n.getLastChild();  tryMinimizeExits(labelBlock,  exitType,  labelName);  }  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	1.0	142	142	2	replace	Node  lastChild  =  n.getFirstChild();	  Node    finallyBlock    =    node.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  finallyBlock	22	None	replace
