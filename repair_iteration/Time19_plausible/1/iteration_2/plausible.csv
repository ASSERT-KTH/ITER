191	[BUG]    [BUGGY]    }    else    if(offsetLocal!=    0)    {    }    else    if(nextLocal    >=    0)    {    [CE]    cannot    find    symbol    nextLocal    [FE]                        ComparisonFailure        [CONTEXT]        if    ((offsetLocal    -    offsetAdjusted)    <    0)    {        long    nextLocal    =    nextTransition(instantAdjusted);    long    nextAdjusted    =    nextTransition(instantLocal    -    offsetAdjusted);    if    (nextLocal    !=    nextAdjusted)    {    return    offsetLocal;    }    }        [BUGGY]    }    else    if(offsetLocal!=    0)    {    }    else    if(nextLocal    >=    0)    {    [BUGGY]        long    prev    =    previousTransition(instantAdjusted);    if    (prev    <    instantAdjusted)    {    int    offsetPrev    =    getOffset(prev);    int    diff    =    offsetPrev    -    offsetLocal;    if    (instantAdjusted    -    prev    <=    diff)    {    return    offsetPrev;    }    }    }    return    offsetAdjusted;    [CLASS]    DateTimeZone    1    Stub    [METHOD]    getOffsetFromLocal    [RETURN_TYPE]    int    long    instantLocal    [VARIABLES]    Set    cAvailableIDs    ids    boolean    NameProvider    cNameProvider    nameProvider    String    convId    iID    id    name    nameKey    providerClass    str    DateTimeFormatter    cOffsetFormatter    Map    cZoneIdConversion    iFixedOffsetCache    map    long    instant    instantAdjusted    instantLocal    nextAdjusted    nextLocal    prev    serialVersionUID    DateTimeZone    UTC    cDefault    dtz    temp    zone    int    diff    offsetAdjusted    offsetLocal    offsetPrev    Provider    cProvider    provider    	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}  else  if(instantLocal  >=  0)  {	  }    else    if(offsetLocal!=    0)    {    }    else    if(nextLocal    >=    0)    {    	plausible		223	0
192	[BUG]    [BUGGY]    }    else    if(offsetLocal!=    0)    {    }    else    if(nextLocal    >=    0)    {    [CE]    cannot    find    symbol    nextLocal    [FE]                        ComparisonFailure        [CONTEXT]        if    ((offsetLocal    -    offsetAdjusted)    <    0)    {        long    nextLocal    =    nextTransition(instantAdjusted);    long    nextAdjusted    =    nextTransition(instantLocal    -    offsetAdjusted);    if    (nextLocal    !=    nextAdjusted)    {    return    offsetLocal;    }    }        [BUGGY]    }    else    if(offsetLocal!=    0)    {    }    else    if(nextLocal    >=    0)    {    [BUGGY]        long    prev    =    previousTransition(instantAdjusted);    if    (prev    <    instantAdjusted)    {    int    offsetPrev    =    getOffset(prev);    int    diff    =    offsetPrev    -    offsetLocal;    if    (instantAdjusted    -    prev    <=    diff)    {    return    offsetPrev;    }    }    }    return    offsetAdjusted;    [CLASS]    DateTimeZone    1    Stub    [METHOD]    getOffsetFromLocal    [RETURN_TYPE]    int    long    instantLocal    [VARIABLES]    Set    cAvailableIDs    ids    boolean    NameProvider    cNameProvider    nameProvider    String    convId    iID    id    name    nameKey    providerClass    str    DateTimeFormatter    cOffsetFormatter    Map    cZoneIdConversion    iFixedOffsetCache    map    long    instant    instantAdjusted    instantLocal    nextAdjusted    nextLocal    prev    serialVersionUID    DateTimeZone    UTC    cDefault    dtz    temp    zone    int    diff    offsetAdjusted    offsetLocal    offsetPrev    Provider    cProvider    provider    	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}  else  if(instantLocal!=  0)  {	  }    else    if(offsetLocal!=    0)    {    }    else    if(nextLocal    >=    0)    {    	plausible		223	0
253	[BUG]    [BUGGY]    }    else    if(offsetLocal    <    =    1)    {    [CE]    illegal    start    of    expression    [FE]                    ComparisonFailure        [CONTEXT]        if    ((offsetLocal    -    offsetAdjusted)    <    0)    {        long    nextLocal    =    nextTransition(instantAdjusted);    long    nextAdjusted    =    nextTransition(instantLocal    -    offsetAdjusted);    if    (nextLocal    !=    nextAdjusted)    {    return    offsetLocal;    }    }        [BUGGY]    }    else    if(offsetLocal    <    =    1)    {    [BUGGY]        long    prev    =    previousTransition(instantAdjusted);    if    (prev    <    instantAdjusted)    {    int    offsetPrev    =    getOffset(prev);    int    diff    =    offsetPrev    -    offsetLocal;    if    (instantAdjusted    -    prev    <=    diff)    {    return    offsetPrev;    }    }    }    return    offsetAdjusted;    [CLASS]    DateTimeZone    1    Stub    [METHOD]    getOffsetFromLocal    [RETURN_TYPE]    int    long    instantLocal    [VARIABLES]    Set    cAvailableIDs    ids    boolean    NameProvider    cNameProvider    nameProvider    String    convId    iID    id    name    nameKey    providerClass    str    DateTimeFormatter    cOffsetFormatter    Map    cZoneIdConversion    iFixedOffsetCache    map    long    instant    instantAdjusted    instantLocal    nextAdjusted    nextLocal    prev    serialVersionUID    DateTimeZone    UTC    cDefault    dtz    temp    zone    int    diff    offsetAdjusted    offsetLocal    offsetPrev    Provider    cProvider    provider    	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}  else  if(offsetLocal!=  1)  {	  }    else    if(offsetLocal    <    =    1)    {    	plausible		213	0
680	[BUG]    [BUGGY]    }    else    if(instantLocal    <    offsetLocal)    {    [FE]    ComparisonFailure    [FE]                                                                        ComparisonFailure        [CONTEXT]        if    ((offsetLocal    -    offsetAdjusted)    <    0)    {        long    nextLocal    =    nextTransition(instantAdjusted);    long    nextAdjusted    =    nextTransition(instantLocal    -    offsetAdjusted);    if    (nextLocal    !=    nextAdjusted)    {    return    offsetLocal;    }    }        [BUGGY]    }    else    if(instantLocal    <    offsetLocal)    {    [BUGGY]        long    prev    =    previousTransition(instantAdjusted);    if    (prev    <    instantAdjusted)    {    int    offsetPrev    =    getOffset(prev);    int    diff    =    offsetPrev    -    offsetLocal;    if    (instantAdjusted    -    prev    <=    diff)    {    return    offsetPrev;    }    }    }    return    offsetAdjusted;    [CLASS]    DateTimeZone    1    Stub    [METHOD]    getOffsetFromLocal    [RETURN_TYPE]    int    long    instantLocal    [VARIABLES]    Set    cAvailableIDs    ids    boolean    NameProvider    cNameProvider    nameProvider    String    convId    iID    id    name    nameKey    providerClass    str    DateTimeFormatter    cOffsetFormatter    Map    cZoneIdConversion    iFixedOffsetCache    map    long    instant    instantAdjusted    instantLocal    nextAdjusted    nextLocal    prev    serialVersionUID    DateTimeZone    UTC    cDefault    dtz    temp    zone    int    diff    offsetAdjusted    offsetLocal    offsetPrev    Provider    cProvider    provider    	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}  else  if(instantLocal  >=  offsetLocal)  {	  }    else    if(instantLocal    <    offsetLocal)    {    	plausible		248	0
682	[BUG]    [BUGGY]    }    else    if(instantLocal    <    offsetLocal)    {    [FE]    ComparisonFailure    [FE]                                                                        ComparisonFailure        [CONTEXT]        if    ((offsetLocal    -    offsetAdjusted)    <    0)    {        long    nextLocal    =    nextTransition(instantAdjusted);    long    nextAdjusted    =    nextTransition(instantLocal    -    offsetAdjusted);    if    (nextLocal    !=    nextAdjusted)    {    return    offsetLocal;    }    }        [BUGGY]    }    else    if(instantLocal    <    offsetLocal)    {    [BUGGY]        long    prev    =    previousTransition(instantAdjusted);    if    (prev    <    instantAdjusted)    {    int    offsetPrev    =    getOffset(prev);    int    diff    =    offsetPrev    -    offsetLocal;    if    (instantAdjusted    -    prev    <=    diff)    {    return    offsetPrev;    }    }    }    return    offsetAdjusted;    [CLASS]    DateTimeZone    1    Stub    [METHOD]    getOffsetFromLocal    [RETURN_TYPE]    int    long    instantLocal    [VARIABLES]    Set    cAvailableIDs    ids    boolean    NameProvider    cNameProvider    nameProvider    String    convId    iID    id    name    nameKey    providerClass    str    DateTimeFormatter    cOffsetFormatter    Map    cZoneIdConversion    iFixedOffsetCache    map    long    instant    instantAdjusted    instantLocal    nextAdjusted    nextLocal    prev    serialVersionUID    DateTimeZone    UTC    cDefault    dtz    temp    zone    int    diff    offsetAdjusted    offsetLocal    offsetPrev    Provider    cProvider    provider    	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}  else  if(instantLocal  >  offsetLocal)  {	  }    else    if(instantLocal    <    offsetLocal)    {    	plausible		248	0
778	[BUG]    [BUGGY]    }    else    if(offsetLocal    <    nextLocal)    {    [CE]    cannot    find    symbol    nextLocal    [FE]                                                ComparisonFailure        [CONTEXT]        if    ((offsetLocal    -    offsetAdjusted)    <    0)    {        long    nextLocal    =    nextTransition(instantAdjusted);    long    nextAdjusted    =    nextTransition(instantLocal    -    offsetAdjusted);    if    (nextLocal    !=    nextAdjusted)    {    return    offsetLocal;    }    }        [BUGGY]    }    else    if(offsetLocal    <    nextLocal)    {    [BUGGY]        long    prev    =    previousTransition(instantAdjusted);    if    (prev    <    instantAdjusted)    {    int    offsetPrev    =    getOffset(prev);    int    diff    =    offsetPrev    -    offsetLocal;    if    (instantAdjusted    -    prev    <=    diff)    {    return    offsetPrev;    }    }    }    return    offsetAdjusted;    [CLASS]    DateTimeZone    1    Stub    [METHOD]    getOffsetFromLocal    [RETURN_TYPE]    int    long    instantLocal    [VARIABLES]    Set    cAvailableIDs    ids    boolean    NameProvider    cNameProvider    nameProvider    String    convId    iID    id    name    nameKey    providerClass    str    DateTimeFormatter    cOffsetFormatter    Map    cZoneIdConversion    iFixedOffsetCache    map    long    instant    instantAdjusted    instantLocal    nextAdjusted    nextLocal    prev    serialVersionUID    DateTimeZone    UTC    cDefault    dtz    temp    zone    int    diff    offsetAdjusted    offsetLocal    offsetPrev    Provider    cProvider    provider    	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}  else  if(offsetLocal  <  instantLocal)  {	  }    else    if(offsetLocal    <    nextLocal)    {    	plausible		241	0
1264	[BUG]    [BUGGY]    }    else    if(!instantAdjusted    ||    offsetLocal    >    0)    {    [CE]    bad    operand    type    long    for    unary    operator    '!'    [FE]                                                ComparisonFailure        [CONTEXT]        if    ((offsetLocal    -    offsetAdjusted)    <    0)    {        long    nextLocal    =    nextTransition(instantAdjusted);    long    nextAdjusted    =    nextTransition(instantLocal    -    offsetAdjusted);    if    (nextLocal    !=    nextAdjusted)    {    return    offsetLocal;    }    }        [BUGGY]    }    else    if(!instantAdjusted    ||    offsetLocal    >    0)    {    [BUGGY]        long    prev    =    previousTransition(instantAdjusted);    if    (prev    <    instantAdjusted)    {    int    offsetPrev    =    getOffset(prev);    int    diff    =    offsetPrev    -    offsetLocal;    if    (instantAdjusted    -    prev    <=    diff)    {    return    offsetPrev;    }    }    }    return    offsetAdjusted;    [CLASS]    DateTimeZone    1    Stub    [METHOD]    getOffsetFromLocal    [RETURN_TYPE]    int    long    instantLocal    [VARIABLES]    Set    cAvailableIDs    ids    boolean    NameProvider    cNameProvider    nameProvider    String    convId    iID    id    name    nameKey    providerClass    str    DateTimeFormatter    cOffsetFormatter    Map    cZoneIdConversion    iFixedOffsetCache    map    long    instant    instantAdjusted    instantLocal    nextAdjusted    nextLocal    prev    serialVersionUID    DateTimeZone    UTC    cDefault    dtz    temp    zone    int    diff    offsetAdjusted    offsetLocal    offsetPrev    Provider    cProvider    provider    	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}  else  if(instantLocal  >  0  ||  offsetLocal  >  0)  {	  }    else    if(!instantAdjusted    ||    offsetLocal    >    0)    {    	plausible		205	0
1404	[BUG]    [BUGGY]    }    else    if(offsetLocal    ==    0)    {    }    else    if(OffsetLocal    <    =    0)    {    [CE]    illegal    start    of    expression    [FE]        ComparisonFailure        [CONTEXT]        if    ((offsetLocal    -    offsetAdjusted)    <    0)    {        long    nextLocal    =    nextTransition(instantAdjusted);    long    nextAdjusted    =    nextTransition(instantLocal    -    offsetAdjusted);    if    (nextLocal    !=    nextAdjusted)    {    return    offsetLocal;    }    }        [BUGGY]    }    else    if(offsetLocal    ==    0)    {    }    else    if(OffsetLocal    <    =    0)    {    [BUGGY]        long    prev    =    previousTransition(instantAdjusted);    if    (prev    <    instantAdjusted)    {    int    offsetPrev    =    getOffset(prev);    int    diff    =    offsetPrev    -    offsetLocal;    if    (instantAdjusted    -    prev    <=    diff)    {    return    offsetPrev;    }    }    }    return    offsetAdjusted;    [CLASS]    DateTimeZone    1    Stub    [METHOD]    getOffsetFromLocal    [RETURN_TYPE]    int    long    instantLocal    [VARIABLES]    Set    cAvailableIDs    ids    boolean    NameProvider    cNameProvider    nameProvider    String    convId    iID    id    name    nameKey    providerClass    str    DateTimeFormatter    cOffsetFormatter    Map    cZoneIdConversion    iFixedOffsetCache    map    long    instant    instantAdjusted    instantLocal    nextAdjusted    nextLocal    prev    serialVersionUID    DateTimeZone    UTC    cDefault    dtz    temp    zone    int    diff    offsetAdjusted    offsetLocal    offsetPrev    Provider    cProvider    provider    	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}  else  if(offsetLocal  ==  offsetAdjusted)  {	  }    else    if(offsetLocal    ==    0)    {    }    else    if(OffsetLocal    <    =    0)    {    	plausible		495	0
1861	[BUG]    [BUGGY]    }    else    if(offsetLocal    <    0)    {    }    else    if(offsetLocal    <    0    ||    instantLocal    >    nextLocal)    {    [CE]    cannot    find    symbol    nextLocal    [FE]                        ComparisonFailure        [CONTEXT]        if    ((offsetLocal    -    offsetAdjusted)    <    0)    {        long    nextLocal    =    nextTransition(instantAdjusted);    long    nextAdjusted    =    nextTransition(instantLocal    -    offsetAdjusted);    if    (nextLocal    !=    nextAdjusted)    {    return    offsetLocal;    }    }        [BUGGY]    }    else    if(offsetLocal    <    0)    {    }    else    if(offsetLocal    <    0    ||    instantLocal    >    nextLocal)    {    [BUGGY]        long    prev    =    previousTransition(instantAdjusted);    if    (prev    <    instantAdjusted)    {    int    offsetPrev    =    getOffset(prev);    int    diff    =    offsetPrev    -    offsetLocal;    if    (instantAdjusted    -    prev    <=    diff)    {    return    offsetPrev;    }    }    }    return    offsetAdjusted;    [CLASS]    DateTimeZone    1    Stub    [METHOD]    getOffsetFromLocal    [RETURN_TYPE]    int    long    instantLocal    [VARIABLES]    Set    cAvailableIDs    ids    boolean    NameProvider    cNameProvider    nameProvider    String    convId    iID    id    name    nameKey    providerClass    str    DateTimeFormatter    cOffsetFormatter    Map    cZoneIdConversion    iFixedOffsetCache    map    long    instant    instantAdjusted    instantLocal    nextAdjusted    nextLocal    prev    serialVersionUID    DateTimeZone    UTC    cDefault    dtz    temp    zone    int    diff    offsetAdjusted    offsetLocal    offsetPrev    Provider    cProvider    provider    	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}  else  if(offsetLocal  <  0  ||  instantLocal  >  offsetLocal)  {	  }    else    if(offsetLocal    <    0)    {    }    else    if(offsetLocal    <    0    ||    instantLocal    >    nextLocal)    {    	plausible		484	0
1862	[BUG]    [BUGGY]    }    else    if(offsetLocal    <    0)    {    }    else    if(offsetLocal    <    0    ||    instantLocal    >    nextLocal)    {    [CE]    cannot    find    symbol    nextLocal    [FE]                        ComparisonFailure        [CONTEXT]        if    ((offsetLocal    -    offsetAdjusted)    <    0)    {        long    nextLocal    =    nextTransition(instantAdjusted);    long    nextAdjusted    =    nextTransition(instantLocal    -    offsetAdjusted);    if    (nextLocal    !=    nextAdjusted)    {    return    offsetLocal;    }    }        [BUGGY]    }    else    if(offsetLocal    <    0)    {    }    else    if(offsetLocal    <    0    ||    instantLocal    >    nextLocal)    {    [BUGGY]        long    prev    =    previousTransition(instantAdjusted);    if    (prev    <    instantAdjusted)    {    int    offsetPrev    =    getOffset(prev);    int    diff    =    offsetPrev    -    offsetLocal;    if    (instantAdjusted    -    prev    <=    diff)    {    return    offsetPrev;    }    }    }    return    offsetAdjusted;    [CLASS]    DateTimeZone    1    Stub    [METHOD]    getOffsetFromLocal    [RETURN_TYPE]    int    long    instantLocal    [VARIABLES]    Set    cAvailableIDs    ids    boolean    NameProvider    cNameProvider    nameProvider    String    convId    iID    id    name    nameKey    providerClass    str    DateTimeFormatter    cOffsetFormatter    Map    cZoneIdConversion    iFixedOffsetCache    map    long    instant    instantAdjusted    instantLocal    nextAdjusted    nextLocal    prev    serialVersionUID    DateTimeZone    UTC    cDefault    dtz    temp    zone    int    diff    offsetAdjusted    offsetLocal    offsetPrev    Provider    cProvider    provider    	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}  else  if(offsetLocal  <  0  ||  instantLocal  >  offsetAdjusted)  {	  }    else    if(offsetLocal    <    0)    {    }    else    if(offsetLocal    <    0    ||    instantLocal    >    nextLocal)    {    	plausible		484	0
2247	[BUG]    [BUGGY]    }    else    if(offsetLocal    <    0)    {    }    else    if(offsetLocal    <    0    ||    instantAdjusted    >    nextLocal)    {    [CE]    cannot    find    symbol    nextLocal    [FE]                    ComparisonFailure        [CONTEXT]        if    ((offsetLocal    -    offsetAdjusted)    <    0)    {        long    nextLocal    =    nextTransition(instantAdjusted);    long    nextAdjusted    =    nextTransition(instantLocal    -    offsetAdjusted);    if    (nextLocal    !=    nextAdjusted)    {    return    offsetLocal;    }    }        [BUGGY]    }    else    if(offsetLocal    <    0)    {    }    else    if(offsetLocal    <    0    ||    instantAdjusted    >    nextLocal)    {    [BUGGY]        long    prev    =    previousTransition(instantAdjusted);    if    (prev    <    instantAdjusted)    {    int    offsetPrev    =    getOffset(prev);    int    diff    =    offsetPrev    -    offsetLocal;    if    (instantAdjusted    -    prev    <=    diff)    {    return    offsetPrev;    }    }    }    return    offsetAdjusted;    [CLASS]    DateTimeZone    1    Stub    [METHOD]    getOffsetFromLocal    [RETURN_TYPE]    int    long    instantLocal    [VARIABLES]    Set    cAvailableIDs    ids    boolean    NameProvider    cNameProvider    nameProvider    String    convId    iID    id    name    nameKey    providerClass    str    DateTimeFormatter    cOffsetFormatter    Map    cZoneIdConversion    iFixedOffsetCache    map    long    instant    instantAdjusted    instantLocal    nextAdjusted    nextLocal    prev    serialVersionUID    DateTimeZone    UTC    cDefault    dtz    temp    zone    int    diff    offsetAdjusted    offsetLocal    offsetPrev    Provider    cProvider    provider    	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}  else  if(offsetLocal  <  0  ||  instantAdjusted  >  offsetLocal)  {	  }    else    if(offsetLocal    <    0)    {    }    else    if(offsetLocal    <    0    ||    instantAdjusted    >    nextLocal)    {    	plausible		483	0
2490	[BUG]    [BUGGY]    }    else    if(offsetLocal    <    0)    {    }    else    if(offsetLocal    <    0    ||    offsetPrev    >    getOffset(instantLocal))    {    [CE]    cannot    find    symbol    offsetPrev    [FE]        ComparisonFailure        [CONTEXT]        if    ((offsetLocal    -    offsetAdjusted)    <    0)    {        long    nextLocal    =    nextTransition(instantAdjusted);    long    nextAdjusted    =    nextTransition(instantLocal    -    offsetAdjusted);    if    (nextLocal    !=    nextAdjusted)    {    return    offsetLocal;    }    }        [BUGGY]    }    else    if(offsetLocal    <    0)    {    }    else    if(offsetLocal    <    0    ||    offsetPrev    >    getOffset(instantLocal))    {    [BUGGY]        long    prev    =    previousTransition(instantAdjusted);    if    (prev    <    instantAdjusted)    {    int    offsetPrev    =    getOffset(prev);    int    diff    =    offsetPrev    -    offsetLocal;    if    (instantAdjusted    -    prev    <=    diff)    {    return    offsetPrev;    }    }    }    return    offsetAdjusted;    [CLASS]    DateTimeZone    1    Stub    [METHOD]    getOffsetFromLocal    [RETURN_TYPE]    int    long    instantLocal    [VARIABLES]    Set    cAvailableIDs    ids    boolean    NameProvider    cNameProvider    nameProvider    String    convId    iID    id    name    nameKey    providerClass    str    DateTimeFormatter    cOffsetFormatter    Map    cZoneIdConversion    iFixedOffsetCache    map    long    instant    instantAdjusted    instantLocal    nextAdjusted    nextLocal    prev    serialVersionUID    DateTimeZone    UTC    cDefault    dtz    temp    zone    int    diff    offsetAdjusted    offsetLocal    offsetPrev    Provider    cProvider    provider    	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}  else  if(instantLocal  <  0  ||  instantLocal  >  getOffset(instantLocal))  {	  }    else    if(offsetLocal    <    0)    {    }    else    if(offsetLocal    <    0    ||    offsetPrev    >    getOffset(instantLocal))    {    	plausible		478	0
2490	[BUG]    [BUGGY]    }    else    if(offsetLocal    <    0)    {    }    else    if(offsetLocal    <    0    ||    offsetPrev    >    getOffset(instantLocal))    {    [CE]    cannot    find    symbol    offsetPrev    [FE]        ComparisonFailure        [CONTEXT]        if    ((offsetLocal    -    offsetAdjusted)    <    0)    {        long    nextLocal    =    nextTransition(instantAdjusted);    long    nextAdjusted    =    nextTransition(instantLocal    -    offsetAdjusted);    if    (nextLocal    !=    nextAdjusted)    {    return    offsetLocal;    }    }        [BUGGY]    }    else    if(offsetLocal    <    0)    {    }    else    if(offsetLocal    <    0    ||    offsetPrev    >    getOffset(instantLocal))    {    [BUGGY]        long    prev    =    previousTransition(instantAdjusted);    if    (prev    <    instantAdjusted)    {    int    offsetPrev    =    getOffset(prev);    int    diff    =    offsetPrev    -    offsetLocal;    if    (instantAdjusted    -    prev    <=    diff)    {    return    offsetPrev;    }    }    }    return    offsetAdjusted;    [CLASS]    DateTimeZone    1    Stub    [METHOD]    getOffsetFromLocal    [RETURN_TYPE]    int    long    instantLocal    [VARIABLES]    Set    cAvailableIDs    ids    boolean    NameProvider    cNameProvider    nameProvider    String    convId    iID    id    name    nameKey    providerClass    str    DateTimeFormatter    cOffsetFormatter    Map    cZoneIdConversion    iFixedOffsetCache    map    long    instant    instantAdjusted    instantLocal    nextAdjusted    nextLocal    prev    serialVersionUID    DateTimeZone    UTC    cDefault    dtz    temp    zone    int    diff    offsetAdjusted    offsetLocal    offsetPrev    Provider    cProvider    provider    	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}  else  if(offsetLocal  <  0  ||  instantLocal  >  getOffset(instantLocal))  {	  }    else    if(offsetLocal    <    0)    {    }    else    if(offsetLocal    <    0    ||    offsetPrev    >    getOffset(instantLocal))    {    	plausible		478	0
2652	[BUG]    [BUGGY]    }    else    if(offsetLocal    <    0)    {    }    else    if(offsetLocal    <    0    ||    instantAdjusted    >    getOffset(instantLocal))    {    [FE]    ComparisonFailure    [FE]            ComparisonFailure        [CONTEXT]        if    ((offsetLocal    -    offsetAdjusted)    <    0)    {        long    nextLocal    =    nextTransition(instantAdjusted);    long    nextAdjusted    =    nextTransition(instantLocal    -    offsetAdjusted);    if    (nextLocal    !=    nextAdjusted)    {    return    offsetLocal;    }    }        [BUGGY]    }    else    if(offsetLocal    <    0)    {    }    else    if(offsetLocal    <    0    ||    instantAdjusted    >    getOffset(instantLocal))    {    [BUGGY]        long    prev    =    previousTransition(instantAdjusted);    if    (prev    <    instantAdjusted)    {    int    offsetPrev    =    getOffset(prev);    int    diff    =    offsetPrev    -    offsetLocal;    if    (instantAdjusted    -    prev    <=    diff)    {    return    offsetPrev;    }    }    }    return    offsetAdjusted;    [CLASS]    DateTimeZone    1    Stub    [METHOD]    getOffsetFromLocal    [RETURN_TYPE]    int    long    instantLocal    [VARIABLES]    Set    cAvailableIDs    ids    boolean    NameProvider    cNameProvider    nameProvider    String    convId    iID    id    name    nameKey    providerClass    str    DateTimeFormatter    cOffsetFormatter    Map    cZoneIdConversion    iFixedOffsetCache    map    long    instant    instantAdjusted    instantLocal    nextAdjusted    nextLocal    prev    serialVersionUID    DateTimeZone    UTC    cDefault    dtz    temp    zone    int    diff    offsetAdjusted    offsetLocal    offsetPrev    Provider    cProvider    provider    	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}  else  if(instantLocal  >=  offsetAdjusted)  {	  }    else    if(offsetLocal    <    0)    {    }    else    if(offsetLocal    <    0    ||    instantAdjusted    >    getOffset(instantLocal))    {    	plausible		480	0
2654	[BUG]    [BUGGY]    }    else    if(offsetLocal    <    0)    {    }    else    if(offsetLocal    <    0    ||    instantAdjusted    >    getOffset(instantLocal))    {    [FE]    ComparisonFailure    [FE]            ComparisonFailure        [CONTEXT]        if    ((offsetLocal    -    offsetAdjusted)    <    0)    {        long    nextLocal    =    nextTransition(instantAdjusted);    long    nextAdjusted    =    nextTransition(instantLocal    -    offsetAdjusted);    if    (nextLocal    !=    nextAdjusted)    {    return    offsetLocal;    }    }        [BUGGY]    }    else    if(offsetLocal    <    0)    {    }    else    if(offsetLocal    <    0    ||    instantAdjusted    >    getOffset(instantLocal))    {    [BUGGY]        long    prev    =    previousTransition(instantAdjusted);    if    (prev    <    instantAdjusted)    {    int    offsetPrev    =    getOffset(prev);    int    diff    =    offsetPrev    -    offsetLocal;    if    (instantAdjusted    -    prev    <=    diff)    {    return    offsetPrev;    }    }    }    return    offsetAdjusted;    [CLASS]    DateTimeZone    1    Stub    [METHOD]    getOffsetFromLocal    [RETURN_TYPE]    int    long    instantLocal    [VARIABLES]    Set    cAvailableIDs    ids    boolean    NameProvider    cNameProvider    nameProvider    String    convId    iID    id    name    nameKey    providerClass    str    DateTimeFormatter    cOffsetFormatter    Map    cZoneIdConversion    iFixedOffsetCache    map    long    instant    instantAdjusted    instantLocal    nextAdjusted    nextLocal    prev    serialVersionUID    DateTimeZone    UTC    cDefault    dtz    temp    zone    int    diff    offsetAdjusted    offsetLocal    offsetPrev    Provider    cProvider    provider    	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}  else  if(instantLocal!=  offsetAdjusted)  {	  }    else    if(offsetLocal    <    0)    {    }    else    if(offsetLocal    <    0    ||    instantAdjusted    >    getOffset(instantLocal))    {    	plausible		480	0
2786	[BUG]    [BUGGY]    }    else    if(nextLocal!=    offsetLocal)    {    [CE]    cannot    find    symbol    nextLocal    [FE]        ComparisonFailure        [CONTEXT]        if    ((offsetLocal    -    offsetAdjusted)    <    0)    {        long    nextLocal    =    nextTransition(instantAdjusted);    long    nextAdjusted    =    nextTransition(instantLocal    -    offsetAdjusted);    if    (nextLocal    !=    nextAdjusted)    {    return    offsetLocal;    }    }        [BUGGY]    }    else    if(nextLocal!=    offsetLocal)    {    [BUGGY]        long    prev    =    previousTransition(instantAdjusted);    if    (prev    <    instantAdjusted)    {    int    offsetPrev    =    getOffset(prev);    int    diff    =    offsetPrev    -    offsetLocal;    if    (instantAdjusted    -    prev    <=    diff)    {    return    offsetPrev;    }    }    }    return    offsetAdjusted;    [CLASS]    DateTimeZone    1    Stub    [METHOD]    getOffsetFromLocal    [RETURN_TYPE]    int    long    instantLocal    [VARIABLES]    Set    cAvailableIDs    ids    boolean    NameProvider    cNameProvider    nameProvider    String    convId    iID    id    name    nameKey    providerClass    str    DateTimeFormatter    cOffsetFormatter    Map    cZoneIdConversion    iFixedOffsetCache    map    long    instant    instantAdjusted    instantLocal    nextAdjusted    nextLocal    prev    serialVersionUID    DateTimeZone    UTC    cDefault    dtz    temp    zone    int    diff    offsetAdjusted    offsetLocal    offsetPrev    Provider    cProvider    provider    	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}  else  if(instantLocal!=  offsetLocal)  {	  }    else    if(nextLocal!=    offsetLocal)    {    	plausible		273	0
2893	[BUG]    [BUGGY]    }    else    if(offsetLocal!=    0)    {    }    else    if(nextLocal    >=    0)    {    [CE]    cannot    find    symbol    nextLocal    [FE]                        ComparisonFailure        [CONTEXT]        if    ((offsetLocal    -    offsetAdjusted)    <    0)    {        long    nextLocal    =    nextTransition(instantAdjusted);    long    nextAdjusted    =    nextTransition(instantLocal    -    offsetAdjusted);    if    (nextLocal    !=    nextAdjusted)    {    return    offsetLocal;    }    }        [BUGGY]    }    else    if(offsetLocal!=    0)    {    }    else    if(nextLocal    >=    0)    {    [BUGGY]        long    prev    =    previousTransition(instantAdjusted);    if    (prev    <    instantAdjusted)    {    int    offsetPrev    =    getOffset(prev);    int    diff    =    offsetPrev    -    offsetLocal;    if    (instantAdjusted    -    prev    <=    diff)    {    return    offsetPrev;    }    }    }    return    offsetAdjusted;    [CLASS]    DateTimeZone    1    Stub    [METHOD]    getOffsetFromLocal    [RETURN_TYPE]    int    long    instantLocal    [VARIABLES]    Set    cAvailableIDs    ids    boolean    NameProvider    cNameProvider    nameProvider    String    convId    iID    id    name    nameKey    providerClass    str    DateTimeFormatter    cOffsetFormatter    Map    cZoneIdConversion    iFixedOffsetCache    map    long    instant    instantAdjusted    instantLocal    nextAdjusted    nextLocal    prev    serialVersionUID    DateTimeZone    UTC    cDefault    dtz    temp    zone    int    diff    offsetAdjusted    offsetLocal    offsetPrev    Provider    cProvider    provider    	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}  else  if(offsetAdjusted  >=  0)  {	  }    else    if(offsetLocal!=    0)    {    }    else    if(nextLocal    >=    0)    {    	plausible		223	0
3357	[BUG]    [BUGGY]    }    else    if(offsetLocal    <    0)    {    }    else    if(offsetLocal    <    0    ||    instantLocal    >    getOffset(instantLocal))    {    [FE]    ComparisonFailure    [FE]                ComparisonFailure        [CONTEXT]        if    ((offsetLocal    -    offsetAdjusted)    <    0)    {        long    nextLocal    =    nextTransition(instantAdjusted);    long    nextAdjusted    =    nextTransition(instantLocal    -    offsetAdjusted);    if    (nextLocal    !=    nextAdjusted)    {    return    offsetLocal;    }    }        [BUGGY]    }    else    if(offsetLocal    <    0)    {    }    else    if(offsetLocal    <    0    ||    instantLocal    >    getOffset(instantLocal))    {    [BUGGY]        long    prev    =    previousTransition(instantAdjusted);    if    (prev    <    instantAdjusted)    {    int    offsetPrev    =    getOffset(prev);    int    diff    =    offsetPrev    -    offsetLocal;    if    (instantAdjusted    -    prev    <=    diff)    {    return    offsetPrev;    }    }    }    return    offsetAdjusted;    [CLASS]    DateTimeZone    1    Stub    [METHOD]    getOffsetFromLocal    [RETURN_TYPE]    int    long    instantLocal    [VARIABLES]    Set    cAvailableIDs    ids    boolean    NameProvider    cNameProvider    nameProvider    String    convId    iID    id    name    nameKey    providerClass    str    DateTimeFormatter    cOffsetFormatter    Map    cZoneIdConversion    iFixedOffsetCache    map    long    instant    instantAdjusted    instantLocal    nextAdjusted    nextLocal    prev    serialVersionUID    DateTimeZone    UTC    cDefault    dtz    temp    zone    int    diff    offsetAdjusted    offsetLocal    offsetPrev    Provider    cProvider    provider    	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}  else  if(instantLocal  >  getOffset(instantLocal))  {	  }    else    if(offsetLocal    <    0)    {    }    else    if(offsetLocal    <    0    ||    instantLocal    >    getOffset(instantLocal))    {    	plausible		482	0
3357	[BUG]    [BUGGY]    }    else    if(offsetLocal    <    0)    {    }    else    if(offsetLocal    <    0    ||    instantLocal    >    getOffset(instantLocal))    {    [FE]    ComparisonFailure    [FE]                ComparisonFailure        [CONTEXT]        if    ((offsetLocal    -    offsetAdjusted)    <    0)    {        long    nextLocal    =    nextTransition(instantAdjusted);    long    nextAdjusted    =    nextTransition(instantLocal    -    offsetAdjusted);    if    (nextLocal    !=    nextAdjusted)    {    return    offsetLocal;    }    }        [BUGGY]    }    else    if(offsetLocal    <    0)    {    }    else    if(offsetLocal    <    0    ||    instantLocal    >    getOffset(instantLocal))    {    [BUGGY]        long    prev    =    previousTransition(instantAdjusted);    if    (prev    <    instantAdjusted)    {    int    offsetPrev    =    getOffset(prev);    int    diff    =    offsetPrev    -    offsetLocal;    if    (instantAdjusted    -    prev    <=    diff)    {    return    offsetPrev;    }    }    }    return    offsetAdjusted;    [CLASS]    DateTimeZone    1    Stub    [METHOD]    getOffsetFromLocal    [RETURN_TYPE]    int    long    instantLocal    [VARIABLES]    Set    cAvailableIDs    ids    boolean    NameProvider    cNameProvider    nameProvider    String    convId    iID    id    name    nameKey    providerClass    str    DateTimeFormatter    cOffsetFormatter    Map    cZoneIdConversion    iFixedOffsetCache    map    long    instant    instantAdjusted    instantLocal    nextAdjusted    nextLocal    prev    serialVersionUID    DateTimeZone    UTC    cDefault    dtz    temp    zone    int    diff    offsetAdjusted    offsetLocal    offsetPrev    Provider    cProvider    provider    	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}  else  if(instantLocal  >=  getOffset(instantLocal))  {	  }    else    if(offsetLocal    <    0)    {    }    else    if(offsetLocal    <    0    ||    instantLocal    >    getOffset(instantLocal))    {    	plausible		482	0
3415	[BUG]    [BUGGY]    }    else    if(offsetLocal!=    0)    {    }    else    if(nextLocal!=    0)    {    [CE]    cannot    find    symbol    nextLocal    [FE]                    ComparisonFailure        [CONTEXT]        if    ((offsetLocal    -    offsetAdjusted)    <    0)    {        long    nextLocal    =    nextTransition(instantAdjusted);    long    nextAdjusted    =    nextTransition(instantLocal    -    offsetAdjusted);    if    (nextLocal    !=    nextAdjusted)    {    return    offsetLocal;    }    }        [BUGGY]    }    else    if(offsetLocal!=    0)    {    }    else    if(nextLocal!=    0)    {    [BUGGY]        long    prev    =    previousTransition(instantAdjusted);    if    (prev    <    instantAdjusted)    {    int    offsetPrev    =    getOffset(prev);    int    diff    =    offsetPrev    -    offsetLocal;    if    (instantAdjusted    -    prev    <=    diff)    {    return    offsetPrev;    }    }    }    return    offsetAdjusted;    [CLASS]    DateTimeZone    1    Stub    [METHOD]    getOffsetFromLocal    [RETURN_TYPE]    int    long    instantLocal    [VARIABLES]    Set    cAvailableIDs    ids    boolean    NameProvider    cNameProvider    nameProvider    String    convId    iID    id    name    nameKey    providerClass    str    DateTimeFormatter    cOffsetFormatter    Map    cZoneIdConversion    iFixedOffsetCache    map    long    instant    instantAdjusted    instantLocal    nextAdjusted    nextLocal    prev    serialVersionUID    DateTimeZone    UTC    cDefault    dtz    temp    zone    int    diff    offsetAdjusted    offsetLocal    offsetPrev    Provider    cProvider    provider    	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}  else  if(instantAdjusted!=  0)  {	  }    else    if(offsetLocal!=    0)    {    }    else    if(nextLocal!=    0)    {    	plausible		222	0
3477	[BUG]    [BUGGY]    }    else    if(offsetLocal    <    nextLocal)    {    [CE]    cannot    find    symbol    nextLocal    [FE]                                                ComparisonFailure        [CONTEXT]        if    ((offsetLocal    -    offsetAdjusted)    <    0)    {        long    nextLocal    =    nextTransition(instantAdjusted);    long    nextAdjusted    =    nextTransition(instantLocal    -    offsetAdjusted);    if    (nextLocal    !=    nextAdjusted)    {    return    offsetLocal;    }    }        [BUGGY]    }    else    if(offsetLocal    <    nextLocal)    {    [BUGGY]        long    prev    =    previousTransition(instantAdjusted);    if    (prev    <    instantAdjusted)    {    int    offsetPrev    =    getOffset(prev);    int    diff    =    offsetPrev    -    offsetLocal;    if    (instantAdjusted    -    prev    <=    diff)    {    return    offsetPrev;    }    }    }    return    offsetAdjusted;    [CLASS]    DateTimeZone    1    Stub    [METHOD]    getOffsetFromLocal    [RETURN_TYPE]    int    long    instantLocal    [VARIABLES]    Set    cAvailableIDs    ids    boolean    NameProvider    cNameProvider    nameProvider    String    convId    iID    id    name    nameKey    providerClass    str    DateTimeFormatter    cOffsetFormatter    Map    cZoneIdConversion    iFixedOffsetCache    map    long    instant    instantAdjusted    instantLocal    nextAdjusted    nextLocal    prev    serialVersionUID    DateTimeZone    UTC    cDefault    dtz    temp    zone    int    diff    offsetAdjusted    offsetLocal    offsetPrev    Provider    cProvider    provider    	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}  else  if(offsetLocal  <  instantAdjusted)  {	  }    else    if(offsetLocal    <    nextLocal)    {    	plausible		241	0
3637	[BUG]    [BUGGY]    }    else    if(offsetLocal    <    0)    {    }    else    if(offsetLocal    <    0    ||    instantAdjusted    >    getOffset(instantLocal))    {    [FE]    ComparisonFailure    [FE]            ComparisonFailure        [CONTEXT]        if    ((offsetLocal    -    offsetAdjusted)    <    0)    {        long    nextLocal    =    nextTransition(instantAdjusted);    long    nextAdjusted    =    nextTransition(instantLocal    -    offsetAdjusted);    if    (nextLocal    !=    nextAdjusted)    {    return    offsetLocal;    }    }        [BUGGY]    }    else    if(offsetLocal    <    0)    {    }    else    if(offsetLocal    <    0    ||    instantAdjusted    >    getOffset(instantLocal))    {    [BUGGY]        long    prev    =    previousTransition(instantAdjusted);    if    (prev    <    instantAdjusted)    {    int    offsetPrev    =    getOffset(prev);    int    diff    =    offsetPrev    -    offsetLocal;    if    (instantAdjusted    -    prev    <=    diff)    {    return    offsetPrev;    }    }    }    return    offsetAdjusted;    [CLASS]    DateTimeZone    1    Stub    [METHOD]    getOffsetFromLocal    [RETURN_TYPE]    int    long    instantLocal    [VARIABLES]    Set    cAvailableIDs    ids    boolean    NameProvider    cNameProvider    nameProvider    String    convId    iID    id    name    nameKey    providerClass    str    DateTimeFormatter    cOffsetFormatter    Map    cZoneIdConversion    iFixedOffsetCache    map    long    instant    instantAdjusted    instantLocal    nextAdjusted    nextLocal    prev    serialVersionUID    DateTimeZone    UTC    cDefault    dtz    temp    zone    int    diff    offsetAdjusted    offsetLocal    offsetPrev    Provider    cProvider    provider    	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}  else  if(instantAdjusted  >  getOffset(instantLocal))  {	  }    else    if(offsetLocal    <    0)    {    }    else    if(offsetLocal    <    0    ||    instantAdjusted    >    getOffset(instantLocal))    {    	plausible		480	0
3638	[BUG]    [BUGGY]    }    else    if(offsetLocal    <    0)    {    }    else    if(offsetLocal    <    0    ||    instantAdjusted    >    getOffset(instantLocal))    {    [FE]    ComparisonFailure    [FE]            ComparisonFailure        [CONTEXT]        if    ((offsetLocal    -    offsetAdjusted)    <    0)    {        long    nextLocal    =    nextTransition(instantAdjusted);    long    nextAdjusted    =    nextTransition(instantLocal    -    offsetAdjusted);    if    (nextLocal    !=    nextAdjusted)    {    return    offsetLocal;    }    }        [BUGGY]    }    else    if(offsetLocal    <    0)    {    }    else    if(offsetLocal    <    0    ||    instantAdjusted    >    getOffset(instantLocal))    {    [BUGGY]        long    prev    =    previousTransition(instantAdjusted);    if    (prev    <    instantAdjusted)    {    int    offsetPrev    =    getOffset(prev);    int    diff    =    offsetPrev    -    offsetLocal;    if    (instantAdjusted    -    prev    <=    diff)    {    return    offsetPrev;    }    }    }    return    offsetAdjusted;    [CLASS]    DateTimeZone    1    Stub    [METHOD]    getOffsetFromLocal    [RETURN_TYPE]    int    long    instantLocal    [VARIABLES]    Set    cAvailableIDs    ids    boolean    NameProvider    cNameProvider    nameProvider    String    convId    iID    id    name    nameKey    providerClass    str    DateTimeFormatter    cOffsetFormatter    Map    cZoneIdConversion    iFixedOffsetCache    map    long    instant    instantAdjusted    instantLocal    nextAdjusted    nextLocal    prev    serialVersionUID    DateTimeZone    UTC    cDefault    dtz    temp    zone    int    diff    offsetAdjusted    offsetLocal    offsetPrev    Provider    cProvider    provider    	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}  else  if(instantLocal!=  getOffset(instantLocal))  {	  }    else    if(offsetLocal    <    0)    {    }    else    if(offsetLocal    <    0    ||    instantAdjusted    >    getOffset(instantLocal))    {    	plausible		480	0
