bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  writeEOFRecord();  buffer.flushBlock();  [CE]  <identifier>  expected  [FE]    AssertionFailedError  [CONTEXT]  throw  new  IOException( "This  archive  has  already  been  finished ");  }  if(haveUnclosedEntry)  {  throw  new  IOException( "This  archives  contains  unclosed  entries. ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [BUGGY]  writeEOFRecord();  buffer.flushBlock();  [BUGGY]    [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	writeEOFRecord();  buffer.flushBlock();	}  	non-compiled	[CE]  <identifier>  expected	39	None	replace
2	[BUG]  [BUGGY]  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CE]  <identifier>  expected  [FE]      AssertionFailedError  [CONTEXT]  throw  new  IOException( "This  archive  has  already  been  finished ");  }  if(haveUnclosedEntry)  {  throw  new  IOException( "This  archives  contains  unclosed  entries. ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [BUGGY]  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [BUGGY]    [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	writeEOFRecord();  buffer.flushBlock();  finished  =  true;	}  	non-compiled	[CE]  <identifier>  expected	39	None	replace
3	[BUG]  [BUGGY]  if(!closed)  {  buffer.flushBlock();  finished  =  true;  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError  [CONTEXT]  throw  new  IOException( "This  archive  has  already  been  finished ");  }  if(haveUnclosedEntry)  {  throw  new  IOException( "This  archives  contains  unclosed  entries. ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [BUGGY]  if(!closed)  {  buffer.flushBlock();  finished  =  true;  }  [BUGGY]    [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	if(!closed)  {  buffer.flushBlock();  finished  =  true;  }	}  	non-compiled	[CE]  <identifier>  expected	39	None	replace
4	[BUG]  [BUGGY]  os.write(assemBuf,  0,  buffer.length);  [CE]  <identifier>  expected  [FE]          AssertionFailedError  [CONTEXT]  throw  new  IOException( "This  archive  has  already  been  finished ");  }  if(haveUnclosedEntry)  {  throw  new  IOException( "This  archives  contains  unclosed  entries. ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [BUGGY]  os.write(assemBuf,  0,  buffer.length);  [BUGGY]    [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	os.write(assemBuf,  0,  buffer.length);	}  	non-compiled	[CE]  <identifier>  expected	39	None	replace
5	[BUG]  [BUGGY]  os.write(buffer,  0,  buffer.length);  [CE]  <identifier>  expected  [FE]            AssertionFailedError  [CONTEXT]  throw  new  IOException( "This  archive  has  already  been  finished ");  }  if(haveUnclosedEntry)  {  throw  new  IOException( "This  archives  contains  unclosed  entries. ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [BUGGY]  os.write(buffer,  0,  buffer.length);  [BUGGY]    [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	os.write(buffer,  0,  buffer.length);	}  	non-compiled	[CE]  <identifier>  expected	39	None	replace
6	[BUG]  [BUGGY]  final  OutputStream  out  =  buffer.getOutputStream();  [CE]  <identifier>  expected  [FE]              AssertionFailedError  [CONTEXT]  throw  new  IOException( "This  archive  has  already  been  finished ");  }  if(haveUnclosedEntry)  {  throw  new  IOException( "This  archives  contains  unclosed  entries. ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [BUGGY]  final  OutputStream  out  =  buffer.getOutputStream();  [BUGGY]    [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	final  OutputStream  out  =  buffer.getOutputStream();	}  	non-compiled	[CE]  <identifier>  expected	39	None	replace
7	[BUG]  [BUGGY]  os.flush();  [CE]  <identifier>  expected  [FE]                AssertionFailedError  [CONTEXT]  throw  new  IOException( "This  archive  has  already  been  finished ");  }  if(haveUnclosedEntry)  {  throw  new  IOException( "This  archives  contains  unclosed  entries. ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [BUGGY]  os.flush();  [BUGGY]    [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	os.flush();	}  	non-compiled	[CE]  <identifier>  expected	39	None	replace
8	[BUG]  [BUGGY]    [CE]  <identifier>  expected  [FE]                  AssertionFailedError  [CONTEXT]  throw  new  IOException( "This  archive  has  already  been  finished ");  }  if(haveUnclosedEntry)  {  throw  new  IOException( "This  archives  contains  unclosed  entries. ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [BUGGY]    [BUGGY]    [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	  	}  	non-compiled	[CE]  <identifier>  expected	39	None	replace
9	[BUG]  [BUGGY]  out.write(assemBuf,  0,  assemLen);  [CE]  <identifier>  expected  [FE]    AssertionFailedError  [CONTEXT]  throw  new  IOException( "This  archive  has  already  been  finished ");  }  if(haveUnclosedEntry)  {  throw  new  IOException( "This  archives  contains  unclosed  entries. ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [BUGGY]  out.write(assemBuf,  0,  assemLen);  [BUGGY]    [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	out.write(assemBuf,  0,  assemLen);	}  	non-compiled	[CE]  <identifier>  expected	39	None	replace
10	[BUG]  [BUGGY]  out.write(assemBuf,  0,  buffer.length);  [CE]  <identifier>  expected  [FE]      AssertionFailedError  [CONTEXT]  throw  new  IOException( "This  archive  has  already  been  finished ");  }  if(haveUnclosedEntry)  {  throw  new  IOException( "This  archives  contains  unclosed  entries. ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [BUGGY]  out.write(assemBuf,  0,  buffer.length);  [BUGGY]    [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	out.write(assemBuf,  0,  buffer.length);	}  	non-compiled	[CE]  <identifier>  expected	39	None	replace
11	[BUG]  [BUGGY]  writeEOFRecord();  [CE]  <identifier>  expected  [FE]        AssertionFailedError  [CONTEXT]  throw  new  IOException( "This  archive  has  already  been  finished ");  }  if(haveUnclosedEntry)  {  throw  new  IOException( "This  archives  contains  unclosed  entries. ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [BUGGY]  writeEOFRecord();  [BUGGY]    [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	writeEOFRecord();	}  	non-compiled	[CE]  <identifier>  expected	39	None	replace
12	[BUG]  [BUGGY]  os.close();  [CE]  <identifier>  expected  [FE]          AssertionFailedError  [CONTEXT]  throw  new  IOException( "This  archive  has  already  been  finished ");  }  if(haveUnclosedEntry)  {  throw  new  IOException( "This  archives  contains  unclosed  entries. ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [BUGGY]  os.close();  [BUGGY]    [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	os.close();	}  	non-compiled	[CE]  <identifier>  expected	39	None	replace
13	[BUG]  [BUGGY]  os.flushBuffer();  [CE]  <identifier>  expected  [FE]            AssertionFailedError  [CONTEXT]  throw  new  IOException( "This  archive  has  already  been  finished ");  }  if(haveUnclosedEntry)  {  throw  new  IOException( "This  archives  contains  unclosed  entries. ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [BUGGY]  os.flushBuffer();  [BUGGY]    [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	os.flushBuffer();	}  	non-compiled	[CE]  <identifier>  expected	39	None	replace
14	[BUG]  [BUGGY]  out.write(assemBuf,  0,  assemLen);  buffer.flush();  [CE]  <identifier>  expected  [FE]    AssertionFailedError  [CONTEXT]  throw  new  IOException( "This  archive  has  already  been  finished ");  }  if(haveUnclosedEntry)  {  throw  new  IOException( "This  archives  contains  unclosed  entries. ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [BUGGY]  out.write(assemBuf,  0,  assemLen);  buffer.flush();  [BUGGY]    [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	out.write(assemBuf,  0,  assemLen);  buffer.flush();	}  	non-compiled	[CE]  <identifier>  expected	39	None	replace
15	[BUG]  [BUGGY]  out.write(assemBuf,  0,  assemLen);  writeEOFRecord();  [CE]  <identifier>  expected  [FE]      AssertionFailedError  [CONTEXT]  throw  new  IOException( "This  archive  has  already  been  finished ");  }  if(haveUnclosedEntry)  {  throw  new  IOException( "This  archives  contains  unclosed  entries. ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [BUGGY]  out.write(assemBuf,  0,  assemLen);  writeEOFRecord();  [BUGGY]    [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	out.write(assemBuf,  0,  assemLen);  writeEOFRecord();	}  	non-compiled	[CE]  <identifier>  expected	39	None	replace
