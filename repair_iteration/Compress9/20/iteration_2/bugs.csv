bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  out.write(assemBuf,  0,  assemLen  +  1);  buffer.flush();  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  out.write(assemBuf,  0,  assemLen  +  1);  buffer.flush();  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	out.write(assemBuf,  0,  assemLen  +  1);  buffer.flush();	  out.write(assemBuf,    0,    assemLen);    buffer.flush();    	non-compiled	[CE]  <identifier>  expected	14	None	replace
2	[BUG]  [BUGGY]  if(assemLen  >  0)  {  out.write(assemBuf,  0,  assemLen);  buffer.flush();  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  if(assemLen  >  0)  {  out.write(assemBuf,  0,  assemLen);  buffer.flush();  }  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	if(assemLen  >  0)  {  out.write(assemBuf,  0,  assemLen);  buffer.flush();  }	  out.write(assemBuf,    0,    assemLen);    buffer.flush();    	non-compiled	[CE]  <identifier>  expected	14	None	replace
3	[BUG]  [BUGGY]  out.write(assemBuf,  0,  assemLen);  buffer.flushBlock();  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  out.write(assemBuf,  0,  assemLen);  buffer.flushBlock();  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	out.write(assemBuf,  0,  assemLen);  buffer.flushBlock();	  out.write(assemBuf,    0,    assemLen);    buffer.flush();    	non-compiled	[CE]  <identifier>  expected	14	None	replace
4	[BUG]  [BUGGY]  out.write(assemBuf,  0,  assemLen);  buffer.close();  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  out.write(assemBuf,  0,  assemLen);  buffer.close();  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	out.write(assemBuf,  0,  assemLen);  buffer.close();	  out.write(assemBuf,    0,    assemLen);    buffer.flush();    	non-compiled	[CE]  <identifier>  expected	14	None	replace
5	[BUG]  [BUGGY]  out.write(assemBuf,  0,  currName.length);  buffer.flush();  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  out.write(assemBuf,  0,  currName.length);  buffer.flush();  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	out.write(assemBuf,  0,  currName.length);  buffer.flush();	  out.write(assemBuf,    0,    assemLen);    buffer.flush();    	non-compiled	[CE]  <identifier>  expected	14	None	replace
6	[BUG]  [BUGGY]  out.write(assemBuf,  0,  assemLen  +  1);  buffer.close();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  out.write(assemBuf,  0,  assemLen  +  1);  buffer.close();  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	out.write(assemBuf,  0,  assemLen  +  1);  buffer.close();	  out.write(assemBuf,    0,    assemLen);    buffer.flush();    	non-compiled	[CE]  <identifier>  expected	14	None	replace
7	[BUG]  [BUGGY]  out.write(assemBuf,  0,  buffer.length  -  1);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  out.write(assemBuf,  0,  buffer.length  -  1);  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	out.write(assemBuf,  0,  buffer.length  -  1);	  out.write(assemBuf,    0,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
8	[BUG]  [BUGGY]  out.write(assemBuf,  0,  buffer.length  +  1);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  out.write(assemBuf,  0,  buffer.length  +  1);  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	out.write(assemBuf,  0,  buffer.length  +  1);	  out.write(assemBuf,    0,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
9	[BUG]  [BUGGY]  out.write(assemBuf,  0,  buffer.length  -  2);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  out.write(assemBuf,  0,  buffer.length  -  2);  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	out.write(assemBuf,  0,  buffer.length  -  2);	  out.write(assemBuf,    0,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
10	[BUG]  [BUGGY]  out.write(assemBuf,  0,  buffer.length  -  4);  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  out.write(assemBuf,  0,  buffer.length  -  4);  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	out.write(assemBuf,  0,  buffer.length  -  4);	  out.write(assemBuf,    0,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
11	[BUG]  [BUGGY]  out.write(assemBuf,  0,  buffer.length  +  2);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  out.write(assemBuf,  0,  buffer.length  +  2);  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	out.write(assemBuf,  0,  buffer.length  +  2);	  out.write(assemBuf,    0,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
12	[BUG]  [BUGGY]  out.write(assemBuf,  0,  buffer.length  -  6);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  out.write(assemBuf,  0,  buffer.length  -  6);  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	out.write(assemBuf,  0,  buffer.length  -  6);	  out.write(assemBuf,    0,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
13	[BUG]  [BUGGY]  os.write(buffer,  0,  buffer.length  +  1);  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  os.write(buffer,  0,  buffer.length  +  1);  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	os.write(buffer,  0,  buffer.length  +  1);	  os.write(buffer,    0,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
14	[BUG]  [BUGGY]  os.write(buffer,  0,  buffer.length  -  1);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  os.write(buffer,  0,  buffer.length  -  1);  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	os.write(buffer,  0,  buffer.length  -  1);	  os.write(buffer,    0,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
15	[BUG]  [BUGGY]  os.write(buffer,  0,  buffer.length  +  2);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  os.write(buffer,  0,  buffer.length  +  2);  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	os.write(buffer,  0,  buffer.length  +  2);	  os.write(buffer,    0,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
16	[BUG]  [BUGGY]  os.write(buffer,  0,  buffer.length  -  2);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  os.write(buffer,  0,  buffer.length  -  2);  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	os.write(buffer,  0,  buffer.length  -  2);	  os.write(buffer,    0,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
17	[BUG]  [BUGGY]  os.write(buffer,  0,  buffer.length  +  4);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  os.write(buffer,  0,  buffer.length  +  4);  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	os.write(buffer,  0,  buffer.length  +  4);	  os.write(buffer,    0,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
18	[BUG]  [BUGGY]  OutputStream  out  =  buffer.getOutputStream();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  OutputStream  out  =  buffer.getOutputStream();  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	OutputStream  out  =  buffer.getOutputStream();	  final    OutputStream    out    =    buffer.getOutputStream();    	non-compiled	[CE]  <identifier>  expected	6	None	replace
19	[BUG]  [BUGGY]  final  OutputStream  out  =  buffer.getInputStream();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  final  OutputStream  out  =  buffer.getInputStream();  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	final  OutputStream  out  =  buffer.getInputStream();	  final    OutputStream    out    =    buffer.getOutputStream();    	non-compiled	[CE]  <identifier>  expected	6	None	replace
20	[BUG]  [BUGGY]  final  OutputStream  out  =  buffer.openStream();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  final  OutputStream  out  =  buffer.openStream();  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	final  OutputStream  out  =  buffer.openStream();	  final    OutputStream    out    =    buffer.getOutputStream();    	non-compiled	[CE]  <identifier>  expected	6	None	replace
21	[BUG]  [BUGGY]  final  OutputStream  out  =  this.buffer.getOutputStream();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  final  OutputStream  out  =  this.buffer.getOutputStream();  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	final  OutputStream  out  =  this.buffer.getOutputStream();	  final    OutputStream    out    =    buffer.getOutputStream();    	non-compiled	[CE]  <identifier>  expected	6	None	replace
22	[BUG]  [BUGGY]  final  OutputStream  out  =  buffer.defaultOutputStream();  [CE]  <identifier>  expected  [FE]                          AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  final  OutputStream  out  =  buffer.defaultOutputStream();  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	final  OutputStream  out  =  buffer.defaultOutputStream();	  final    OutputStream    out    =    buffer.getOutputStream();    	non-compiled	[CE]  <identifier>  expected	6	None	replace
23	[BUG]  [BUGGY]  final  OutputStream  out  =  buffer.getOutputStream(assemBuf);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  final  OutputStream  out  =  buffer.getOutputStream(assemBuf);  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	final  OutputStream  out  =  buffer.getOutputStream(assemBuf);	  final    OutputStream    out    =    buffer.getOutputStream();    	non-compiled	[CE]  <identifier>  expected	6	None	replace
24	[BUG]  [BUGGY]  out.write(assemBuf,  0,  assemLen  +  1);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  out.write(assemBuf,  0,  assemLen  +  1);  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	out.write(assemBuf,  0,  assemLen  +  1);	  out.write(assemBuf,    0,    assemLen);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
25	[BUG]  [BUGGY]  out.write(assemBuf,  0,  assemSize);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  out.write(assemBuf,  0,  assemSize);  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	out.write(assemBuf,  0,  assemSize);	  out.write(assemBuf,    0,    assemLen);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
26	[BUG]  [BUGGY]  out.write(assemBuf,  0,  currName.length);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  out.write(assemBuf,  0,  currName.length);  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	out.write(assemBuf,  0,  currName.length);	  out.write(assemBuf,    0,    assemLen);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
27	[BUG]  [BUGGY]  out.write(assemBuf,  0,  assemLen  +  2);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  out.write(assemBuf,  0,  assemLen  +  2);  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	out.write(assemBuf,  0,  assemLen  +  2);	  out.write(assemBuf,    0,    assemLen);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
28	[BUG]  [BUGGY]  out.write(assemBuf,  0,  assemLen  +  4);  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  out.write(assemBuf,  0,  assemLen  +  4);  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	out.write(assemBuf,  0,  assemLen  +  4);	  out.write(assemBuf,    0,    assemLen);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
29	[BUG]  [BUGGY]  os.writeEndBytes();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  os.writeEndBytes();  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	os.writeEndBytes();	  os.flush();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
30	[BUG]  [BUGGY]  os.defaultWriteObject();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  os.defaultWriteObject();  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	os.defaultWriteObject();	  os.flush();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
31	[BUG]  [BUGGY]  os.write('n');  [CE]  <identifier>  expected  [FE]                        AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  os.write('n');  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	os.write('n');	  os.flush();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
32	[BUG]  [BUGGY]  os.writeEndByte();  [CE]  <identifier>  expected  [FE]                          AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  os.writeEndByte();  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	os.writeEndByte();	  os.flush();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
33	[BUG]  [BUGGY]  if(assemLen  >  0)  {  out.write(assemBuf,  0,  assemLen);  writeEOFRecord();  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  if(assemLen  >  0)  {  out.write(assemBuf,  0,  assemLen);  writeEOFRecord();  }  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	if(assemLen  >  0)  {  out.write(assemBuf,  0,  assemLen);  writeEOFRecord();  }	  out.write(assemBuf,    0,    assemLen);    writeEOFRecord();    	non-compiled	[CE]  <identifier>  expected	15	None	replace
34	[BUG]  [BUGGY]  if(assemLen  >  0)  {  out.write(assemBuf,  0,  assemLen);  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  if(assemLen  >  0)  {  out.write(assemBuf,  0,  assemLen);  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	if(assemLen  >  0)  {  out.write(assemBuf,  0,  assemLen);  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }	  out.write(assemBuf,    0,    assemLen);    writeEOFRecord();    	non-compiled	[CE]  <identifier>  expected	15	None	replace
35	[BUG]  [BUGGY]  out.write(assemBuf,  0,  buffer.length);  writeEOFRecord();  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  out.write(assemBuf,  0,  buffer.length);  writeEOFRecord();  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	out.write(assemBuf,  0,  buffer.length);  writeEOFRecord();	  out.write(assemBuf,    0,    assemLen);    writeEOFRecord();    	non-compiled	[CE]  <identifier>  expected	15	None	replace
36	[BUG]  [BUGGY]  out.write(assemBuf,  0,  assemLen  +  1);  writeEOFRecord();  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  out.write(assemBuf,  0,  assemLen  +  1);  writeEOFRecord();  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	out.write(assemBuf,  0,  assemLen  +  1);  writeEOFRecord();	  out.write(assemBuf,    0,    assemLen);    writeEOFRecord();    	non-compiled	[CE]  <identifier>  expected	15	None	replace
37	[BUG]  [BUGGY]  os.write(assemBuf,  0,  buffer.length  -  1);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  os.write(assemBuf,  0,  buffer.length  -  1);  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	os.write(assemBuf,  0,  buffer.length  -  1);	  os.write(assemBuf,    0,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
38	[BUG]  [BUGGY]  os.write(assemBuf,  0,  buffer.length  +  1);  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  os.write(assemBuf,  0,  buffer.length  +  1);  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	os.write(assemBuf,  0,  buffer.length  +  1);	  os.write(assemBuf,    0,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
39	[BUG]  [BUGGY]  os.write(assemBuf,  0,  buffer.length  -  2);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  os.write(assemBuf,  0,  buffer.length  -  2);  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	os.write(assemBuf,  0,  buffer.length  -  2);	  os.write(assemBuf,    0,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
40	[BUG]  [BUGGY]  os.write(assemBuf,  0,  buffer.length  -  4);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  os.write(assemBuf,  0,  buffer.length  -  4);  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	os.write(assemBuf,  0,  buffer.length  -  4);	  os.write(assemBuf,    0,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
41	[BUG]  [BUGGY]  os.write(assemBuf,  0,  buffer.length  +  2);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  os.write(assemBuf,  0,  buffer.length  +  2);  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	os.write(assemBuf,  0,  buffer.length  +  2);	  os.write(assemBuf,    0,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
42	[BUG]  [BUGGY]  os.write(assemBuf,  0,  buffer.length  +  4);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  os.write(assemBuf,  0,  buffer.length  +  4);  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	os.write(assemBuf,  0,  buffer.length  +  4);	  os.write(assemBuf,    0,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
43	[BUG]  [BUGGY]  if(closed)  {  writeEOFRecord();  buffer.flushBlock();  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  if(closed)  {  writeEOFRecord();  buffer.flushBlock();  }  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	if(closed)  {  writeEOFRecord();  buffer.flushBlock();  }	  writeEOFRecord();    buffer.flushBlock();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
44	[BUG]  [BUGGY]  if(!closed)  {  writeEOFRecord();  buffer.flushBlock();  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  if(!closed)  {  writeEOFRecord();  buffer.flushBlock();  }  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	if(!closed)  {  writeEOFRecord();  buffer.flushBlock();  }	  writeEOFRecord();    buffer.flushBlock();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
45	[BUG]  [BUGGY]  if(!finished)  {  writeEOFRecord();  buffer.flushBlock();  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  if(!finished)  {  writeEOFRecord();  buffer.flushBlock();  }  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	if(!finished)  {  writeEOFRecord();  buffer.flushBlock();  }	  writeEOFRecord();    buffer.flushBlock();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
46	[BUG]  [BUGGY]  if(haveUnclosedEntry)  {  writeEOFRecord();  buffer.flushBlock();  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  if(haveUnclosedEntry)  {  writeEOFRecord();  buffer.flushBlock();  }  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	if(haveUnclosedEntry)  {  writeEOFRecord();  buffer.flushBlock();  }	  writeEOFRecord();    buffer.flushBlock();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
47	[BUG]  [BUGGY]  if(currName!=  null)  {  writeEOFRecord();  buffer.flushBlock();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  if(currName!=  null)  {  writeEOFRecord();  buffer.flushBlock();  }  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	if(currName!=  null)  {  writeEOFRecord();  buffer.flushBlock();  }	  writeEOFRecord();    buffer.flushBlock();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
48	[BUG]  [BUGGY]  if(currName  ==  null)  {  writeEOFRecord();  buffer.flushBlock();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  if(currName  ==  null)  {  writeEOFRecord();  buffer.flushBlock();  }  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	if(currName  ==  null)  {  writeEOFRecord();  buffer.flushBlock();  }	  writeEOFRecord();    buffer.flushBlock();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
49	[BUG]  [BUGGY]  if(haveUnclosedEntry)  {  writeEOFRecord();  buffer.flushBlock();  }  else  {  throw  new  IOException( " ");  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  if(haveUnclosedEntry)  {  writeEOFRecord();  buffer.flushBlock();  }  else  {  throw  new  IOException( " ");  }  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	if(haveUnclosedEntry)  {  writeEOFRecord();  buffer.flushBlock();  }  else  {  throw  new  IOException( " ");  }	  writeEOFRecord();    buffer.flushBlock();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
50	[BUG]  [BUGGY]  if(haveUnclosedEntry)  {  if(!closed)  {  buffer.flushBlock();  finished  =  true;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  if(haveUnclosedEntry)  {  if(!closed)  {  buffer.flushBlock();  finished  =  true;  }  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	if(haveUnclosedEntry)  {  if(!closed)  {  buffer.flushBlock();  finished  =  true;  }	  if(!closed)    {    buffer.flushBlock();    finished    =    true;    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
51	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!closed)  {  buffer.flushBlock();  finished  =  true;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!closed)  {  buffer.flushBlock();  finished  =  true;  }  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!closed)  {  buffer.flushBlock();  finished  =  true;  }	  if(!closed)    {    buffer.flushBlock();    finished    =    true;    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
52	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  if(!closed)  {  buffer.flushBlock();  finished  =  true;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  if(hasUnclosedEntry)  {  if(!closed)  {  buffer.flushBlock();  finished  =  true;  }  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	if(hasUnclosedEntry)  {  if(!closed)  {  buffer.flushBlock();  finished  =  true;  }	  if(!closed)    {    buffer.flushBlock();    finished    =    true;    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
53	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!closed)  {  buffer.flushBlock();  finished  =  true;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!closed)  {  buffer.flushBlock();  finished  =  true;  }  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!closed)  {  buffer.flushBlock();  finished  =  true;  }	  if(!closed)    {    buffer.flushBlock();    finished    =    true;    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
54	[BUG]  [BUGGY]  if(closed)  {  buffer.flushBlock();  finished  =  true;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  if(closed)  {  buffer.flushBlock();  finished  =  true;  }  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	if(closed)  {  buffer.flushBlock();  finished  =  true;  }	  if(!closed)    {    buffer.flushBlock();    finished    =    true;    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
55	[BUG]  [BUGGY]  if(!closed)  {  buffer.flushBlock();  finished  =  false;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  if(!closed)  {  buffer.flushBlock();  finished  =  false;  }  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	if(!closed)  {  buffer.flushBlock();  finished  =  false;  }	  if(!closed)    {    buffer.flushBlock();    finished    =    true;    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
56	[BUG]  [BUGGY]  if(!closed)  {  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  if(!closed)  {  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	if(!closed)  {  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }	  writeEOFRecord();    buffer.flushBlock();    finished    =    true;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
57	[BUG]  [BUGGY]  if(haveUnclosedEntry)  {  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  if(haveUnclosedEntry)  {  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	if(haveUnclosedEntry)  {  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }	  writeEOFRecord();    buffer.flushBlock();    finished    =    true;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
58	[BUG]  [BUGGY]  if(closed)  {  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  if(closed)  {  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	if(closed)  {  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }	  writeEOFRecord();    buffer.flushBlock();    finished    =    true;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
59	[BUG]  [BUGGY]  if(currName!=  null)  {  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  if(currName!=  null)  {  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	if(currName!=  null)  {  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }	  writeEOFRecord();    buffer.flushBlock();    finished    =    true;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
60	[BUG]  [BUGGY]  writeEOFRecord();  buffer.flushBlock();  finished  =  false;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  writeEOFRecord();  buffer.flushBlock();  finished  =  false;  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	writeEOFRecord();  buffer.flushBlock();  finished  =  false;	  writeEOFRecord();    buffer.flushBlock();    finished    =    true;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
61	[BUG]  [BUGGY]  if(haveUnclosedEntry)  {  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  else  {  throw  new  IOException( " ");  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  if(haveUnclosedEntry)  {  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  else  {  throw  new  IOException( " ");  }  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	if(haveUnclosedEntry)  {  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  else  {  throw  new  IOException( " ");  }	  writeEOFRecord();    buffer.flushBlock();    finished    =    true;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
62	[BUG]  [BUGGY]  if(isEnabled(Feature.AUTO_CLOSE_ERROR))  {  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  if(isEnabled(Feature.AUTO_CLOSE_ERROR))  {  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	if(isEnabled(Feature.AUTO_CLOSE_ERROR))  {  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }	  writeEOFRecord();    buffer.flushBlock();    finished    =    true;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
63	[BUG]  [BUGGY]  os.writeEndByteBuffer();  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  os.writeEndByteBuffer();  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	os.writeEndByteBuffer();	  os.flushBuffer();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
64	[BUG]  [BUGGY]  os.writeEndBuffer();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  os.writeEndBuffer();  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	os.writeEndBuffer();	  os.flushBuffer();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
65	[BUG]  [BUGGY]  os.writeEndBytes(recordBuf);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  os.writeEndBytes(recordBuf);  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	os.writeEndBytes(recordBuf);	  os.flushBuffer();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
66	[BUG]  [BUGGY]  os.writeEndBytes(buffer,  0,  buffer.length);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  os.writeEndBytes(buffer,  0,  buffer.length);  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	os.writeEndBytes(buffer,  0,  buffer.length);	  os.close();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
67	[BUG]  [BUGGY]  os.writeEndByteBuffer(buffer,  0,  buffer.length);  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  os.writeEndByteBuffer(buffer,  0,  buffer.length);  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	os.writeEndByteBuffer(buffer,  0,  buffer.length);	  os.close();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
68	[BUG]  [BUGGY]  os.writeEndBytes(recordBuf,  0,  buffer.length);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  os.writeEndBytes(recordBuf,  0,  buffer.length);  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	os.writeEndBytes(recordBuf,  0,  buffer.length);	  os.close();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
69	[BUG]  [BUGGY]  if(haveUnclosedEntry)  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  if(haveUnclosedEntry)  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	if(haveUnclosedEntry)  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }	  writeEOFRecord();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
70	[BUG]  [BUGGY]  if(closed)  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  if(closed)  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	if(closed)  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }	  writeEOFRecord();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
71	[BUG]  [BUGGY]  if(!closed)  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  if(!closed)  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	if(!closed)  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }	  writeEOFRecord();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
72	[BUG]  [BUGGY]  if(!finished)  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  if(!finished)  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	if(!finished)  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }	  writeEOFRecord();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
73	[BUG]  [BUGGY]  if(haveUnclosedEntry)  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  if(haveUnclosedEntry)  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  false;  }  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	if(haveUnclosedEntry)  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  false;  }	  writeEOFRecord();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
74	[BUG]  [BUGGY]  if(!finished)  {  writeEOFRecord();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  if(!finished)  {  writeEOFRecord();  }  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	if(!finished)  {  writeEOFRecord();  }	  writeEOFRecord();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
75	[BUG]  [BUGGY]  os.write(assemBuf,  0,  currSize);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  os.write(assemBuf,  0,  currSize);  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	os.write(assemBuf,  0,  currSize);	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
76	[BUG]  [BUGGY]  os.writeBytes(buffer,  0,  buffer.length);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  os.writeBytes(buffer,  0,  buffer.length);  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	os.writeBytes(buffer,  0,  buffer.length);	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
77	[BUG]  [BUGGY]  out.write(assemBuf,  0,  currSize);  buffer.flush();  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  out.write(assemBuf,  0,  currSize);  buffer.flush();  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	out.write(assemBuf,  0,  currSize);  buffer.flush();	  out.write(assemBuf,    0,    assemLen);    buffer.flush();    	non-compiled	[CE]  <identifier>  expected	14	None	replace
78	[BUG]  [BUGGY]  if(haveUnclosedEntry)  {  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  else  {  buffer.flushBlock();  finished  =  true;  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  if(haveUnclosedEntry)  {  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  else  {  buffer.flushBlock();  finished  =  true;  }  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	if(haveUnclosedEntry)  {  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  else  {  buffer.flushBlock();  finished  =  true;  }	  writeEOFRecord();    buffer.flushBlock();    finished    =    true;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
79	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  if(hasUnclosedEntry)  {  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	if(hasUnclosedEntry)  {  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }	  writeEOFRecord();    buffer.flushBlock();    finished    =    true;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
80	[BUG]  [BUGGY]  if(haveUnclosedEntry)  {  writeEOFRecord();  buffer.flushBlock();  }  else  {  buffer.flushBlock();  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  if(haveUnclosedEntry)  {  writeEOFRecord();  buffer.flushBlock();  }  else  {  buffer.flushBlock();  }  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	if(haveUnclosedEntry)  {  writeEOFRecord();  buffer.flushBlock();  }  else  {  buffer.flushBlock();  }	  writeEOFRecord();    buffer.flushBlock();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
81	[BUG]  [BUGGY]  if(finished)  {  writeEOFRecord();  buffer.flushBlock();  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  if(finished)  {  writeEOFRecord();  buffer.flushBlock();  }  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	if(finished)  {  writeEOFRecord();  buffer.flushBlock();  }	  writeEOFRecord();    buffer.flushBlock();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
82	[BUG]  [BUGGY]  os.writeBytes(currName);  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  os.writeBytes(currName);  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	os.writeBytes(currName);	  os.flushBuffer();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
83	[BUG]  [BUGGY]  os.writeFieldName(currName);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  os.writeFieldName(currName);  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	os.writeFieldName(currName);	  os.flushBuffer();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
84	[BUG]  [BUGGY]  os.writeRaw(assemBuf);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  os.writeRaw(assemBuf);  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	os.writeRaw(assemBuf);	  os.flushBuffer();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
85	[BUG]  [BUGGY]  os.writeRaw('n');  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  os.writeRaw('n');  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	os.writeRaw('n');	  os.flush();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
86	[BUG]  [BUGGY]  os.copyCurrentStructure(assemBuf,  0,  buffer.length);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  os.copyCurrentStructure(assemBuf,  0,  buffer.length);  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	os.copyCurrentStructure(assemBuf,  0,  buffer.length);	  os.write(assemBuf,    0,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
87	[BUG]  [BUGGY]  os.copyCurrentStructure(buffer,  0,  buffer.length);  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  os.copyCurrentStructure(buffer,  0,  buffer.length);  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	os.copyCurrentStructure(buffer,  0,  buffer.length);	  os.write(buffer,    0,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
88	[BUG]  [BUGGY]  os.write(buffer,  0,  buffer.length  -  4);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  os.write(buffer,  0,  buffer.length  -  4);  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	os.write(buffer,  0,  buffer.length  -  4);	  os.write(buffer,    0,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
89	[BUG]  [BUGGY]  out.write(assemBuf,  0,  recordBuf.length);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  out.write(assemBuf,  0,  recordBuf.length);  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	out.write(assemBuf,  0,  recordBuf.length);	  out.write(assemBuf,    0,    assemLen);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
90	[BUG]  [BUGGY]  out.write(assemBuf,  0,  assemLen  -  1);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  out.write(assemBuf,  0,  assemLen  -  1);  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	out.write(assemBuf,  0,  assemLen  -  1);	  out.write(assemBuf,    0,    assemLen);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
91	[BUG]  [BUGGY]  out.write(assemBuf,  0,  currSize);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  out.write(assemBuf,  0,  currSize);  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	out.write(assemBuf,  0,  currSize);	  out.write(assemBuf,    0,    assemLen);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
92	[BUG]  [BUGGY]  os.writeEndByte(buffer,  0,  buffer.length);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  os.writeEndByte(buffer,  0,  buffer.length);  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	os.writeEndByte(buffer,  0,  buffer.length);	  os.close();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
93	[BUG]  [BUGGY]  os.writeEndByteBuffer(buffer);  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  os.writeEndByteBuffer(buffer);  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	os.writeEndByteBuffer(buffer);	  os.close();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
94	[BUG]  [BUGGY]  if(haveUnclosedEntry)  {  buffer.flushBlock();  finished  =  true;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  if(haveUnclosedEntry)  {  buffer.flushBlock();  finished  =  true;  }  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	if(haveUnclosedEntry)  {  buffer.flushBlock();  finished  =  true;  }	  if(!closed)    {    buffer.flushBlock();    finished    =    true;    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
95	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  buffer.flushBlock();  finished  =  true;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  if(hasUnclosedEntry)  {  buffer.flushBlock();  finished  =  true;  }  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	if(hasUnclosedEntry)  {  buffer.flushBlock();  finished  =  true;  }	  if(!closed)    {    buffer.flushBlock();    finished    =    true;    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
96	[BUG]  [BUGGY]  if(hadUnclosed)  {  buffer.flushBlock();  finished  =  true;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  if(hadUnclosed)  {  buffer.flushBlock();  finished  =  true;  }  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	if(hadUnclosed)  {  buffer.flushBlock();  finished  =  true;  }	  if(!closed)    {    buffer.flushBlock();    finished    =    true;    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
97	[BUG]  [BUGGY]  if(!finished)  {  buffer.flushBlock();  finished  =  true;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  if(!finished)  {  buffer.flushBlock();  finished  =  true;  }  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	if(!finished)  {  buffer.flushBlock();  finished  =  true;  }	  if(!closed)    {    buffer.flushBlock();    finished    =    true;    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
98	[BUG]  [BUGGY]  final  OutputStream  out  =  buffer.releaseOutputStream();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  final  OutputStream  out  =  buffer.releaseOutputStream();  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	final  OutputStream  out  =  buffer.releaseOutputStream();	  final    OutputStream    out    =    buffer.getOutputStream();    	non-compiled	[CE]  <identifier>  expected	6	None	replace
99	[BUG]  [BUGGY]  final  OutputStream  out  =  buffer.getOutputStream(recordBuf);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  final  OutputStream  out  =  buffer.getOutputStream(recordBuf);  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	final  OutputStream  out  =  buffer.getOutputStream(recordBuf);	  final    OutputStream    out    =    buffer.getOutputStream();    	non-compiled	[CE]  <identifier>  expected	6	None	replace
100	[BUG]  [BUGGY]  final  OutputStream  out  =  buffer.getOutputStream(true);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  final  OutputStream  out  =  buffer.getOutputStream(true);  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	final  OutputStream  out  =  buffer.getOutputStream(true);	  final    OutputStream    out    =    buffer.getOutputStream();    	non-compiled	[CE]  <identifier>  expected	6	None	replace
101	[BUG]  [BUGGY]  out.write(assemBuf,  0,  currSize);  writeEOFRecord();  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  out.write(assemBuf,  0,  currSize);  writeEOFRecord();  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	out.write(assemBuf,  0,  currSize);  writeEOFRecord();	  out.write(assemBuf,    0,    assemLen);    writeEOFRecord();    	non-compiled	[CE]  <identifier>  expected	15	None	replace
102	[BUG]  [BUGGY]  if(haveUnclosedEntry)  {  writeEOFRecord();  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  if(haveUnclosedEntry)  {  writeEOFRecord();  }  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	if(haveUnclosedEntry)  {  writeEOFRecord();  }	  writeEOFRecord();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
103	[BUG]  [BUGGY]  out.write(assemBuf,  0,  assemBuf.length);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  out.write(assemBuf,  0,  assemBuf.length);  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	out.write(assemBuf,  0,  assemBuf.length);	  out.write(assemBuf,    0,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
104	[BUG]  [BUGGY]  out.write(assemBuf,  0,  assemLen  +  3);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  out.write(assemBuf,  0,  assemLen  +  3);  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	out.write(assemBuf,  0,  assemLen  +  3);	  out.write(assemBuf,    0,    assemLen);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
105	[BUG]  [BUGGY]  if(assemLen  >  0)  {  out.write(assemBuf,  0,  assemLen);  writeEOFRecord();  }  else  {  buffer.flushBlock();  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  if(assemLen  >  0)  {  out.write(assemBuf,  0,  assemLen);  writeEOFRecord();  }  else  {  buffer.flushBlock();  }  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	if(assemLen  >  0)  {  out.write(assemBuf,  0,  assemLen);  writeEOFRecord();  }  else  {  buffer.flushBlock();  }	  out.write(assemBuf,    0,    assemLen);    writeEOFRecord();    	non-compiled	[CE]  <identifier>  expected	15	None	replace
106	[BUG]  [BUGGY]  if(assemLen  >  0)  {  out.write(assemBuf,  0,  assemLen);  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  false;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  if(assemLen  >  0)  {  out.write(assemBuf,  0,  assemLen);  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  false;  }  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	if(assemLen  >  0)  {  out.write(assemBuf,  0,  assemLen);  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  false;  }	  out.write(assemBuf,    0,    assemLen);    writeEOFRecord();    	non-compiled	[CE]  <identifier>  expected	15	None	replace
107	[BUG]  [BUGGY]  if(assemLen  >  0)  {  out.write(assemBuf,  0,  assemLen);  writeEOFRecord();  }  else  {  buffer.flushBlock();  started  =  true;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  if(assemLen  >  0)  {  out.write(assemBuf,  0,  assemLen);  writeEOFRecord();  }  else  {  buffer.flushBlock();  started  =  true;  }  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	if(assemLen  >  0)  {  out.write(assemBuf,  0,  assemLen);  writeEOFRecord();  }  else  {  buffer.flushBlock();  started  =  true;  }	  out.write(assemBuf,    0,    assemLen);    writeEOFRecord();    	non-compiled	[CE]  <identifier>  expected	15	None	replace
108	[BUG]  [BUGGY]  if(closed)  {  buffer.flush();  finished  =  true;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  if(closed)  {  buffer.flush();  finished  =  true;  }  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	if(closed)  {  buffer.flush();  finished  =  true;  }	  if(!closed)    {    buffer.flushBlock();    finished    =    true;    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
109	[BUG]  [BUGGY]  if(!closed)  {  buffer.flush();  finished  =  true;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  if(!closed)  {  buffer.flush();  finished  =  true;  }  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	if(!closed)  {  buffer.flush();  finished  =  true;  }	  if(!closed)    {    buffer.flushBlock();    finished    =    true;    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
110	[BUG]  [BUGGY]  while(!closed)  {  buffer.flushBlock();  finished  =  true;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  while(!closed)  {  buffer.flushBlock();  finished  =  true;  }  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	while(!closed)  {  buffer.flushBlock();  finished  =  true;  }	  if(!closed)    {    buffer.flushBlock();    finished    =    true;    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
111	[BUG]  [BUGGY]  if(closed)  {  buffer.flushBuffer();  finished  =  true;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  if(closed)  {  buffer.flushBuffer();  finished  =  true;  }  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	if(closed)  {  buffer.flushBuffer();  finished  =  true;  }	  if(!closed)    {    buffer.flushBlock();    finished    =    true;    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
112	[BUG]  [BUGGY]  if(closed)  {  buffer.flushBlock();  finished  =  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  if(closed)  {  buffer.flushBlock();  finished  =  false;  }  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	if(closed)  {  buffer.flushBlock();  finished  =  false;  }	  if(!closed)    {    buffer.flushBlock();    finished    =    true;    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
113	[BUG]  [BUGGY]  if(closed)  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  false;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  if(closed)  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  false;  }  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	if(closed)  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  false;  }	  writeEOFRecord();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
114	[BUG]  [BUGGY]  if(closed)  {  writeEOFRecord();  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  if(closed)  {  writeEOFRecord();  }  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	if(closed)  {  writeEOFRecord();  }	  writeEOFRecord();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
115	[BUG]  [BUGGY]  if(!finished)  {  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  if(!finished)  {  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	if(!finished)  {  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }	  writeEOFRecord();    buffer.flushBlock();    finished    =    true;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
116	[BUG]  [BUGGY]  if(haveUnclosedEntry)  {  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  else  {  buffer.flush();  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  if(haveUnclosedEntry)  {  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  else  {  buffer.flush();  }  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	if(haveUnclosedEntry)  {  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  else  {  buffer.flush();  }	  writeEOFRecord();    buffer.flushBlock();    finished    =    true;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
117	[BUG]  [BUGGY]  final  OutputStream  out  =  buffer.close();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  final  OutputStream  out  =  buffer.close();  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	final  OutputStream  out  =  buffer.close();	  final    OutputStream    out    =    buffer.getOutputStream();    	non-compiled	[CE]  <identifier>  expected	6	None	replace
118	[BUG]  [BUGGY]  final  OutputStream  out  =  buffer.toByteArray();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  final  OutputStream  out  =  buffer.toByteArray();  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	final  OutputStream  out  =  buffer.toByteArray();	  final    OutputStream    out    =    buffer.getOutputStream();    	non-compiled	[CE]  <identifier>  expected	6	None	replace
119	[BUG]  [BUGGY]  os.write(currName);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  os.write(currName);  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	os.write(currName);	  os.flush();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
120	[BUG]  [BUGGY]  os.write(assemBuf,  0,  recordBuf.length);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  os.write(assemBuf,  0,  recordBuf.length);  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	os.write(assemBuf,  0,  recordBuf.length);	  os.write(assemBuf,    0,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
121	[BUG]  [BUGGY]  os.write(assemBuf,  0,  assemBuf.length);  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  os.write(assemBuf,  0,  assemBuf.length);  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	os.write(assemBuf,  0,  assemBuf.length);	  os.write(assemBuf,    0,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
122	[BUG]  [BUGGY]  os.write(assemBuf,  0,  assemLen);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  os.write(assemBuf,  0,  assemLen);  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	os.write(assemBuf,  0,  assemLen);	  os.close();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
123	[BUG]  [BUGGY]  os.write(assemBuf,  0,  assemSize);  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  os.write(assemBuf,  0,  assemSize);  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	os.write(assemBuf,  0,  assemSize);	  os.close();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
124	[BUG]  [BUGGY]  if(assemLen  >  0)  {  out.write(assemBuf,  0,  assemLen);  buffer.flush();  }  else  {  buffer.flushBlock();  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  if(assemLen  >  0)  {  out.write(assemBuf,  0,  assemLen);  buffer.flush();  }  else  {  buffer.flushBlock();  }  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	if(assemLen  >  0)  {  out.write(assemBuf,  0,  assemLen);  buffer.flush();  }  else  {  buffer.flushBlock();  }	  out.write(assemBuf,    0,    assemLen);    buffer.flush();    	non-compiled	[CE]  <identifier>  expected	14	None	replace
125	[BUG]  [BUGGY]  if(assemLen  >  0)  {  out.write(assemBuf,  0,  assemLen);  buffer.flush();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;    [BUGGY]  if(assemLen  >  0)  {  out.write(assemBuf,  0,  assemLen);  buffer.flush();  }  else  {  buffer.close();  }  [BUGGY]      [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	132	132	1	replace	if(assemLen  >  0)  {  out.write(assemBuf,  0,  assemLen);  buffer.flush();  }  else  {  buffer.close();  }	  out.write(assemBuf,    0,    assemLen);    buffer.flush();    	non-compiled	[CE]  <identifier>  expected	14	None	replace
