bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(closed)  {  [CE]  <identifier>  expected  [FE]    AssertionFailedError  [CONTEXT]  public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException( "This  archive  has  already  been  finished ");  }  [BUGGY]  if(closed)  {  [BUGGY]  throw  new  IOException( "This  archives  contains  unclosed  entries. ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	125	125	1	replace	if(closed)  {	if(haveUnclosedEntry)  {  	non-compiled	[CE]  <identifier>  expected	29	None	replace
2	[BUG]  [BUGGY]  if(finished)  {  [CE]  <identifier>  expected  [FE]      AssertionFailedError  [CONTEXT]  public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException( "This  archive  has  already  been  finished ");  }  [BUGGY]  if(finished)  {  [BUGGY]  throw  new  IOException( "This  archives  contains  unclosed  entries. ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	125	125	1	replace	if(finished)  {	if(haveUnclosedEntry)  {  	non-compiled	[CE]  <identifier>  expected	29	None	replace
3	[BUG]  [BUGGY]  if(!finished)  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError  [CONTEXT]  public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException( "This  archive  has  already  been  finished ");  }  [BUGGY]  if(!finished)  {  [BUGGY]  throw  new  IOException( "This  archives  contains  unclosed  entries. ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	125	125	1	replace	if(!finished)  {	if(haveUnclosedEntry)  {  	non-compiled	[CE]  <identifier>  expected	29	None	replace
4	[BUG]  [BUGGY]  if(!closed)  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError  [CONTEXT]  public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException( "This  archive  has  already  been  finished ");  }  [BUGGY]  if(!closed)  {  [BUGGY]  throw  new  IOException( "This  archives  contains  unclosed  entries. ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	125	125	1	replace	if(!closed)  {	if(haveUnclosedEntry)  {  	non-compiled	[CE]  <identifier>  expected	29	None	replace
5	[BUG]  [BUGGY]  if(unclosed)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError  [CONTEXT]  public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException( "This  archive  has  already  been  finished ");  }  [BUGGY]  if(unclosed)  {  [BUGGY]  throw  new  IOException( "This  archives  contains  unclosed  entries. ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	125	125	1	replace	if(unclosed)  {	if(haveUnclosedEntry)  {  	non-compiled	[CE]  <identifier>  expected	29	None	replace
6	[BUG]  [BUGGY]  if(completed)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError  [CONTEXT]  public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException( "This  archive  has  already  been  finished ");  }  [BUGGY]  if(completed)  {  [BUGGY]  throw  new  IOException( "This  archives  contains  unclosed  entries. ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	125	125	1	replace	if(completed)  {	if(haveUnclosedEntry)  {  	non-compiled	[CE]  <identifier>  expected	29	None	replace
7	[BUG]  [BUGGY]    [CE]  <identifier>  expected  [FE]                AssertionFailedError  [CONTEXT]  public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException( "This  archive  has  already  been  finished ");  }  [BUGGY]    [BUGGY]  throw  new  IOException( "This  archives  contains  unclosed  entries. ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	125	125	1	replace	  	if(haveUnclosedEntry)  {  	non-compiled	[CE]  <identifier>  expected	29	None	replace
8	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  [CE]  <identifier>  expected  [FE]    AssertionFailedError  [CONTEXT]  public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException( "This  archive  has  already  been  finished ");  }  [BUGGY]  if(recordBuf!=  null)  {  [BUGGY]  throw  new  IOException( "This  archives  contains  unclosed  entries. ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	125	125	1	replace	if(recordBuf!=  null)  {	if(haveUnclosedEntry)  {  	non-compiled	[CE]  <identifier>  expected	29	None	replace
9	[BUG]  [BUGGY]  if(cloned)  {  [CE]  <identifier>  expected  [FE]      AssertionFailedError  [CONTEXT]  public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException( "This  archive  has  already  been  finished ");  }  [BUGGY]  if(cloned)  {  [BUGGY]  throw  new  IOException( "This  archives  contains  unclosed  entries. ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	125	125	1	replace	if(cloned)  {	if(haveUnclosedEntry)  {  	non-compiled	[CE]  <identifier>  expected	29	None	replace
10	[BUG]  [BUGGY]  if(this.closed)  {  [CE]  <identifier>  expected  [FE]    AssertionFailedError  [CONTEXT]  public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException( "This  archive  has  already  been  finished ");  }  [BUGGY]  if(this.closed)  {  [BUGGY]  throw  new  IOException( "This  archives  contains  unclosed  entries. ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	125	125	1	replace	if(this.closed)  {	if(haveUnclosedEntry)  {  	non-compiled	[CE]  <identifier>  expected	29	None	replace
