bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||!cloned)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(hasUnclosedEntry  ||!cloned)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(hasUnclosedEntry  ||!cloned)  {	  if(!cloned)    {    	non-compiled	[CE]  <identifier>  expected	54	None	replace
2	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||!cloned)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||!cloned)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)||!cloned)  {	  if(!cloned)    {    	non-compiled	[CE]  <identifier>  expected	54	None	replace
3	[BUG]  [BUGGY]  if(!cloned  &&  buffer.length  >  0)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!cloned  &&  buffer.length  >  0)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!cloned  &&  buffer.length  >  0)  {	  if(!cloned)    {    	non-compiled	[CE]  <identifier>  expected	54	None	replace
4	[BUG]  [BUGGY]  if(os!=  null)  {  os.flush();  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(os!=  null)  {  os.flush();  }  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(os!=  null)  {  os.flush();  }	  os.flush();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
5	[BUG]  [BUGGY]  if(os!=  null)  {  os.flush();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(os!=  null)  {  os.flush();  }  else  {  buffer.close();  }  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(os!=  null)  {  os.flush();  }  else  {  buffer.close();  }	  os.flush();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
6	[BUG]  [BUGGY]  if(os!=  null)  {  os.flush();  }  else  {  buffer.close();  out.close();  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(os!=  null)  {  os.flush();  }  else  {  buffer.close();  out.close();  }  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(os!=  null)  {  os.flush();  }  else  {  buffer.close();  out.close();  }	  os.flush();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
7	[BUG]  [BUGGY]  if(os!=  null)  {  os.flush();  }  else  {  out.close();  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(os!=  null)  {  os.flush();  }  else  {  out.close();  }  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(os!=  null)  {  os.flush();  }  else  {  out.close();  }	  os.flush();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
8	[BUG]  [BUGGY]  if(os!=  null)  {  os.flush();  }  else  {  buffer.close();  out  =  null;  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(os!=  null)  {  os.flush();  }  else  {  buffer.close();  out  =  null;  }  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(os!=  null)  {  os.flush();  }  else  {  buffer.close();  out  =  null;  }	  os.flush();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
9	[BUG]  [BUGGY]  System.err.println( "TarBuffer  cloned. ");  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  System.err.println( "TarBuffer  cloned. ");  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	System.err.println( "TarBuffer  cloned. ");	  System.err.println(   "TarBuffer    cloned   ");    	non-compiled	[CE]  <identifier>  expected	50	None	replace
10	[BUG]  [BUGGY]  System.err.println( "TarBuffer  cloned: "  +  currName);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  System.err.println( "TarBuffer  cloned: "  +  currName);  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	System.err.println( "TarBuffer  cloned: "  +  currName);	  System.err.println(   "TarBuffer    cloned   ");    	non-compiled	[CE]  <identifier>  expected	50	None	replace
11	[BUG]  [BUGGY]  System.err.println( "TarBuffer  cloned "  +  currName);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  System.err.println( "TarBuffer  cloned "  +  currName);  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	System.err.println( "TarBuffer  cloned "  +  currName);	  System.err.println(   "TarBuffer    cloned   ");    	non-compiled	[CE]  <identifier>  expected	50	None	replace
12	[BUG]  [BUGGY]  System.err.println( "TarBuffer  cloned! ");  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  System.err.println( "TarBuffer  cloned! ");  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	System.err.println( "TarBuffer  cloned! ");	  System.err.println(   "TarBuffer    cloned   ");    	non-compiled	[CE]  <identifier>  expected	50	None	replace
13	[BUG]  [BUGGY]  System.err.println( "TarBuffer  cloned  for: "  +  currName);  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  System.err.println( "TarBuffer  cloned  for: "  +  currName);  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	System.err.println( "TarBuffer  cloned  for: "  +  currName);	  System.err.println(   "TarBuffer    cloned   ");    	non-compiled	[CE]  <identifier>  expected	50	None	replace
14	[BUG]  [BUGGY]  if(assemBuf!=  null  &&!recordBuf.isClosed())  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(assemBuf!=  null  &&!recordBuf.isClosed())  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(assemBuf!=  null  &&!recordBuf.isClosed())  {	  if(recordBuf!=    null    &&!recordBuf.isClosed())    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
15	[BUG]  [BUGGY]  if(recordBuf  ==  null  &&!recordBuf.isClosed())  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(recordBuf  ==  null  &&!recordBuf.isClosed())  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(recordBuf  ==  null  &&!recordBuf.isClosed())  {	  if(recordBuf!=    null    &&!recordBuf.isClosed())    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
16	[BUG]  [BUGGY]  if(buffer!=  null  &&!recordBuf.isClosed())  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(buffer!=  null  &&!recordBuf.isClosed())  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(buffer!=  null  &&!recordBuf.isClosed())  {	  if(recordBuf!=    null    &&!recordBuf.isClosed())    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
17	[BUG]  [BUGGY]  if(recordBuf!=  null  ||!recordBuf.isOpen())  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(recordBuf!=  null  ||!recordBuf.isOpen())  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(recordBuf!=  null  ||!recordBuf.isOpen())  {	  if(!recordBuf.isOpen())    {    	non-compiled	[CE]  <identifier>  expected	28	None	replace
18	[BUG]  [BUGGY]  if(recordBuf!=  null  &&!recordBuf.isOpen())  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(recordBuf!=  null  &&!recordBuf.isOpen())  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(recordBuf!=  null  &&!recordBuf.isOpen())  {	  if(!recordBuf.isOpen())    {    	non-compiled	[CE]  <identifier>  expected	28	None	replace
19	[BUG]  [BUGGY]  if(recordBuf  ==  null  ||!recordBuf.isOpen())  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(recordBuf  ==  null  ||!recordBuf.isOpen())  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(recordBuf  ==  null  ||!recordBuf.isOpen())  {	  if(!recordBuf.isOpen())    {    	non-compiled	[CE]  <identifier>  expected	28	None	replace
20	[BUG]  [BUGGY]  if(!recordBuf.isAssignableFrom(assemBuf))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!recordBuf.isAssignableFrom(assemBuf))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!recordBuf.isAssignableFrom(assemBuf))  {	  if(!recordBuf.isOpen())    {    	non-compiled	[CE]  <identifier>  expected	28	None	replace
21	[BUG]  [BUGGY]  if(!recordBuf.isOpen()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!recordBuf.isOpen()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!recordBuf.isOpen()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(!recordBuf.isOpen())    {    	non-compiled	[CE]  <identifier>  expected	28	None	replace
22	[BUG]  [BUGGY]  if(!recordBuf.isOpen()  &&  isEnabled(Feature.AUTO_CLOSE_ERROR))  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!recordBuf.isOpen()  &&  isEnabled(Feature.AUTO_CLOSE_ERROR))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!recordBuf.isOpen()  &&  isEnabled(Feature.AUTO_CLOSE_ERROR))  {	  if(!recordBuf.isOpen())    {    	non-compiled	[CE]  <identifier>  expected	28	None	replace
23	[BUG]  [BUGGY]  if(recordBuf!=  null  ||!recordBuf.length)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(recordBuf!=  null  ||!recordBuf.length)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(recordBuf!=  null  ||!recordBuf.length)  {	  if(!recordBuf.length)    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
24	[BUG]  [BUGGY]  if(recordBuf  ==  null  ||!recordBuf.length)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(recordBuf  ==  null  ||!recordBuf.length)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(recordBuf  ==  null  ||!recordBuf.length)  {	  if(!recordBuf.length)    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
25	[BUG]  [BUGGY]  if(!assemBuf.length)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!assemBuf.length)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!assemBuf.length)  {	  if(!recordBuf.length)    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
26	[BUG]  [BUGGY]  if(!recordBuf.length  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!recordBuf.length  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!recordBuf.length  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(!recordBuf.length)    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
27	[BUG]  [BUGGY]  if(!recordBuf.length  &&  buffer.length  >  0)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!recordBuf.length  &&  buffer.length  >  0)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!recordBuf.length  &&  buffer.length  >  0)  {	  if(!recordBuf.length)    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
28	[BUG]  [BUGGY]  if(recordBuf  ==  null)  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(recordBuf  ==  null)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(recordBuf  ==  null)  {	  if(!recordBuf.length)    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
29	[BUG]  [BUGGY]  if(!hasUnclosedEntry  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!hasUnclosedEntry  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!hasUnclosedEntry  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(!hasUnclosedEntry    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	39	None	replace
30	[BUG]  [BUGGY]  if(!hasUnclosedEntry  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  true))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!hasUnclosedEntry  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  true))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!hasUnclosedEntry  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  true))  {	  if(!hasUnclosedEntry    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	39	None	replace
31	[BUG]  [BUGGY]  if(!closed  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!closed  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!closed  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(!hasUnclosedEntry    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	39	None	replace
32	[BUG]  [BUGGY]  if(hasUnclosedEntry  &&  out!=  null)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(hasUnclosedEntry  &&  out!=  null)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(hasUnclosedEntry  &&  out!=  null)  {	  if(hasUnclosedEntry    ||    out!=    null)    {    	non-compiled	[CE]  <identifier>  expected	35	None	replace
33	[BUG]  [BUGGY]  if(!hasUnclosedEntry  &&  out!=  null)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!hasUnclosedEntry  &&  out!=  null)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!hasUnclosedEntry  &&  out!=  null)  {	  if(hasUnclosedEntry    ||    out!=    null)    {    	non-compiled	[CE]  <identifier>  expected	35	None	replace
34	[BUG]  [BUGGY]  if(!hasUnclosedEntry  ||  out!=  null)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!hasUnclosedEntry  ||  out!=  null)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!hasUnclosedEntry  ||  out!=  null)  {	  if(hasUnclosedEntry    ||    out!=    null)    {    	non-compiled	[CE]  <identifier>  expected	35	None	replace
35	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  out.length  ==  0)  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(hasUnclosedEntry  ||  out.length  ==  0)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(hasUnclosedEntry  ||  out.length  ==  0)  {	  if(hasUnclosedEntry    ||    out!=    null)    {    	non-compiled	[CE]  <identifier>  expected	35	None	replace
36	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.FLUSH_PASSED_TO_STREAM))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.FLUSH_PASSED_TO_STREAM))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.FLUSH_PASSED_TO_STREAM))  {	  if(isEnabled(Feature.FLUSH_PASSED_TO_STREAM))    {    	non-compiled	[CE]  <identifier>  expected	60	None	replace
37	[BUG]  [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(isEnabled(Feature.FLUSH_PASSED_TO_STREAM))    {    	non-compiled	[CE]  <identifier>  expected	60	None	replace
38	[BUG]  [BUGGY]  if(!isEnabled(Feature.FLUSH_PASSED_TO_STREAM))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!isEnabled(Feature.FLUSH_PASSED_TO_STREAM))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!isEnabled(Feature.FLUSH_PASSED_TO_STREAM))  {	  if(isEnabled(Feature.FLUSH_PASSED_TO_STREAM))    {    	non-compiled	[CE]  <identifier>  expected	60	None	replace
39	[BUG]  [BUGGY]  if(isEnabled(Feature.FLUSH_PASSED_TO_STREAM  ||  isEnabled(Feature.AUTO_CLOSE_TO_STREAM))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.FLUSH_PASSED_TO_STREAM  ||  isEnabled(Feature.AUTO_CLOSE_TO_STREAM))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(isEnabled(Feature.FLUSH_PASSED_TO_STREAM  ||  isEnabled(Feature.AUTO_CLOSE_TO_STREAM))  {	  if(isEnabled(Feature.FLUSH_PASSED_TO_STREAM))    {    	non-compiled	[CE]  <identifier>  expected	60	None	replace
40	[BUG]  [BUGGY]  if(isEnabled(Feature.FLUSH_PASSED_TO_STREAM)||  hasUnclosedEntry)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.FLUSH_PASSED_TO_STREAM)||  hasUnclosedEntry)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(isEnabled(Feature.FLUSH_PASSED_TO_STREAM)||  hasUnclosedEntry)  {	  if(isEnabled(Feature.FLUSH_PASSED_TO_STREAM))    {    	non-compiled	[CE]  <identifier>  expected	60	None	replace
41	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(isEnabled(Feature.FLUSH_PASSED_TO_STREAM))    {    	non-compiled	[CE]  <identifier>  expected	60	None	replace
42	[BUG]  [BUGGY]  if(isRecorded())  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(isRecorded())  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(isRecorded())  {	  if(haveUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	40	None	replace
43	[BUG]  [BUGGY]  if(hasUnclosedEntry  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(hasUnclosedEntry  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(hasUnclosedEntry  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(hasUnclosedEntry    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
44	[BUG]  [BUGGY]  if(!hasUnclosedEntry  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!hasUnclosedEntry  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!hasUnclosedEntry  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(hasUnclosedEntry    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
45	[BUG]  [BUGGY]  if(!hasUnclosedEntry  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!hasUnclosedEntry  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!hasUnclosedEntry  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(hasUnclosedEntry    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
46	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  isEnabled(Feature.QUOTE_FIELD_NAME,  true))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(hasUnclosedEntry  ||  isEnabled(Feature.QUOTE_FIELD_NAME,  true))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(hasUnclosedEntry  ||  isEnabled(Feature.QUOTE_FIELD_NAME,  true))  {	  if(hasUnclosedEntry    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
47	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_ERROR))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_ERROR))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_ERROR))  {	  if(hasUnclosedEntry    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
48	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  hasMoreGuaranteed())  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(hasUnclosedEntry  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  hasMoreGuaranteed())  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(hasUnclosedEntry  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  hasMoreGuaranteed())  {	  if(hasUnclosedEntry    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
49	[BUG]  [BUGGY]  if(assemBuf  ==  null  ||!recordBuf.isClosed())  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(assemBuf  ==  null  ||!recordBuf.isClosed())  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(assemBuf  ==  null  ||!recordBuf.isClosed())  {	  if(recordBuf    ==    null    ||!recordBuf.isClosed())    {    	non-compiled	[CE]  <identifier>  expected	23	None	replace
50	[BUG]  [BUGGY]  if(recordBuf  ==  null  ||!recordBuf.close())  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(recordBuf  ==  null  ||!recordBuf.close())  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(recordBuf  ==  null  ||!recordBuf.close())  {	  if(recordBuf    ==    null    ||!recordBuf.isClosed())    {    	non-compiled	[CE]  <identifier>  expected	23	None	replace
51	[BUG]  [BUGGY]  if(recordBuf  ==  null  ||!recordBuf.isRecorded())  {  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(recordBuf  ==  null  ||!recordBuf.isRecorded())  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(recordBuf  ==  null  ||!recordBuf.isRecorded())  {	  if(recordBuf    ==    null    ||!recordBuf.isClosed())    {    	non-compiled	[CE]  <identifier>  expected	23	None	replace
52	[BUG]  [BUGGY]  if(buffer  ==  null  ||!recordBuf.isClosed())  {  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||!recordBuf.isClosed())  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(buffer  ==  null  ||!recordBuf.isClosed())  {	  if(recordBuf    ==    null    ||!recordBuf.isClosed())    {    	non-compiled	[CE]  <identifier>  expected	23	None	replace
53	[BUG]  [BUGGY]  if(hasUnclosedEntry  &&  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(hasUnclosedEntry  &&  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(hasUnclosedEntry  &&  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {	  if(hasUnclosedEntry    ||    isEnabled(Feature.AUTO_CLOSE_SOURCE))    {    	non-compiled	[CE]  <identifier>  expected	61	None	replace
54	[BUG]  [BUGGY]  if(!hasUnclosedEntry  &&  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!hasUnclosedEntry  &&  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!hasUnclosedEntry  &&  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {	  if(hasUnclosedEntry    ||    isEnabled(Feature.AUTO_CLOSE_SOURCE))    {    	non-compiled	[CE]  <identifier>  expected	61	None	replace
55	[BUG]  [BUGGY]  if(isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(isEnabled(Feature.AUTO_CLOSE_SOURCE))  {	  if(hasUnclosedEntry    ||    isEnabled(Feature.AUTO_CLOSE_SOURCE))    {    	non-compiled	[CE]  <identifier>  expected	61	None	replace
56	[BUG]  [BUGGY]  if(!hasUnclosedEntry  ||  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!hasUnclosedEntry  ||  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!hasUnclosedEntry  ||  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {	  if(hasUnclosedEntry    ||    isEnabled(Feature.AUTO_CLOSE_SOURCE))    {    	non-compiled	[CE]  <identifier>  expected	61	None	replace
57	[BUG]  [BUGGY]  if(!closed  ||  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!closed  ||  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!closed  ||  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {	  if(hasUnclosedEntry    ||    isEnabled(Feature.AUTO_CLOSE_SOURCE))    {    	non-compiled	[CE]  <identifier>  expected	61	None	replace
58	[BUG]  [BUGGY]  if(recordBuf!=  null  ||!recordBuf.closed())  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(recordBuf!=  null  ||!recordBuf.closed())  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(recordBuf!=  null  ||!recordBuf.closed())  {	  if(!recordBuf.closed())    {    	non-compiled	[CE]  <identifier>  expected	24	None	replace
59	[BUG]  [BUGGY]  if(recordBuf  ==  null  ||!recordBuf.closed())  {  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(recordBuf  ==  null  ||!recordBuf.closed())  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(recordBuf  ==  null  ||!recordBuf.closed())  {	  if(!recordBuf.closed())    {    	non-compiled	[CE]  <identifier>  expected	24	None	replace
60	[BUG]  [BUGGY]  if(recordBuf!=  null  &&!recordBuf.closed())  {  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(recordBuf!=  null  &&!recordBuf.closed())  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(recordBuf!=  null  &&!recordBuf.closed())  {	  if(!recordBuf.closed())    {    	non-compiled	[CE]  <identifier>  expected	24	None	replace
61	[BUG]  [BUGGY]  if(recordBuf!=  null  ||!recordBuf.close())  {  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(recordBuf!=  null  ||!recordBuf.close())  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(recordBuf!=  null  ||!recordBuf.close())  {	  if(!recordBuf.closed())    {    	non-compiled	[CE]  <identifier>  expected	24	None	replace
62	[BUG]  [BUGGY]  if(!recordBuf.closed()  &&  buffer.length  >  0)  {  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!recordBuf.closed()  &&  buffer.length  >  0)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!recordBuf.closed()  &&  buffer.length  >  0)  {	  if(!recordBuf.closed())    {    	non-compiled	[CE]  <identifier>  expected	24	None	replace
63	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&!hasUnclosedEntry)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&!hasUnclosedEntry)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&!hasUnclosedEntry)  {	  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||!hasUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
64	[BUG]  [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAMES)&&!hasUnclosedEntry)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAMES)&&!hasUnclosedEntry)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!isEnabled(Feature.QUOTE_FIELD_NAMES)&&!hasUnclosedEntry)  {	  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||!hasUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
65	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||!closed)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||!closed)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)||!closed)  {	  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||!hasUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
66	[BUG]  [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAMES)||!hasUnclosedEntry)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAMES)||!hasUnclosedEntry)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!isEnabled(Feature.QUOTE_FIELD_NAMES)||!hasUnclosedEntry)  {	  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||!hasUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
67	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(TarBuffer.DEFAULT_CLOSE_ERROR))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(TarBuffer.DEFAULT_CLOSE_ERROR))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(TarBuffer.DEFAULT_CLOSE_ERROR))  {	  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||!hasUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
68	[BUG]  [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAMES)||!closed)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAMES)||!closed)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!isEnabled(Feature.QUOTE_FIELD_NAMES)||!closed)  {	  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||!haveUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
69	[BUG]  [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAMES)&&!closed)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAMES)&&!closed)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!isEnabled(Feature.QUOTE_FIELD_NAMES)&&!closed)  {	  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||!haveUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
70	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
71	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
72	[BUG]  [BUGGY]  if(!hasUnclosedEntry  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!hasUnclosedEntry  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!hasUnclosedEntry  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
73	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
74	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FILE_ERROR)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FILE_ERROR)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(isEnabled(Feature.QUOTE_FILE_ERROR)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
75	[BUG]  [BUGGY]  if(hasUnclosedEntry  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasMoreGuaranteed())  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(hasUnclosedEntry  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasMoreGuaranteed())  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(hasUnclosedEntry  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasMoreGuaranteed())  {	  if(hasUnclosedEntry    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	19	None	replace
76	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasUnclosedEntry())  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasUnclosedEntry())  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasUnclosedEntry())  {	  if(hasUnclosedEntry    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	19	None	replace
77	[BUG]  [BUGGY]  if(!hasUnclosedEntry  &&  buffer  ==  null)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!hasUnclosedEntry  &&  buffer  ==  null)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!hasUnclosedEntry  &&  buffer  ==  null)  {	  if(!hasUnclosedEntry    &&    buffer!=    null)    {    	non-compiled	[CE]  <identifier>  expected	56	None	replace
78	[BUG]  [BUGGY]  if(!closed  &&  buffer!=  null)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!closed  &&  buffer!=  null)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!closed  &&  buffer!=  null)  {	  if(!hasUnclosedEntry    &&    buffer!=    null)    {    	non-compiled	[CE]  <identifier>  expected	56	None	replace
79	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
80	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FILE_ERROR)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FILE_ERROR)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(isEnabled(Feature.QUOTE_FILE_ERROR)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
81	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_GNU))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_GNU))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_GNU))  {	  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
82	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
83	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_SIZE))  {  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_SIZE))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_SIZE))  {	  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
84	[BUG]  [BUGGY]  if(assemBuf!=  null)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(assemBuf!=  null)  {  out.close();  }  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(assemBuf!=  null)  {  out.close();  }	  if(recordBuf!=    null)    {    out.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
85	[BUG]  [BUGGY]  if(assemBuf!=  null)  {  out.close();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(assemBuf!=  null)  {  out.close();  }  else  {  buffer.close();  }  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(assemBuf!=  null)  {  out.close();  }  else  {  buffer.close();  }	  if(recordBuf!=    null)    {    out.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
86	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(recordBuf!=  null)  {  out.close();  }  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(recordBuf!=  null)  {  out.close();  }	  if(recordBuf!=    null)    {    out.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
87	[BUG]  [BUGGY]  if(assemBuf  ==  null)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(assemBuf  ==  null)  {  out.close();  }  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(assemBuf  ==  null)  {  out.close();  }	  if(recordBuf!=    null)    {    out.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
88	[BUG]  [BUGGY]  if(assemBuf  ==  null)  {  out.close();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(assemBuf  ==  null)  {  out.close();  }  else  {  buffer.close();  }  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(assemBuf  ==  null)  {  out.close();  }  else  {  buffer.close();  }	  if(recordBuf!=    null)    {    out.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
89	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(hasUnclosedEntry)  {  buffer.close();  }  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(hasUnclosedEntry)  {  buffer.close();  }	  if(!closed)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	49	None	replace
90	[BUG]  [BUGGY]  if(!hasUnclosedEntry)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!hasUnclosedEntry)  {  buffer.close();  }  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!hasUnclosedEntry)  {  buffer.close();  }	  if(!closed)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	49	None	replace
91	[BUG]  [BUGGY]  if(!hasUnclosed)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!hasUnclosed)  {  buffer.close();  }  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!hasUnclosed)  {  buffer.close();  }	  if(!closed)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	49	None	replace
92	[BUG]  [BUGGY]  while(!closed)  {  buffer.close();  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  while(!closed)  {  buffer.close();  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	while(!closed)  {  buffer.close();	  if(!closed)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	49	None	replace
93	[BUG]  [BUGGY]  this.recordBuf  =  new  byte[LONGFILE_ERROR];  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  this.recordBuf  =  new  byte[LONGFILE_ERROR];  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	this.recordBuf  =  new  byte[LONGFILE_ERROR];	  this.recordBuf    =    null;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
94	[BUG]  [BUGGY]  this.recordBuf  =  new  byte[LONGFILE_GNU];  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  this.recordBuf  =  new  byte[LONGFILE_GNU];  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	this.recordBuf  =  new  byte[LONGFILE_GNU];	  this.recordBuf    =    null;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
95	[BUG]  [BUGGY]  this.recordBuf  =  buffer;  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  this.recordBuf  =  buffer;  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	this.recordBuf  =  buffer;	  this.recordBuf    =    null;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
96	[BUG]  [BUGGY]  this.recordBuf  =  assemBuf;  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  this.recordBuf  =  assemBuf;  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	this.recordBuf  =  assemBuf;	  this.recordBuf    =    null;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
97	[BUG]  [BUGGY]  this.recordBuf  =  new  byte[LONGFILE_ERROR].getBytes();  [CE]  <identifier>  expected  [FE]                                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  this.recordBuf  =  new  byte[LONGFILE_ERROR].getBytes();  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	this.recordBuf  =  new  byte[LONGFILE_ERROR].getBytes();	  this.recordBuf    =    null;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
98	[BUG]  [BUGGY]  this.recordBuf  =  new  StringBuffer();  [CE]  <identifier>  expected  [FE]                                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  this.recordBuf  =  new  StringBuffer();  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	this.recordBuf  =  new  StringBuffer();	  this.recordBuf    =    null;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
99	[BUG]  [BUGGY]  if(isRecorded()  &&!hasUnclosedEntry)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(isRecorded()  &&!hasUnclosedEntry)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(isRecorded()  &&!hasUnclosedEntry)  {	  if(isRecorded()    ||!hasUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	63	None	replace
100	[BUG]  [BUGGY]  if(!isRecorded()  ||!hasUnclosedEntry)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!isRecorded()  ||!hasUnclosedEntry)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!isRecorded()  ||!hasUnclosedEntry)  {	  if(isRecorded()    ||!hasUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	63	None	replace
101	[BUG]  [BUGGY]  if(isRecorded()  ||  hasUnclosedEntry)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(isRecorded()  ||  hasUnclosedEntry)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(isRecorded()  ||  hasUnclosedEntry)  {	  if(isRecorded()    ||!hasUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	63	None	replace
102	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  isRecorded())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(hasUnclosedEntry  ||  isRecorded())  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(hasUnclosedEntry  ||  isRecorded())  {	  if(isRecorded()    ||!hasUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	63	None	replace
103	[BUG]  [BUGGY]  if(!isRecorded()  ||  hasUnclosedEntry)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!isRecorded()  ||  hasUnclosedEntry)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!isRecorded()  ||  hasUnclosedEntry)  {	  if(isRecorded()    ||!hasUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	63	None	replace
104	[BUG]  [BUGGY]  if(isRecorded()  ||!closed)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(isRecorded()  ||!closed)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(isRecorded()  ||!closed)  {	  if(isRecorded()    ||!hasUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	63	None	replace
105	[BUG]  [BUGGY]  if(!recordBuf.isClosed()  ||  isEnabled(Feature.AUTO_CLOSE_ERROR))  {  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!recordBuf.isClosed()  ||  isEnabled(Feature.AUTO_CLOSE_ERROR))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!recordBuf.isClosed()  ||  isEnabled(Feature.AUTO_CLOSE_ERROR))  {	  if(!recordBuf.isClosed()    &&    isEnabled(Feature.AUTO_CLOSE_ERROR))    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
106	[BUG]  [BUGGY]  if(recordBuf!=  null  &&!recordBuf.isClosed()  &&  isEnabled(Feature.AUTO_CLOSE_ERROR))  {  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(recordBuf!=  null  &&!recordBuf.isClosed()  &&  isEnabled(Feature.AUTO_CLOSE_ERROR))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(recordBuf!=  null  &&!recordBuf.isClosed()  &&  isEnabled(Feature.AUTO_CLOSE_ERROR))  {	  if(!recordBuf.isClosed()    &&    isEnabled(Feature.AUTO_CLOSE_ERROR))    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
107	[BUG]  [BUGGY]  if(recordBuf!=  null  ||!recordBuf.isClosed()  &&  isEnabled(Feature.AUTO_CLOSE_ERROR))  {  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(recordBuf!=  null  ||!recordBuf.isClosed()  &&  isEnabled(Feature.AUTO_CLOSE_ERROR))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(recordBuf!=  null  ||!recordBuf.isClosed()  &&  isEnabled(Feature.AUTO_CLOSE_ERROR))  {	  if(!recordBuf.isClosed()    &&    isEnabled(Feature.AUTO_CLOSE_ERROR))    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
108	[BUG]  [BUGGY]  if(!recordBuf.close()  &&  isEnabled(Feature.AUTO_CLOSE_ERROR))  {  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!recordBuf.close()  &&  isEnabled(Feature.AUTO_CLOSE_ERROR))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!recordBuf.close()  &&  isEnabled(Feature.AUTO_CLOSE_ERROR))  {	  if(!recordBuf.isClosed()    &&    isEnabled(Feature.AUTO_CLOSE_ERROR))    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
109	[BUG]  [BUGGY]  if(recordBuf!=  null  &&  isEnabled(Feature.AUTO_CLOSE_ERROR))  {  [CE]  <identifier>  expected  [FE]                                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(recordBuf!=  null  &&  isEnabled(Feature.AUTO_CLOSE_ERROR))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(recordBuf!=  null  &&  isEnabled(Feature.AUTO_CLOSE_ERROR))  {	  if(!recordBuf.isClosed()    &&    isEnabled(Feature.AUTO_CLOSE_ERROR))    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
110	[BUG]  [BUGGY]  if(!recordBuf.close()  ||  isEnabled(Feature.AUTO_CLOSE_ERROR))  {  [CE]  <identifier>  expected  [FE]                                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!recordBuf.close()  ||  isEnabled(Feature.AUTO_CLOSE_ERROR))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!recordBuf.close()  ||  isEnabled(Feature.AUTO_CLOSE_ERROR))  {	  if(!recordBuf.isClosed()    &&    isEnabled(Feature.AUTO_CLOSE_ERROR))    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
111	[BUG]  [BUGGY]  if(!recorded  &&  isEnabled(Feature.AUTO_CLOSE_ERROR))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!recorded  &&  isEnabled(Feature.AUTO_CLOSE_ERROR))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!recorded  &&  isEnabled(Feature.AUTO_CLOSE_ERROR))  {	  if(!recorded    &&    isEnabled(Feature.AUTO_CLOSE_SOURCE))    {    	non-compiled	[CE]  <identifier>  expected	65	None	replace
112	[BUG]  [BUGGY]  if(!recorded  ||  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!recorded  ||  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!recorded  ||  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {	  if(!recorded    &&    isEnabled(Feature.AUTO_CLOSE_SOURCE))    {    	non-compiled	[CE]  <identifier>  expected	65	None	replace
113	[BUG]  [BUGGY]  if(recorded  ||  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(recorded  ||  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(recorded  ||  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {	  if(!recorded    &&    isEnabled(Feature.AUTO_CLOSE_SOURCE))    {    	non-compiled	[CE]  <identifier>  expected	65	None	replace
114	[BUG]  [BUGGY]  if(!recorded  &&  isEnabled(Feature.AUTO_CLOSE_SOURCE)||  hasUnclosedEntry)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!recorded  &&  isEnabled(Feature.AUTO_CLOSE_SOURCE)||  hasUnclosedEntry)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!recorded  &&  isEnabled(Feature.AUTO_CLOSE_SOURCE)||  hasUnclosedEntry)  {	  if(!recorded    &&    isEnabled(Feature.AUTO_CLOSE_SOURCE))    {    	non-compiled	[CE]  <identifier>  expected	65	None	replace
115	[BUG]  [BUGGY]  if(!recorded  &&  isEnabled(Feature.AUTO_CLOSE_SOURCE  ||  isEnabled(Feature.AUTO_CLOSE_ERROR))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!recorded  &&  isEnabled(Feature.AUTO_CLOSE_SOURCE  ||  isEnabled(Feature.AUTO_CLOSE_ERROR))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!recorded  &&  isEnabled(Feature.AUTO_CLOSE_SOURCE  ||  isEnabled(Feature.AUTO_CLOSE_ERROR))  {	  if(!recorded    &&    isEnabled(Feature.AUTO_CLOSE_SOURCE))    {    	non-compiled	[CE]  <identifier>  expected	65	None	replace
116	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  if(!closed)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(hasUnclosedEntry)  {  if(!closed)  {  buffer.close();  }  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(hasUnclosedEntry)  {  if(!closed)  {  buffer.close();  }	  if(!closed)    {    buffer.close();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	52	None	replace
117	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  if(!closed)  {  buffer.close();  }  else  {  out.close();  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(hasUnclosedEntry)  {  if(!closed)  {  buffer.close();  }  else  {  out.close();  }  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(hasUnclosedEntry)  {  if(!closed)  {  buffer.close();  }  else  {  out.close();  }	  if(!closed)    {    buffer.close();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	52	None	replace
118	[BUG]  [BUGGY]  if(!hasUnclosedEntry)  {  buffer.close();  }  else  {  out.close();  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!hasUnclosedEntry)  {  buffer.close();  }  else  {  out.close();  }  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!hasUnclosedEntry)  {  buffer.close();  }  else  {  out.close();  }	  if(!closed)    {    buffer.close();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	52	None	replace
119	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  if(!closed)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(recordBuf!=  null)  {  if(!closed)  {  buffer.close();  }  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(recordBuf!=  null)  {  if(!closed)  {  buffer.close();  }	  if(!closed)    {    buffer.close();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	52	None	replace
120	[BUG]  [BUGGY]  if(!hasUnclosedEntry  ||  buffer.length  ==  0)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!hasUnclosedEntry  ||  buffer.length  ==  0)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!hasUnclosedEntry  ||  buffer.length  ==  0)  {	  if(!hasUnclosedEntry    ||    buffer!=    null)    {    	non-compiled	[CE]  <identifier>  expected	55	None	replace
121	[BUG]  [BUGGY]  if(hasUnclosedEntry  &&  buffer!=  null)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(hasUnclosedEntry  &&  buffer!=  null)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(hasUnclosedEntry  &&  buffer!=  null)  {	  if(!hasUnclosedEntry    ||    buffer!=    null)    {    	non-compiled	[CE]  <identifier>  expected	55	None	replace
122	[BUG]  [BUGGY]  if(!hasUnclosedEntry  ||  buffer.length!=  0)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!hasUnclosedEntry  ||  buffer.length!=  0)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!hasUnclosedEntry  ||  buffer.length!=  0)  {	  if(!hasUnclosedEntry    ||    buffer!=    null)    {    	non-compiled	[CE]  <identifier>  expected	55	None	replace
123	[BUG]  [BUGGY]  if(!hasUnclosedEntry  ||  buffer  ==  null)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!hasUnclosedEntry  ||  buffer  ==  null)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!hasUnclosedEntry  ||  buffer  ==  null)  {	  if(!hasUnclosedEntry    ||    buffer!=    null)    {    	non-compiled	[CE]  <identifier>  expected	55	None	replace
124	[BUG]  [BUGGY]  if(!recorded  ||  hasUnclosedEntry)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!recorded  ||  hasUnclosedEntry)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!recorded  ||  hasUnclosedEntry)  {	  if(!recorded    &&    hasUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	32	None	replace
125	[BUG]  [BUGGY]  if(recorded  ||  hasUnclosedEntry)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(recorded  ||  hasUnclosedEntry)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(recorded  ||  hasUnclosedEntry)  {	  if(!recorded    &&    hasUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	32	None	replace
126	[BUG]  [BUGGY]  if(!recorded  &&  hasUnclosedEntry  &&  buffer.length  >  0)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!recorded  &&  hasUnclosedEntry  &&  buffer.length  >  0)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!recorded  &&  hasUnclosedEntry  &&  buffer.length  >  0)  {	  if(!recorded    &&    hasUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	32	None	replace
127	[BUG]  [BUGGY]  if(!closed  &&  hasUnclosedEntry)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!closed  &&  hasUnclosedEntry)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!closed  &&  hasUnclosedEntry)  {	  if(!recorded    &&    hasUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	32	None	replace
128	[BUG]  [BUGGY]  if(!recorded  &&  isEnabled(TarBuffer.this))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!recorded  &&  isEnabled(TarBuffer.this))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!recorded  &&  isEnabled(TarBuffer.this))  {	  if(!recorded    &&    hasUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	32	None	replace
129	[BUG]  [BUGGY]  if(!recordBuf.isClosed()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!recordBuf.isClosed()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!recordBuf.isClosed()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(!recordBuf.isClosed()    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	25	None	replace
130	[BUG]  [BUGGY]  if(recordBuf!=  null  &&!recordBuf.isClosed()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(recordBuf!=  null  &&!recordBuf.isClosed()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(recordBuf!=  null  &&!recordBuf.isClosed()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(!recordBuf.isClosed()    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	25	None	replace
131	[BUG]  [BUGGY]  if(recordBuf!=  null  ||!recordBuf.isClosed()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(recordBuf!=  null  ||!recordBuf.isClosed()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(recordBuf!=  null  ||!recordBuf.isClosed()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(!recordBuf.isClosed()    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	25	None	replace
132	[BUG]  [BUGGY]  if(recordBuf!=  null  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(recordBuf!=  null  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(recordBuf!=  null  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(!recordBuf.isClosed()    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	25	None	replace
133	[BUG]  [BUGGY]  if(!recordBuf.close()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!recordBuf.close()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!recordBuf.close()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(!recordBuf.isClosed()    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	25	None	replace
134	[BUG]  [BUGGY]  if(hasUnclosed  &&  buffer!=  null)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(hasUnclosed  &&  buffer!=  null)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(hasUnclosed  &&  buffer!=  null)  {	  if(hasUnclosed    ||    buffer!=    null)    {    	non-compiled	[CE]  <identifier>  expected	33	None	replace
135	[BUG]  [BUGGY]  if(!hasUnclosed  ||  buffer!=  null)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!hasUnclosed  ||  buffer!=  null)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!hasUnclosed  ||  buffer!=  null)  {	  if(hasUnclosed    ||    buffer!=    null)    {    	non-compiled	[CE]  <identifier>  expected	33	None	replace
136	[BUG]  [BUGGY]  if(hasUnclosed  ||  buffer.length!=  0)  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(hasUnclosed  ||  buffer.length!=  0)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(hasUnclosed  ||  buffer.length!=  0)  {	  if(hasUnclosed    ||    buffer!=    null)    {    	non-compiled	[CE]  <identifier>  expected	33	None	replace
137	[BUG]  [BUGGY]  if(hasUnclosed  ||  buffer.length  ==  0)  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(hasUnclosed  ||  buffer.length  ==  0)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(hasUnclosed  ||  buffer.length  ==  0)  {	  if(hasUnclosed    ||    buffer!=    null)    {    	non-compiled	[CE]  <identifier>  expected	33	None	replace
138	[BUG]  [BUGGY]  if(!hasRecordedEntry)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!hasRecordedEntry)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!hasRecordedEntry)  {	  if(hasRecordedEntry)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
139	[BUG]  [BUGGY]  if(hasRecordedEntry  ||  hasUnclosed)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(hasRecordedEntry  ||  hasUnclosed)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(hasRecordedEntry  ||  hasUnclosed)  {	  if(hasRecordedEntry)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
140	[BUG]  [BUGGY]  if(hasRecordedEntry  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(hasRecordedEntry  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(hasRecordedEntry  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(hasRecordedEntry)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
141	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  hasRecordedEntry)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(hasUnclosedEntry  ||  hasRecordedEntry)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(hasUnclosedEntry  ||  hasRecordedEntry)  {	  if(hasRecordedEntry)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
142	[BUG]  [BUGGY]  if(hasRecordedEntry  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(hasRecordedEntry  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(hasRecordedEntry  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(hasRecordedEntry)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
143	[BUG]  [BUGGY]  if(os!=  null)  {  os.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(os!=  null)  {  os.close();  }  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(os!=  null)  {  os.close();  }	  os.close();    	non-compiled	[CE]  <identifier>  expected	9	None	replace
144	[BUG]  [BUGGY]  if(os!=  null)  {  os.close();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(os!=  null)  {  os.close();  }  else  {  buffer.close();  }  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(os!=  null)  {  os.close();  }  else  {  buffer.close();  }	  os.close();    	non-compiled	[CE]  <identifier>  expected	9	None	replace
145	[BUG]  [BUGGY]  if(os!=  null)  {  os.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(os!=  null)  {  os.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(os!=  null)  {  os.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  os.close();    	non-compiled	[CE]  <identifier>  expected	9	None	replace
146	[BUG]  [BUGGY]  if(os!=  null)  {  os.close();  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(os!=  null)  {  os.close();  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(os!=  null)  {  os.close();  }  else  {  throw  new  IllegalStateException( " ");  }	  os.close();    	non-compiled	[CE]  <identifier>  expected	9	None	replace
147	[BUG]  [BUGGY]  if(os!=  null)  {  os.close();  }  else  {  out.close();  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(os!=  null)  {  os.close();  }  else  {  out.close();  }  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(os!=  null)  {  os.close();  }  else  {  out.close();  }	  os.close();    	non-compiled	[CE]  <identifier>  expected	9	None	replace
148	[BUG]  [BUGGY]  if(assemBuf!=  null)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(assemBuf!=  null)  {  buffer.close();  }  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(assemBuf!=  null)  {  buffer.close();  }	  if(recordBuf!=    null)    {    buffer.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	66	None	replace
149	[BUG]  [BUGGY]  if(assemBuf!=  null)  {  buffer.close();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(assemBuf!=  null)  {  buffer.close();  }  else  {  buffer.close();  }  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(assemBuf!=  null)  {  buffer.close();  }  else  {  buffer.close();  }	  if(recordBuf!=    null)    {    buffer.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	66	None	replace
150	[BUG]  [BUGGY]  if(assemBuf  ==  null)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(assemBuf  ==  null)  {  buffer.close();  }  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(assemBuf  ==  null)  {  buffer.close();  }	  if(recordBuf!=    null)    {    buffer.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	66	None	replace
151	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(recordBuf!=  null)  {  buffer.close();  }  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(recordBuf!=  null)  {  buffer.close();  }	  if(recordBuf!=    null)    {    buffer.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	66	None	replace
152	[BUG]  [BUGGY]  (recordBuf!=  null)?  null  :  recordBuf.close();  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  (recordBuf!=  null)?  null  :  recordBuf.close();  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	(recordBuf!=  null)?  null  :  recordBuf.close();	  if(recordBuf!=    null)    {    buffer.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	66	None	replace
153	[BUG]  [BUGGY]  if(assemBuf  ==  null)  {  buffer.close();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(assemBuf  ==  null)  {  buffer.close();  }  else  {  buffer.close();  }  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(assemBuf  ==  null)  {  buffer.close();  }  else  {  buffer.close();  }	  if(recordBuf!=    null)    {    buffer.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	66	None	replace
154	[BUG]  [BUGGY]  if(assemBuf!=  null)  {  buffer.close();  }  else  {  out.close();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(assemBuf!=  null)  {  buffer.close();  }  else  {  out.close();  }  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(assemBuf!=  null)  {  buffer.close();  }  else  {  out.close();  }	  if(recordBuf!=    null)    {    buffer.close();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	67	None	replace
155	[BUG]  [BUGGY]  if(assemBuf  ==  null)  {  buffer.close();  }  else  {  out.close();  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(assemBuf  ==  null)  {  buffer.close();  }  else  {  out.close();  }  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(assemBuf  ==  null)  {  buffer.close();  }  else  {  out.close();  }	  if(recordBuf!=    null)    {    buffer.close();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	67	None	replace
156	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&!closed)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&!closed)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&!closed)  {	  if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&!haveUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
157	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasUnclosedEntry)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasUnclosedEntry)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasUnclosedEntry)  {	  if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&!haveUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
158	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)&&!closed)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)&&!closed)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)&&!closed)  {	  if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&!haveUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
159	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME)&&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME)&&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAME)&&  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(isEnabled(Feature.QUOTE_FIELD_NAME)||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
160	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_CLOSE_ERROR)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_CLOSE_ERROR)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(isEnabled(Feature.QUOTE_CLOSE_ERROR)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(isEnabled(Feature.QUOTE_FIELD_NAME)||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
161	[BUG]  [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAME)&&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAME)&&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!isEnabled(Feature.QUOTE_FIELD_NAME)&&  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(isEnabled(Feature.QUOTE_FIELD_NAME)||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
162	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_ERROR)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_ERROR)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(isEnabled(Feature.QUOTE_ERROR)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(isEnabled(Feature.QUOTE_FIELD_NAME)||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
163	[BUG]  [BUGGY]  if(hasUnclosedEntry  &&  isEnabled(Feature.AUTO_CLOSE_ERROR))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(hasUnclosedEntry  &&  isEnabled(Feature.AUTO_CLOSE_ERROR))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(hasUnclosedEntry  &&  isEnabled(Feature.AUTO_CLOSE_ERROR))  {	  if(hasUnclosedEntry    ||    isEnabled(Feature.AUTO_CLOSE_ERROR))    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
164	[BUG]  [BUGGY]  if(!hasUnclosedEntry  &&  isEnabled(Feature.AUTO_CLOSE_ERROR))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!hasUnclosedEntry  &&  isEnabled(Feature.AUTO_CLOSE_ERROR))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!hasUnclosedEntry  &&  isEnabled(Feature.AUTO_CLOSE_ERROR))  {	  if(hasUnclosedEntry    ||    isEnabled(Feature.AUTO_CLOSE_ERROR))    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
165	[BUG]  [BUGGY]  if(!hasUnclosedEntry  ||  isEnabled(Feature.AUTO_CLOSE_ERROR))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!hasUnclosedEntry  ||  isEnabled(Feature.AUTO_CLOSE_ERROR))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!hasUnclosedEntry  ||  isEnabled(Feature.AUTO_CLOSE_ERROR))  {	  if(hasUnclosedEntry    ||    isEnabled(Feature.AUTO_CLOSE_ERROR))    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
166	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  isEnabled(Feature.AUTO_CLOSE_ERROR,  currName))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(hasUnclosedEntry  ||  isEnabled(Feature.AUTO_CLOSE_ERROR,  currName))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(hasUnclosedEntry  ||  isEnabled(Feature.AUTO_CLOSE_ERROR,  currName))  {	  if(hasUnclosedEntry    ||    isEnabled(Feature.AUTO_CLOSE_ERROR))    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
167	[BUG]  [BUGGY]  if(isEnabled(Feature.AUTO_CLOSE_ERROR)||  hasUnclosedEntry)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.AUTO_CLOSE_ERROR)||  hasUnclosedEntry)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(isEnabled(Feature.AUTO_CLOSE_ERROR)||  hasUnclosedEntry)  {	  if(hasUnclosedEntry    ||    isEnabled(Feature.AUTO_CLOSE_ERROR))    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
168	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  isEnabled(Feature.AUTO_CLOSE_ERROR)||  hasMoreGuaranteed())  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(hasUnclosedEntry  ||  isEnabled(Feature.AUTO_CLOSE_ERROR)||  hasMoreGuaranteed())  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(hasUnclosedEntry  ||  isEnabled(Feature.AUTO_CLOSE_ERROR)||  hasMoreGuaranteed())  {	  if(hasUnclosedEntry    ||    isEnabled(Feature.AUTO_CLOSE_ERROR))    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
169	[BUG]  [BUGGY]  if(isEnabled(Feature.AUTO_CLOSE_ERROR))  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.AUTO_CLOSE_ERROR))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(isEnabled(Feature.AUTO_CLOSE_ERROR))  {	  if(hasUnclosedEntry    ||    isEnabled(Feature.AUTO_CLOSE_ERROR))    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
170	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)))  {	  if(isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	53	None	replace
171	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_FILE_ERROR))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_FILE_ERROR))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_FILE_ERROR))  {	  if(isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	53	None	replace
172	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&  hasUnclosedEntry)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&  hasUnclosedEntry)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&  hasUnclosedEntry)  {	  if(isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	53	None	replace
173	[BUG]  [BUGGY]  if(!hasUnclosedEntry)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!hasUnclosedEntry)  {  out.close();  }  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!hasUnclosedEntry)  {  out.close();  }	  if(!closed)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
174	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(hasUnclosedEntry)  {  out.close();  }  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(hasUnclosedEntry)  {  out.close();  }	  if(!closed)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
175	[BUG]  [BUGGY]  if(!hasUnclosed)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!hasUnclosed)  {  out.close();  }  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!hasUnclosed)  {  out.close();  }	  if(!closed)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
176	[BUG]  [BUGGY]  OutputStream  os  =  getOutputStream();  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  OutputStream  os  =  getOutputStream();  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	OutputStream  os  =  getOutputStream();	  if(!closed)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
177	[BUG]  [BUGGY]  OutputStream  out  =  getOutputStream();  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  OutputStream  out  =  getOutputStream();  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	OutputStream  out  =  getOutputStream();	  if(!closed)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
178	[BUG]  [BUGGY]  if(hasUnclosedEntry  &&  out  ==  null)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(hasUnclosedEntry  &&  out  ==  null)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(hasUnclosedEntry  &&  out  ==  null)  {	  if(hasUnclosedEntry    ||    out    ==    null)    {    	non-compiled	[CE]  <identifier>  expected	42	None	replace
179	[BUG]  [BUGGY]  if(!hasUnclosedEntry  &&  out  ==  null)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!hasUnclosedEntry  &&  out  ==  null)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!hasUnclosedEntry  &&  out  ==  null)  {	  if(hasUnclosedEntry    ||    out    ==    null)    {    	non-compiled	[CE]  <identifier>  expected	42	None	replace
180	[BUG]  [BUGGY]  if(!recorded  &&  buffer!=  null)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!recorded  &&  buffer!=  null)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!recorded  &&  buffer!=  null)  {	  if(!recorded    &&    out!=    null)    {    	non-compiled	[CE]  <identifier>  expected	46	None	replace
181	[BUG]  [BUGGY]  if(!recorded  &&  out  ==  null)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!recorded  &&  out  ==  null)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!recorded  &&  out  ==  null)  {	  if(!recorded    &&    out!=    null)    {    	non-compiled	[CE]  <identifier>  expected	46	None	replace
182	[BUG]  [BUGGY]  if(recorded  ||  out!=  null)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(recorded  ||  out!=  null)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(recorded  ||  out!=  null)  {	  if(!recorded    &&    out!=    null)    {    	non-compiled	[CE]  <identifier>  expected	46	None	replace
183	[BUG]  [BUGGY]  if(!recorded  ||  out!=  null)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!recorded  ||  out!=  null)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!recorded  ||  out!=  null)  {	  if(!recorded    &&    out!=    null)    {    	non-compiled	[CE]  <identifier>  expected	46	None	replace
184	[BUG]  [BUGGY]  if(recorded  &&  out!=  null)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(recorded  &&  out!=  null)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(recorded  &&  out!=  null)  {	  if(!recorded    &&    out!=    null)    {    	non-compiled	[CE]  <identifier>  expected	46	None	replace
185	[BUG]  [BUGGY]  if(!recorded  &&  out!=  null  &&  buffer.length  >  0)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!recorded  &&  out!=  null  &&  buffer.length  >  0)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!recorded  &&  out!=  null  &&  buffer.length  >  0)  {	  if(!recorded    &&    out!=    null)    {    	non-compiled	[CE]  <identifier>  expected	46	None	replace
186	[BUG]  [BUGGY]  if(recordBuf!=  null  &&!recordBuf.close())  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(recordBuf!=  null  &&!recordBuf.close())  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(recordBuf!=  null  &&!recordBuf.close())  {	  if(!recordBuf.close())    {    	non-compiled	[CE]  <identifier>  expected	22	None	replace
187	[BUG]  [BUGGY]  if(!assemBuf.close())  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!assemBuf.close())  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!assemBuf.close())  {	  if(!recordBuf.close())    {    	non-compiled	[CE]  <identifier>  expected	22	None	replace
188	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasMoreGuaranteed())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(hasUnclosedEntry  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasMoreGuaranteed())  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(hasUnclosedEntry  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasMoreGuaranteed())  {	  if(hasUnclosedEntry    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	16	None	replace
189	[BUG]  [BUGGY]  if(!recorded  &&  out.length  >  0)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!recorded  &&  out.length  >  0)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!recorded  &&  out.length  >  0)  {	  if(!recorded    &&    buffer.length    >    0)    {    	non-compiled	[CE]  <identifier>  expected	31	None	replace
190	[BUG]  [BUGGY]  if(recorded  ||  buffer.length  >  0)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(recorded  ||  buffer.length  >  0)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(recorded  ||  buffer.length  >  0)  {	  if(!recorded    &&    buffer.length    >    0)    {    	non-compiled	[CE]  <identifier>  expected	31	None	replace
191	[BUG]  [BUGGY]  if(!recorded  ||  buffer.length  >  0)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!recorded  ||  buffer.length  >  0)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!recorded  ||  buffer.length  >  0)  {	  if(!recorded    &&    buffer.length    >    0)    {    	non-compiled	[CE]  <identifier>  expected	31	None	replace
192	[BUG]  [BUGGY]  if(!recorded  &&  buffer!=  null  &&  buffer.length  >  0)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!recorded  &&  buffer!=  null  &&  buffer.length  >  0)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!recorded  &&  buffer!=  null  &&  buffer.length  >  0)  {	  if(!recorded    &&    buffer.length    >    0)    {    	non-compiled	[CE]  <identifier>  expected	31	None	replace
193	[BUG]  [BUGGY]  if(!recorded  &&  buffer.length  >  0  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!recorded  &&  buffer.length  >  0  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!recorded  &&  buffer.length  >  0  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(!recorded    &&    buffer.length    >    0)    {    	non-compiled	[CE]  <identifier>  expected	31	None	replace
194	[BUG]  [BUGGY]  if(!recorded  &&  buffer.length  >  0  &&  hasUnclosedEntry)  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!recorded  &&  buffer.length  >  0  &&  hasUnclosedEntry)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!recorded  &&  buffer.length  >  0  &&  hasUnclosedEntry)  {	  if(!recorded    &&    buffer.length    >    0)    {    	non-compiled	[CE]  <identifier>  expected	31	None	replace
195	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&!hasUnclosedEntry())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&!hasUnclosedEntry())  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&!hasUnclosedEntry())  {	  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||!hasUnclosedEntry())    {    	non-compiled	[CE]  <identifier>  expected	59	None	replace
196	[BUG]  [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAMES)&&!hasUnclosedEntry())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAMES)&&!hasUnclosedEntry())  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!isEnabled(Feature.QUOTE_FIELD_NAMES)&&!hasUnclosedEntry())  {	  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||!hasUnclosedEntry())    {    	non-compiled	[CE]  <identifier>  expected	59	None	replace
197	[BUG]  [BUGGY]  if(hasUnclosedEntry()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(hasUnclosedEntry()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(hasUnclosedEntry()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||!hasUnclosedEntry())    {    	non-compiled	[CE]  <identifier>  expected	59	None	replace
198	[BUG]  [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAMES)||!hasUnclosedEntry())  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAMES)||!hasUnclosedEntry())  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!isEnabled(Feature.QUOTE_FIELD_NAMES)||!hasUnclosedEntry())  {	  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||!hasUnclosedEntry())    {    	non-compiled	[CE]  <identifier>  expected	59	None	replace
199	[BUG]  [BUGGY]  if(assemBuf!=  null  ||!recordBuf.isClosed())  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(assemBuf!=  null  ||!recordBuf.isClosed())  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(assemBuf!=  null  ||!recordBuf.isClosed())  {	  if(recordBuf!=    null    ||!recordBuf.isClosed())    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
200	[BUG]  [BUGGY]  if(buffer!=  null  ||!recordBuf.isClosed())  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(buffer!=  null  ||!recordBuf.isClosed())  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(buffer!=  null  ||!recordBuf.isClosed())  {	  if(recordBuf!=    null    ||!recordBuf.isClosed())    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
201	[BUG]  [BUGGY]  OutputStream  out  =  this.getOut();  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  OutputStream  out  =  this.getOut();  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	OutputStream  out  =  this.getOut();	  OutputStream    out    =    getOut();    	non-compiled	[CE]  <identifier>  expected	15	None	replace
202	[BUG]  [BUGGY]  OutputStream  out  =  this.recordBuf.getOut();  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  OutputStream  out  =  this.recordBuf.getOut();  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	OutputStream  out  =  this.recordBuf.getOut();	  OutputStream    out    =    getOut();    	non-compiled	[CE]  <identifier>  expected	15	None	replace
203	[BUG]  [BUGGY]  OutputStream  out  =  getInputStream();  [CE]  <identifier>  expected  [FE]                                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  OutputStream  out  =  getInputStream();  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	OutputStream  out  =  getInputStream();	  OutputStream    out    =    getOut();    	non-compiled	[CE]  <identifier>  expected	15	None	replace
204	[BUG]  [BUGGY]  OutputStream  out  =  os.getOut();  [CE]  <identifier>  expected  [FE]                                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  OutputStream  out  =  os.getOut();  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	OutputStream  out  =  os.getOut();	  OutputStream    out    =    getOut();    	non-compiled	[CE]  <identifier>  expected	15	None	replace
205	[BUG]  [BUGGY]  OutputStream  out  =  getErrorOutput();  [CE]  <identifier>  expected  [FE]                                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  OutputStream  out  =  getErrorOutput();  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	OutputStream  out  =  getErrorOutput();	  OutputStream    out    =    getOut();    	non-compiled	[CE]  <identifier>  expected	15	None	replace
206	[BUG]  [BUGGY]  OutputStream  out  =  super.close();  [CE]  <identifier>  expected  [FE]                                                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  OutputStream  out  =  super.close();  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	OutputStream  out  =  super.close();	  OutputStream    out    =    getOut();    	non-compiled	[CE]  <identifier>  expected	15	None	replace
207	[BUG]  [BUGGY]  if(hasRecorded)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(hasRecorded)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(hasRecorded)  {	  if(!hasRecorded)    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
208	[BUG]  [BUGGY]  if(!hasRecorded  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!hasRecorded  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!hasRecorded  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(!hasRecorded)    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
209	[BUG]  [BUGGY]  if(!hasRecorded  &&  isEnabled(TarBuffer.DEFAULT_CLOSE_ERROR))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!hasRecorded  &&  isEnabled(TarBuffer.DEFAULT_CLOSE_ERROR))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!hasRecorded  &&  isEnabled(TarBuffer.DEFAULT_CLOSE_ERROR))  {	  if(!hasRecorded)    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
210	[BUG]  [BUGGY]  if(!hasRecorded  &&  isEnabled(Feature.AUTO_CLOSE_ERROR))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!hasRecorded  &&  isEnabled(Feature.AUTO_CLOSE_ERROR))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!hasRecorded  &&  isEnabled(Feature.AUTO_CLOSE_ERROR))  {	  if(!hasRecorded)    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
211	[BUG]  [BUGGY]  if(!hasRecorded  &&  isEnabled(TarBuffer.DEFAULT_CLOSED_ERROR))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!hasRecorded  &&  isEnabled(TarBuffer.DEFAULT_CLOSED_ERROR))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!hasRecorded  &&  isEnabled(TarBuffer.DEFAULT_CLOSED_ERROR))  {	  if(!hasRecorded)    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
212	[BUG]  [BUGGY]  if(hasUnclosedEntry  &&  isEnabled(Feature.FLUSH_PASSED_TO_STREAM))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(hasUnclosedEntry  &&  isEnabled(Feature.FLUSH_PASSED_TO_STREAM))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(hasUnclosedEntry  &&  isEnabled(Feature.FLUSH_PASSED_TO_STREAM))  {	  if(hasUnclosedEntry    ||    isEnabled(Feature.FLUSH_PASSED_TO_STREAM))    {    	non-compiled	[CE]  <identifier>  expected	62	None	replace
213	[BUG]  [BUGGY]  if(!hasUnclosedEntry  &&  isEnabled(Feature.FLUSH_PASSED_TO_STREAM))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!hasUnclosedEntry  &&  isEnabled(Feature.FLUSH_PASSED_TO_STREAM))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!hasUnclosedEntry  &&  isEnabled(Feature.FLUSH_PASSED_TO_STREAM))  {	  if(hasUnclosedEntry    ||    isEnabled(Feature.FLUSH_PASSED_TO_STREAM))    {    	non-compiled	[CE]  <identifier>  expected	62	None	replace
214	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  isEnabled(Feature.CLUSH_PASSED_TO_STREAM))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(hasUnclosedEntry  ||  isEnabled(Feature.CLUSH_PASSED_TO_STREAM))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(hasUnclosedEntry  ||  isEnabled(Feature.CLUSH_PASSED_TO_STREAM))  {	  if(hasUnclosedEntry    ||    isEnabled(Feature.FLUSH_PASSED_TO_STREAM))    {    	non-compiled	[CE]  <identifier>  expected	62	None	replace
215	[BUG]  [BUGGY]  if(!recordBuf.isClosed()  ||  buffer.length  >  0)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!recordBuf.isClosed()  ||  buffer.length  >  0)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!recordBuf.isClosed()  ||  buffer.length  >  0)  {	  if(!recordBuf.isClosed()    &&    buffer.length    >    0)    {    	non-compiled	[CE]  <identifier>  expected	43	None	replace
216	[BUG]  [BUGGY]  if(recordBuf!=  null  ||!recordBuf.isClosed()  &&  buffer.length  >  0)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(recordBuf!=  null  ||!recordBuf.isClosed()  &&  buffer.length  >  0)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(recordBuf!=  null  ||!recordBuf.isClosed()  &&  buffer.length  >  0)  {	  if(!recordBuf.isClosed()    &&    buffer.length    >    0)    {    	non-compiled	[CE]  <identifier>  expected	43	None	replace
217	[BUG]  [BUGGY]  if(recordBuf!=  null  &&!recordBuf.isClosed()  &&  buffer.length  >  0)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(recordBuf!=  null  &&!recordBuf.isClosed()  &&  buffer.length  >  0)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(recordBuf!=  null  &&!recordBuf.isClosed()  &&  buffer.length  >  0)  {	  if(!recordBuf.isClosed()    &&    buffer.length    >    0)    {    	non-compiled	[CE]  <identifier>  expected	43	None	replace
218	[BUG]  [BUGGY]  if(recordBuf!=  null  &&  buffer.length  >  0)  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(recordBuf!=  null  &&  buffer.length  >  0)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(recordBuf!=  null  &&  buffer.length  >  0)  {	  if(!recordBuf.isClosed()    &&    buffer.length    >    0)    {    	non-compiled	[CE]  <identifier>  expected	43	None	replace
219	[BUG]  [BUGGY]  if(!recordBuf.isClosed()  &&  out.length  >  0)  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!recordBuf.isClosed()  &&  out.length  >  0)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!recordBuf.isClosed()  &&  out.length  >  0)  {	  if(!recordBuf.isClosed()    &&    buffer.length    >    0)    {    	non-compiled	[CE]  <identifier>  expected	43	None	replace
220	[BUG]  [BUGGY]  if(!recordBuf.isOpen()  &&  buffer.length  >  0)  {  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!recordBuf.isOpen()  &&  buffer.length  >  0)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!recordBuf.isOpen()  &&  buffer.length  >  0)  {	  if(!recordBuf.isClosed()    &&    buffer.length    >    0)    {    	non-compiled	[CE]  <identifier>  expected	43	None	replace
221	[BUG]  [BUGGY]  out.flush();  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  out.flush();  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	out.flush();	  out.close();    	non-compiled	[CE]  <identifier>  expected	14	None	replace
222	[BUG]  [BUGGY]  if(out!=  null)  {  out.close();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(out!=  null)  {  out.close();  }  else  {  buffer.close();  }  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(out!=  null)  {  out.close();  }  else  {  buffer.close();  }	  out.close();    	non-compiled	[CE]  <identifier>  expected	14	None	replace
223	[BUG]  [BUGGY]  if(out!=  null)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(out!=  null)  {  out.close();  }  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(out!=  null)  {  out.close();  }	  out.close();    	non-compiled	[CE]  <identifier>  expected	14	None	replace
224	[BUG]  [BUGGY]  out.write(assemBuf,  0,  assemLen);  [CE]  <identifier>  expected  [FE]                                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  out.write(assemBuf,  0,  assemLen);  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	out.write(assemBuf,  0,  assemLen);	  out.close();    	non-compiled	[CE]  <identifier>  expected	14	None	replace
225	[BUG]  [BUGGY]  if(out!=  null)  {  out.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(out!=  null)  {  out.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(out!=  null)  {  out.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  out.close();    	non-compiled	[CE]  <identifier>  expected	14	None	replace
226	[BUG]  [BUGGY]  if(out!=  null)  {  out.close();  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]                                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(out!=  null)  {  out.close();  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(out!=  null)  {  out.close();  }  else  {  throw  new  IllegalStateException( " ");  }	  out.close();    	non-compiled	[CE]  <identifier>  expected	14	None	replace
227	[BUG]  [BUGGY]  this.assemBuf.flush();  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  this.assemBuf.flush();  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	this.assemBuf.flush();	  this.assemBuf.close();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
228	[BUG]  [BUGGY]  assemBuf.close();  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  assemBuf.close();  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	assemBuf.close();	  this.assemBuf.close();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
229	[BUG]  [BUGGY]  this.assemBuf.release();  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  this.assemBuf.release();  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	this.assemBuf.release();	  this.assemBuf.close();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
230	[BUG]  [BUGGY]  this.assemBuf.finish();  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  this.assemBuf.finish();  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	this.assemBuf.finish();	  this.assemBuf.close();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
231	[BUG]  [BUGGY]  this.assemBuf.close(true);  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  this.assemBuf.close(true);  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	this.assemBuf.close(true);	  this.assemBuf.close();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
232	[BUG]  [BUGGY]  if(hasUnclosedEntry  &&!assemBuf.isEmpty())  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(hasUnclosedEntry  &&!assemBuf.isEmpty())  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(hasUnclosedEntry  &&!assemBuf.isEmpty())  {	  if(hasUnclosedEntry    &&!finished)    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
233	[BUG]  [BUGGY]  if(!recorded  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!recorded  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!recorded  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(!recorded    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	64	None	replace
234	[BUG]  [BUGGY]  if(!recorded  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasUnclosedEntry)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!recorded  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasUnclosedEntry)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!recorded  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasUnclosedEntry)  {	  if(!recorded    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	64	None	replace
235	[BUG]  [BUGGY]  if(recorded  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(recorded  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(recorded  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(!recorded    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	64	None	replace
236	[BUG]  [BUGGY]  if(!recorded  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  true))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!recorded  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  true))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!recorded  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  true))  {	  if(!recorded    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	64	None	replace
237	[BUG]  [BUGGY]  if(recorded  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(recorded  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(recorded  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(!recorded    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	64	None	replace
238	[BUG]  [BUGGY]  if(assemBuf!=  null)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(assemBuf!=  null)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(assemBuf!=  null)  {	  if(recordBuf!=    null)    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
239	[BUG]  [BUGGY]  if(buffer!=  null)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(buffer!=  null)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(buffer!=  null)  {	  if(recordBuf!=    null)    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
240	[BUG]  [BUGGY]  if(assemBuf  ==  null)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(assemBuf  ==  null)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(assemBuf  ==  null)  {	  if(recordBuf!=    null)    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
241	[BUG]  [BUGGY]  if(buffer  ==  null)  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(buffer  ==  null)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(buffer  ==  null)  {	  if(recordBuf!=    null)    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
242	[BUG]  [BUGGY]  if(assemBuf!=  null  ||  recordBuf.length  ==  0)  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(assemBuf!=  null  ||  recordBuf.length  ==  0)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(assemBuf!=  null  ||  recordBuf.length  ==  0)  {	  if(recordBuf!=    null)    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
243	[BUG]  [BUGGY]  if(hasUnclosedEntry  &&!recorded)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(hasUnclosedEntry  &&!recorded)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(hasUnclosedEntry  &&!recorded)  {	  if(hasUnclosedEntry    ||!recorded)    {    	non-compiled	[CE]  <identifier>  expected	47	None	replace
244	[BUG]  [BUGGY]  if(!hasUnclosedEntry  ||!recorded)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!hasUnclosedEntry  ||!recorded)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!hasUnclosedEntry  ||!recorded)  {	  if(hasUnclosedEntry    ||!recorded)    {    	non-compiled	[CE]  <identifier>  expected	47	None	replace
245	[BUG]  [BUGGY]  if(!hasUnclosedEntry  &&!recorded)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!hasUnclosedEntry  &&!recorded)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!hasUnclosedEntry  &&!recorded)  {	  if(hasUnclosedEntry    ||!recorded)    {    	non-compiled	[CE]  <identifier>  expected	47	None	replace
246	[BUG]  [BUGGY]  if(hasUnclosedEntry  &&  buffer  ==  null)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(hasUnclosedEntry  &&  buffer  ==  null)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(hasUnclosedEntry  &&  buffer  ==  null)  {	  if(hasUnclosedEntry    ||    buffer    ==    null)    {    	non-compiled	[CE]  <identifier>  expected	45	None	replace
247	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  buffer.length  ==  0)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(hasUnclosedEntry  ||  buffer.length  ==  0)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(hasUnclosedEntry  ||  buffer.length  ==  0)  {	  if(hasUnclosedEntry    ||    buffer    ==    null)    {    	non-compiled	[CE]  <identifier>  expected	45	None	replace
248	[BUG]  [BUGGY]  if(!this.hasUnclosedEntry)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!this.hasUnclosedEntry)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!this.hasUnclosedEntry)  {	  if(this.hasUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
249	[BUG]  [BUGGY]  if(this.hasUnclosedEntry  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(this.hasUnclosedEntry  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(this.hasUnclosedEntry  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(this.hasUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
250	[BUG]  [BUGGY]  if(!this.haveUnclosedEntry)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!this.haveUnclosedEntry)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!this.haveUnclosedEntry)  {	  if(this.hasUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
251	[BUG]  [BUGGY]  if(this.hasUnclosedEntry  ||  isEnabled(Feature.AUTO_CLOSE_ERROR))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(this.hasUnclosedEntry  ||  isEnabled(Feature.AUTO_CLOSE_ERROR))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(this.hasUnclosedEntry  ||  isEnabled(Feature.AUTO_CLOSE_ERROR))  {	  if(this.hasUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
252	[BUG]  [BUGGY]  if(this.hasUnclosedEntry  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(this.hasUnclosedEntry  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(this.hasUnclosedEntry  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(this.hasUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
253	[BUG]  [BUGGY]  this.recordBuf.flush();  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  this.recordBuf.flush();  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	this.recordBuf.flush();	  this.recordBuf.close();    	non-compiled	[CE]  <identifier>  expected	10	None	replace
254	[BUG]  [BUGGY]  this.recordBuf.release();  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  this.recordBuf.release();  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	this.recordBuf.release();	  this.recordBuf.close();    	non-compiled	[CE]  <identifier>  expected	10	None	replace
255	[BUG]  [BUGGY]  this.recordBuf.finish();  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  this.recordBuf.finish();  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	this.recordBuf.finish();	  this.recordBuf.close();    	non-compiled	[CE]  <identifier>  expected	10	None	replace
256	[BUG]  [BUGGY]  this.recordBuf.closeAll();  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  this.recordBuf.closeAll();  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	this.recordBuf.closeAll();	  this.recordBuf.close();    	non-compiled	[CE]  <identifier>  expected	10	None	replace
257	[BUG]  [BUGGY]  if(hasUnclosed  ||  out  ==  null)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(hasUnclosed  ||  out  ==  null)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(hasUnclosed  ||  out  ==  null)  {	  if(hasUnclosed    ||    out!=    null)    {    	non-compiled	[CE]  <identifier>  expected	41	None	replace
258	[BUG]  [BUGGY]  if(!hasUnclosed  ||  out!=  null)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!hasUnclosed  ||  out!=  null)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!hasUnclosed  ||  out!=  null)  {	  if(hasUnclosed    ||    out!=    null)    {    	non-compiled	[CE]  <identifier>  expected	41	None	replace
259	[BUG]  [BUGGY]  if(hasUnclosed  &&  out!=  null)  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(hasUnclosed  &&  out!=  null)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(hasUnclosed  &&  out!=  null)  {	  if(hasUnclosed    ||    out!=    null)    {    	non-compiled	[CE]  <identifier>  expected	41	None	replace
260	[BUG]  [BUGGY]  if(recorded  ||  isEnabled(Feature.AUTO_CLOSE_ERROR))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(recorded  ||  isEnabled(Feature.AUTO_CLOSE_ERROR))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(recorded  ||  isEnabled(Feature.AUTO_CLOSE_ERROR))  {	  if(recorded)    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
261	[BUG]  [BUGGY]  if(hasUnclosedEntry  &&  isEnabled(TarBuffer.DEFAULT_CLOSE_ERROR))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(hasUnclosedEntry  &&  isEnabled(TarBuffer.DEFAULT_CLOSE_ERROR))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(hasUnclosedEntry  &&  isEnabled(TarBuffer.DEFAULT_CLOSE_ERROR))  {	  if(hasUnclosedEntry    ||    isEnabled(TarBuffer.DEFAULT_CLOSE_ERROR))    {    	non-compiled	[CE]  <identifier>  expected	36	None	replace
262	[BUG]  [BUGGY]  if(!hasUnclosedEntry  &&  isEnabled(TarBuffer.DEFAULT_CLOSE_ERROR))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!hasUnclosedEntry  &&  isEnabled(TarBuffer.DEFAULT_CLOSE_ERROR))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!hasUnclosedEntry  &&  isEnabled(TarBuffer.DEFAULT_CLOSE_ERROR))  {	  if(hasUnclosedEntry    ||    isEnabled(TarBuffer.DEFAULT_CLOSE_ERROR))    {    	non-compiled	[CE]  <identifier>  expected	36	None	replace
263	[BUG]  [BUGGY]  if(isEnabled(TarBuffer.DEFAULT_CLOSE_ERROR))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(isEnabled(TarBuffer.DEFAULT_CLOSE_ERROR))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(isEnabled(TarBuffer.DEFAULT_CLOSE_ERROR))  {	  if(hasUnclosedEntry    ||    isEnabled(TarBuffer.DEFAULT_CLOSE_ERROR))    {    	non-compiled	[CE]  <identifier>  expected	36	None	replace
264	[BUG]  [BUGGY]  if(isEnabled(TarBuffer.DEFAULT_CLOSE_ERROR)||  hasUnclosedEntry)  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(isEnabled(TarBuffer.DEFAULT_CLOSE_ERROR)||  hasUnclosedEntry)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(isEnabled(TarBuffer.DEFAULT_CLOSE_ERROR)||  hasUnclosedEntry)  {	  if(hasUnclosedEntry    ||    isEnabled(TarBuffer.DEFAULT_CLOSE_ERROR))    {    	non-compiled	[CE]  <identifier>  expected	36	None	replace
265	[BUG]  [BUGGY]  if(!hasUnclosedEntry  ||  isEnabled(TarBuffer.DEFAULT_CLOSE_ERROR))  {  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!hasUnclosedEntry  ||  isEnabled(TarBuffer.DEFAULT_CLOSE_ERROR))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!hasUnclosedEntry  ||  isEnabled(TarBuffer.DEFAULT_CLOSE_ERROR))  {	  if(hasUnclosedEntry    ||    isEnabled(TarBuffer.DEFAULT_CLOSE_ERROR))    {    	non-compiled	[CE]  <identifier>  expected	36	None	replace
266	[BUG]  [BUGGY]  if(isEnabled(TarBuffer.DEFAULT_CLOSE_ERROR)||  isEnabled(TarBuffer.DEFAULT_FILE_GNU))  {  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(isEnabled(TarBuffer.DEFAULT_CLOSE_ERROR)||  isEnabled(TarBuffer.DEFAULT_FILE_GNU))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(isEnabled(TarBuffer.DEFAULT_CLOSE_ERROR)||  isEnabled(TarBuffer.DEFAULT_FILE_GNU))  {	  if(hasUnclosedEntry    ||    isEnabled(TarBuffer.DEFAULT_CLOSE_ERROR))    {    	non-compiled	[CE]  <identifier>  expected	36	None	replace
267	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  buffer.length!=  0)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(hasUnclosedEntry  ||  buffer.length!=  0)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(hasUnclosedEntry  ||  buffer.length!=  0)  {	  if(hasUnclosedEntry    ||    buffer!=    null)    {    	non-compiled	[CE]  <identifier>  expected	44	None	replace
268	[BUG]  [BUGGY]  if(hasUnclosedEntry  &&!closed)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(hasUnclosedEntry  &&!closed)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(hasUnclosedEntry  &&!closed)  {	  if(hasUnclosedEntry    ||!closed)    {    	non-compiled	[CE]  <identifier>  expected	57	None	replace
269	[BUG]  [BUGGY]  if(!hasUnclosedEntry  ||!closed)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!hasUnclosedEntry  ||!closed)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!hasUnclosedEntry  ||!closed)  {	  if(hasUnclosedEntry    ||!closed)    {    	non-compiled	[CE]  <identifier>  expected	57	None	replace
270	[BUG]  [BUGGY]  if(!recorded  &&  out.close()  >  0)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!recorded  &&  out.close()  >  0)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!recorded  &&  out.close()  >  0)  {	  if(!recorded    &&    buffer.close()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	48	None	replace
271	[BUG]  [BUGGY]  if(!recorded  &&  buffer.close()  ==  0)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!recorded  &&  buffer.close()  ==  0)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!recorded  &&  buffer.close()  ==  0)  {	  if(!recorded    &&    buffer.close()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	48	None	replace
272	[BUG]  [BUGGY]  if(!recorded  &&  buffer.close()!=  0)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!recorded  &&  buffer.close()!=  0)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!recorded  &&  buffer.close()!=  0)  {	  if(!recorded    &&    buffer.close()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	48	None	replace
273	[BUG]  [BUGGY]  if(recorded  ||  buffer.close()  >  0)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(recorded  ||  buffer.close()  >  0)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(recorded  ||  buffer.close()  >  0)  {	  if(!recorded    &&    buffer.close()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	48	None	replace
274	[BUG]  [BUGGY]  if(!recorded  ||  buffer.close()  >  0)  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!recorded  ||  buffer.close()  >  0)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!recorded  ||  buffer.close()  >  0)  {	  if(!recorded    &&    buffer.close()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	48	None	replace
275	[BUG]  [BUGGY]  if(!recorded  &&  buffer.close()  <  =  0)  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!recorded  &&  buffer.close()  <  =  0)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!recorded  &&  buffer.close()  <  =  0)  {	  if(!recorded    &&    buffer.close()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	48	None	replace
276	[BUG]  [BUGGY]  if(!recordBuf.closed()  ||  buffer.length  >  0)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!recordBuf.closed()  ||  buffer.length  >  0)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!recordBuf.closed()  ||  buffer.length  >  0)  {	  if(!recordBuf.isClosed()    &&    buffer.length    >    0)    {    	non-compiled	[CE]  <identifier>  expected	43	None	replace
277	[BUG]  [BUGGY]  if(!recordBuf.close()  &&  buffer.length  >  0)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!recordBuf.close()  &&  buffer.length  >  0)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!recordBuf.close()  &&  buffer.length  >  0)  {	  if(!recordBuf.isClosed()    &&    buffer.length    >    0)    {    	non-compiled	[CE]  <identifier>  expected	43	None	replace
278	[BUG]  [BUGGY]  this.recordBuf.close(true);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  this.recordBuf.close(true);  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	this.recordBuf.close(true);	  this.recordBuf.close();    	non-compiled	[CE]  <identifier>  expected	10	None	replace
279	[BUG]  [BUGGY]  this.recordBuf.close(buffer);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  this.recordBuf.close(buffer);  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	this.recordBuf.close(buffer);	  this.recordBuf.close();    	non-compiled	[CE]  <identifier>  expected	10	None	replace
280	[BUG]  [BUGGY]  this.recordBuf.close(out);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  this.recordBuf.close(out);  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	this.recordBuf.close(out);	  this.recordBuf.close();    	non-compiled	[CE]  <identifier>  expected	10	None	replace
281	[BUG]  [BUGGY]  if(!recordBuf.close()  ||  out!=  null)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!recordBuf.close()  ||  out!=  null)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!recordBuf.close()  ||  out!=  null)  {	  if(!recordBuf.close())    {    	non-compiled	[CE]  <identifier>  expected	22	None	replace
282	[BUG]  [BUGGY]  if(!recordBuf.close()  ||  buffer!=  null)  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!recordBuf.close()  ||  buffer!=  null)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!recordBuf.close()  ||  buffer!=  null)  {	  if(!recordBuf.close())    {    	non-compiled	[CE]  <identifier>  expected	22	None	replace
283	[BUG]  [BUGGY]  if(recordBuf!=  null  &&  recordBuf.isClosed()  &&  isEnabled(Feature.AUTO_CLOSE_ERROR))  {  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(recordBuf!=  null  &&  recordBuf.isClosed()  &&  isEnabled(Feature.AUTO_CLOSE_ERROR))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(recordBuf!=  null  &&  recordBuf.isClosed()  &&  isEnabled(Feature.AUTO_CLOSE_ERROR))  {	  if(!recordBuf.isClosed()    &&    isEnabled(Feature.AUTO_CLOSE_ERROR))    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
284	[BUG]  [BUGGY]  if(!recordBuf.closed()  ||  isEnabled(Feature.AUTO_CLOSE_ERROR))  {  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!recordBuf.closed()  ||  isEnabled(Feature.AUTO_CLOSE_ERROR))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!recordBuf.closed()  ||  isEnabled(Feature.AUTO_CLOSE_ERROR))  {	  if(!recordBuf.isClosed()    &&    isEnabled(Feature.AUTO_CLOSE_ERROR))    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
285	[BUG]  [BUGGY]  if(!cloned  &&  out!=  null)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!cloned  &&  out!=  null)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!cloned  &&  out!=  null)  {	  if(!cloned)    {    	non-compiled	[CE]  <identifier>  expected	54	None	replace
286	[BUG]  [BUGGY]  if(!cloned  &&  buffer.isClosed())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!cloned  &&  buffer.isClosed())  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!cloned  &&  buffer.isClosed())  {	  if(!cloned)    {    	non-compiled	[CE]  <identifier>  expected	54	None	replace
287	[BUG]  [BUGGY]  if(recordBuf  ==  null)  {  buffer.close();  }  else  {  out.close();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(recordBuf  ==  null)  {  buffer.close();  }  else  {  out.close();  }  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(recordBuf  ==  null)  {  buffer.close();  }  else  {  out.close();  }	  if(recordBuf!=    null)    {    buffer.close();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	67	None	replace
288	[BUG]  [BUGGY]  if(recordBuf  ==  null)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(recordBuf  ==  null)  {  buffer.close();  }  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(recordBuf  ==  null)  {  buffer.close();  }	  if(recordBuf!=    null)    {    buffer.close();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	67	None	replace
289	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)&&!haveUnclosedEntry)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)&&!haveUnclosedEntry)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)&&!haveUnclosedEntry)  {	  if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&!haveUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
290	[BUG]  [BUGGY]  if(!recorded  &&  out!=  null  &&  buffer.close()  >  0)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!recorded  &&  out!=  null  &&  buffer.close()  >  0)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!recorded  &&  out!=  null  &&  buffer.close()  >  0)  {	  if(!recorded    &&    out!=    null)    {    	non-compiled	[CE]  <identifier>  expected	46	None	replace
291	[BUG]  [BUGGY]  System.err.println( "Closed  TarBuffer  cloned ");  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  System.err.println( "Closed  TarBuffer  cloned ");  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	System.err.println( "Closed  TarBuffer  cloned ");	  System.err.println(   "TarBuffer    cloned   ");    	non-compiled	[CE]  <identifier>  expected	50	None	replace
292	[BUG]  [BUGGY]  System.err.println( "TarBuffer  cloned  by: "  +  currName);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  System.err.println( "TarBuffer  cloned  by: "  +  currName);  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	System.err.println( "TarBuffer  cloned  by: "  +  currName);	  System.err.println(   "TarBuffer    cloned   ");    	non-compiled	[CE]  <identifier>  expected	50	None	replace
293	[BUG]  [BUGGY]  System.err.println( "TarBuffer  cloned:  ' "  +  currName);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  System.err.println( "TarBuffer  cloned:  ' "  +  currName);  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	System.err.println( "TarBuffer  cloned:  ' "  +  currName);	  System.err.println(   "TarBuffer    cloned   ");    	non-compiled	[CE]  <identifier>  expected	50	None	replace
294	[BUG]  [BUGGY]  System.err.println( "TarBuffer  cloned:  got "  +  currName);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  System.err.println( "TarBuffer  cloned:  got "  +  currName);  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	System.err.println( "TarBuffer  cloned:  got "  +  currName);	  System.err.println(   "TarBuffer    cloned   ");    	non-compiled	[CE]  <identifier>  expected	50	None	replace
295	[BUG]  [BUGGY]  OutputStream  out  =  getOut(),  TarBuffer.DEFAULT_TEST_OUTPUT;  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  OutputStream  out  =  getOut(),  TarBuffer.DEFAULT_TEST_OUTPUT;  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	OutputStream  out  =  getOut(),  TarBuffer.DEFAULT_TEST_OUTPUT;	  OutputStream    out    =    getOut();    	non-compiled	[CE]  <identifier>  expected	15	None	replace
296	[BUG]  [BUGGY]  OutputStream  out  =  getOut(),  TarBuffer.DEFAULT_TEST_BUFFER;  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  OutputStream  out  =  getOut(),  TarBuffer.DEFAULT_TEST_BUFFER;  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	OutputStream  out  =  getOut(),  TarBuffer.DEFAULT_TEST_BUFFER;	  OutputStream    out    =    getOut();    	non-compiled	[CE]  <identifier>  expected	15	None	replace
297	[BUG]  [BUGGY]  OutputStream  out  =  getOut()  -  1;  [CE]  <identifier>  expected  [FE]                                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  OutputStream  out  =  getOut()  -  1;  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	OutputStream  out  =  getOut()  -  1;	  OutputStream    out    =    getOut();    	non-compiled	[CE]  <identifier>  expected	15	None	replace
298	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.AUTO_CLOSE_ERROR))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(hasUnclosedEntry  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.AUTO_CLOSE_ERROR))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(hasUnclosedEntry  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.AUTO_CLOSE_ERROR))  {	  if(hasUnclosedEntry    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
299	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  hasFileMode)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(hasUnclosedEntry  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  hasFileMode)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(hasUnclosedEntry  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  hasFileMode)  {	  if(hasUnclosedEntry    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
300	[BUG]  [BUGGY]  if(hasRecordedEntry  ||  buffer!=  null)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(hasRecordedEntry  ||  buffer!=  null)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(hasRecordedEntry  ||  buffer!=  null)  {	  if(hasRecordedEntry)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
301	[BUG]  [BUGGY]  if(hasRecordedEntry  ||  out!=  null)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(hasRecordedEntry  ||  out!=  null)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(hasRecordedEntry  ||  out!=  null)  {	  if(hasRecordedEntry)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
302	[BUG]  [BUGGY]  if(hasRecordedEntry  ||  buffer  ==  null)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(hasRecordedEntry  ||  buffer  ==  null)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(hasRecordedEntry  ||  buffer  ==  null)  {	  if(hasRecordedEntry)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
303	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME)||  hasUnclosedEntry)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME)||  hasUnclosedEntry)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME)||  hasUnclosedEntry)  {	  if(isEnabled(Feature.QUOTE_FIELD_NAME)||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
304	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_ERROR)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_ERROR)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(isEnabled(Feature.QUOTE_FIELD_ERROR)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(isEnabled(Feature.QUOTE_FIELD_NAME)||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
305	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_LONGFILE_ERROR)||  isEnabled(Feature.QUOTE_LONGFILE_GNU))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_LONGFILE_ERROR)||  isEnabled(Feature.QUOTE_LONGFILE_GNU))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(isEnabled(Feature.QUOTE_LONGFILE_ERROR)||  isEnabled(Feature.QUOTE_LONGFILE_GNU))  {	  if(isEnabled(Feature.QUOTE_FIELD_NAME)||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
306	[BUG]  [BUGGY]  if(!hasRecorded  &&  out!=  null)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!hasRecorded  &&  out!=  null)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!hasRecorded  &&  out!=  null)  {	  if(!hasRecorded)    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
307	[BUG]  [BUGGY]  if(!hasRecorded  &&  buffer!=  null)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!hasRecorded  &&  buffer!=  null)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!hasRecorded  &&  buffer!=  null)  {	  if(!hasRecorded)    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
308	[BUG]  [BUGGY]  if(!hasRecorded  &&  buffer.length  >  0)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!hasRecorded  &&  buffer.length  >  0)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!hasRecorded  &&  buffer.length  >  0)  {	  if(!hasRecorded)    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
309	[BUG]  [BUGGY]  if(!hasRecorded  &&  buffer.close()  >  0)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!hasRecorded  &&  buffer.close()  >  0)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!hasRecorded  &&  buffer.close()  >  0)  {	  if(!hasRecorded)    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
310	[BUG]  [BUGGY]  if(haveUnclosedEntry  ||!closed)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(haveUnclosedEntry  ||!closed)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(haveUnclosedEntry  ||!closed)  {	  if(hasUnclosedEntry    ||!closed)    {    	non-compiled	[CE]  <identifier>  expected	57	None	replace
311	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  isEnabled(Feature.AUTO_CLOSE_SOURCE)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(hasUnclosedEntry  ||  isEnabled(Feature.AUTO_CLOSE_SOURCE)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(hasUnclosedEntry  ||  isEnabled(Feature.AUTO_CLOSE_SOURCE)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(hasUnclosedEntry    ||    isEnabled(Feature.AUTO_CLOSE_SOURCE))    {    	non-compiled	[CE]  <identifier>  expected	61	None	replace
312	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  isEnabled(Feature.AUTO_CLOSE_SOURCE)||  isEnabled(Feature.AUTO_CLOSE_GNU))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(hasUnclosedEntry  ||  isEnabled(Feature.AUTO_CLOSE_SOURCE)||  isEnabled(Feature.AUTO_CLOSE_GNU))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(hasUnclosedEntry  ||  isEnabled(Feature.AUTO_CLOSE_SOURCE)||  isEnabled(Feature.AUTO_CLOSE_GNU))  {	  if(hasUnclosedEntry    ||    isEnabled(Feature.AUTO_CLOSE_SOURCE))    {    	non-compiled	[CE]  <identifier>  expected	61	None	replace
313	[BUG]  [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAMES)&&!haveUnclosedEntry)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAMES)&&!haveUnclosedEntry)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!isEnabled(Feature.QUOTE_FIELD_NAMES)&&!haveUnclosedEntry)  {	  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||!haveUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
314	[BUG]  [BUGGY]  this.recordBuf  =  recordBuf;  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  this.recordBuf  =  recordBuf;  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	this.recordBuf  =  recordBuf;	  this.recordBuf    =    null;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
315	[BUG]  [BUGGY]  this.recordBuf  =  new  byte[lONGFILE_GNU];  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  this.recordBuf  =  new  byte[lONGFILE_GNU];  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	this.recordBuf  =  new  byte[lONGFILE_GNU];	  this.recordBuf    =    null;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
316	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_ERROR)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_ERROR)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(isEnabled(Feature.QUOTE_FIELD_ERROR)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
317	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.AUTO_CLOSE_FILE_ERROR))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(hasUnclosedEntry  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.AUTO_CLOSE_FILE_ERROR))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(hasUnclosedEntry  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.AUTO_CLOSE_FILE_ERROR))  {	  if(hasUnclosedEntry    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	16	None	replace
318	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.AUTO_CLOSE_ERROR))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(hasUnclosedEntry  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.AUTO_CLOSE_ERROR))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(hasUnclosedEntry  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.AUTO_CLOSE_ERROR))  {	  if(hasUnclosedEntry    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	16	None	replace
319	[BUG]  [BUGGY]  if(haveUnclosedEntry  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(haveUnclosedEntry  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(haveUnclosedEntry  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(hasUnclosedEntry    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	16	None	replace
320	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  buffer.close();  }  else  {  out.close();  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(hasUnclosedEntry)  {  buffer.close();  }  else  {  out.close();  }  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(hasUnclosedEntry)  {  buffer.close();  }  else  {  out.close();  }	  if(!closed)    {    buffer.close();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	52	None	replace
321	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  if(!closed)  {  buffer.close();  }  else  {  out.close();  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(recordBuf!=  null)  {  if(!closed)  {  buffer.close();  }  else  {  out.close();  }  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(recordBuf!=  null)  {  if(!closed)  {  buffer.close();  }  else  {  out.close();  }	  if(!closed)    {    buffer.close();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	52	None	replace
322	[BUG]  [BUGGY]  if(!hasUnclosedEntry  ||  out  ==  null)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!hasUnclosedEntry  ||  out  ==  null)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!hasUnclosedEntry  ||  out  ==  null)  {	  if(!hasUnclosedEntry    ||    buffer!=    null)    {    	non-compiled	[CE]  <identifier>  expected	55	None	replace
323	[BUG]  [BUGGY]  if(!haveUnclosedEntry  &&  buffer!=  null)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!haveUnclosedEntry  &&  buffer!=  null)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!haveUnclosedEntry  &&  buffer!=  null)  {	  if(!hasUnclosedEntry    ||    buffer!=    null)    {    	non-compiled	[CE]  <identifier>  expected	55	None	replace
324	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  isEnabled(Feature.WRITE_TO_STREAM))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(hasUnclosedEntry  ||  isEnabled(Feature.WRITE_TO_STREAM))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(hasUnclosedEntry  ||  isEnabled(Feature.WRITE_TO_STREAM))  {	  if(hasUnclosedEntry    ||    isEnabled(Feature.FLUSH_PASSED_TO_STREAM))    {    	non-compiled	[CE]  <identifier>  expected	62	None	replace
325	[BUG]  [BUGGY]  if(recordBuf  ==  null)  {  buffer.close();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(recordBuf  ==  null)  {  buffer.close();  }  else  {  buffer.close();  }  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(recordBuf  ==  null)  {  buffer.close();  }  else  {  buffer.close();  }	  if(recordBuf!=    null)    {    buffer.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	66	None	replace
326	[BUG]  [BUGGY]  if(!recorded  &&  isEnabled(Feature.QUOTE_FIELD_ERROR))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!recorded  &&  isEnabled(Feature.QUOTE_FIELD_ERROR))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!recorded  &&  isEnabled(Feature.QUOTE_FIELD_ERROR))  {	  if(!recorded    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	64	None	replace
327	[BUG]  [BUGGY]  if(!recorded  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  haveUnclosedEntry)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!recorded  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  haveUnclosedEntry)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!recorded  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  haveUnclosedEntry)  {	  if(!recorded    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	64	None	replace
328	[BUG]  [BUGGY]  if(!recorded  &&  isEnabled(Feature.QUOTE_FIELD_FILE_ERROR))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!recorded  &&  isEnabled(Feature.QUOTE_FIELD_FILE_ERROR))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!recorded  &&  isEnabled(Feature.QUOTE_FIELD_FILE_ERROR))  {	  if(!recorded    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	64	None	replace
329	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||!hasRecordedEntry())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||!hasRecordedEntry())  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)||!hasRecordedEntry())  {	  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||!hasUnclosedEntry())    {    	non-compiled	[CE]  <identifier>  expected	59	None	replace
330	[BUG]  [BUGGY]  if(!recorded  &&  isEnabled(Feature.AUTO_CLOSE_GNU))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!recorded  &&  isEnabled(Feature.AUTO_CLOSE_GNU))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!recorded  &&  isEnabled(Feature.AUTO_CLOSE_GNU))  {	  if(!recorded    &&    isEnabled(Feature.AUTO_CLOSE_SOURCE))    {    	non-compiled	[CE]  <identifier>  expected	65	None	replace
331	[BUG]  [BUGGY]  if(!recorded  &&  isEnabled(Feature.AUTO_CLOSE_FILE_ERROR))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!recorded  &&  isEnabled(Feature.AUTO_CLOSE_FILE_ERROR))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!recorded  &&  isEnabled(Feature.AUTO_CLOSE_FILE_ERROR))  {	  if(!recorded    &&    isEnabled(Feature.AUTO_CLOSE_SOURCE))    {    	non-compiled	[CE]  <identifier>  expected	65	None	replace
332	[BUG]  [BUGGY]  if(hasUnclosedEntry  &&!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(hasUnclosedEntry  &&!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(hasUnclosedEntry  &&!isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(hasUnclosedEntry    &&!finished)    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
333	[BUG]  [BUGGY]  if(this.haveUnclosedEntry)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(this.haveUnclosedEntry)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(this.haveUnclosedEntry)  {	  if(this.hasUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
334	[BUG]  [BUGGY]  if(this.hasUnclosedEntry  ||  buffer!=  null)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(this.hasUnclosedEntry  ||  buffer!=  null)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(this.hasUnclosedEntry  ||  buffer!=  null)  {	  if(this.hasUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
335	[BUG]  [BUGGY]  if(this.hasUnclosedEntry  ||  out!=  null)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(this.hasUnclosedEntry  ||  out!=  null)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(this.hasUnclosedEntry  ||  out!=  null)  {	  if(this.hasUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
336	[BUG]  [BUGGY]  if(this.haveUnclosedEntry  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(this.haveUnclosedEntry  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(this.haveUnclosedEntry  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(hasUnclosedEntry    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	19	None	replace
337	[BUG]  [BUGGY]  if(!recorded  &&  buffer.length  >  0  &&  out!=  null)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!recorded  &&  buffer.length  >  0  &&  out!=  null)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!recorded  &&  buffer.length  >  0  &&  out!=  null)  {	  if(!recorded    &&    buffer.length    >    0)    {    	non-compiled	[CE]  <identifier>  expected	31	None	replace
338	[BUG]  [BUGGY]  if(!recordBuf.length  >  0)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!recordBuf.length  >  0)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!recordBuf.length  >  0)  {	  if(!recordBuf.length)    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
339	[BUG]  [BUGGY]  if(!recordBuf)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!recordBuf)  {  out.close();  }  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!recordBuf)  {  out.close();  }	  if(!closed)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
340	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||!closed)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(hasUnclosedEntry  ||!closed)  {  out.close();  }  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(hasUnclosedEntry  ||!closed)  {  out.close();  }	  if(!closed)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
341	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  isEnabled(TarBuffer.DEFAULT_CLOSE_ERROR)||  isEnabled(TarBuffer.DEFAULT_FILE_GNU))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(hasUnclosedEntry  ||  isEnabled(TarBuffer.DEFAULT_CLOSE_ERROR)||  isEnabled(TarBuffer.DEFAULT_FILE_GNU))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(hasUnclosedEntry  ||  isEnabled(TarBuffer.DEFAULT_CLOSE_ERROR)||  isEnabled(TarBuffer.DEFAULT_FILE_GNU))  {	  if(hasUnclosedEntry    ||    isEnabled(TarBuffer.DEFAULT_CLOSE_ERROR))    {    	non-compiled	[CE]  <identifier>  expected	36	None	replace
342	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  isEnabled(TarBuffer.DEFAULT_CLOSE_ERROR)||  isEnabled(TarBuffer.DEFAULT_LONGFILE_GNU))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(hasUnclosedEntry  ||  isEnabled(TarBuffer.DEFAULT_CLOSE_ERROR)||  isEnabled(TarBuffer.DEFAULT_LONGFILE_GNU))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(hasUnclosedEntry  ||  isEnabled(TarBuffer.DEFAULT_CLOSE_ERROR)||  isEnabled(TarBuffer.DEFAULT_LONGFILE_GNU))  {	  if(hasUnclosedEntry    ||    isEnabled(TarBuffer.DEFAULT_CLOSE_ERROR))    {    	non-compiled	[CE]  <identifier>  expected	36	None	replace
343	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  isEnabled(TarBuffer.DEFAULT_CLOSE_ERROR)||  isEnabled(TarBuffer.DEFAULT_FONT))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(hasUnclosedEntry  ||  isEnabled(TarBuffer.DEFAULT_CLOSE_ERROR)||  isEnabled(TarBuffer.DEFAULT_FONT))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(hasUnclosedEntry  ||  isEnabled(TarBuffer.DEFAULT_CLOSE_ERROR)||  isEnabled(TarBuffer.DEFAULT_FONT))  {	  if(hasUnclosedEntry    ||    isEnabled(TarBuffer.DEFAULT_CLOSE_ERROR))    {    	non-compiled	[CE]  <identifier>  expected	36	None	replace
344	[BUG]  [BUGGY]  this.assemBuf.close(out);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  this.assemBuf.close(out);  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	this.assemBuf.close(out);	  this.assemBuf.close();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
345	[BUG]  [BUGGY]  this.assemBuf.close(buffer);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  this.assemBuf.close(buffer);  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	this.assemBuf.close(buffer);	  this.assemBuf.close();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
346	[BUG]  [BUGGY]  if(!hasUnclosedEntry  ||  isEnabled(Feature.FLUSH_PASSED_TO_STREAM))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!hasUnclosedEntry  ||  isEnabled(Feature.FLUSH_PASSED_TO_STREAM))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!hasUnclosedEntry  ||  isEnabled(Feature.FLUSH_PASSED_TO_STREAM))  {	  if(isEnabled(Feature.FLUSH_PASSED_TO_STREAM))    {    	non-compiled	[CE]  <identifier>  expected	60	None	replace
347	[BUG]  [BUGGY]  if(isEnabled(Feature.WRITE_LOCKED_TO_STREAM)||  isEnabled(Feature.FLUSH_PASSED_TO_STREAM))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.WRITE_LOCKED_TO_STREAM)||  isEnabled(Feature.FLUSH_PASSED_TO_STREAM))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(isEnabled(Feature.WRITE_LOCKED_TO_STREAM)||  isEnabled(Feature.FLUSH_PASSED_TO_STREAM))  {	  if(isEnabled(Feature.FLUSH_PASSED_TO_STREAM))    {    	non-compiled	[CE]  <identifier>  expected	60	None	replace
348	[BUG]  [BUGGY]  if(isEnabled(Feature.WRITE_CLOSE_TO_STREAM))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.WRITE_CLOSE_TO_STREAM))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(isEnabled(Feature.WRITE_CLOSE_TO_STREAM))  {	  if(isEnabled(Feature.FLUSH_PASSED_TO_STREAM))    {    	non-compiled	[CE]  <identifier>  expected	60	None	replace
349	[BUG]  [BUGGY]  if(buff!=  null)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(buff!=  null)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(buff!=  null)  {	  if(recordBuf!=    null)    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
350	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  isEnabled(Feature.AUTO_CLOSE_ERROR)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(hasUnclosedEntry  ||  isEnabled(Feature.AUTO_CLOSE_ERROR)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(hasUnclosedEntry  ||  isEnabled(Feature.AUTO_CLOSE_ERROR)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(hasUnclosedEntry    ||    isEnabled(Feature.AUTO_CLOSE_ERROR))    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
351	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  isEnabled(Feature.AUTO_CLOSE_ERROR)||  isEnabled(Feature.GLOBAL_LONGFILE_GNU))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(hasUnclosedEntry  ||  isEnabled(Feature.AUTO_CLOSE_ERROR)||  isEnabled(Feature.GLOBAL_LONGFILE_GNU))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(hasUnclosedEntry  ||  isEnabled(Feature.AUTO_CLOSE_ERROR)||  isEnabled(Feature.GLOBAL_LONGFILE_GNU))  {	  if(hasUnclosedEntry    ||    isEnabled(Feature.AUTO_CLOSE_ERROR))    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
352	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_FILE))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_FILE))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_FILE))  {	  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
353	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAME)||  hasUnclosedEntry)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAME)||  hasUnclosedEntry)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAME)||  hasUnclosedEntry)  {	  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
354	[BUG]  [BUGGY]  if(recordBuf  ==  null)  {  out.close();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(recordBuf  ==  null)  {  out.close();  }  else  {  buffer.close();  }  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(recordBuf  ==  null)  {  out.close();  }  else  {  buffer.close();  }	  if(recordBuf!=    null)    {    out.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
355	[BUG]  [BUGGY]  if(recordBuf  ==  null)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(recordBuf  ==  null)  {  out.close();  }  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(recordBuf  ==  null)  {  out.close();  }	  if(recordBuf!=    null)    {    out.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
356	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES  ||  hasUnclosedEntry))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES  ||  hasUnclosedEntry))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES  ||  hasUnclosedEntry))  {	  if(isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	53	None	replace
357	[BUG]  [BUGGY]  if(!recordBuf)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!recordBuf)  {  buffer.close();  }  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!recordBuf)  {  buffer.close();  }	  if(!closed)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	49	None	replace
358	[BUG]  [BUGGY]  if(this.closed)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(this.closed)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(this.closed)  {	  if(haveUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	40	None	replace
359	[BUG]  [BUGGY]  if(isRecordClosed())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(isRecordClosed())  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(isRecordClosed())  {	  if(haveUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	40	None	replace
360	[BUG]  [BUGGY]  if(!hasUnclosedEntry()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!hasUnclosedEntry()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!hasUnclosedEntry()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(!hasUnclosedEntry    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	39	None	replace
361	[BUG]  [BUGGY]  if(!hasUnclosed  ||  out  ==  null)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!hasUnclosed  ||  out  ==  null)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!hasUnclosed  ||  out  ==  null)  {	  if(hasUnclosed    ||    out!=    null)    {    	non-compiled	[CE]  <identifier>  expected	41	None	replace
362	[BUG]  [BUGGY]  if(recordBuf!=  null  &&  recordBuf.isClosed()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(recordBuf!=  null  &&  recordBuf.isClosed()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(recordBuf!=  null  &&  recordBuf.isClosed()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(!recordBuf.isClosed()    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	25	None	replace
363	[BUG]  [BUGGY]  if(!recordBuf.close()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!recordBuf.close()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!recordBuf.close()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(!recordBuf.isClosed()    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	25	None	replace
364	[BUG]  [BUGGY]  if(!recordBuf.closed()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!recordBuf.closed()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!recordBuf.closed()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(!recordBuf.isClosed()    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	25	None	replace
365	[BUG]  [BUGGY]  if(out!=  null)  {  out.close();  }  else  {  buffer.flush();  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(out!=  null)  {  out.close();  }  else  {  buffer.flush();  }  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(out!=  null)  {  out.close();  }  else  {  buffer.flush();  }	  out.close();    	non-compiled	[CE]  <identifier>  expected	14	None	replace
366	[BUG]  [BUGGY]  if(out!=  null)  {  out.close();  }  else  {  buffer  =  null;  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(out!=  null)  {  out.close();  }  else  {  buffer  =  null;  }  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(out!=  null)  {  out.close();  }  else  {  buffer  =  null;  }	  out.close();    	non-compiled	[CE]  <identifier>  expected	14	None	replace
367	[BUG]  [BUGGY]  if(!recordBuf.closed()  &&  out!=  null)  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!recordBuf.closed()  &&  out!=  null)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!recordBuf.closed()  &&  out!=  null)  {	  if(!recordBuf.closed())    {    	non-compiled	[CE]  <identifier>  expected	24	None	replace
368	[BUG]  [BUGGY]  if(!recordBuf.closed()  &&  buffer!=  null)  {  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!recordBuf.closed()  &&  buffer!=  null)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!recordBuf.closed()  &&  buffer!=  null)  {	  if(!recordBuf.closed())    {    	non-compiled	[CE]  <identifier>  expected	24	None	replace
369	[BUG]  [BUGGY]  if(os!=  null)  {  os.close();  }  else  {  buffer.close();  out  =  null;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(os!=  null)  {  os.close();  }  else  {  buffer.close();  out  =  null;  }  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(os!=  null)  {  os.close();  }  else  {  buffer.close();  out  =  null;  }	  os.close();    	non-compiled	[CE]  <identifier>  expected	9	None	replace
370	[BUG]  [BUGGY]  if(os!=  null)  {  os.close();  }  else  {  buffer  =  null;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(os!=  null)  {  os.close();  }  else  {  buffer  =  null;  }  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(os!=  null)  {  os.close();  }  else  {  buffer  =  null;  }	  os.close();    	non-compiled	[CE]  <identifier>  expected	9	None	replace
371	[BUG]  [BUGGY]  if(recorded  ||  buffer!=  null)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(recorded  ||  buffer!=  null)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(recorded  ||  buffer!=  null)  {	  if(recorded)    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
372	[BUG]  [BUGGY]  if(recorded  ||  currName!=  null)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(recorded  ||  currName!=  null)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(recorded  ||  currName!=  null)  {	  if(recorded)    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
373	[BUG]  [BUGGY]  if(recorded  >  0)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(recorded  >  0)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(recorded  >  0)  {	  if(recorded)    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
374	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTED_TO_STREAM)||  isEnabled(Feature.FLUSH_PASSED_TO_STREAM))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTED_TO_STREAM)||  isEnabled(Feature.FLUSH_PASSED_TO_STREAM))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(isEnabled(Feature.QUOTED_TO_STREAM)||  isEnabled(Feature.FLUSH_PASSED_TO_STREAM))  {	  if(isEnabled(Feature.FLUSH_PASSED_TO_STREAM))    {    	non-compiled	[CE]  <identifier>  expected	60	None	replace
375	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTED_TO_STREAM))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTED_TO_STREAM))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(isEnabled(Feature.QUOTED_TO_STREAM))  {	  if(isEnabled(Feature.FLUSH_PASSED_TO_STREAM))    {    	non-compiled	[CE]  <identifier>  expected	60	None	replace
376	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTED_TO_STREAM  ||  isEnabled(Feature.FLUSH_PASSED_TO_STREAM))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTED_TO_STREAM  ||  isEnabled(Feature.FLUSH_PASSED_TO_STREAM))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(isEnabled(Feature.QUOTED_TO_STREAM  ||  isEnabled(Feature.FLUSH_PASSED_TO_STREAM))  {	  if(isEnabled(Feature.FLUSH_PASSED_TO_STREAM))    {    	non-compiled	[CE]  <identifier>  expected	60	None	replace
377	[BUG]  [BUGGY]  if(!recorded  &&  isEnabled(TarBuffer.QUOTE_FIELD_NAMES))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!recorded  &&  isEnabled(TarBuffer.QUOTE_FIELD_NAMES))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!recorded  &&  isEnabled(TarBuffer.QUOTE_FIELD_NAMES))  {	  if(!recorded    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	64	None	replace
378	[BUG]  [BUGGY]  if(!recorded  &&  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  hasUnclosedEntry))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!recorded  &&  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  hasUnclosedEntry))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!recorded  &&  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  hasUnclosedEntry))  {	  if(!recorded    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	64	None	replace
379	[BUG]  [BUGGY]  if(recordBuf  ==  null  ||!recordBuf.isClosed()  &&  isEnabled(Feature.AUTO_CLOSE_ERROR))  {  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(recordBuf  ==  null  ||!recordBuf.isClosed()  &&  isEnabled(Feature.AUTO_CLOSE_ERROR))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(recordBuf  ==  null  ||!recordBuf.isClosed()  &&  isEnabled(Feature.AUTO_CLOSE_ERROR))  {	  if(!recordBuf.isClosed()    &&    isEnabled(Feature.AUTO_CLOSE_ERROR))    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
380	[BUG]  [BUGGY]  if(!hasUnclosedEntry  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!hasUnclosedEntry  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!hasUnclosedEntry  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
381	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(TarBuffer.DEFAULT_FILE_ERROR))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(TarBuffer.DEFAULT_FILE_ERROR))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(TarBuffer.DEFAULT_FILE_ERROR))  {	  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||!haveUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
382	[BUG]  [BUGGY]  if(closed  ||  buffer  ==  null)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(closed  ||  buffer  ==  null)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(closed  ||  buffer  ==  null)  {	  if(hasUnclosedEntry    ||    buffer    ==    null)    {    	non-compiled	[CE]  <identifier>  expected	45	None	replace
383	[BUG]  [BUGGY]  if(isRecordedEntry())  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(isRecordedEntry())  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(isRecordedEntry())  {	  if(haveUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	40	None	replace
384	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasUnclosedEntry  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasUnclosedEntry  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasUnclosedEntry  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(hasUnclosedEntry    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	19	None	replace
385	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_GNU))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_GNU))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_GNU))  {	  if(hasUnclosedEntry    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	19	None	replace
386	[BUG]  [BUGGY]  if(recorded  &&  hasUnclosedEntry)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(recorded  &&  hasUnclosedEntry)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(recorded  &&  hasUnclosedEntry)  {	  if(recorded)    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
387	[BUG]  [BUGGY]  if(recorded  ||  isEnabled(TarBuffer.DEBUG_FILE_ERROR))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(recorded  ||  isEnabled(TarBuffer.DEBUG_FILE_ERROR))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(recorded  ||  isEnabled(TarBuffer.DEBUG_FILE_ERROR))  {	  if(recorded)    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
388	[BUG]  [BUGGY]  if(recorded  ||  isEnabled(Feature.FLUSH_PASSED_TO_STREAM))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(recorded  ||  isEnabled(Feature.FLUSH_PASSED_TO_STREAM))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(recorded  ||  isEnabled(Feature.FLUSH_PASSED_TO_STREAM))  {	  if(recorded)    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
389	[BUG]  [BUGGY]  System.err.println( "TarBuffer  cloned:  n "  +  currName);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  System.err.println( "TarBuffer  cloned:  n "  +  currName);  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	System.err.println( "TarBuffer  cloned:  n "  +  currName);	  System.err.println(   "TarBuffer    cloned   ");    	non-compiled	[CE]  <identifier>  expected	50	None	replace
390	[BUG]  [BUGGY]  this.assemBuf  =  new  byte[LONGFILE_GNU];  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  this.assemBuf  =  new  byte[LONGFILE_GNU];  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	this.assemBuf  =  new  byte[LONGFILE_GNU];	  this.assemBuf.close();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
391	[BUG]  [BUGGY]  this.assemBuf  =  new  byte[LONGFILE_GNU].getBytes();  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  this.assemBuf  =  new  byte[LONGFILE_GNU].getBytes();  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	this.assemBuf  =  new  byte[LONGFILE_GNU].getBytes();	  this.assemBuf.close();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
392	[BUG]  [BUGGY]  this.assemBuf  =  new  byte[LONGFILE_GNU].getBytes(currName);  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  this.assemBuf  =  new  byte[LONGFILE_GNU].getBytes(currName);  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	this.assemBuf  =  new  byte[LONGFILE_GNU].getBytes(currName);	  this.assemBuf.close();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
393	[BUG]  [BUGGY]  this.assemBuf  =  new  byte[LONGFILE_GNU.length];  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  this.assemBuf  =  new  byte[LONGFILE_GNU.length];  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	this.assemBuf  =  new  byte[LONGFILE_GNU.length];	  this.assemBuf.close();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
394	[BUG]  [BUGGY]  if(hasRecordedEntry  ||  hasUnclosedEntry)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(hasRecordedEntry  ||  hasUnclosedEntry)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(hasRecordedEntry  ||  hasUnclosedEntry)  {	  if(hasRecordedEntry)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
395	[BUG]  [BUGGY]  if(hasRecordedEntry  ||  isEnabled(Feature.AUTO_CLOSE_ERROR))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(hasRecordedEntry  ||  isEnabled(Feature.AUTO_CLOSE_ERROR))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(hasRecordedEntry  ||  isEnabled(Feature.AUTO_CLOSE_ERROR))  {	  if(hasRecordedEntry)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
396	[BUG]  [BUGGY]  if(isEnabled(TarBuffer.QUOTE_FIELD_NAMES))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(isEnabled(TarBuffer.QUOTE_FIELD_NAMES))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(isEnabled(TarBuffer.QUOTE_FIELD_NAMES))  {	  if(isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	53	None	replace
397	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_FILE_ERROR))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_FILE_ERROR))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_FILE_ERROR))  {	  if(isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	53	None	replace
398	[BUG]  [BUGGY]  if(!recorded  &&  out!=  null  &&  buffer.close())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!recorded  &&  out!=  null  &&  buffer.close())  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!recorded  &&  out!=  null  &&  buffer.close())  {	  if(!recorded    &&    out!=    null)    {    	non-compiled	[CE]  <identifier>  expected	46	None	replace
399	[BUG]  [BUGGY]  if(!recorded  &&  out!=  null  &&  hasUnclosedEntry)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!recorded  &&  out!=  null  &&  hasUnclosedEntry)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!recorded  &&  out!=  null  &&  hasUnclosedEntry)  {	  if(!recorded    &&    out!=    null)    {    	non-compiled	[CE]  <identifier>  expected	46	None	replace
400	[BUG]  [BUGGY]  if(!recorded)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!recorded)  {  out.close();  }  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!recorded)  {  out.close();  }	  if(!closed)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
401	[BUG]  [BUGGY]  if(closed)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(closed)  {  out.close();  }  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(closed)  {  out.close();  }	  if(!closed)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
402	[BUG]  [BUGGY]  if(os!=  null)  {  os.close();  }  else  {  System.err.println( "TarBuffer  closed ");  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(os!=  null)  {  os.close();  }  else  {  System.err.println( "TarBuffer  closed ");  }  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(os!=  null)  {  os.close();  }  else  {  System.err.println( "TarBuffer  closed ");  }	  os.close();    	non-compiled	[CE]  <identifier>  expected	9	None	replace
403	[BUG]  [BUGGY]  if(os!=  null)  {  os.close();  }  else  {  buffer  =  null;  out.close();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(os!=  null)  {  os.close();  }  else  {  buffer  =  null;  out.close();  }  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(os!=  null)  {  os.close();  }  else  {  buffer  =  null;  out.close();  }	  os.close();    	non-compiled	[CE]  <identifier>  expected	9	None	replace
404	[BUG]  [BUGGY]  if(recorded  &&  out.close()  >  0)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(recorded  &&  out.close()  >  0)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(recorded  &&  out.close()  >  0)  {	  if(!recorded    &&    buffer.close()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	48	None	replace
405	[BUG]  [BUGGY]  if(!recorded  &&  buffer.close()  <  0)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!recorded  &&  buffer.close()  <  0)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!recorded  &&  buffer.close()  <  0)  {	  if(!recorded    &&    buffer.close()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	48	None	replace
406	[BUG]  [BUGGY]  if(!recorded  &&  isEnabled(Feature.AUTO_CLOSE_FILE_GNU))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!recorded  &&  isEnabled(Feature.AUTO_CLOSE_FILE_GNU))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!recorded  &&  isEnabled(Feature.AUTO_CLOSE_FILE_GNU))  {	  if(!recorded    &&    isEnabled(Feature.AUTO_CLOSE_SOURCE))    {    	non-compiled	[CE]  <identifier>  expected	65	None	replace
407	[BUG]  [BUGGY]  if(!closed  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!closed  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!closed  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(hasUnclosedEntry    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	16	None	replace
408	[BUG]  [BUGGY]  if(closed  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(closed  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(closed  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(hasUnclosedEntry    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	16	None	replace
409	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.FLUSH_PASSED_TO_STREAM))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(hasUnclosedEntry  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.FLUSH_PASSED_TO_STREAM))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(hasUnclosedEntry  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.FLUSH_PASSED_TO_STREAM))  {	  if(hasUnclosedEntry    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	16	None	replace
410	[BUG]  [BUGGY]  if(hasUnclosed  ||  buffer  ==  null)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(hasUnclosed  ||  buffer  ==  null)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(hasUnclosed  ||  buffer  ==  null)  {	  if(hasUnclosed    ||    buffer!=    null)    {    	non-compiled	[CE]  <identifier>  expected	33	None	replace
411	[BUG]  [BUGGY]  if(closed  ||  buffer!=  null)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(closed  ||  buffer!=  null)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(closed  ||  buffer!=  null)  {	  if(hasUnclosed    ||    buffer!=    null)    {    	non-compiled	[CE]  <identifier>  expected	33	None	replace
412	[BUG]  [BUGGY]  if(buffer!=  null)  {  buffer.close();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(buffer!=  null)  {  buffer.close();  }  else  {  buffer.close();  }  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(buffer!=  null)  {  buffer.close();  }  else  {  buffer.close();  }	  if(recordBuf!=    null)    {    buffer.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	66	None	replace
413	[BUG]  [BUGGY]  this.recordBuf  =  new  byte[LONGFILE_GNU].getBytes();  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  this.recordBuf  =  new  byte[LONGFILE_GNU].getBytes();  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	this.recordBuf  =  new  byte[LONGFILE_GNU].getBytes();	  this.recordBuf    =    null;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
414	[BUG]  [BUGGY]  this.recordBuf  =  new  byte[64];  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  this.recordBuf  =  new  byte[64];  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	this.recordBuf  =  new  byte[64];	  this.recordBuf    =    null;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
415	[BUG]  [BUGGY]  if(os!=  null)  {  os.flush();  }  else  {  buffer.close();  out  =  false;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(os!=  null)  {  os.flush();  }  else  {  buffer.close();  out  =  false;  }  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(os!=  null)  {  os.flush();  }  else  {  buffer.close();  out  =  false;  }	  os.flush();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
416	[BUG]  [BUGGY]  if(isRecorded()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(isRecorded()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(isRecorded()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(isRecorded()    ||!hasUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	63	None	replace
417	[BUG]  [BUGGY]  if(closed  ||  out!=  null)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(closed  ||  out!=  null)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(closed  ||  out!=  null)  {	  if(hasUnclosed    ||    out!=    null)    {    	non-compiled	[CE]  <identifier>  expected	41	None	replace
418	[BUG]  [BUGGY]  if(recordBuf  ==  null  ||!recordBuf.isClosed()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(recordBuf  ==  null  ||!recordBuf.isClosed()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(recordBuf  ==  null  ||!recordBuf.isClosed()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(!recordBuf.isClosed()    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	25	None	replace
419	[BUG]  [BUGGY]  if(!recordBuf.isOpen()  ||  recordBuf.length  >  0)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!recordBuf.isOpen()  ||  recordBuf.length  >  0)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!recordBuf.isOpen()  ||  recordBuf.length  >  0)  {	  if(!recordBuf.isOpen())    {    	non-compiled	[CE]  <identifier>  expected	28	None	replace
420	[BUG]  [BUGGY]  if(!recorded  &&  closed)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!recorded  &&  closed)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!recorded  &&  closed)  {	  if(!recorded    &&    hasUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	32	None	replace
421	[BUG]  [BUGGY]  if(recordBuf!=  null  ||  buffer.length  ==  0)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(recordBuf!=  null  ||  buffer.length  ==  0)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(recordBuf!=  null  ||  buffer.length  ==  0)  {	  if(recordBuf!=    null)    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
422	[BUG]  [BUGGY]  if(closed  ||  hasUnclosedEntry)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(closed  ||  hasUnclosedEntry)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(closed  ||  hasUnclosedEntry)  {	  if(hasUnclosedEntry    ||!closed)    {    	non-compiled	[CE]  <identifier>  expected	57	None	replace
423	[BUG]  [BUGGY]  if(!recordBuf.close()  ||  buffer.length  >  0)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!recordBuf.close()  ||  buffer.length  >  0)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!recordBuf.close()  ||  buffer.length  >  0)  {	  if(!recordBuf.close())    {    	non-compiled	[CE]  <identifier>  expected	22	None	replace
424	[BUG]  [BUGGY]  if(recordBuf!=  null  &&!recordBuf.isRecorded())  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(recordBuf!=  null  &&!recordBuf.isRecorded())  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(recordBuf!=  null  &&!recordBuf.isRecorded())  {	  if(recordBuf!=    null    &&!recordBuf.isClosed())    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
425	[BUG]  [BUGGY]  if(recordBuf!=  null  &&!recordBuf.release())  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(recordBuf!=  null  &&!recordBuf.release())  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(recordBuf!=  null  &&!recordBuf.release())  {	  if(recordBuf!=    null    &&!recordBuf.isClosed())    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
426	[BUG]  [BUGGY]  if(closed  ||  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(closed  ||  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(closed  ||  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {	  if(hasUnclosedEntry    ||    isEnabled(Feature.AUTO_CLOSE_SOURCE))    {    	non-compiled	[CE]  <identifier>  expected	61	None	replace
427	[BUG]  [BUGGY]  if(!hasUnclosedEntry  &&  buffer.length  >  0)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!hasUnclosedEntry  &&  buffer.length  >  0)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!hasUnclosedEntry  &&  buffer.length  >  0)  {	  if(!hasUnclosedEntry    &&    buffer!=    null)    {    	non-compiled	[CE]  <identifier>  expected	56	None	replace
428	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  isEnabled(Feature.QUOTED_TO_STREAM))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(hasUnclosedEntry  ||  isEnabled(Feature.QUOTED_TO_STREAM))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(hasUnclosedEntry  ||  isEnabled(Feature.QUOTED_TO_STREAM))  {	  if(hasUnclosedEntry    ||    isEnabled(Feature.FLUSH_PASSED_TO_STREAM))    {    	non-compiled	[CE]  <identifier>  expected	62	None	replace
429	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  isEnabled(Feature.FLUSH_PASSED_TO_STREAM)||  isEnabled(TarBuffer.DEFAULT_CLOSED_TO_STREAM))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(hasUnclosedEntry  ||  isEnabled(Feature.FLUSH_PASSED_TO_STREAM)||  isEnabled(TarBuffer.DEFAULT_CLOSED_TO_STREAM))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(hasUnclosedEntry  ||  isEnabled(Feature.FLUSH_PASSED_TO_STREAM)||  isEnabled(TarBuffer.DEFAULT_CLOSED_TO_STREAM))  {	  if(hasUnclosedEntry    ||    isEnabled(Feature.FLUSH_PASSED_TO_STREAM))    {    	non-compiled	[CE]  <identifier>  expected	62	None	replace
430	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  isEnabled(Feature.WRITE_PASSED_TO_STREAM))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(hasUnclosedEntry  ||  isEnabled(Feature.WRITE_PASSED_TO_STREAM))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(hasUnclosedEntry  ||  isEnabled(Feature.WRITE_PASSED_TO_STREAM))  {	  if(hasUnclosedEntry    ||    isEnabled(Feature.FLUSH_PASSED_TO_STREAM))    {    	non-compiled	[CE]  <identifier>  expected	62	None	replace
431	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  isEnabled(TarBuffer.DEFAULT_CLOSE_ERROR,  closed))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(hasUnclosedEntry  ||  isEnabled(TarBuffer.DEFAULT_CLOSE_ERROR,  closed))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(hasUnclosedEntry  ||  isEnabled(TarBuffer.DEFAULT_CLOSE_ERROR,  closed))  {	  if(hasUnclosedEntry    ||    isEnabled(TarBuffer.DEFAULT_CLOSE_ERROR))    {    	non-compiled	[CE]  <identifier>  expected	36	None	replace
432	[BUG]  [BUGGY]  if(!hasRecorded  &&  isEnabled(Feature.FLUSH_PASSED_TO_STREAM))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!hasRecorded  &&  isEnabled(Feature.FLUSH_PASSED_TO_STREAM))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!hasRecorded  &&  isEnabled(Feature.FLUSH_PASSED_TO_STREAM))  {	  if(!hasRecorded)    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
433	[BUG]  [BUGGY]  if(!hasRecorded  &&  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!hasRecorded  &&  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!hasRecorded  &&  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {	  if(!hasRecorded)    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
434	[BUG]  [BUGGY]  if(recordBuf  ==  null  ||!recordBuf.isClosed()  &&  buffer.length  >  0)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(recordBuf  ==  null  ||!recordBuf.isClosed()  &&  buffer.length  >  0)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(recordBuf  ==  null  ||!recordBuf.isClosed()  &&  buffer.length  >  0)  {	  if(!recordBuf.isClosed()    &&    buffer.length    >    0)    {    	non-compiled	[CE]  <identifier>  expected	43	None	replace
435	[BUG]  [BUGGY]  if(!closed  ||  buffer!=  null)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!closed  ||  buffer!=  null)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!closed  ||  buffer!=  null)  {	  if(!hasUnclosedEntry    ||    buffer!=    null)    {    	non-compiled	[CE]  <identifier>  expected	55	None	replace
436	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  out.close();  }  else  {  buffer  =  null;  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(recordBuf!=  null)  {  out.close();  }  else  {  buffer  =  null;  }  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(recordBuf!=  null)  {  out.close();  }  else  {  buffer  =  null;  }	  out.close();    	non-compiled	[CE]  <identifier>  expected	14	None	replace
437	[BUG]  [BUGGY]  if(recordSize  >  0)  {  out.close();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(recordSize  >  0)  {  out.close();  }  else  {  buffer.close();  }  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(recordSize  >  0)  {  out.close();  }  else  {  buffer.close();  }	  out.close();    	non-compiled	[CE]  <identifier>  expected	14	None	replace
438	[BUG]  [BUGGY]  OutputStream  out  =  getOut()  &  System.currentTimeMillis();  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  OutputStream  out  =  getOut()  &  System.currentTimeMillis();  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	OutputStream  out  =  getOut()  &  System.currentTimeMillis();	  OutputStream    out    =    getOut();    	non-compiled	[CE]  <identifier>  expected	15	None	replace
439	[BUG]  [BUGGY]  OutputStream  out  =  getOut(),  TarBuffer.DEFAULT_SIZE);  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  OutputStream  out  =  getOut(),  TarBuffer.DEFAULT_SIZE);  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	OutputStream  out  =  getOut(),  TarBuffer.DEFAULT_SIZE);	  OutputStream    out    =    getOut();    	non-compiled	[CE]  <identifier>  expected	15	None	replace
440	[BUG]  [BUGGY]  if(closed  ||  out  ==  null)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(closed  ||  out  ==  null)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(closed  ||  out  ==  null)  {	  if(hasUnclosedEntry    ||    out    ==    null)    {    	non-compiled	[CE]  <identifier>  expected	42	None	replace
441	[BUG]  [BUGGY]  if(closed)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(closed)  {  buffer.close();  }  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(closed)  {  buffer.close();  }	  if(!closed)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	49	None	replace
442	[BUG]  [BUGGY]  if(!recorded)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!recorded)  {  buffer.close();  }  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!recorded)  {  buffer.close();  }	  if(!closed)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	49	None	replace
443	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(TarBuffer.DEFAULT_LONGFILE_GNU))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(hasUnclosedEntry  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(TarBuffer.DEFAULT_LONGFILE_GNU))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(hasUnclosedEntry  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(TarBuffer.DEFAULT_LONGFILE_GNU))  {	  if(hasUnclosedEntry    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
444	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(TarBuffer.DEFAULT_CLOSED_ERROR))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(hasUnclosedEntry  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(TarBuffer.DEFAULT_CLOSED_ERROR))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(hasUnclosedEntry  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(TarBuffer.DEFAULT_CLOSED_ERROR))  {	  if(hasUnclosedEntry    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
445	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(TarBuffer.DEFAULT_CLOSE_ERROR))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(hasUnclosedEntry  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(TarBuffer.DEFAULT_CLOSE_ERROR))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(hasUnclosedEntry  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(TarBuffer.DEFAULT_CLOSE_ERROR))  {	  if(hasUnclosedEntry    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
446	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_TRY))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_TRY))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_TRY))  {	  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
447	[BUG]  [BUGGY]  if(this.recordBuf!=  null)  {  this.recordBuf.close();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(this.recordBuf!=  null)  {  this.recordBuf.close();  }  else  {  buffer.close();  }  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(this.recordBuf!=  null)  {  this.recordBuf.close();  }  else  {  buffer.close();  }	  this.recordBuf.close();    	non-compiled	[CE]  <identifier>  expected	10	None	replace
448	[BUG]  [BUGGY]  if(this.recordBuf!=  null)  {  this.recordBuf.close();  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(this.recordBuf!=  null)  {  this.recordBuf.close();  }  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(this.recordBuf!=  null)  {  this.recordBuf.close();  }	  this.recordBuf.close();    	non-compiled	[CE]  <identifier>  expected	10	None	replace
449	[BUG]  [BUGGY]  if(this.recordBuf!=  null)  {  this.recordBuf.close();  }  else  {  out.close();  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(this.recordBuf!=  null)  {  this.recordBuf.close();  }  else  {  out.close();  }  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(this.recordBuf!=  null)  {  this.recordBuf.close();  }  else  {  out.close();  }	  this.recordBuf.close();    	non-compiled	[CE]  <identifier>  expected	10	None	replace
450	[BUG]  [BUGGY]  if(this.recordBuf!=  null)  {  this.recordBuf.close();  }  else  {  buffer  =  null;  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(this.recordBuf!=  null)  {  this.recordBuf.close();  }  else  {  buffer  =  null;  }  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(this.recordBuf!=  null)  {  this.recordBuf.close();  }  else  {  buffer  =  null;  }	  this.recordBuf.close();    	non-compiled	[CE]  <identifier>  expected	10	None	replace
451	[BUG]  [BUGGY]  if(this.recordBuf!=  null)  {  this.recordBuf.close();  }  else  {  System.arraycopy(assemBuf,  0,  buffer,  0,  this.recordBuf.length);  out.close();  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(this.recordBuf!=  null)  {  this.recordBuf.close();  }  else  {  System.arraycopy(assemBuf,  0,  buffer,  0,  this.recordBuf.length);  out.close();  }  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(this.recordBuf!=  null)  {  this.recordBuf.close();  }  else  {  System.arraycopy(assemBuf,  0,  buffer,  0,  this.recordBuf.length);  out.close();  }	  this.recordBuf.close();    	non-compiled	[CE]  <identifier>  expected	10	None	replace
452	[BUG]  [BUGGY]  if(this.recordBuf!=  null)  {  this.recordBuf.close();  }  else  {  System.err.println( "TarBuffer  closed: "  +  this.recordBuf.toString());  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(this.recordBuf!=  null)  {  this.recordBuf.close();  }  else  {  System.err.println( "TarBuffer  closed: "  +  this.recordBuf.toString());  }  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(this.recordBuf!=  null)  {  this.recordBuf.close();  }  else  {  System.err.println( "TarBuffer  closed: "  +  this.recordBuf.toString());  }	  this.recordBuf.close();    	non-compiled	[CE]  <identifier>  expected	10	None	replace
453	[BUG]  [BUGGY]  if(!closed  ||  isEnabled(Feature.AUTO_CLOSE_ERROR))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!closed  ||  isEnabled(Feature.AUTO_CLOSE_ERROR))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!closed  ||  isEnabled(Feature.AUTO_CLOSE_ERROR))  {	  if(hasUnclosedEntry    ||    isEnabled(Feature.AUTO_CLOSE_ERROR))    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
454	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  isEnabled(Feature.AUTO_CLOSE_ERROR)||  isEnabled(Feature.FLUSH_PASSED_TO_STREAM))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(hasUnclosedEntry  ||  isEnabled(Feature.AUTO_CLOSE_ERROR)||  isEnabled(Feature.FLUSH_PASSED_TO_STREAM))  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(hasUnclosedEntry  ||  isEnabled(Feature.AUTO_CLOSE_ERROR)||  isEnabled(Feature.FLUSH_PASSED_TO_STREAM))  {	  if(hasUnclosedEntry    ||    isEnabled(Feature.AUTO_CLOSE_ERROR))    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
455	[BUG]  [BUGGY]  if(!recorded  &&  this.buffer.length  >  0)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!recorded  &&  this.buffer.length  >  0)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!recorded  &&  this.buffer.length  >  0)  {	  if(!recorded    &&    buffer.length    >    0)    {    	non-compiled	[CE]  <identifier>  expected	31	None	replace
456	[BUG]  [BUGGY]  if(!recorded  &&  out.size  >  0)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!recorded  &&  out.size  >  0)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!recorded  &&  out.size  >  0)  {	  if(!recorded    &&    buffer.length    >    0)    {    	non-compiled	[CE]  <identifier>  expected	31	None	replace
457	[BUG]  [BUGGY]  if(buffer!=  null)  {  buffer.close();  }  else  {  out.close();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(buffer!=  null)  {  buffer.close();  }  else  {  out.close();  }  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(buffer!=  null)  {  buffer.close();  }  else  {  out.close();  }	  if(recordBuf!=    null)    {    buffer.close();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	67	None	replace
458	[BUG]  [BUGGY]  if(!cloned  &&  buffer.close()  >  0)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!cloned  &&  buffer.close()  >  0)  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!cloned  &&  buffer.close()  >  0)  {	  if(!cloned)    {    	non-compiled	[CE]  <identifier>  expected	54	None	replace
459	[BUG]  [BUGGY]  if(!cloned  &&  buffer.isEnabled())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!cloned  &&  buffer.isEnabled())  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!cloned  &&  buffer.isEnabled())  {	  if(!cloned)    {    	non-compiled	[CE]  <identifier>  expected	54	None	replace
460	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasNextEntry())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasNextEntry())  {  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasNextEntry())  {	  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||!hasUnclosedEntry())    {    	non-compiled	[CE]  <identifier>  expected	59	None	replace
461	[BUG]  [BUGGY]  if(!recordBuf)  {  buffer.close();  }  else  {  out.close();  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!recordBuf)  {  buffer.close();  }  else  {  out.close();  }  [BUGGY]      finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!recordBuf)  {  buffer.close();  }  else  {  out.close();  }	  if(!closed)    {    buffer.close();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	52	None	replace
