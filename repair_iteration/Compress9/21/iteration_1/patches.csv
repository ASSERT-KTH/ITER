bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(hasRecordedEntry)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {    [BUGGY]  if(hasRecordedEntry)  {  [BUGGY]    finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(hasRecordedEntry)  {	  if(!hasUnclosed)    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
2	[BUG]  [BUGGY]  if(!hasRecorded)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {    [BUGGY]  if(!hasRecorded)  {  [BUGGY]    finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!hasRecorded)  {	  if(!hasUnclosed)    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
3	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {    [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]    finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(!haveUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
4	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||!haveUnclosedEntry)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {    [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||!haveUnclosedEntry)  {  [BUGGY]    finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)||!haveUnclosedEntry)  {	  if(!haveUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
5	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {    [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]    finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(!haveUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
6	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||!hasUnclosedEntry)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {    [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||!hasUnclosedEntry)  {  [BUGGY]    finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)||!hasUnclosedEntry)  {	  if(!haveUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
7	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&!haveUnclosedEntry)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {    [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&!haveUnclosedEntry)  {  [BUGGY]    finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&!haveUnclosedEntry)  {	  if(!haveUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
8	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {    [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]    finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(!haveUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
9	[BUG]  [BUGGY]  os.close();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {    [BUGGY]  os.close();  [BUGGY]    finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	os.close();	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
10	[BUG]  [BUGGY]  this.recordBuf.close();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {    [BUGGY]  this.recordBuf.close();  [BUGGY]    finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	this.recordBuf.close();	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
11	[BUG]  [BUGGY]  os.flush();  [CE]  <identifier>  expected  [FE]                          AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {    [BUGGY]  os.flush();  [BUGGY]    finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	os.flush();	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
12	[BUG]  [BUGGY]  this.assemBuf.close();  [CE]  <identifier>  expected  [FE]                            AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {    [BUGGY]  this.assemBuf.close();  [BUGGY]    finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	this.assemBuf.close();	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
13	[BUG]  [BUGGY]  this.recordBuf  =  null;  [CE]  <identifier>  expected  [FE]                              AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {    [BUGGY]  this.recordBuf  =  null;  [BUGGY]    finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	this.recordBuf  =  null;	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
14	[BUG]  [BUGGY]  out.close();  [CE]  <identifier>  expected  [FE]                                AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {    [BUGGY]  out.close();  [BUGGY]    finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	out.close();	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
15	[BUG]  [BUGGY]  OutputStream  out  =  getOut();  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {    [BUGGY]  OutputStream  out  =  getOut();  [BUGGY]    finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	OutputStream  out  =  getOut();	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
16	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {    [BUGGY]  if(hasUnclosedEntry  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]    finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(hasUnclosedEntry  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(hasUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
17	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {    [BUGGY]  if(hasUnclosedEntry  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]    finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(hasUnclosedEntry  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(hasUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
18	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  isEnabled(Feature.AUTO_CLOSE_ERROR))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {    [BUGGY]  if(hasUnclosedEntry  ||  isEnabled(Feature.AUTO_CLOSE_ERROR))  {  [BUGGY]    finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(hasUnclosedEntry  ||  isEnabled(Feature.AUTO_CLOSE_ERROR))  {	  if(hasUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
19	[BUG]  [BUGGY]  if(hasUnclosedEntry  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {    [BUGGY]  if(hasUnclosedEntry  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]    finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(hasUnclosedEntry  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(hasUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
20	[BUG]  [BUGGY]  if(recordBuf!=  null  ||!recordBuf.isClosed())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {    [BUGGY]  if(recordBuf!=  null  ||!recordBuf.isClosed())  {  [BUGGY]    finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(recordBuf!=  null  ||!recordBuf.isClosed())  {	  if(!recordBuf.isClosed())    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
21	[BUG]  [BUGGY]  if(recordBuf!=  null  &&!recordBuf.isClosed())  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {    [BUGGY]  if(recordBuf!=  null  &&!recordBuf.isClosed())  {  [BUGGY]    finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(recordBuf!=  null  &&!recordBuf.isClosed())  {	  if(!recordBuf.isClosed())    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
22	[BUG]  [BUGGY]  if(!recordBuf.close())  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {    [BUGGY]  if(!recordBuf.close())  {  [BUGGY]    finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!recordBuf.close())  {	  if(!recordBuf.isClosed())    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
23	[BUG]  [BUGGY]  if(recordBuf  ==  null  ||!recordBuf.isClosed())  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {    [BUGGY]  if(recordBuf  ==  null  ||!recordBuf.isClosed())  {  [BUGGY]    finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(recordBuf  ==  null  ||!recordBuf.isClosed())  {	  if(!recordBuf.isClosed())    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
24	[BUG]  [BUGGY]  if(!recordBuf.closed())  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {    [BUGGY]  if(!recordBuf.closed())  {  [BUGGY]    finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!recordBuf.closed())  {	  if(!recordBuf.isClosed())    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
25	[BUG]  [BUGGY]  if(!recordBuf.isClosed()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {    [BUGGY]  if(!recordBuf.isClosed()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]    finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!recordBuf.isClosed()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(!recordBuf.isClosed())    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
26	[BUG]  [BUGGY]  if(!recordBuf.isClosed()  &&  isEnabled(Feature.AUTO_CLOSE_ERROR))  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {    [BUGGY]  if(!recordBuf.isClosed()  &&  isEnabled(Feature.AUTO_CLOSE_ERROR))  {  [BUGGY]    finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!recordBuf.isClosed()  &&  isEnabled(Feature.AUTO_CLOSE_ERROR))  {	  if(!recordBuf.isClosed())    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
27	[BUG]  [BUGGY]  if(!recordBuf.length)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {    [BUGGY]  if(!recordBuf.length)  {  [BUGGY]    finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!recordBuf.length)  {	  if(!closed)    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
28	[BUG]  [BUGGY]  if(!recordBuf.isOpen())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {    [BUGGY]  if(!recordBuf.isOpen())  {  [BUGGY]    finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!recordBuf.isOpen())  {	  if(!closed)    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
29	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {    [BUGGY]  if(recordBuf!=  null)  {  [BUGGY]    finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(recordBuf!=  null)  {	  if(!closed)    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
30	[BUG]  [BUGGY]  if(recorded)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {    [BUGGY]  if(recorded)  {  [BUGGY]    finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(recorded)  {	  if(!recorded)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
31	[BUG]  [BUGGY]  if(!recorded  &&  buffer.length  >  0)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {    [BUGGY]  if(!recorded  &&  buffer.length  >  0)  {  [BUGGY]    finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!recorded  &&  buffer.length  >  0)  {	  if(!recorded)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
32	[BUG]  [BUGGY]  if(!recorded  &&  hasUnclosedEntry)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {    [BUGGY]  if(!recorded  &&  hasUnclosedEntry)  {  [BUGGY]    finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!recorded  &&  hasUnclosedEntry)  {	  if(!recorded)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
33	[BUG]  [BUGGY]  if(hasUnclosed  ||  buffer!=  null)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {    [BUGGY]  if(hasUnclosed  ||  buffer!=  null)  {  [BUGGY]    finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(hasUnclosed  ||  buffer!=  null)  {	  if(hasUnclosed)    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
34	[BUG]  [BUGGY]  if(hasUnclosedEntry  &&!finished)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {    [BUGGY]  if(hasUnclosedEntry  &&!finished)  {  [BUGGY]    finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(hasUnclosedEntry  &&!finished)  {	  if(hasUnclosedEntry    ||!finished)    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
35	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  out!=  null)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {    [BUGGY]  if(hasUnclosedEntry  ||  out!=  null)  {  [BUGGY]    finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(hasUnclosedEntry  ||  out!=  null)  {	  if(hasUnclosedEntry    ||!finished)    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
36	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  isEnabled(TarBuffer.DEFAULT_CLOSE_ERROR))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {    [BUGGY]  if(hasUnclosedEntry  ||  isEnabled(TarBuffer.DEFAULT_CLOSE_ERROR))  {  [BUGGY]    finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(hasUnclosedEntry  ||  isEnabled(TarBuffer.DEFAULT_CLOSE_ERROR))  {	  if(hasUnclosedEntry    ||!finished)    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
37	[BUG]  [BUGGY]  if(closed)  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {    [BUGGY]  if(closed)  {  [BUGGY]    finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(closed)  {	  if(finished)    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
38	[BUG]  [BUGGY]  if(this.hasUnclosedEntry)  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {    [BUGGY]  if(this.hasUnclosedEntry)  {  [BUGGY]    finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(this.hasUnclosedEntry)  {	  if(finished)    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
39	[BUG]  [BUGGY]  if(!hasUnclosedEntry  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {    [BUGGY]  if(!hasUnclosedEntry  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]    finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!hasUnclosedEntry  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(!hasUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
40	[BUG]  [BUGGY]  if(haveUnclosedEntry)  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {    [BUGGY]  if(haveUnclosedEntry)  {  [BUGGY]    finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(haveUnclosedEntry)  {	  if(finished)    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
41	[BUG]  [BUGGY]  if(hasUnclosed  ||  out!=  null)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {    [BUGGY]  if(hasUnclosed  ||  out!=  null)  {  [BUGGY]    finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(hasUnclosed  ||  out!=  null)  {	  if(hasUnclosed)    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
42	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  out  ==  null)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {    [BUGGY]  if(hasUnclosedEntry  ||  out  ==  null)  {  [BUGGY]    finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(hasUnclosedEntry  ||  out  ==  null)  {	  if(hasUnclosedEntry    ||!finished)    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
43	[BUG]  [BUGGY]  if(!recordBuf.isClosed()  &&  buffer.length  >  0)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {    [BUGGY]  if(!recordBuf.isClosed()  &&  buffer.length  >  0)  {  [BUGGY]    finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!recordBuf.isClosed()  &&  buffer.length  >  0)  {	  if(!recordBuf.isClosed())    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
44	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  buffer!=  null)  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {    [BUGGY]  if(hasUnclosedEntry  ||  buffer!=  null)  {  [BUGGY]    finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(hasUnclosedEntry  ||  buffer!=  null)  {	  if(hasUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
45	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  buffer  ==  null)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {    [BUGGY]  if(hasUnclosedEntry  ||  buffer  ==  null)  {  [BUGGY]    finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(hasUnclosedEntry  ||  buffer  ==  null)  {	  if(hasUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
46	[BUG]  [BUGGY]  if(!recorded  &&  out!=  null)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {    [BUGGY]  if(!recorded  &&  out!=  null)  {  [BUGGY]    finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!recorded  &&  out!=  null)  {	  if(!recorded)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
47	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||!recorded)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {    [BUGGY]  if(hasUnclosedEntry  ||!recorded)  {  [BUGGY]    finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(hasUnclosedEntry  ||!recorded)  {	  if(!recorded)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
48	[BUG]  [BUGGY]  if(!recorded  &&  buffer.close()  >  0)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {    [BUGGY]  if(!recorded  &&  buffer.close()  >  0)  {  [BUGGY]    finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!recorded  &&  buffer.close()  >  0)  {	  if(!recorded)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
49	[BUG]  [BUGGY]  if(!closed)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {    [BUGGY]  if(!closed)  {  buffer.close();  }  [BUGGY]    finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!closed)  {  buffer.close();  }	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
50	[BUG]  [BUGGY]  System.err.println( "TarBuffer  cloned ");  [CE]  <identifier>  expected  [FE]                        AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {    [BUGGY]  System.err.println( "TarBuffer  cloned ");  [BUGGY]    finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	System.err.println( "TarBuffer  cloned ");	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
51	[BUG]  [BUGGY]  if(!closed)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {    [BUGGY]  if(!closed)  {  out.close();  }  [BUGGY]    finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!closed)  {  out.close();  }	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
52	[BUG]  [BUGGY]  if(!closed)  {  buffer.close();  }  else  {  out.close();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {    [BUGGY]  if(!closed)  {  buffer.close();  }  else  {  out.close();  }  [BUGGY]    finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!closed)  {  buffer.close();  }  else  {  out.close();  }	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
53	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {    [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]    finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(!haveUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
54	[BUG]  [BUGGY]  if(!cloned)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {    [BUGGY]  if(!cloned)  {  [BUGGY]    finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!cloned)  {	  if(!haveUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
55	[BUG]  [BUGGY]  if(!hasUnclosedEntry  ||  buffer!=  null)  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {    [BUGGY]  if(!hasUnclosedEntry  ||  buffer!=  null)  {  [BUGGY]    finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!hasUnclosedEntry  ||  buffer!=  null)  {	  if(!hasUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
56	[BUG]  [BUGGY]  if(!hasUnclosedEntry  &&  buffer!=  null)  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {    [BUGGY]  if(!hasUnclosedEntry  &&  buffer!=  null)  {  [BUGGY]    finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!hasUnclosedEntry  &&  buffer!=  null)  {	  if(!hasUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
57	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||!closed)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {    [BUGGY]  if(hasUnclosedEntry  ||!closed)  {  [BUGGY]    finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(hasUnclosedEntry  ||!closed)  {	  if(!closed)    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
58	[BUG]  [BUGGY]  if(hadUnclosedEntry)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {    [BUGGY]  if(hadUnclosedEntry)  {  [BUGGY]    finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(hadUnclosedEntry)  {	  if(!closed)    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
59	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||!hasUnclosedEntry())  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {    [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||!hasUnclosedEntry())  {  [BUGGY]    finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)||!hasUnclosedEntry())  {	  if(!haveUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
60	[BUG]  [BUGGY]  if(isEnabled(Feature.FLUSH_PASSED_TO_STREAM))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {    [BUGGY]  if(isEnabled(Feature.FLUSH_PASSED_TO_STREAM))  {  [BUGGY]    finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(isEnabled(Feature.FLUSH_PASSED_TO_STREAM))  {	  if(!haveUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
61	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {    [BUGGY]  if(hasUnclosedEntry  ||  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  [BUGGY]    finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(hasUnclosedEntry  ||  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {	  if(hasUnclosedEntry    ||!finished)    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
62	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  isEnabled(Feature.FLUSH_PASSED_TO_STREAM))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {    [BUGGY]  if(hasUnclosedEntry  ||  isEnabled(Feature.FLUSH_PASSED_TO_STREAM))  {  [BUGGY]    finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(hasUnclosedEntry  ||  isEnabled(Feature.FLUSH_PASSED_TO_STREAM))  {	  if(hasUnclosedEntry    ||!finished)    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
63	[BUG]  [BUGGY]  if(isRecorded()  ||!hasUnclosedEntry)  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {    [BUGGY]  if(isRecorded()  ||!hasUnclosedEntry)  {  [BUGGY]    finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(isRecorded()  ||!hasUnclosedEntry)  {	  if(!hasUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
64	[BUG]  [BUGGY]  if(!recorded  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {    [BUGGY]  if(!recorded  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]    finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!recorded  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(!recorded)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
65	[BUG]  [BUGGY]  if(!recorded  &&  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {    [BUGGY]  if(!recorded  &&  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  [BUGGY]    finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(!recorded  &&  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {	  if(!recorded)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
66	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  buffer.close();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {    [BUGGY]  if(recordBuf!=  null)  {  buffer.close();  }  else  {  buffer.close();  }  [BUGGY]    finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(recordBuf!=  null)  {  buffer.close();  }  else  {  buffer.close();  }	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
67	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  buffer.close();  }  else  {  out.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {    [BUGGY]  if(recordBuf!=  null)  {  buffer.close();  }  else  {  out.close();  }  [BUGGY]    finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(recordBuf!=  null)  {  buffer.close();  }  else  {  out.close();  }	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
68	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  out.close();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {    [BUGGY]  if(recordBuf!=  null)  {  out.close();  }  else  {  buffer.close();  }  [BUGGY]    finish();  }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	140	140	1	replace	if(recordBuf!=  null)  {  out.close();  }  else  {  buffer.close();  }	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
