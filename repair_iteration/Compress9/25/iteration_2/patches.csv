bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  OutputStream  out  =(TarBuffer)buffer.clone();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  OutputStream  out  =(TarBuffer)buffer.clone();  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	OutputStream  out  =(TarBuffer)buffer.clone();	  OutputStream    out    =(TarBuffer)this.recordBuf.clone();    	non-compiled	[CE]  <identifier>  expected	51	None	replace
2	[BUG]  [BUGGY]  OutputStream  out  =(TarBuffer)assemBuf.clone();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  OutputStream  out  =(TarBuffer)assemBuf.clone();  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	OutputStream  out  =(TarBuffer)assemBuf.clone();	  OutputStream    out    =(TarBuffer)this.recordBuf.clone();    	non-compiled	[CE]  <identifier>  expected	51	None	replace
3	[BUG]  [BUGGY]  OutputStream  out  =(TarBuffer)this.recordBuf.close();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  OutputStream  out  =(TarBuffer)this.recordBuf.close();  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	OutputStream  out  =(TarBuffer)this.recordBuf.close();	  OutputStream    out    =(TarBuffer)this.recordBuf.clone();    	non-compiled	[CE]  <identifier>  expected	51	None	replace
4	[BUG]  [BUGGY]  OutputStream  out  =(TarBuffer)this.assemBuf.clone();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  OutputStream  out  =(TarBuffer)this.assemBuf.clone();  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	OutputStream  out  =(TarBuffer)this.assemBuf.clone();	  OutputStream    out    =(TarBuffer)this.recordBuf.clone();    	non-compiled	[CE]  <identifier>  expected	51	None	replace
5	[BUG]  [BUGGY]  OutputStream  out  =(TarBuffer)recordBuf.clone();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  OutputStream  out  =(TarBuffer)recordBuf.clone();  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	OutputStream  out  =(TarBuffer)recordBuf.clone();	  OutputStream    out    =(TarBuffer)this.recordBuf.clone();    	non-compiled	[CE]  <identifier>  expected	51	None	replace
6	[BUG]  [BUGGY]  OutputStream  out  =(TarBuffer)buff.clone();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  OutputStream  out  =(TarBuffer)buff.clone();  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	OutputStream  out  =(TarBuffer)buff.clone();	  OutputStream    out    =(TarBuffer)this.recordBuf.clone();    	non-compiled	[CE]  <identifier>  expected	51	None	replace
7	[BUG]  [BUGGY]  because(assemSize!=  null)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemSize);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  because(assemSize!=  null)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemSize);  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	because(assemSize!=  null)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemSize);  }	  because(out!=    null)    {    out.close();    }    else    {    buffer.write(assemBuf,    0,    assemSize);    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
8	[BUG]  [BUGGY]  because(assemLen!=  0)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemSize);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  because(assemLen!=  0)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemSize);  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	because(assemLen!=  0)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemSize);  }	  because(out!=    null)    {    out.close();    }    else    {    buffer.write(assemBuf,    0,    assemSize);    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
9	[BUG]  [BUGGY]  because(assemLen!=  0)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  because(assemLen!=  0)  {  out.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	because(assemLen!=  0)  {  out.close();  }	  because(out!=    null)    {    out.close();    }    else    {    buffer.write(assemBuf,    0,    assemSize);    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
10	[BUG]  [BUGGY]  because(assemLen  >=  0)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemSize);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  because(assemLen  >=  0)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemSize);  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	because(assemLen  >=  0)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemSize);  }	  because(out!=    null)    {    out.close();    }    else    {    buffer.write(assemBuf,    0,    assemSize);    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
11	[BUG]  [BUGGY]  because(out!=  null)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  because(out!=  null)  {  out.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	because(out!=  null)  {  out.close();  }	  because(out!=    null)    {    out.close();    }    else    {    buffer.write(assemBuf,    0,    assemSize);    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
12	[BUG]  [BUGGY]  because(assemLen  >=  0)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  because(assemLen  >=  0)  {  out.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	because(assemLen  >=  0)  {  out.close();  }	  because(out!=    null)    {    out.close();    }    else    {    buffer.write(assemBuf,    0,    assemSize);    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
13	[BUG]  [BUGGY]  os.write(buffer,  0,  buffer.length);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  os.write(buffer,  0,  buffer.length);  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	os.write(buffer,  0,  buffer.length);	  os.close();    	non-compiled	[CE]  <identifier>  expected	78	None	replace
14	[BUG]  [BUGGY]  os.write(assemBuf,  0,  assemLen);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  os.write(assemBuf,  0,  assemLen);  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	os.write(assemBuf,  0,  assemLen);	  os.close();    	non-compiled	[CE]  <identifier>  expected	78	None	replace
15	[BUG]  [BUGGY]  os.write(assemBuf,  0,  buffer.length);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  os.write(assemBuf,  0,  buffer.length);  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	os.write(assemBuf,  0,  buffer.length);	  os.close();    	non-compiled	[CE]  <identifier>  expected	78	None	replace
16	[BUG]  [BUGGY]  os.write(assemBuf,  0,  currName.length());  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  os.write(assemBuf,  0,  currName.length());  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	os.write(assemBuf,  0,  currName.length());	  os.close();    	non-compiled	[CE]  <identifier>  expected	78	None	replace
17	[BUG]  [BUGGY]  os.write(assemBuf,  0,  currSize);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  os.write(assemBuf,  0,  currSize);  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	os.write(assemBuf,  0,  currSize);	  os.close();    	non-compiled	[CE]  <identifier>  expected	78	None	replace
18	[BUG]  [BUGGY]  out.write(assemBuf,  0,  currBytes);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  out.write(assemBuf,  0,  currBytes);  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	out.write(assemBuf,  0,  currBytes);	  out.write(assemBuf,    0,    blockSize);    	non-compiled	[CE]  <identifier>  expected	41	None	replace
19	[BUG]  [BUGGY]  out.write(assemBuf,  0,  recordSize);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  out.write(assemBuf,  0,  recordSize);  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	out.write(assemBuf,  0,  recordSize);	  out.write(assemBuf,    0,    blockSize);    	non-compiled	[CE]  <identifier>  expected	41	None	replace
20	[BUG]  [BUGGY]  out.write(assemBuf,  0,  blockSize  +  1);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  out.write(assemBuf,  0,  blockSize  +  1);  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	out.write(assemBuf,  0,  blockSize  +  1);	  out.write(assemBuf,    0,    blockSize);    	non-compiled	[CE]  <identifier>  expected	41	None	replace
21	[BUG]  [BUGGY]  out.write(assemBuf,  0,  blockSize  -  1);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  out.write(assemBuf,  0,  blockSize  -  1);  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	out.write(assemBuf,  0,  blockSize  -  1);	  out.write(assemBuf,    0,    blockSize);    	non-compiled	[CE]  <identifier>  expected	41	None	replace
22	[BUG]  [BUGGY]  if(out!=  null  ||  out.size()  >  0)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(out!=  null  ||  out.size()  >  0)  {  out.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(out!=  null  ||  out.size()  >  0)  {  out.close();  }	  if(out!=    null    &&    out.size()    >    0)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	80	None	replace
23	[BUG]  [BUGGY]  if(out!=  null  &&  out.size()  <  =  0)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(out!=  null  &&  out.size()  <  =  0)  {  out.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(out!=  null  &&  out.size()  <  =  0)  {  out.close();  }	  if(out!=    null    &&    out.size()    >    0)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	80	None	replace
24	[BUG]  [BUGGY]  if(out!=  null  &&  out.size()  >  1)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(out!=  null  &&  out.size()  >  1)  {  out.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(out!=  null  &&  out.size()  >  1)  {  out.close();  }	  if(out!=    null    &&    out.size()    >    0)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	80	None	replace
25	[BUG]  [BUGGY]  if(!closed)  {  if(assemSize  >  0)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemSize);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(!closed)  {  if(assemSize  >  0)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemSize);  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(!closed)  {  if(assemSize  >  0)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemSize);  }	  if(assemSize    >    0)    {    out.close();    }    else    {    buffer.write(assemBuf,    0,    assemSize);    }    	non-compiled	[CE]  <identifier>  expected	77	None	replace
26	[BUG]  [BUGGY]  if(!finished)  {  if(assemSize  >  0)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemSize);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(!finished)  {  if(assemSize  >  0)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemSize);  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(!finished)  {  if(assemSize  >  0)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemSize);  }	  if(assemSize    >    0)    {    out.close();    }    else    {    buffer.write(assemBuf,    0,    assemSize);    }    	non-compiled	[CE]  <identifier>  expected	77	None	replace
27	[BUG]  [BUGGY]  if(!closed)  {  if(assemSize  >  0)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(!closed)  {  if(assemSize  >  0)  {  out.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(!closed)  {  if(assemSize  >  0)  {  out.close();  }	  if(assemSize    >    0)    {    out.close();    }    else    {    buffer.write(assemBuf,    0,    assemSize);    }    	non-compiled	[CE]  <identifier>  expected	77	None	replace
28	[BUG]  [BUGGY]  if(!finished)  {  if(assemSize  >  0)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(!finished)  {  if(assemSize  >  0)  {  out.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(!finished)  {  if(assemSize  >  0)  {  out.close();  }	  if(assemSize    >    0)    {    out.close();    }    else    {    buffer.write(assemBuf,    0,    assemSize);    }    	non-compiled	[CE]  <identifier>  expected	77	None	replace
29	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  if(!closed)  {  buffer.close();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(hasUnclosedEntry)  {  if(!closed)  {  buffer.close();  }  else  {  buffer.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(hasUnclosedEntry)  {  if(!closed)  {  buffer.close();  }  else  {  buffer.close();  }	  if(!closed)    {    buffer.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	64	None	replace
30	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  if(!closed)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(hasUnclosedEntry)  {  if(!closed)  {  buffer.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(hasUnclosedEntry)  {  if(!closed)  {  buffer.close();  }	  if(!closed)    {    buffer.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	64	None	replace
31	[BUG]  [BUGGY]  if(hasUnclosed)  {  if(!closed)  {  buffer.close();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(hasUnclosed)  {  if(!closed)  {  buffer.close();  }  else  {  buffer.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(hasUnclosed)  {  if(!closed)  {  buffer.close();  }  else  {  buffer.close();  }	  if(!closed)    {    buffer.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	64	None	replace
32	[BUG]  [BUGGY]  if(hasUnclosed)  {  if(!closed)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(hasUnclosed)  {  if(!closed)  {  buffer.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(hasUnclosed)  {  if(!closed)  {  buffer.close();  }	  if(!closed)    {    buffer.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	64	None	replace
33	[BUG]  [BUGGY]  if(!finished)  {  buffer.close();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(!finished)  {  buffer.close();  }  else  {  buffer.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(!finished)  {  buffer.close();  }  else  {  buffer.close();  }	  if(!closed)    {    buffer.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	64	None	replace
34	[BUG]  [BUGGY]  if(!finished)  {  if(hasUnclosedEntry)  {  out.close();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(!finished)  {  if(hasUnclosedEntry)  {  out.close();  }  else  {  buffer.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(!finished)  {  if(hasUnclosedEntry)  {  out.close();  }  else  {  buffer.close();  }	  if(hasUnclosedEntry)    {    out.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
35	[BUG]  [BUGGY]  if(hasUnclosed)  {  out.close();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(hasUnclosed)  {  out.close();  }  else  {  buffer.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(hasUnclosed)  {  out.close();  }  else  {  buffer.close();  }	  if(hasUnclosedEntry)    {    out.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
36	[BUG]  [BUGGY]  if(!finished)  {  if(hasUnclosedEntry)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(!finished)  {  if(hasUnclosedEntry)  {  out.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(!finished)  {  if(hasUnclosedEntry)  {  out.close();  }	  if(hasUnclosedEntry)    {    out.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
37	[BUG]  [BUGGY]  if(hasUnclosed)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(hasUnclosed)  {  out.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(hasUnclosed)  {  out.close();  }	  if(hasUnclosedEntry)    {    out.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
38	[BUG]  [BUGGY]  if(closed)  {  if(buffer!=  null)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(closed)  {  if(buffer!=  null)  {  buffer.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(closed)  {  if(buffer!=  null)  {  buffer.close();  }	  if(buffer!=    null)    {    buffer.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	65	None	replace
39	[BUG]  [BUGGY]  if(buffer!=  null)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(buffer!=  null)  {  buffer.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(buffer!=  null)  {  buffer.close();  }	  if(buffer!=    null)    {    buffer.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	65	None	replace
40	[BUG]  [BUGGY]  while(buffer!=  null  &&  buffer.length  >  0)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  while(buffer!=  null  &&  buffer.length  >  0)  {  buffer.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	while(buffer!=  null  &&  buffer.length  >  0)  {  buffer.close();  }	  if(buffer!=    null)    {    buffer.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	65	None	replace
41	[BUG]  [BUGGY]  if(closed)  {  if(buffer!=  null)  {  buffer.close();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(closed)  {  if(buffer!=  null)  {  buffer.close();  }  else  {  buffer.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(closed)  {  if(buffer!=  null)  {  buffer.close();  }  else  {  buffer.close();  }	  if(buffer!=    null)    {    buffer.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	65	None	replace
42	[BUG]  [BUGGY]  while(buffer!=  null)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  while(buffer!=  null)  {  buffer.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	while(buffer!=  null)  {  buffer.close();  }	  if(buffer!=    null)    {    buffer.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	65	None	replace
43	[BUG]  [BUGGY]  while(buffer!=  null  &&  buffer.length  >  0)  {  buffer.close();  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  while(buffer!=  null  &&  buffer.length  >  0)  {  buffer.close();  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	while(buffer!=  null  &&  buffer.length  >  0)  {  buffer.close();	  if(buffer!=    null)    {    buffer.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	65	None	replace
44	[BUG]  [BUGGY]  if(assemLen  >  0)  {  if(assemLen!=  0)  {  out.close();  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(assemLen  >  0)  {  if(assemLen!=  0)  {  out.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(assemLen  >  0)  {  if(assemLen!=  0)  {  out.close();  }	  if(assemLen!=    0)    {    out.close();    }    else    {    buffer.write(assemBuf,    0,    assemLen);    }    	non-compiled	[CE]  <identifier>  expected	46	None	replace
45	[BUG]  [BUGGY]  if(assemLen  >  0)  {  if(assemLen  >=  0)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(assemLen  >  0)  {  if(assemLen  >=  0)  {  out.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(assemLen  >  0)  {  if(assemLen  >=  0)  {  out.close();  }	  if(assemLen!=    0)    {    out.close();    }    else    {    buffer.write(assemBuf,    0,    assemLen);    }    	non-compiled	[CE]  <identifier>  expected	46	None	replace
46	[BUG]  [BUGGY]  because(assemLen  >  0)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemLen);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  because(assemLen  >  0)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemLen);  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	because(assemLen  >  0)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemLen);  }	  if(assemLen!=    0)    {    out.close();    }    else    {    buffer.write(assemBuf,    0,    assemLen);    }    	non-compiled	[CE]  <identifier>  expected	46	None	replace
47	[BUG]  [BUGGY]  if(assemLen  >  0)  {  if(assemLen  >=  1)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(assemLen  >  0)  {  if(assemLen  >=  1)  {  out.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(assemLen  >  0)  {  if(assemLen  >=  1)  {  out.close();  }	  if(assemLen!=    0)    {    out.close();    }    else    {    buffer.write(assemBuf,    0,    assemLen);    }    	non-compiled	[CE]  <identifier>  expected	46	None	replace
48	[BUG]  [BUGGY]  out.defaultReader().close();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  out.defaultReader().close();  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	out.defaultReader().close();	  out.defaultReader().flush();    	non-compiled	[CE]  <identifier>  expected	39	None	replace
49	[BUG]  [BUGGY]  out.defaultReader().write(buffer,  0,  buffer.length);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  out.defaultReader().write(buffer,  0,  buffer.length);  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	out.defaultReader().write(buffer,  0,  buffer.length);	  out.defaultReader().flush();    	non-compiled	[CE]  <identifier>  expected	39	None	replace
50	[BUG]  [BUGGY]  if(assemLen  >  0)  {  if(assemLen  ==  0)  {  out.close();  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(assemLen  >  0)  {  if(assemLen  ==  0)  {  out.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(assemLen  >  0)  {  if(assemLen  ==  0)  {  out.close();  }	  if(assemLen    ==    0)    {    out.close();    }    else    {    buffer.write(assemBuf,    0,    assemLen);    }    	non-compiled	[CE]  <identifier>  expected	86	None	replace
51	[BUG]  [BUGGY]  if(assemLen  >  0)  {  if(assemLen  ==  0)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemLen);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(assemLen  >  0)  {  if(assemLen  ==  0)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemLen);  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(assemLen  >  0)  {  if(assemLen  ==  0)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemLen);  }	  if(assemLen    ==    0)    {    out.close();    }    else    {    buffer.write(assemBuf,    0,    assemLen);    }    	non-compiled	[CE]  <identifier>  expected	86	None	replace
52	[BUG]  [BUGGY]  if(assemLen  >  0)  {  if(assemLen  ==  1)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(assemLen  >  0)  {  if(assemLen  ==  1)  {  out.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(assemLen  >  0)  {  if(assemLen  ==  1)  {  out.close();  }	  if(assemLen    ==    0)    {    out.close();    }    else    {    buffer.write(assemBuf,    0,    assemLen);    }    	non-compiled	[CE]  <identifier>  expected	86	None	replace
53	[BUG]  [BUGGY]  out.write(buffer,  0,  blockSize);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  out.write(buffer,  0,  blockSize);  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	out.write(buffer,  0,  blockSize);	  out.write(buffer,    0,    currSize);    	non-compiled	[CE]  <identifier>  expected	69	None	replace
54	[BUG]  [BUGGY]  out.write(buffer,  0,  currBytes);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  out.write(buffer,  0,  currBytes);  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	out.write(buffer,  0,  currBytes);	  out.write(buffer,    0,    currSize);    	non-compiled	[CE]  <identifier>  expected	69	None	replace
55	[BUG]  [BUGGY]  out.write(currName,  0,  bufferSize);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  out.write(currName,  0,  bufferSize);  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	out.write(currName,  0,  bufferSize);	  out.write(buffer,    0,    currSize);    	non-compiled	[CE]  <identifier>  expected	69	None	replace
56	[BUG]  [BUGGY]  out.write(buffer,  0,  currSize  -  currBytes);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  out.write(buffer,  0,  currSize  -  currBytes);  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	out.write(buffer,  0,  currSize  -  currBytes);	  out.write(buffer,    0,    currSize);    	non-compiled	[CE]  <identifier>  expected	69	None	replace
57	[BUG]  [BUGGY]  out.write(currName,  0,  currSize);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  out.write(currName,  0,  currSize);  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	out.write(currName,  0,  currSize);	  out.write(buffer,    0,    currSize);    	non-compiled	[CE]  <identifier>  expected	69	None	replace
58	[BUG]  [BUGGY]  if(!closed)  {  if(out!=  null)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemSize);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(!closed)  {  if(out!=  null)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemSize);  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(!closed)  {  if(out!=  null)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemSize);  }	  if(!hasUnclosedEntry)    {    if(out!=    null)    {    out.close();    }    else    {    buffer.write(assemBuf,    0,    assemSize);    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
59	[BUG]  [BUGGY]  if(!closed)  {  if(out!=  null)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(!closed)  {  if(out!=  null)  {  out.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(!closed)  {  if(out!=  null)  {  out.close();  }	  if(!hasUnclosedEntry)    {    if(out!=    null)    {    out.close();    }    else    {    buffer.write(assemBuf,    0,    assemSize);    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
60	[BUG]  [BUGGY]  if(hasUnclosed)  {  if(out!=  null)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemSize);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(hasUnclosed)  {  if(out!=  null)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemSize);  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(hasUnclosed)  {  if(out!=  null)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemSize);  }	  if(!hasUnclosedEntry)    {    if(out!=    null)    {    out.close();    }    else    {    buffer.write(assemBuf,    0,    assemSize);    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
61	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  if(out!=  null)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(hasUnclosedEntry)  {  if(out!=  null)  {  out.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(hasUnclosedEntry)  {  if(out!=  null)  {  out.close();  }	  if(!hasUnclosedEntry)    {    if(out!=    null)    {    out.close();    }    else    {    buffer.write(assemBuf,    0,    assemSize);    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
62	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  if(out!=  null)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemSize);  }  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(hasUnclosedEntry)  {  if(out!=  null)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemSize);  }  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(hasUnclosedEntry)  {  if(out!=  null)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemSize);  }  }	  if(!hasUnclosedEntry)    {    if(out!=    null)    {    out.close();    }    else    {    buffer.write(assemBuf,    0,    assemSize);    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
63	[BUG]  [BUGGY]  if(closed)  {  if(out!=  null)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemSize);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(closed)  {  if(out!=  null)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemSize);  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(closed)  {  if(out!=  null)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemSize);  }	  if(!hasUnclosedEntry)    {    if(out!=    null)    {    out.close();    }    else    {    buffer.write(assemBuf,    0,    assemSize);    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
64	[BUG]  [BUGGY]  out.write(assemBuf,  0,  assemLen  *  4);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  out.write(assemBuf,  0,  assemLen  *  4);  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	out.write(assemBuf,  0,  assemLen  *  4);	  out.write(assemBuf,    0,    assemLen    +    4);    	non-compiled	[CE]  <identifier>  expected	81	None	replace
65	[BUG]  [BUGGY]  out.write(assemBuf,  0,  assemLen  +  5);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  out.write(assemBuf,  0,  assemLen  +  5);  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	out.write(assemBuf,  0,  assemLen  +  5);	  out.write(assemBuf,    0,    assemLen    +    4);    	non-compiled	[CE]  <identifier>  expected	81	None	replace
66	[BUG]  [BUGGY]  because(assemLen  >  0)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemSize);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  because(assemLen  >  0)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemSize);  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	because(assemLen  >  0)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemSize);  }	  if(assemLen    >    0)    {    out.close();    }    else    {    buffer.write(assemBuf,    0,    assemSize);    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
67	[BUG]  [BUGGY]  if(!closed)  {  if(assemLen  >  0)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemSize);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(!closed)  {  if(assemLen  >  0)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemSize);  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(!closed)  {  if(assemLen  >  0)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemSize);  }	  if(assemLen    >    0)    {    out.close();    }    else    {    buffer.write(assemBuf,    0,    assemSize);    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
68	[BUG]  [BUGGY]  if(!closed)  {  if(assemLen  >  0)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(!closed)  {  if(assemLen  >  0)  {  out.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(!closed)  {  if(assemLen  >  0)  {  out.close();  }	  if(assemLen    >    0)    {    out.close();    }    else    {    buffer.write(assemBuf,    0,    assemSize);    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
69	[BUG]  [BUGGY]  if(assemLen  >  0)  {  buffer.close();  }  else  {  buffer.write(assemBuf,  0,  assemSize);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(assemLen  >  0)  {  buffer.close();  }  else  {  buffer.write(assemBuf,  0,  assemSize);  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(assemLen  >  0)  {  buffer.close();  }  else  {  buffer.write(assemBuf,  0,  assemSize);  }	  if(assemLen    >    0)    {    out.close();    }    else    {    buffer.write(assemBuf,    0,    assemSize);    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
70	[BUG]  [BUGGY]  out.copy(assemBuf,  0,  buffer.length  -  1);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  out.copy(assemBuf,  0,  buffer.length  -  1);  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	out.copy(assemBuf,  0,  buffer.length  -  1);	  out.write(assemBuf,    0,    buffer.length    -    1);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
71	[BUG]  [BUGGY]  out.write(assemBuf,  0,  buffer.length  -  1  +  1);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  out.write(assemBuf,  0,  buffer.length  -  1  +  1);  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	out.write(assemBuf,  0,  buffer.length  -  1  +  1);	  out.write(assemBuf,    0,    buffer.length    -    1);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
72	[BUG]  [BUGGY]  OutputStream  out  =  buffer.getOutputStream();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  OutputStream  out  =  buffer.getOutputStream();  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	OutputStream  out  =  buffer.getOutputStream();	  OutputStream    out    =    this.recordBuf.getOutputStream();    	non-compiled	[CE]  <identifier>  expected	52	None	replace
73	[BUG]  [BUGGY]  OutputStream  out  =  this.recordBuf.openStream();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  OutputStream  out  =  this.recordBuf.openStream();  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	OutputStream  out  =  this.recordBuf.openStream();	  OutputStream    out    =    this.recordBuf.getOutputStream();    	non-compiled	[CE]  <identifier>  expected	52	None	replace
74	[BUG]  [BUGGY]  OutputStream  out  =  this.recordBuf.toByteArray();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  OutputStream  out  =  this.recordBuf.toByteArray();  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	OutputStream  out  =  this.recordBuf.toByteArray();	  OutputStream    out    =    this.recordBuf.getOutputStream();    	non-compiled	[CE]  <identifier>  expected	52	None	replace
75	[BUG]  [BUGGY]  OutputStream  out  =  assemBuf.getOutputStream();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  OutputStream  out  =  assemBuf.getOutputStream();  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	OutputStream  out  =  assemBuf.getOutputStream();	  OutputStream    out    =    this.recordBuf.getOutputStream();    	non-compiled	[CE]  <identifier>  expected	52	None	replace
76	[BUG]  [BUGGY]  OutputStream  out  =  this.recordBuf.defaultOutputStream();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  OutputStream  out  =  this.recordBuf.defaultOutputStream();  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	OutputStream  out  =  this.recordBuf.defaultOutputStream();	  OutputStream    out    =    this.recordBuf.getOutputStream();    	non-compiled	[CE]  <identifier>  expected	52	None	replace
77	[BUG]  [BUGGY]  OutputStream  out  =  this.recordBuf.getOutputStream(buffer);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  OutputStream  out  =  this.recordBuf.getOutputStream(buffer);  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	OutputStream  out  =  this.recordBuf.getOutputStream(buffer);	  OutputStream    out    =    this.recordBuf.getOutputStream();    	non-compiled	[CE]  <identifier>  expected	52	None	replace
78	[BUG]  [BUGGY]  if(assemSize  >  0)  {  if(assemLen  >=  0)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(assemSize  >  0)  {  if(assemLen  >=  0)  {  out.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(assemSize  >  0)  {  if(assemLen  >=  0)  {  out.close();  }	  if(assemLen    >=    0)    {    out.close();    }    else    {    buffer.write(assemBuf,    0,    assemSize);    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
79	[BUG]  [BUGGY]  if(assemLen  >  0)  {  if(assemSize  >=  0)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(assemLen  >  0)  {  if(assemSize  >=  0)  {  out.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(assemLen  >  0)  {  if(assemSize  >=  0)  {  out.close();  }	  if(assemLen    >=    0)    {    out.close();    }    else    {    buffer.write(assemBuf,    0,    assemSize);    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
80	[BUG]  [BUGGY]  out.write(assemBuf,  0,  currName.length  -  1);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  out.write(assemBuf,  0,  currName.length  -  1);  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	out.write(assemBuf,  0,  currName.length  -  1);	  out.write(assemBuf,    0,    currName.length);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
81	[BUG]  [BUGGY]  out.write(assemBuf,  0,  currName.length  +  1);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  out.write(assemBuf,  0,  currName.length  +  1);  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	out.write(assemBuf,  0,  currName.length  +  1);	  out.write(assemBuf,    0,    currName.length);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
82	[BUG]  [BUGGY]  out.write(assemBuf,  0,  currName.length  -  2);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  out.write(assemBuf,  0,  currName.length  -  2);  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	out.write(assemBuf,  0,  currName.length  -  2);	  out.write(assemBuf,    0,    currName.length);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
83	[BUG]  [BUGGY]  out.write(assemBuf,  0,  currName.length  -  4);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  out.write(assemBuf,  0,  currName.length  -  4);  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	out.write(assemBuf,  0,  currName.length  -  4);	  out.write(assemBuf,    0,    currName.length);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
84	[BUG]  [BUGGY]  out.write(assemBuf,  0,  currName.length,  buffer.length);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  out.write(assemBuf,  0,  currName.length,  buffer.length);  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	out.write(assemBuf,  0,  currName.length,  buffer.length);	  out.write(assemBuf,    0,    currName.length);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
85	[BUG]  [BUGGY]  out.write(assemBuf,  0,  currName.length  +  2);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  out.write(assemBuf,  0,  currName.length  +  2);  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	out.write(assemBuf,  0,  currName.length  +  2);	  out.write(assemBuf,    0,    currName.length);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
86	[BUG]  [BUGGY]  out.write(assemBuf,  0,  assemBuf.length  +  1);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  out.write(assemBuf,  0,  assemBuf.length  +  1);  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	out.write(assemBuf,  0,  assemBuf.length  +  1);	  out.write(assemBuf,    0,    assemBuf.length);    	non-compiled	[CE]  <identifier>  expected	71	None	replace
87	[BUG]  [BUGGY]  out.write(assemBuf,  0,  assemBuf.length  -  1);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  out.write(assemBuf,  0,  assemBuf.length  -  1);  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	out.write(assemBuf,  0,  assemBuf.length  -  1);	  out.write(assemBuf,    0,    assemBuf.length);    	non-compiled	[CE]  <identifier>  expected	71	None	replace
88	[BUG]  [BUGGY]  if(assemBuf!=  null)  {  out.write(assemBuf,  0,  assemBuf.length);  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(assemBuf!=  null)  {  out.write(assemBuf,  0,  assemBuf.length);  }  else  {  buffer.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(assemBuf!=  null)  {  out.write(assemBuf,  0,  assemBuf.length);  }  else  {  buffer.close();  }	  out.write(assemBuf,    0,    assemBuf.length);    	non-compiled	[CE]  <identifier>  expected	71	None	replace
89	[BUG]  [BUGGY]  if(assemBuf!=  null)  {  out.write(assemBuf,  0,  assemBuf.length);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(assemBuf!=  null)  {  out.write(assemBuf,  0,  assemBuf.length);  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(assemBuf!=  null)  {  out.write(assemBuf,  0,  assemBuf.length);  }	  out.write(assemBuf,    0,    assemBuf.length);    	non-compiled	[CE]  <identifier>  expected	71	None	replace
90	[BUG]  [BUGGY]  if(closed)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(closed)  {  buffer.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(closed)  {  buffer.close();  }	  if(out!=    null)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	72	None	replace
91	[BUG]  [BUGGY]  if(buffered!=  null)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(buffered!=  null)  {  buffer.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(buffered!=  null)  {  buffer.close();  }	  if(out!=    null)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	72	None	replace
92	[BUG]  [BUGGY]  while(buffer!=  null  &&  out!=  null)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  while(buffer!=  null  &&  out!=  null)  {  buffer.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	while(buffer!=  null  &&  out!=  null)  {  buffer.close();  }	  if(out!=    null)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	72	None	replace
93	[BUG]  [BUGGY]  if(closed)  {  if(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.length();  i++)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(closed)  {  if(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.length();  i++)  {  buffer.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(closed)  {  if(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.length();  i++)  {  buffer.close();  }	  if(buffer!=    null)    {    for(int    i    =    0;    i    <    buffer.length();    i++)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
94	[BUG]  [BUGGY]  if(!closed)  {  if(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.length();  i++)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(!closed)  {  if(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.length();  i++)  {  buffer.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(!closed)  {  if(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.length();  i++)  {  buffer.close();  }	  if(buffer!=    null)    {    for(int    i    =    0;    i    <    buffer.length();    i++)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
95	[BUG]  [BUGGY]  while(buffer!=  null  &&  buffer.length  >  0)  {  for(int  i  =  0;  i  <  buffer.length();  i++)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  while(buffer!=  null  &&  buffer.length  >  0)  {  for(int  i  =  0;  i  <  buffer.length();  i++)  {  buffer.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	while(buffer!=  null  &&  buffer.length  >  0)  {  for(int  i  =  0;  i  <  buffer.length();  i++)  {  buffer.close();  }	  if(buffer!=    null)    {    for(int    i    =    0;    i    <    buffer.length();    i++)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
96	[BUG]  [BUGGY]  while(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.length();  i++)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  while(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.length();  i++)  {  buffer.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	while(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.length();  i++)  {  buffer.close();  }	  if(buffer!=    null)    {    for(int    i    =    0;    i    <    buffer.length();    i++)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
97	[BUG]  [BUGGY]  if(closed)  {  if(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.length();  i++)  {  buffer.close();  }  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(closed)  {  if(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.length();  i++)  {  buffer.close();  }  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(closed)  {  if(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.length();  i++)  {  buffer.close();  }  }	  if(buffer!=    null)    {    for(int    i    =    0;    i    <    buffer.length();    i++)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
98	[BUG]  [BUGGY]  if(!closed)  {  if(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.length();  i++)  {  buffer.close();  }  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(!closed)  {  if(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.length();  i++)  {  buffer.close();  }  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(!closed)  {  if(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.length();  i++)  {  buffer.close();  }  }	  if(buffer!=    null)    {    for(int    i    =    0;    i    <    buffer.length();    i++)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
99	[BUG]  [BUGGY]  out.write(assemBuf,  0,  buffer.length  -  3);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  out.write(assemBuf,  0,  buffer.length  -  3);  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	out.write(assemBuf,  0,  buffer.length  -  3);	  out.write(assemBuf,    0,    buffer.length    -    4);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
100	[BUG]  [BUGGY]  out.write(assemBuf,  0,  buffer.length  /  4);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  out.write(assemBuf,  0,  buffer.length  /  4);  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	out.write(assemBuf,  0,  buffer.length  /  4);	  out.write(assemBuf,    0,    buffer.length    -    4);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
101	[BUG]  [BUGGY]  while(out!=  null)  {  out.flush();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  while(out!=  null)  {  out.flush();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	while(out!=  null)  {  out.flush();  }	  while(out!=    null)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
102	[BUG]  [BUGGY]  while(out!=  null  &&  out.length  >  0)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  while(out!=  null  &&  out.length  >  0)  {  out.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	while(out!=  null  &&  out.length  >  0)  {  out.close();  }	  while(out!=    null)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
103	[BUG]  [BUGGY]  while(out!=  null  &&  buffer.length  >  0)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  while(out!=  null  &&  buffer.length  >  0)  {  out.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	while(out!=  null  &&  buffer.length  >  0)  {  out.close();  }	  while(out!=    null)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
104	[BUG]  [BUGGY]  while(out!=  null)  {  out.write(buffer,  0,  out.length);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  while(out!=  null)  {  out.write(buffer,  0,  out.length);  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	while(out!=  null)  {  out.write(buffer,  0,  out.length);  }	  while(out!=    null)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
105	[BUG]  [BUGGY]  while(out  ==  null)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  while(out  ==  null)  {  out.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	while(out  ==  null)  {  out.close();  }	  while(out!=    null)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
106	[BUG]  [BUGGY]  while(out!=  null)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  while(out!=  null)  {  buffer.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	while(out!=  null)  {  buffer.close();  }	  while(out!=    null)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
107	[BUG]  [BUGGY]  if(hasUnclosed)  {  if(!finished)  {  out.close();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(hasUnclosed)  {  if(!finished)  {  out.close();  }  else  {  buffer.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(hasUnclosed)  {  if(!finished)  {  out.close();  }  else  {  buffer.close();  }	  if(hasUnclosedEntry)    {    if(!closed)    {    out.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
108	[BUG]  [BUGGY]  if(closed)  {  if(!closed)  {  out.close();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(closed)  {  if(!closed)  {  out.close();  }  else  {  buffer.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(closed)  {  if(!closed)  {  out.close();  }  else  {  buffer.close();  }	  if(hasUnclosedEntry)    {    if(!closed)    {    out.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
109	[BUG]  [BUGGY]  if(closed)  {  if(hasUnclosedEntry)  {  out.close();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(closed)  {  if(hasUnclosedEntry)  {  out.close();  }  else  {  buffer.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(closed)  {  if(hasUnclosedEntry)  {  out.close();  }  else  {  buffer.close();  }	  if(hasUnclosedEntry)    {    if(!closed)    {    out.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
110	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  if(out!=  null)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemLen);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(hasUnclosedEntry)  {  if(out!=  null)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemLen);  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(hasUnclosedEntry)  {  if(out!=  null)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemLen);  }	  if(!hasUnclosedEntry)    {    if(out!=    null)    {    out.close();    }    else    {    buffer.write(assemBuf,    0,    assemLen);    }    	non-compiled	[CE]  <identifier>  expected	59	None	replace
111	[BUG]  [BUGGY]  if(!closed)  {  if(out!=  null)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemLen);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(!closed)  {  if(out!=  null)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemLen);  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(!closed)  {  if(out!=  null)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemLen);  }	  if(!hasUnclosedEntry)    {    if(out!=    null)    {    out.close();    }    else    {    buffer.write(assemBuf,    0,    assemLen);    }    	non-compiled	[CE]  <identifier>  expected	59	None	replace
112	[BUG]  [BUGGY]  if(assemLen  >  0)  {  if(!hasUnclosedEntry)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(assemLen  >  0)  {  if(!hasUnclosedEntry)  {  out.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(assemLen  >  0)  {  if(!hasUnclosedEntry)  {  out.close();  }	  if(!hasUnclosedEntry)    {    if(out!=    null)    {    out.close();    }    else    {    buffer.write(assemBuf,    0,    assemLen);    }    	non-compiled	[CE]  <identifier>  expected	59	None	replace
113	[BUG]  [BUGGY]  if(assemLen  >  0)  {  if(hasUnclosedEntry)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(assemLen  >  0)  {  if(hasUnclosedEntry)  {  out.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(assemLen  >  0)  {  if(hasUnclosedEntry)  {  out.close();  }	  if(!hasUnclosedEntry)    {    if(out!=    null)    {    out.close();    }    else    {    buffer.write(assemBuf,    0,    assemLen);    }    	non-compiled	[CE]  <identifier>  expected	59	None	replace
114	[BUG]  [BUGGY]  if(hasUnclosed)  {  if(out!=  null)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemLen);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(hasUnclosed)  {  if(out!=  null)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemLen);  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(hasUnclosed)  {  if(out!=  null)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemLen);  }	  if(!hasUnclosedEntry)    {    if(out!=    null)    {    out.close();    }    else    {    buffer.write(assemBuf,    0,    assemLen);    }    	non-compiled	[CE]  <identifier>  expected	59	None	replace
115	[BUG]  [BUGGY]  if(closed)  {  out.flush();  }  else  {  buffer.flush();  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(closed)  {  out.flush();  }  else  {  buffer.flush();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(closed)  {  out.flush();  }  else  {  buffer.flush();  }	  if(out!=    null)    {    out.flush();    }    else    {    buffer.flush();    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
116	[BUG]  [BUGGY]  if(out!=  null)  {  out.flush();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(out!=  null)  {  out.flush();  }  else  {  buffer.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(out!=  null)  {  out.flush();  }  else  {  buffer.close();  }	  if(out!=    null)    {    out.flush();    }    else    {    buffer.flush();    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
117	[BUG]  [BUGGY]  if(assemLen  >  0)  {  if(assemSize!=  null)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(assemLen  >  0)  {  if(assemSize!=  null)  {  out.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(assemLen  >  0)  {  if(assemSize!=  null)  {  out.close();  }	  if(assemSize!=    null)    {    out.close();    }    else    {    buffer.write(assemBuf,    0,    assemSize);    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
118	[BUG]  [BUGGY]  if(assemLen!=  0)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemSize);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(assemLen!=  0)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemSize);  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(assemLen!=  0)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemSize);  }	  if(assemSize!=    null)    {    out.close();    }    else    {    buffer.write(assemBuf,    0,    assemSize);    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
119	[BUG]  [BUGGY]  if(assemLen  ==  0)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemSize);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(assemLen  ==  0)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemSize);  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(assemLen  ==  0)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemSize);  }	  if(assemSize!=    null)    {    out.close();    }    else    {    buffer.write(assemBuf,    0,    assemSize);    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
120	[BUG]  [BUGGY]  because(assemLen!=  null)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemLen);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  because(assemLen!=  null)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemLen);  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	because(assemLen!=  null)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemLen);  }	  because(out!=    null)    {    out.close();    }    else    {    buffer.write(assemBuf,    0,    assemLen);    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
121	[BUG]  [BUGGY]  because(assemLen!=  null)  {  out.close();  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  because(assemLen!=  null)  {  out.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	because(assemLen!=  null)  {  out.close();  }	  because(out!=    null)    {    out.close();    }    else    {    buffer.write(assemBuf,    0,    assemLen);    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
122	[BUG]  [BUGGY]  because(assemLen!=  0)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemLen);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  because(assemLen!=  0)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemLen);  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	because(assemLen!=  0)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemLen);  }	  because(out!=    null)    {    out.close();    }    else    {    buffer.write(assemBuf,    0,    assemLen);    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
123	[BUG]  [BUGGY]  because(assemLen  >=  null)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemLen);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  because(assemLen  >=  null)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemLen);  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	because(assemLen  >=  null)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemLen);  }	  because(out!=    null)    {    out.close();    }    else    {    buffer.write(assemBuf,    0,    assemLen);    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
124	[BUG]  [BUGGY]  because(assemLen!=  null)  {  out.close();  }  else  if(!closed)  {  buffer.write(assemBuf,  0,  assemLen);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  because(assemLen!=  null)  {  out.close();  }  else  if(!closed)  {  buffer.write(assemBuf,  0,  assemLen);  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	because(assemLen!=  null)  {  out.close();  }  else  if(!closed)  {  buffer.write(assemBuf,  0,  assemLen);  }	  because(out!=    null)    {    out.close();    }    else    {    buffer.write(assemBuf,    0,    assemLen);    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
125	[BUG]  [BUGGY]  if(closed)  {  if(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.size();  ++i)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(closed)  {  if(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.size();  ++i)  {  buffer.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(closed)  {  if(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.size();  ++i)  {  buffer.close();  }	  if(buffer!=    null)    {    for(int    i    =    0;    i    <    buffer.size();    ++i)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	87	None	replace
126	[BUG]  [BUGGY]  if(!closed)  {  if(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.size();  ++i)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(!closed)  {  if(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.size();  ++i)  {  buffer.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(!closed)  {  if(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.size();  ++i)  {  buffer.close();  }	  if(buffer!=    null)    {    for(int    i    =    0;    i    <    buffer.size();    ++i)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	87	None	replace
127	[BUG]  [BUGGY]  while(buffer!=  null  &&  buffer.size()  >  0)  {  for(int  i  =  0;  i  <  buffer.size();  ++i)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  while(buffer!=  null  &&  buffer.size()  >  0)  {  for(int  i  =  0;  i  <  buffer.size();  ++i)  {  buffer.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	while(buffer!=  null  &&  buffer.size()  >  0)  {  for(int  i  =  0;  i  <  buffer.size();  ++i)  {  buffer.close();  }	  if(buffer!=    null)    {    for(int    i    =    0;    i    <    buffer.size();    ++i)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	87	None	replace
128	[BUG]  [BUGGY]  while(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.size();  ++i)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  while(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.size();  ++i)  {  buffer.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	while(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.size();  ++i)  {  buffer.close();  }	  if(buffer!=    null)    {    for(int    i    =    0;    i    <    buffer.size();    ++i)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	87	None	replace
129	[BUG]  [BUGGY]  if(closed)  {  if(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.size();  ++i)  {  buffer.close();  }  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(closed)  {  if(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.size();  ++i)  {  buffer.close();  }  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(closed)  {  if(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.size();  ++i)  {  buffer.close();  }  }	  if(buffer!=    null)    {    for(int    i    =    0;    i    <    buffer.size();    ++i)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	87	None	replace
130	[BUG]  [BUGGY]  if(buffer  ==  null)  {  for(int  i  =  0;  i  <  buffer.size();  ++i)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(buffer  ==  null)  {  for(int  i  =  0;  i  <  buffer.size();  ++i)  {  buffer.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(buffer  ==  null)  {  for(int  i  =  0;  i  <  buffer.size();  ++i)  {  buffer.close();  }	  if(buffer!=    null)    {    for(int    i    =    0;    i    <    buffer.size();    ++i)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	87	None	replace
131	[BUG]  [BUGGY]  if(closed)  {  if(out!=  null)  {  out.close();  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(closed)  {  if(out!=  null)  {  out.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(closed)  {  if(out!=  null)  {  out.close();  }	  if(!hasUnclosedEntry)    {    if(out!=    null)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	60	None	replace
132	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  if(out  ==  null)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(hasUnclosedEntry)  {  if(out  ==  null)  {  out.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(hasUnclosedEntry)  {  if(out  ==  null)  {  out.close();  }	  if(!hasUnclosedEntry)    {    if(out!=    null)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	60	None	replace
133	[BUG]  [BUGGY]  out!=  null;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  out!=  null;  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	out!=  null;	  if(!hasUnclosedEntry)    {    if(out!=    null)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	60	None	replace
134	[BUG]  [BUGGY]  if(!hasUnclosed)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(!hasUnclosed)  {  out.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(!hasUnclosed)  {  out.close();  }	  if(!closed)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
135	[BUG]  [BUGGY]  if(out!=  null  ||  out.length  >  0)  {  out.close();  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(out!=  null  ||  out.length  >  0)  {  out.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(out!=  null  ||  out.length  >  0)  {  out.close();  }	  if(out!=    null    &&    out.length    >    0)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	79	None	replace
136	[BUG]  [BUGGY]  if(out!=  null  &&  out.length  >  0)  {  out.flush();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(out!=  null  &&  out.length  >  0)  {  out.flush();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(out!=  null  &&  out.length  >  0)  {  out.flush();  }	  if(out!=    null    &&    out.length    >    0)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	79	None	replace
137	[BUG]  [BUGGY]  out.write(assemBuf,  0,  buffer.length  -  5);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  out.write(assemBuf,  0,  buffer.length  -  5);  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	out.write(assemBuf,  0,  buffer.length  -  5);	  out.write(assemBuf,    0,    buffer.length    -    6);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
138	[BUG]  [BUGGY]  if(assemLen  ==  0)  {  out.close();  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(assemLen  ==  0)  {  out.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(assemLen  ==  0)  {  out.close();  }	  if(assemLen    >    0)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	85	None	replace
139	[BUG]  [BUGGY]  if(assemLen  >  0)  {  out.flush();  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(assemLen  >  0)  {  out.flush();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(assemLen  >  0)  {  out.flush();  }	  if(assemLen    >    0)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	85	None	replace
140	[BUG]  [BUGGY]  if(assemLen  >  0)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(assemLen  >  0)  {  buffer.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(assemLen  >  0)  {  buffer.close();  }	  if(assemLen    >    0)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	85	None	replace
141	[BUG]  [BUGGY]  if(closed)  {  if(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.size();  i++)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(closed)  {  if(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.size();  i++)  {  buffer.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(closed)  {  if(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.size();  i++)  {  buffer.close();  }	  if(buffer!=    null)    {    for(int    i    =    0;    i    <    buffer.size();    i++)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
142	[BUG]  [BUGGY]  if(!closed)  {  if(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.size();  i++)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(!closed)  {  if(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.size();  i++)  {  buffer.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(!closed)  {  if(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.size();  i++)  {  buffer.close();  }	  if(buffer!=    null)    {    for(int    i    =    0;    i    <    buffer.size();    i++)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
143	[BUG]  [BUGGY]  while(buffer!=  null  &&  buffer.size()  >  0)  {  for(int  i  =  0;  i  <  buffer.size();  i++)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  while(buffer!=  null  &&  buffer.size()  >  0)  {  for(int  i  =  0;  i  <  buffer.size();  i++)  {  buffer.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	while(buffer!=  null  &&  buffer.size()  >  0)  {  for(int  i  =  0;  i  <  buffer.size();  i++)  {  buffer.close();  }	  if(buffer!=    null)    {    for(int    i    =    0;    i    <    buffer.size();    i++)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
144	[BUG]  [BUGGY]  while(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.size();  i++)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  while(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.size();  i++)  {  buffer.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	while(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.size();  i++)  {  buffer.close();  }	  if(buffer!=    null)    {    for(int    i    =    0;    i    <    buffer.size();    i++)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
145	[BUG]  [BUGGY]  if(buffer  ==  null)  {  for(int  i  =  0;  i  <  buffer.size();  i++)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(buffer  ==  null)  {  for(int  i  =  0;  i  <  buffer.size();  i++)  {  buffer.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(buffer  ==  null)  {  for(int  i  =  0;  i  <  buffer.size();  i++)  {  buffer.close();  }	  if(buffer!=    null)    {    for(int    i    =    0;    i    <    buffer.size();    i++)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
146	[BUG]  [BUGGY]  while(buffer!=  null  &&  buffer.hasMoreElements())  {  for(int  i  =  0;  i  <  buffer.size();  i++)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  while(buffer!=  null  &&  buffer.hasMoreElements())  {  for(int  i  =  0;  i  <  buffer.size();  i++)  {  buffer.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	while(buffer!=  null  &&  buffer.hasMoreElements())  {  for(int  i  =  0;  i  <  buffer.size();  i++)  {  buffer.close();  }	  if(buffer!=    null)    {    for(int    i    =    0;    i    <    buffer.size();    i++)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
147	[BUG]  [BUGGY]  if(assemLen  >  0)  {  if(out  ==  null)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemLen);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(assemLen  >  0)  {  if(out  ==  null)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemLen);  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(assemLen  >  0)  {  if(out  ==  null)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemLen);  }	  if(assemLen    >    0)    {    if(out!=    null)    {    out.close();    }    else    {    buffer.write(assemBuf,    0,    assemLen);    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
148	[BUG]  [BUGGY]  if(assemLen  ==  0)  {  if(out!=  null)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemLen);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(assemLen  ==  0)  {  if(out!=  null)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemLen);  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(assemLen  ==  0)  {  if(out!=  null)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemLen);  }	  if(assemLen    >    0)    {    if(out!=    null)    {    out.close();    }    else    {    buffer.write(assemBuf,    0,    assemLen);    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
149	[BUG]  [BUGGY]  if(assemLen  >=  0)  {  if(out!=  null)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemLen);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(assemLen  >=  0)  {  if(out!=  null)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemLen);  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(assemLen  >=  0)  {  if(out!=  null)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemLen);  }	  if(assemLen    >    0)    {    if(out!=    null)    {    out.close();    }    else    {    buffer.write(assemBuf,    0,    assemLen);    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
150	[BUG]  [BUGGY]  out.write(assemBuf,  0,  assemLen  *  3);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  out.write(assemBuf,  0,  assemLen  *  3);  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	out.write(assemBuf,  0,  assemLen  *  3);	  out.write(assemBuf,    0,    assemLen    +    3);    	non-compiled	[CE]  <identifier>  expected	82	None	replace
151	[BUG]  [BUGGY]  if(currSize!=  null)  {  for(int  i  =  0;  i  <  currSize;  i++)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(currSize!=  null)  {  for(int  i  =  0;  i  <  currSize;  i++)  {  buffer.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(currSize!=  null)  {  for(int  i  =  0;  i  <  currSize;  i++)  {  buffer.close();  }	  if(buffer!=    null)    {    for(int    i    =    0;    i    <    currSize;    i++)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
152	[BUG]  [BUGGY]  if(currSize  ==  null)  {  for(int  i  =  0;  i  <  currSize;  i++)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(currSize  ==  null)  {  for(int  i  =  0;  i  <  currSize;  i++)  {  buffer.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(currSize  ==  null)  {  for(int  i  =  0;  i  <  currSize;  i++)  {  buffer.close();  }	  if(buffer!=    null)    {    for(int    i    =    0;    i    <    currSize;    i++)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
153	[BUG]  [BUGGY]  if(currSize  >  0)  {  if(buffer!=  null)  {  for(int  i  =  0;  i  <  currSize;  i++)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(currSize  >  0)  {  if(buffer!=  null)  {  for(int  i  =  0;  i  <  currSize;  i++)  {  buffer.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(currSize  >  0)  {  if(buffer!=  null)  {  for(int  i  =  0;  i  <  currSize;  i++)  {  buffer.close();  }	  if(buffer!=    null)    {    for(int    i    =    0;    i    <    currSize;    i++)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
154	[BUG]  [BUGGY]  if(closed)  {  if(buffer!=  null)  {  for(int  i  =  0;  i  <  currSize;  i++)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(closed)  {  if(buffer!=  null)  {  for(int  i  =  0;  i  <  currSize;  i++)  {  buffer.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(closed)  {  if(buffer!=  null)  {  for(int  i  =  0;  i  <  currSize;  i++)  {  buffer.close();  }	  if(buffer!=    null)    {    for(int    i    =    0;    i    <    currSize;    i++)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
155	[BUG]  [BUGGY]  if(currSize  >=  null)  {  for(int  i  =  0;  i  <  currSize;  i++)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(currSize  >=  null)  {  for(int  i  =  0;  i  <  currSize;  i++)  {  buffer.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(currSize  >=  null)  {  for(int  i  =  0;  i  <  currSize;  i++)  {  buffer.close();  }	  if(buffer!=    null)    {    for(int    i    =    0;    i    <    currSize;    i++)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
156	[BUG]  [BUGGY]  if(currSize!=  currSize)  {  for(int  i  =  0;  i  <  currSize;  i++)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(currSize!=  currSize)  {  for(int  i  =  0;  i  <  currSize;  i++)  {  buffer.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(currSize!=  currSize)  {  for(int  i  =  0;  i  <  currSize;  i++)  {  buffer.close();  }	  if(buffer!=    null)    {    for(int    i    =    0;    i    <    currSize;    i++)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
157	[BUG]  [BUGGY]  if(currSize  >  0)  {  if(buffer!=  null)  {  for(int  i  =  0;  i  <  currSize;  i++)  {  buffer.close();  }  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(currSize  >  0)  {  if(buffer!=  null)  {  for(int  i  =  0;  i  <  currSize;  i++)  {  buffer.close();  }  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(currSize  >  0)  {  if(buffer!=  null)  {  for(int  i  =  0;  i  <  currSize;  i++)  {  buffer.close();  }  }	  if(buffer!=    null)    {    for(int    i    =    0;    i    <    currSize;    i++)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
158	[BUG]  [BUGGY]  if(!hasUnclosedEntry)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(!hasUnclosedEntry)  {  buffer.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(!hasUnclosedEntry)  {  buffer.close();  }	  if(!closed)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	66	None	replace
159	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(hasUnclosedEntry)  {  buffer.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(hasUnclosedEntry)  {  buffer.close();  }	  if(!closed)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	66	None	replace
160	[BUG]  [BUGGY]  if(!hasUnclosed)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(!hasUnclosed)  {  buffer.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(!hasUnclosed)  {  buffer.close();  }	  if(!closed)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	66	None	replace
161	[BUG]  [BUGGY]  buffer.close();  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  buffer.close();  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	buffer.close();	  if(!closed)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	66	None	replace
162	[BUG]  [BUGGY]  if(closed)  {  if(!finished)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(closed)  {  if(!finished)  {  out.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(closed)  {  if(!finished)  {  out.close();  }	  if(hasUnclosedEntry)    {    if(!finished)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
163	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  if(!cloned)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(hasUnclosedEntry)  {  if(!cloned)  {  out.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(hasUnclosedEntry)  {  if(!cloned)  {  out.close();  }	  if(hasUnclosedEntry)    {    if(!finished)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
164	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  if(finished)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(hasUnclosedEntry)  {  if(finished)  {  out.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(hasUnclosedEntry)  {  if(finished)  {  out.close();  }	  if(hasUnclosedEntry)    {    if(!finished)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
165	[BUG]  [BUGGY]  out.write(assemBuf,  0,  assemSize  +  1);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  out.write(assemBuf,  0,  assemSize  +  1);  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	out.write(assemBuf,  0,  assemSize  +  1);	  out.write(assemBuf,    0,    assemSize);    	non-compiled	[CE]  <identifier>  expected	43	None	replace
166	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  out.close();  }  else  {  buffer.flush();  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(hasUnclosedEntry)  {  out.close();  }  else  {  buffer.flush();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(hasUnclosedEntry)  {  out.close();  }  else  {  buffer.flush();  }	  if(closed)    {    out.close();    }    else    {    buffer.flush();    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
167	[BUG]  [BUGGY]  if(!closed)  {  out.close();  }  else  {  buffer.flush();  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(!closed)  {  out.close();  }  else  {  buffer.flush();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(!closed)  {  out.close();  }  else  {  buffer.flush();  }	  if(closed)    {    out.close();    }    else    {    buffer.flush();    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
168	[BUG]  [BUGGY]  if(hasUnclosed)  {  out.close();  }  else  {  buffer.flush();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(hasUnclosed)  {  out.close();  }  else  {  buffer.flush();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(hasUnclosed)  {  out.close();  }  else  {  buffer.flush();  }	  if(closed)    {    out.close();    }    else    {    buffer.flush();    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
169	[BUG]  [BUGGY]  if(!finished)  {  out.close();  }  else  {  buffer.flush();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(!finished)  {  out.close();  }  else  {  buffer.flush();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(!finished)  {  out.close();  }  else  {  buffer.flush();  }	  if(closed)    {    out.close();    }    else    {    buffer.flush();    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
170	[BUG]  [BUGGY]  while(!closed)  {  out.close();  }  else  {  buffer.flush();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  while(!closed)  {  out.close();  }  else  {  buffer.flush();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	while(!closed)  {  out.close();  }  else  {  buffer.flush();  }	  if(closed)    {    out.close();    }    else    {    buffer.flush();    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
171	[BUG]  [BUGGY]  while(!closed)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  while(!closed)  {  out.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	while(!closed)  {  out.close();  }	  if(closed)    {    out.close();    }    else    {    buffer.flush();    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
172	[BUG]  [BUGGY]  while(!closed)  {  out.close();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  while(!closed)  {  out.close();  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	while(!closed)  {  out.close();	  if(closed)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
173	[BUG]  [BUGGY]  if(!closed)  {  if(hasUnclosedEntry)  {  out.close();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(!closed)  {  if(hasUnclosedEntry)  {  out.close();  }  else  {  buffer.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(!closed)  {  if(hasUnclosedEntry)  {  out.close();  }  else  {  buffer.close();  }	  if(hasUnclosedEntry)    {    if(!finished)    {    out.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
174	[BUG]  [BUGGY]  if(!closed)  {  if(hasUnclosedEntry)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(!closed)  {  if(hasUnclosedEntry)  {  out.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(!closed)  {  if(hasUnclosedEntry)  {  out.close();  }	  if(hasUnclosedEntry)    {    if(!finished)    {    out.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
175	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  if(finished)  {  out.close();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(hasUnclosedEntry)  {  if(finished)  {  out.close();  }  else  {  buffer.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(hasUnclosedEntry)  {  if(finished)  {  out.close();  }  else  {  buffer.close();  }	  if(hasUnclosedEntry)    {    if(!finished)    {    out.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
176	[BUG]  [BUGGY]  if(hasUnclosed)  {  if(finished)  {  out.close();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(hasUnclosed)  {  if(finished)  {  out.close();  }  else  {  buffer.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(hasUnclosed)  {  if(finished)  {  out.close();  }  else  {  buffer.close();  }	  if(hasUnclosedEntry)    {    if(!finished)    {    out.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
177	[BUG]  [BUGGY]  out.write(assemBuf,  0,  currSize  +  1);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  out.write(assemBuf,  0,  currSize  +  1);  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	out.write(assemBuf,  0,  currSize  +  1);	  out.write(assemBuf,    0,    currSize);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
178	[BUG]  [BUGGY]  out.write(assemBuf,  0,  currSize  -  currBytes);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  out.write(assemBuf,  0,  currSize  -  currBytes);  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	out.write(assemBuf,  0,  currSize  -  currBytes);	  out.write(assemBuf,    0,    currSize);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
179	[BUG]  [BUGGY]  if(!closed)  {  if(hasUnclosedEntry)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemSize);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(!closed)  {  if(hasUnclosedEntry)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemSize);  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(!closed)  {  if(hasUnclosedEntry)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemSize);  }	  if(hasUnclosedEntry)    {    if(out!=    null)    {    out.close();    }    else    {    buffer.write(assemBuf,    0,    assemSize);    }    	non-compiled	[CE]  <identifier>  expected	62	None	replace
180	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  if(out  ==  null)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemSize);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(hasUnclosedEntry)  {  if(out  ==  null)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemSize);  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(hasUnclosedEntry)  {  if(out  ==  null)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemSize);  }	  if(hasUnclosedEntry)    {    if(out!=    null)    {    out.close();    }    else    {    buffer.write(assemBuf,    0,    assemSize);    }    	non-compiled	[CE]  <identifier>  expected	62	None	replace
181	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  if(out!=  null)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(hasUnclosedEntry)  {  if(out!=  null)  {  buffer.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(hasUnclosedEntry)  {  if(out!=  null)  {  buffer.close();  }	  if(out!=    null)    {    buffer.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	83	None	replace
182	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  if(out!=  null)  {  buffer.close();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(hasUnclosedEntry)  {  if(out!=  null)  {  buffer.close();  }  else  {  buffer.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(hasUnclosedEntry)  {  if(out!=  null)  {  buffer.close();  }  else  {  buffer.close();  }	  if(out!=    null)    {    buffer.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	83	None	replace
183	[BUG]  [BUGGY]  if(!finished)  {  if(out!=  null)  {  buffer.close();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(!finished)  {  if(out!=  null)  {  buffer.close();  }  else  {  buffer.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(!finished)  {  if(out!=  null)  {  buffer.close();  }  else  {  buffer.close();  }	  if(out!=    null)    {    buffer.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	83	None	replace
184	[BUG]  [BUGGY]  if(closed)  {  if(out!=  null)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(closed)  {  if(out!=  null)  {  buffer.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(closed)  {  if(out!=  null)  {  buffer.close();  }	  if(out!=    null)    {    buffer.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	83	None	replace
185	[BUG]  [BUGGY]  if(!closed)  {  if(out!=  null)  {  buffer.close();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(!closed)  {  if(out!=  null)  {  buffer.close();  }  else  {  buffer.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(!closed)  {  if(out!=  null)  {  buffer.close();  }  else  {  buffer.close();  }	  if(out!=    null)    {    buffer.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	83	None	replace
186	[BUG]  [BUGGY]  if(closed)  {  if(out!=  null)  {  buffer.close();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(closed)  {  if(out!=  null)  {  buffer.close();  }  else  {  buffer.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(closed)  {  if(out!=  null)  {  buffer.close();  }  else  {  buffer.close();  }	  if(out!=    null)    {    buffer.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	83	None	replace
187	[BUG]  [BUGGY]  if(closed)  {  if(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(closed)  {  if(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  buffer.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(closed)  {  if(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  buffer.close();  }	  if(buffer!=    null)    {    for(int    i    =    0;    i    <    buffer.length;    ++i)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
188	[BUG]  [BUGGY]  while(buffer!=  null  &&  buffer.length  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  while(buffer!=  null  &&  buffer.length  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  buffer.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	while(buffer!=  null  &&  buffer.length  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  buffer.close();  }	  if(buffer!=    null)    {    for(int    i    =    0;    i    <    buffer.length;    ++i)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
189	[BUG]  [BUGGY]  if(!closed)  {  if(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(!closed)  {  if(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  buffer.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(!closed)  {  if(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  buffer.close();  }	  if(buffer!=    null)    {    for(int    i    =    0;    i    <    buffer.length;    ++i)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
190	[BUG]  [BUGGY]  while(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  while(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  buffer.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	while(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  buffer.close();  }	  if(buffer!=    null)    {    for(int    i    =    0;    i    <    buffer.length;    ++i)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
191	[BUG]  [BUGGY]  if(closed)  {  if(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  buffer.close();  }  }  [CE]  <identifier>  expected  [FE]                                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(closed)  {  if(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  buffer.close();  }  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(closed)  {  if(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  buffer.close();  }  }	  if(buffer!=    null)    {    for(int    i    =    0;    i    <    buffer.length;    ++i)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
192	[BUG]  [BUGGY]  if(!closed)  {  if(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  buffer.close();  }  }  [CE]  <identifier>  expected  [FE]                                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(!closed)  {  if(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  buffer.close();  }  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(!closed)  {  if(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  buffer.close();  }  }	  if(buffer!=    null)    {    for(int    i    =    0;    i    <    buffer.length;    ++i)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
193	[BUG]  [BUGGY]  while(!closed)  {  out.close();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  while(!closed)  {  out.close();  }  else  {  buffer.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	while(!closed)  {  out.close();  }  else  {  buffer.close();  }	  if(closed)    {    out.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
194	[BUG]  [BUGGY]  if(os!=  null)  {  os.flush();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(os!=  null)  {  os.flush();  }  else  {  buffer.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(os!=  null)  {  os.flush();  }  else  {  buffer.close();  }	  os.flush();    	non-compiled	[CE]  <identifier>  expected	38	None	replace
195	[BUG]  [BUGGY]  if(os!=  null)  {  os.flush();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(os!=  null)  {  os.flush();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(os!=  null)  {  os.flush();  }	  os.flush();    	non-compiled	[CE]  <identifier>  expected	38	None	replace
196	[BUG]  [BUGGY]  if(os!=  null)  {  os.flush();  }  else  {  buffer.write(currName);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(os!=  null)  {  os.flush();  }  else  {  buffer.write(currName);  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(os!=  null)  {  os.flush();  }  else  {  buffer.write(currName);  }	  os.flush();    	non-compiled	[CE]  <identifier>  expected	38	None	replace
197	[BUG]  [BUGGY]  if(assemLen  >  0)  {  if(assemLen  >=  0)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemLen);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(assemLen  >  0)  {  if(assemLen  >=  0)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemLen);  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(assemLen  >  0)  {  if(assemLen  >=  0)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemLen);  }	  if(assemLen    >=    0)    {    out.close();    }    else    {    buffer.write(assemBuf,    0,    assemLen);    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
198	[BUG]  [BUGGY]  out.write(assemBuf,  0,  buffer.length  /  2);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  out.write(assemBuf,  0,  buffer.length  /  2);  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	out.write(assemBuf,  0,  buffer.length  /  2);	  out.write(assemBuf,    0,    buffer.length    +    2);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
199	[BUG]  [BUGGY]  out.write(assemBuf,  0,  buffer.length  *  2);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  out.write(assemBuf,  0,  buffer.length  *  2);  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	out.write(assemBuf,  0,  buffer.length  *  2);	  out.write(assemBuf,    0,    buffer.length    +    2);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
200	[BUG]  [BUGGY]  out.write(assemBuf,  0,  buffer.length  +  4);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  out.write(assemBuf,  0,  buffer.length  +  4);  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	out.write(assemBuf,  0,  buffer.length  +  4);	  out.write(assemBuf,    0,    buffer.length    +    2);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
201	[BUG]  [BUGGY]  if(!hasUnclosed)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemSize);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(!hasUnclosed)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemSize);  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(!hasUnclosed)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemSize);  }	  if(!closed)    {    out.close();    }    else    {    buffer.write(assemBuf,    0,    assemSize);    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
202	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  if(!closed)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemSize);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(hasUnclosedEntry)  {  if(!closed)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemSize);  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(hasUnclosedEntry)  {  if(!closed)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemSize);  }	  if(!closed)    {    out.close();    }    else    {    buffer.write(assemBuf,    0,    assemSize);    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
203	[BUG]  [BUGGY]  if(!hasUnclosedEntry)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemSize);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(!hasUnclosedEntry)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemSize);  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(!hasUnclosedEntry)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemSize);  }	  if(!closed)    {    out.close();    }    else    {    buffer.write(assemBuf,    0,    assemSize);    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
204	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  if(!closed)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemSize);  }  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(hasUnclosedEntry)  {  if(!closed)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemSize);  }  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(hasUnclosedEntry)  {  if(!closed)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemSize);  }  }	  if(!closed)    {    out.close();    }    else    {    buffer.write(assemBuf,    0,    assemSize);    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
205	[BUG]  [BUGGY]  if(hasUnclosed)  {  if(!closed)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemSize);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(hasUnclosed)  {  if(!closed)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemSize);  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(hasUnclosed)  {  if(!closed)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemSize);  }	  if(!closed)    {    out.close();    }    else    {    buffer.write(assemBuf,    0,    assemSize);    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
206	[BUG]  [BUGGY]  if(assemSize  ==  null)  {  out.close();  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(assemSize  ==  null)  {  out.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(assemSize  ==  null)  {  out.close();  }	  if(assemSize!=    null)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
207	[BUG]  [BUGGY]  if(assemLen!=  0)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(assemLen!=  0)  {  out.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(assemLen!=  0)  {  out.close();  }	  if(assemSize!=    null)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
208	[BUG]  [BUGGY]  if(assemSize!=  null)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(assemSize!=  null)  {  buffer.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(assemSize!=  null)  {  buffer.close();  }	  if(assemSize!=    null)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
209	[BUG]  [BUGGY]  out.write(assemBuf,  0,  0);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  out.write(assemBuf,  0,  0);  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	out.write(assemBuf,  0,  0);	  out.write(buffer,    0,    0);    	non-compiled	[CE]  <identifier>  expected	68	None	replace
210	[BUG]  [BUGGY]  out.write(buffer,  0,  assemBuf.length);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  out.write(buffer,  0,  assemBuf.length);  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	out.write(buffer,  0,  assemBuf.length);	  out.write(buffer,    0,    0);    	non-compiled	[CE]  <identifier>  expected	68	None	replace
211	[BUG]  [BUGGY]  out.write(buffer,  0,  currName.length);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  out.write(buffer,  0,  currName.length);  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	out.write(buffer,  0,  currName.length);	  out.write(buffer,    0,    0);    	non-compiled	[CE]  <identifier>  expected	68	None	replace
212	[BUG]  [BUGGY]  out.write(buffer,  0,  assemLen);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  out.write(buffer,  0,  assemLen);  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	out.write(buffer,  0,  assemLen);	  out.write(buffer,    0,    0);    	non-compiled	[CE]  <identifier>  expected	68	None	replace
213	[BUG]  [BUGGY]  out.write(assemBuffer,  0,  0);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  out.write(assemBuffer,  0,  0);  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	out.write(assemBuffer,  0,  0);	  out.write(buffer,    0,    0);    	non-compiled	[CE]  <identifier>  expected	68	None	replace
214	[BUG]  [BUGGY]  if(closed)  {  if(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.length;  i++)  {  buffer.append('/');  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(closed)  {  if(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.length;  i++)  {  buffer.append('/');  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(closed)  {  if(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.length;  i++)  {  buffer.append('/');  }	  if(buffer!=    null)    {    for(int    i    =    0;    i    <    buffer.length;    i++)    {    buffer.append('/');    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
215	[BUG]  [BUGGY]  if(!closed)  {  if(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.length;  i++)  {  buffer.append('/');  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(!closed)  {  if(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.length;  i++)  {  buffer.append('/');  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(!closed)  {  if(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.length;  i++)  {  buffer.append('/');  }	  if(buffer!=    null)    {    for(int    i    =    0;    i    <    buffer.length;    i++)    {    buffer.append('/');    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
216	[BUG]  [BUGGY]  while(buffer!=  null  &&  buffer.length  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  i++)  {  buffer.append('/');  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  while(buffer!=  null  &&  buffer.length  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  i++)  {  buffer.append('/');  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	while(buffer!=  null  &&  buffer.length  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  i++)  {  buffer.append('/');  }	  if(buffer!=    null)    {    for(int    i    =    0;    i    <    buffer.length;    i++)    {    buffer.append('/');    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
217	[BUG]  [BUGGY]  if(closed)  {  if(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.length;  i++)  {  buffer.append('/');  }  }  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(closed)  {  if(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.length;  i++)  {  buffer.append('/');  }  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(closed)  {  if(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.length;  i++)  {  buffer.append('/');  }  }	  if(buffer!=    null)    {    for(int    i    =    0;    i    <    buffer.length;    i++)    {    buffer.append('/');    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
218	[BUG]  [BUGGY]  while(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.length;  i++)  {  buffer.append('/');  }  [CE]  <identifier>  expected  [FE]                                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  while(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.length;  i++)  {  buffer.append('/');  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	while(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.length;  i++)  {  buffer.append('/');  }	  if(buffer!=    null)    {    for(int    i    =    0;    i    <    buffer.length;    i++)    {    buffer.append('/');    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
219	[BUG]  [BUGGY]  if(!closed)  {  if(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.length;  i++)  {  buffer.append('/');  }  }  [CE]  <identifier>  expected  [FE]                                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(!closed)  {  if(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.length;  i++)  {  buffer.append('/');  }  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(!closed)  {  if(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.length;  i++)  {  buffer.append('/');  }  }	  if(buffer!=    null)    {    for(int    i    =    0;    i    <    buffer.length;    i++)    {    buffer.append('/');    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
220	[BUG]  [BUGGY]  out.write(assemBuf,  0,  assemLen  *  2);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  out.write(assemBuf,  0,  assemLen  *  2);  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	out.write(assemBuf,  0,  assemLen  *  2);	  out.write(assemBuf,    0,    assemLen    +    2);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
221	[BUG]  [BUGGY]  OutputStream  out  =  this.os.getOutputStream();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  OutputStream  out  =  this.os.getOutputStream();  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	OutputStream  out  =  this.os.getOutputStream();	  OutputStream    out    =    os.getOutputStream();    	non-compiled	[CE]  <identifier>  expected	8	None	replace
222	[BUG]  [BUGGY]  OutputStream  out  =  os.close();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  OutputStream  out  =  os.close();  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	OutputStream  out  =  os.close();	  OutputStream    out    =    os.getOutputStream();    	non-compiled	[CE]  <identifier>  expected	8	None	replace
223	[BUG]  [BUGGY]  OutputStream  out  =  os.openStream();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  OutputStream  out  =  os.openStream();  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	OutputStream  out  =  os.openStream();	  OutputStream    out    =    os.getOutputStream();    	non-compiled	[CE]  <identifier>  expected	8	None	replace
224	[BUG]  [BUGGY]  OutputStream  out  =  os.getInputStream();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  OutputStream  out  =  os.getInputStream();  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	OutputStream  out  =  os.getInputStream();	  OutputStream    out    =    os.getOutputStream();    	non-compiled	[CE]  <identifier>  expected	8	None	replace
225	[BUG]  [BUGGY]  OutputStream  out  =  buffer.getInputStream();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  OutputStream  out  =  buffer.getInputStream();  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	OutputStream  out  =  buffer.getInputStream();	  OutputStream    out    =    os.getOutputStream();    	non-compiled	[CE]  <identifier>  expected	8	None	replace
226	[BUG]  [BUGGY]  if(!hasUnclosedEntry)  {  if(!finished)  {  out.close();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(!hasUnclosedEntry)  {  if(!finished)  {  out.close();  }  else  {  buffer.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(!hasUnclosedEntry)  {  if(!finished)  {  out.close();  }  else  {  buffer.close();  }	  if(closed)    {    if(!finished)    {    out.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
227	[BUG]  [BUGGY]  if(!hasUnclosed)  {  if(!finished)  {  out.close();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(!hasUnclosed)  {  if(!finished)  {  out.close();  }  else  {  buffer.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(!hasUnclosed)  {  if(!finished)  {  out.close();  }  else  {  buffer.close();  }	  if(closed)    {    if(!finished)    {    out.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
228	[BUG]  [BUGGY]  if(!hasUnclosedEntry)  {  if(finished)  {  out.close();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(!hasUnclosedEntry)  {  if(finished)  {  out.close();  }  else  {  buffer.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(!hasUnclosedEntry)  {  if(finished)  {  out.close();  }  else  {  buffer.close();  }	  if(closed)    {    if(!finished)    {    out.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
229	[BUG]  [BUGGY]  if(!hasUnclosedEntry)  {  if(!finished)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(!hasUnclosedEntry)  {  if(!finished)  {  out.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(!hasUnclosedEntry)  {  if(!finished)  {  out.close();  }	  if(closed)    {    if(!finished)    {    out.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
230	[BUG]  [BUGGY]  OutputStream  out  =  this.getOutputStream();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  OutputStream  out  =  this.getOutputStream();  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	OutputStream  out  =  this.getOutputStream();	  OutputStream    out    =    getOutputStream();    	non-compiled	[CE]  <identifier>  expected	10	None	replace
231	[BUG]  [BUGGY]  OutputStream  out  =  getOutputStream(buffer);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  OutputStream  out  =  getOutputStream(buffer);  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	OutputStream  out  =  getOutputStream(buffer);	  OutputStream    out    =    getOutputStream();    	non-compiled	[CE]  <identifier>  expected	10	None	replace
232	[BUG]  [BUGGY]  OutputStream  out  =  getOutputStream(),  buffer.length);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  OutputStream  out  =  getOutputStream(),  buffer.length);  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	OutputStream  out  =  getOutputStream(),  buffer.length);	  OutputStream    out    =    getOutputStream();    	non-compiled	[CE]  <identifier>  expected	10	None	replace
233	[BUG]  [BUGGY]  OutputStream  out  =  getOutputStream(buffer.length);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  OutputStream  out  =  getOutputStream(buffer.length);  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	OutputStream  out  =  getOutputStream(buffer.length);	  OutputStream    out    =    getOutputStream();    	non-compiled	[CE]  <identifier>  expected	10	None	replace
234	[BUG]  [BUGGY]  OutputStream  out  =  getOutputStream(),  buffer.getCharset());  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  OutputStream  out  =  getOutputStream(),  buffer.getCharset());  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	OutputStream  out  =  getOutputStream(),  buffer.getCharset());	  OutputStream    out    =    getOutputStream();    	non-compiled	[CE]  <identifier>  expected	10	None	replace
235	[BUG]  [BUGGY]  if(assemSize  >  0)  {  if(assemSize!=  0)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(assemSize  >  0)  {  if(assemSize!=  0)  {  out.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(assemSize  >  0)  {  if(assemSize!=  0)  {  out.close();  }	  if(assemSize!=    0)    {    out.close();    }    else    {    buffer.write(assemBuf,    0,    assemSize);    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
236	[BUG]  [BUGGY]  if(assemLen  >  0)  {  if(assemSize!=  0)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(assemLen  >  0)  {  if(assemSize!=  0)  {  out.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(assemLen  >  0)  {  if(assemSize!=  0)  {  out.close();  }	  if(assemSize!=    0)    {    out.close();    }    else    {    buffer.write(assemBuf,    0,    assemSize);    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
237	[BUG]  [BUGGY]  if(assemSize  >  0)  {  if(assemSize  >=  0)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(assemSize  >  0)  {  if(assemSize  >=  0)  {  out.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(assemSize  >  0)  {  if(assemSize  >=  0)  {  out.close();  }	  if(assemSize!=    0)    {    out.close();    }    else    {    buffer.write(assemBuf,    0,    assemSize);    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
238	[BUG]  [BUGGY]  if(closed)  {  if(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.length;  i++)  {  buffer[i]  =  null;  }  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(closed)  {  if(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.length;  i++)  {  buffer[i]  =  null;  }  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(closed)  {  if(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.length;  i++)  {  buffer[i]  =  null;  }  }	  if(buffer!=    null)    {    for(int    i    =    0;    i    <    buffer.length;    i++)    {    buffer[i]    =    null;    }    	non-compiled	[CE]  <identifier>  expected	67	None	replace
239	[BUG]  [BUGGY]  if(!closed)  {  if(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.length;  i++)  {  buffer[i]  =  null;  }  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(!closed)  {  if(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.length;  i++)  {  buffer[i]  =  null;  }  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(!closed)  {  if(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.length;  i++)  {  buffer[i]  =  null;  }  }	  if(buffer!=    null)    {    for(int    i    =    0;    i    <    buffer.length;    i++)    {    buffer[i]    =    null;    }    	non-compiled	[CE]  <identifier>  expected	67	None	replace
240	[BUG]  [BUGGY]  if(closed)  {  if(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.length;  i++)  {  buffer[i]  =  null;  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(closed)  {  if(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.length;  i++)  {  buffer[i]  =  null;  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(closed)  {  if(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.length;  i++)  {  buffer[i]  =  null;  }	  if(buffer!=    null)    {    for(int    i    =    0;    i    <    buffer.length;    i++)    {    buffer[i]    =    null;    }    	non-compiled	[CE]  <identifier>  expected	67	None	replace
241	[BUG]  [BUGGY]  while(buffer!=  null  &&  buffer.length  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  i++)  {  buffer[i]  =  null;  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  while(buffer!=  null  &&  buffer.length  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  i++)  {  buffer[i]  =  null;  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	while(buffer!=  null  &&  buffer.length  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  i++)  {  buffer[i]  =  null;  }	  if(buffer!=    null)    {    for(int    i    =    0;    i    <    buffer.length;    i++)    {    buffer[i]    =    null;    }    	non-compiled	[CE]  <identifier>  expected	67	None	replace
242	[BUG]  [BUGGY]  while(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.length;  i++)  {  buffer[i]  =  null;  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  while(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.length;  i++)  {  buffer[i]  =  null;  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	while(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.length;  i++)  {  buffer[i]  =  null;  }	  if(buffer!=    null)    {    for(int    i    =    0;    i    <    buffer.length;    i++)    {    buffer[i]    =    null;    }    	non-compiled	[CE]  <identifier>  expected	67	None	replace
243	[BUG]  [BUGGY]  if(!closed)  {  if(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.length;  i++)  {  buffer[i]  =  null;  }  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(!closed)  {  if(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.length;  i++)  {  buffer[i]  =  null;  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(!closed)  {  if(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.length;  i++)  {  buffer[i]  =  null;  }	  if(buffer!=    null)    {    for(int    i    =    0;    i    <    buffer.length;    i++)    {    buffer[i]    =    null;    }    	non-compiled	[CE]  <identifier>  expected	67	None	replace
244	[BUG]  [BUGGY]  if(closed)  {  if(!closed)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(closed)  {  if(!closed)  {  out.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(closed)  {  if(!closed)  {  out.close();  }	  if(hasUnclosedEntry)    {    if(!closed)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
245	[BUG]  [BUGGY]  if(closed)  {  out.flush();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(closed)  {  out.flush();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(closed)  {  out.flush();  }	  if(out!=    null)    {    out.flush();    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
246	[BUG]  [BUGGY]  while(out!=  null)  {  out.flush();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  while(out!=  null)  {  out.flush();  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	while(out!=  null)  {  out.flush();	  if(out!=    null)    {    out.flush();    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
247	[BUG]  [BUGGY]  if(assemLen  ==  0)  {  if(out!=  null)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(assemLen  ==  0)  {  if(out!=  null)  {  out.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(assemLen  ==  0)  {  if(out!=  null)  {  out.close();  }	  if(assemLen    >    0)    {    if(out!=    null)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
248	[BUG]  [BUGGY]  if(out!=  null)  {  if(assemLen  >  0)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(out!=  null)  {  if(assemLen  >  0)  {  out.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(out!=  null)  {  if(assemLen  >  0)  {  out.close();  }	  if(assemLen    >    0)    {    if(out!=    null)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
249	[BUG]  [BUGGY]  if(assemLen  >=  0)  {  if(out!=  null)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(assemLen  >=  0)  {  if(out!=  null)  {  out.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(assemLen  >=  0)  {  if(out!=  null)  {  out.close();  }	  if(assemLen    >    0)    {    if(out!=    null)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
250	[BUG]  [BUGGY]  because(out  ==  null)  {  out.close();  }  else  {  buffer.flush();  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  because(out  ==  null)  {  out.close();  }  else  {  buffer.flush();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	because(out  ==  null)  {  out.close();  }  else  {  buffer.flush();  }	  because(out!=    null)    {    out.close();    }    else    {    buffer.flush();    }    	non-compiled	[CE]  <identifier>  expected	73	None	replace
251	[BUG]  [BUGGY]  because(buffer!=  null)  {  out.close();  }  else  {  buffer.flush();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  because(buffer!=  null)  {  out.close();  }  else  {  buffer.flush();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	because(buffer!=  null)  {  out.close();  }  else  {  buffer.flush();  }	  because(out!=    null)    {    out.close();    }    else    {    buffer.flush();    }    	non-compiled	[CE]  <identifier>  expected	73	None	replace
252	[BUG]  [BUGGY]  because(out!=  null)  {  out.flush();  }  else  {  buffer.flush();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  because(out!=  null)  {  out.flush();  }  else  {  buffer.flush();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	because(out!=  null)  {  out.flush();  }  else  {  buffer.flush();  }	  because(out!=    null)    {    out.close();    }    else    {    buffer.flush();    }    	non-compiled	[CE]  <identifier>  expected	73	None	replace
253	[BUG]  [BUGGY]  because(closed)  {  out.close();  }  else  {  buffer.flush();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  because(closed)  {  out.close();  }  else  {  buffer.flush();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	because(closed)  {  out.close();  }  else  {  buffer.flush();  }	  because(out!=    null)    {    out.close();    }    else    {    buffer.flush();    }    	non-compiled	[CE]  <identifier>  expected	73	None	replace
254	[BUG]  [BUGGY]  Because(out!=  null)  {  out.close();  }  else  {  buffer.flush();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  Because(out!=  null)  {  out.close();  }  else  {  buffer.flush();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	Because(out!=  null)  {  out.close();  }  else  {  buffer.flush();  }	  because(out!=    null)    {    out.close();    }    else    {    buffer.flush();    }    	non-compiled	[CE]  <identifier>  expected	73	None	replace
255	[BUG]  [BUGGY]  OutputStream  os  =  this.recordBuf.getOutputStream();  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  OutputStream  os  =  this.recordBuf.getOutputStream();  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	OutputStream  os  =  this.recordBuf.getOutputStream();	  OutputStream    os    =    getOutputStream();    	non-compiled	[CE]  <identifier>  expected	55	None	replace
256	[BUG]  [BUGGY]  OutputStream  os  =  this.getOutputStream();  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  OutputStream  os  =  this.getOutputStream();  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	OutputStream  os  =  this.getOutputStream();	  OutputStream    os    =    getOutputStream();    	non-compiled	[CE]  <identifier>  expected	55	None	replace
257	[BUG]  [BUGGY]  OutputStream  os  =  getOutputStream(buffer);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  OutputStream  os  =  getOutputStream(buffer);  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	OutputStream  os  =  getOutputStream(buffer);	  OutputStream    os    =    getOutputStream();    	non-compiled	[CE]  <identifier>  expected	55	None	replace
258	[BUG]  [BUGGY]  OutputStream  os  =  getOutputStream(true);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  OutputStream  os  =  getOutputStream(true);  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	OutputStream  os  =  getOutputStream(true);	  OutputStream    os    =    getOutputStream();    	non-compiled	[CE]  <identifier>  expected	55	None	replace
259	[BUG]  [BUGGY]  OutputStream  os  =  getInputStream();  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  OutputStream  os  =  getInputStream();  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	OutputStream  os  =  getInputStream();	  OutputStream    os    =    getOutputStream();    	non-compiled	[CE]  <identifier>  expected	55	None	replace
260	[BUG]  [BUGGY]  OutputStream  os  =  getOutputStream(buffer.length);  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  OutputStream  os  =  getOutputStream(buffer.length);  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	OutputStream  os  =  getOutputStream(buffer.length);	  OutputStream    os    =    getOutputStream();    	non-compiled	[CE]  <identifier>  expected	55	None	replace
261	[BUG]  [BUGGY]  out.write(assemBuf,  0,  assemSize  -  1);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  out.write(assemBuf,  0,  assemSize  -  1);  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	out.write(assemBuf,  0,  assemSize  -  1);	  out.write(assemBuf,    0,    assemLen    -    1);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
262	[BUG]  [BUGGY]  if(closed)  {  if(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.length;  i++)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(closed)  {  if(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.length;  i++)  {  buffer.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(closed)  {  if(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.length;  i++)  {  buffer.close();  }	  if(buffer!=    null)    {    for(int    i    =    0;    i    <    buffer.length;    i++)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	27	None	replace
263	[BUG]  [BUGGY]  while(buffer!=  null  &&  buffer.length  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  i++)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  while(buffer!=  null  &&  buffer.length  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  i++)  {  buffer.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	while(buffer!=  null  &&  buffer.length  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  i++)  {  buffer.close();  }	  if(buffer!=    null)    {    for(int    i    =    0;    i    <    buffer.length;    i++)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	27	None	replace
264	[BUG]  [BUGGY]  if(!closed)  {  if(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.length;  i++)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(!closed)  {  if(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.length;  i++)  {  buffer.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(!closed)  {  if(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.length;  i++)  {  buffer.close();  }	  if(buffer!=    null)    {    for(int    i    =    0;    i    <    buffer.length;    i++)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	27	None	replace
265	[BUG]  [BUGGY]  while(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.length;  i++)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  while(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.length;  i++)  {  buffer.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	while(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.length;  i++)  {  buffer.close();  }	  if(buffer!=    null)    {    for(int    i    =    0;    i    <    buffer.length;    i++)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	27	None	replace
266	[BUG]  [BUGGY]  if(closed)  {  if(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.length;  i++)  {  buffer.close();  }  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(closed)  {  if(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.length;  i++)  {  buffer.close();  }  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(closed)  {  if(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.length;  i++)  {  buffer.close();  }  }	  if(buffer!=    null)    {    for(int    i    =    0;    i    <    buffer.length;    i++)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	27	None	replace
267	[BUG]  [BUGGY]  if(!closed)  {  if(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.length;  i++)  {  buffer.close();  }  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(!closed)  {  if(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.length;  i++)  {  buffer.close();  }  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(!closed)  {  if(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.length;  i++)  {  buffer.close();  }  }	  if(buffer!=    null)    {    for(int    i    =    0;    i    <    buffer.length;    i++)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	27	None	replace
268	[BUG]  [BUGGY]  if(currSize!=  null)  {  for(int  i  =  0;  i  <  currSize;  ++i)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(currSize!=  null)  {  for(int  i  =  0;  i  <  currSize;  ++i)  {  buffer.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(currSize!=  null)  {  for(int  i  =  0;  i  <  currSize;  ++i)  {  buffer.close();  }	  if(buffer!=    null)    {    for(int    i    =    0;    i    <    currSize;    ++i)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	88	None	replace
269	[BUG]  [BUGGY]  if(currSize  ==  null)  {  for(int  i  =  0;  i  <  currSize;  ++i)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(currSize  ==  null)  {  for(int  i  =  0;  i  <  currSize;  ++i)  {  buffer.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(currSize  ==  null)  {  for(int  i  =  0;  i  <  currSize;  ++i)  {  buffer.close();  }	  if(buffer!=    null)    {    for(int    i    =    0;    i    <    currSize;    ++i)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	88	None	replace
270	[BUG]  [BUGGY]  if(currSize  >  0)  {  if(buffer!=  null)  {  for(int  i  =  0;  i  <  currSize;  ++i)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(currSize  >  0)  {  if(buffer!=  null)  {  for(int  i  =  0;  i  <  currSize;  ++i)  {  buffer.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(currSize  >  0)  {  if(buffer!=  null)  {  for(int  i  =  0;  i  <  currSize;  ++i)  {  buffer.close();  }	  if(buffer!=    null)    {    for(int    i    =    0;    i    <    currSize;    ++i)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	88	None	replace
271	[BUG]  [BUGGY]  if(closed)  {  if(buffer!=  null)  {  for(int  i  =  0;  i  <  currSize;  ++i)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(closed)  {  if(buffer!=  null)  {  for(int  i  =  0;  i  <  currSize;  ++i)  {  buffer.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(closed)  {  if(buffer!=  null)  {  for(int  i  =  0;  i  <  currSize;  ++i)  {  buffer.close();  }	  if(buffer!=    null)    {    for(int    i    =    0;    i    <    currSize;    ++i)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	88	None	replace
272	[BUG]  [BUGGY]  if(currSize  >=  null)  {  for(int  i  =  0;  i  <  currSize;  ++i)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(currSize  >=  null)  {  for(int  i  =  0;  i  <  currSize;  ++i)  {  buffer.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(currSize  >=  null)  {  for(int  i  =  0;  i  <  currSize;  ++i)  {  buffer.close();  }	  if(buffer!=    null)    {    for(int    i    =    0;    i    <    currSize;    ++i)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	88	None	replace
273	[BUG]  [BUGGY]  if(currSize  >  0)  {  if(buffer!=  null)  {  for(int  i  =  0;  i  <  currSize;  ++i)  {  buffer.close();  }  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(currSize  >  0)  {  if(buffer!=  null)  {  for(int  i  =  0;  i  <  currSize;  ++i)  {  buffer.close();  }  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(currSize  >  0)  {  if(buffer!=  null)  {  for(int  i  =  0;  i  <  currSize;  ++i)  {  buffer.close();  }  }	  if(buffer!=    null)    {    for(int    i    =    0;    i    <    currSize;    ++i)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	88	None	replace
274	[BUG]  [BUGGY]  if(currSize!=  currSize)  {  for(int  i  =  0;  i  <  currSize;  ++i)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(currSize!=  currSize)  {  for(int  i  =  0;  i  <  currSize;  ++i)  {  buffer.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(currSize!=  currSize)  {  for(int  i  =  0;  i  <  currSize;  ++i)  {  buffer.close();  }	  if(buffer!=    null)    {    for(int    i    =    0;    i    <    currSize;    ++i)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	88	None	replace
275	[BUG]  [BUGGY]  out.write(buffer,  0,  buffer.length  -  1);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  out.write(buffer,  0,  buffer.length  -  1);  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	out.write(buffer,  0,  buffer.length  -  1);	  out.write(buffer,    0,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	37	None	replace
276	[BUG]  [BUGGY]  out.write(buffer,  0,  buffer.length  +  1);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  out.write(buffer,  0,  buffer.length  +  1);  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	out.write(buffer,  0,  buffer.length  +  1);	  out.write(buffer,    0,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	37	None	replace
277	[BUG]  [BUGGY]  out.write(assemBuffer,  0,  buffer.length);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  out.write(assemBuffer,  0,  buffer.length);  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	out.write(assemBuffer,  0,  buffer.length);	  out.write(buffer,    0,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	37	None	replace
278	[BUG]  [BUGGY]  if(buffer!=  null)  {  out.write(buffer,  0,  buffer.length);  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(buffer!=  null)  {  out.write(buffer,  0,  buffer.length);  }  else  {  buffer.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(buffer!=  null)  {  out.write(buffer,  0,  buffer.length);  }  else  {  buffer.close();  }	  out.write(buffer,    0,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	37	None	replace
279	[BUG]  [BUGGY]  if(buffer!=  null)  {  out.write(buffer,  0,  buffer.length);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(buffer!=  null)  {  out.write(buffer,  0,  buffer.length);  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(buffer!=  null)  {  out.write(buffer,  0,  buffer.length);  }	  out.write(buffer,    0,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	37	None	replace
280	[BUG]  [BUGGY]  if(!closed)  {  if(out!=  null)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(!closed)  {  if(out!=  null)  {  buffer.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(!closed)  {  if(out!=  null)  {  buffer.close();  }	  if(out!=    null)    {    buffer.close();    }    else    {    buffer.flush();    }    	non-compiled	[CE]  <identifier>  expected	74	None	replace
281	[BUG]  [BUGGY]  if(!finished)  {  if(out!=  null)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(!finished)  {  if(out!=  null)  {  buffer.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(!finished)  {  if(out!=  null)  {  buffer.close();  }	  if(out!=    null)    {    buffer.close();    }    else    {    buffer.flush();    }    	non-compiled	[CE]  <identifier>  expected	74	None	replace
282	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  if(out!=  null)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(recordBuf!=  null)  {  if(out!=  null)  {  buffer.close();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(recordBuf!=  null)  {  if(out!=  null)  {  buffer.close();  }	  if(out!=    null)    {    buffer.close();    }    else    {    buffer.flush();    }    	non-compiled	[CE]  <identifier>  expected	74	None	replace
283	[BUG]  [BUGGY]  if(!closed)  {  if(out!=  null)  {  buffer.close();  }  else  {  buffer.flush();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(!closed)  {  if(out!=  null)  {  buffer.close();  }  else  {  buffer.flush();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(!closed)  {  if(out!=  null)  {  buffer.close();  }  else  {  buffer.flush();  }	  if(out!=    null)    {    buffer.close();    }    else    {    buffer.flush();    }    	non-compiled	[CE]  <identifier>  expected	74	None	replace
284	[BUG]  [BUGGY]  if(closed)  {  if(out!=  null)  {  buffer.close();  }  else  {  buffer.flush();  }  [timeout]  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();      [BUGGY]  if(closed)  {  if(out!=  null)  {  buffer.close();  }  else  {  buffer.flush();  }  [BUGGY]      closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(closed)  {  if(out!=  null)  {  buffer.close();  }  else  {  buffer.flush();  }	  if(out!=    null)    {    buffer.close();    }    else    {    buffer.flush();    }    	non-compiled	[timeout]	74	None	replace
