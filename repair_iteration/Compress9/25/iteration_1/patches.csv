bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  because(out!=  null)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemSize);  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();    [BUGGY]  because(out!=  null)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemSize);  }  [BUGGY]    closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	because(out!=  null)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemSize);  }	  if(out!=    null)    {    out.close();    }    else    {    buffer.write(assemBuf,    0,    assemSize);    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
2	[BUG]  [BUGGY]  if(assemLen  >  0)  {  if(out!=  null)  {  out.close();  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();    [BUGGY]  if(assemLen  >  0)  {  if(out!=  null)  {  out.close();  }  [BUGGY]    closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(assemLen  >  0)  {  if(out!=  null)  {  out.close();  }	  if(out!=    null)    {    out.close();    }    else    {    buffer.write(assemBuf,    0,    assemSize);    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
3	[BUG]  [BUGGY]  if(assemSize!=  0)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemSize);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();    [BUGGY]  if(assemSize!=  0)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemSize);  }  [BUGGY]    closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(assemSize!=  0)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemSize);  }	  if(out!=    null)    {    out.close();    }    else    {    buffer.write(assemBuf,    0,    assemSize);    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
4	[BUG]  [BUGGY]  if(assemSize!=  null)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemSize);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();    [BUGGY]  if(assemSize!=  null)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemSize);  }  [BUGGY]    closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(assemSize!=  null)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemSize);  }	  if(out!=    null)    {    out.close();    }    else    {    buffer.write(assemBuf,    0,    assemSize);    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
5	[BUG]  [BUGGY]  if(!closed)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemSize);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();    [BUGGY]  if(!closed)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemSize);  }  [BUGGY]    closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(!closed)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemSize);  }	  if(out!=    null)    {    out.close();    }    else    {    buffer.write(assemBuf,    0,    assemSize);    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
6	[BUG]  [BUGGY]  if(assemLen  >=  0)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemSize);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();    [BUGGY]  if(assemLen  >=  0)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemSize);  }  [BUGGY]    closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(assemLen  >=  0)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemSize);  }	  if(out!=    null)    {    out.close();    }    else    {    buffer.write(assemBuf,    0,    assemSize);    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
7	[BUG]  [BUGGY]  if(closed)  {  out.close();  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();    [BUGGY]  if(closed)  {  out.close();  }  [BUGGY]    closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(closed)  {  out.close();  }	  if(out!=    null)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
8	[BUG]  [BUGGY]  OutputStream  out  =  os.getOutputStream();  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();    [BUGGY]  OutputStream  out  =  os.getOutputStream();  [BUGGY]    closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	OutputStream  out  =  os.getOutputStream();	  if(out!=    null)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
9	[BUG]  [BUGGY]  if(out!=  null)  {  out.flush();  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();    [BUGGY]  if(out!=  null)  {  out.flush();  }  [BUGGY]    closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(out!=  null)  {  out.flush();  }	  if(out!=    null)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
10	[BUG]  [BUGGY]  OutputStream  out  =  getOutputStream();  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();    [BUGGY]  OutputStream  out  =  getOutputStream();  [BUGGY]    closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	OutputStream  out  =  getOutputStream();	  if(out!=    null)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
11	[BUG]  [BUGGY]  while(out!=  null)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();    [BUGGY]  while(out!=  null)  {  out.close();  }  [BUGGY]    closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	while(out!=  null)  {  out.close();  }	  if(out!=    null)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
12	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  if(!closed)  {  out.close();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();    [BUGGY]  if(hasUnclosedEntry)  {  if(!closed)  {  out.close();  }  else  {  buffer.close();  }  [BUGGY]    closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(hasUnclosedEntry)  {  if(!closed)  {  out.close();  }  else  {  buffer.close();  }	  if(!closed)    {    out.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
13	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  if(!closed)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();    [BUGGY]  if(hasUnclosedEntry)  {  if(!closed)  {  out.close();  }  [BUGGY]    closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(hasUnclosedEntry)  {  if(!closed)  {  out.close();  }	  if(!closed)    {    out.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
14	[BUG]  [BUGGY]  if(!hasUnclosedEntry)  {  out.close();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();    [BUGGY]  if(!hasUnclosedEntry)  {  out.close();  }  else  {  buffer.close();  }  [BUGGY]    closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(!hasUnclosedEntry)  {  out.close();  }  else  {  buffer.close();  }	  if(!closed)    {    out.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
15	[BUG]  [BUGGY]  if(!hasUnclosed)  {  out.close();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();    [BUGGY]  if(!hasUnclosed)  {  out.close();  }  else  {  buffer.close();  }  [BUGGY]    closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(!hasUnclosed)  {  out.close();  }  else  {  buffer.close();  }	  if(!closed)    {    out.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
16	[BUG]  [BUGGY]  if(!hasUnclosedEntry)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();    [BUGGY]  if(!hasUnclosedEntry)  {  out.close();  }  [BUGGY]    closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(!hasUnclosedEntry)  {  out.close();  }	  if(!closed)    {    out.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
17	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  if(!finished)  {  out.close();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();    [BUGGY]  if(hasUnclosedEntry)  {  if(!finished)  {  out.close();  }  else  {  buffer.close();  }  [BUGGY]    closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(hasUnclosedEntry)  {  if(!finished)  {  out.close();  }  else  {  buffer.close();  }	  if(!finished)    {    out.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
18	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  if(!finished)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();    [BUGGY]  if(hasUnclosedEntry)  {  if(!finished)  {  out.close();  }  [BUGGY]    closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(hasUnclosedEntry)  {  if(!finished)  {  out.close();  }	  if(!finished)    {    out.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
19	[BUG]  [BUGGY]  if(closed)  {  if(!finished)  {  out.close();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();    [BUGGY]  if(closed)  {  if(!finished)  {  out.close();  }  else  {  buffer.close();  }  [BUGGY]    closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(closed)  {  if(!finished)  {  out.close();  }  else  {  buffer.close();  }	  if(!finished)    {    out.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
20	[BUG]  [BUGGY]  if(!closed)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();    [BUGGY]  if(!closed)  {  out.close();  }  [BUGGY]    closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(!closed)  {  out.close();  }	  if(!finished)    {    out.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
21	[BUG]  [BUGGY]  out.write(assemBuf,  0,  buffer.length  -  1);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();    [BUGGY]  out.write(assemBuf,  0,  buffer.length  -  1);  [BUGGY]    closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	out.write(assemBuf,  0,  buffer.length  -  1);	  out.write(assemBuf,    0,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
22	[BUG]  [BUGGY]  out.write(assemBuf,  0,  buffer.length  +  1);  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();    [BUGGY]  out.write(assemBuf,  0,  buffer.length  +  1);  [BUGGY]    closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	out.write(assemBuf,  0,  buffer.length  +  1);	  out.write(assemBuf,    0,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
23	[BUG]  [BUGGY]  out.write(assemBuf,  0,  buffer.length  -  2);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();    [BUGGY]  out.write(assemBuf,  0,  buffer.length  -  2);  [BUGGY]    closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	out.write(assemBuf,  0,  buffer.length  -  2);	  out.write(assemBuf,    0,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
24	[BUG]  [BUGGY]  out.write(assemBuf,  0,  buffer.length  -  4);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();    [BUGGY]  out.write(assemBuf,  0,  buffer.length  -  4);  [BUGGY]    closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	out.write(assemBuf,  0,  buffer.length  -  4);	  out.write(assemBuf,    0,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
25	[BUG]  [BUGGY]  out.write(assemBuf,  0,  buffer.length  +  2);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();    [BUGGY]  out.write(assemBuf,  0,  buffer.length  +  2);  [BUGGY]    closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	out.write(assemBuf,  0,  buffer.length  +  2);	  out.write(assemBuf,    0,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
26	[BUG]  [BUGGY]  out.write(assemBuf,  0,  buffer.length  -  6);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();    [BUGGY]  out.write(assemBuf,  0,  buffer.length  -  6);  [BUGGY]    closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	out.write(assemBuf,  0,  buffer.length  -  6);	  out.write(assemBuf,    0,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
27	[BUG]  [BUGGY]  if(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.length;  i++)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();    [BUGGY]  if(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.length;  i++)  {  buffer.close();  }  [BUGGY]    closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.length;  i++)  {  buffer.close();  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
28	[BUG]  [BUGGY]  if(buffer!=  null)  {  for(int  i  =  0;  i  <  currSize;  i++)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();    [BUGGY]  if(buffer!=  null)  {  for(int  i  =  0;  i  <  currSize;  i++)  {  buffer.close();  }  [BUGGY]    closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(buffer!=  null)  {  for(int  i  =  0;  i  <  currSize;  i++)  {  buffer.close();  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
29	[BUG]  [BUGGY]  if(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.length();  i++)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();    [BUGGY]  if(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.length();  i++)  {  buffer.close();  }  [BUGGY]    closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.length();  i++)  {  buffer.close();  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
30	[BUG]  [BUGGY]  if(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.length;  i++)  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();    [BUGGY]  if(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.length;  i++)  {  buffer.append('n');  }  [BUGGY]    closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.length;  i++)  {  buffer.append('n');  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
31	[BUG]  [BUGGY]  if(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.size();  i++)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();    [BUGGY]  if(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.size();  i++)  {  buffer.close();  }  [BUGGY]    closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.size();  i++)  {  buffer.close();  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
32	[BUG]  [BUGGY]  if(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.length;  i++)  {  buffer.append('/');  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();    [BUGGY]  if(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.length;  i++)  {  buffer.append('/');  }  [BUGGY]    closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.length;  i++)  {  buffer.append('/');  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
33	[BUG]  [BUGGY]  if(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();    [BUGGY]  if(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  buffer.close();  }  [BUGGY]    closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  buffer.close();  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
34	[BUG]  [BUGGY]  if(closed)  {  out.close();  }  else  {  buffer.flush();  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();    [BUGGY]  if(closed)  {  out.close();  }  else  {  buffer.flush();  }  [BUGGY]    closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(closed)  {  out.close();  }  else  {  buffer.flush();  }	  if(out!=    null)    {    out.close();    }    else    {    buffer.flush();    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
35	[BUG]  [BUGGY]  if(out!=  null)  {  out.flush();  }  else  {  buffer.flush();  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();    [BUGGY]  if(out!=  null)  {  out.flush();  }  else  {  buffer.flush();  }  [BUGGY]    closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(out!=  null)  {  out.flush();  }  else  {  buffer.flush();  }	  if(out!=    null)    {    out.close();    }    else    {    buffer.flush();    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
36	[BUG]  [BUGGY]  if(closed)  {  out.close();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();    [BUGGY]  if(closed)  {  out.close();  }  else  {  buffer.close();  }  [BUGGY]    closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(closed)  {  out.close();  }  else  {  buffer.close();  }	  if(out!=    null)    {    out.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
37	[BUG]  [BUGGY]  out.write(buffer,  0,  buffer.length);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();    [BUGGY]  out.write(buffer,  0,  buffer.length);  [BUGGY]    closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	out.write(buffer,  0,  buffer.length);	  out.flush();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
38	[BUG]  [BUGGY]  os.flush();  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();    [BUGGY]  os.flush();  [BUGGY]    closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	os.flush();	  out.flush();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
39	[BUG]  [BUGGY]  out.defaultReader().flush();  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();    [BUGGY]  out.defaultReader().flush();  [BUGGY]    closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	out.defaultReader().flush();	  out.flush();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
40	[BUG]  [BUGGY]  out.write(assemBuf,  0,  assemLen  +  1);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();    [BUGGY]  out.write(assemBuf,  0,  assemLen  +  1);  [BUGGY]    closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	out.write(assemBuf,  0,  assemLen  +  1);	  out.write(assemBuf,    0,    assemLen);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
41	[BUG]  [BUGGY]  out.write(assemBuf,  0,  blockSize);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();    [BUGGY]  out.write(assemBuf,  0,  blockSize);  [BUGGY]    closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	out.write(assemBuf,  0,  blockSize);	  out.write(assemBuf,    0,    assemLen);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
42	[BUG]  [BUGGY]  out.write(assemBuf,  0,  currName.length);  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();    [BUGGY]  out.write(assemBuf,  0,  currName.length);  [BUGGY]    closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	out.write(assemBuf,  0,  currName.length);	  out.write(assemBuf,    0,    assemLen);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
43	[BUG]  [BUGGY]  out.write(assemBuf,  0,  assemSize);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();    [BUGGY]  out.write(assemBuf,  0,  assemSize);  [BUGGY]    closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	out.write(assemBuf,  0,  assemSize);	  out.write(assemBuf,    0,    assemLen);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
44	[BUG]  [BUGGY]  out.write(assemBuf,  0,  assemLen  +  2);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();    [BUGGY]  out.write(assemBuf,  0,  assemLen  +  2);  [BUGGY]    closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	out.write(assemBuf,  0,  assemLen  +  2);	  out.write(assemBuf,    0,    assemLen);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
45	[BUG]  [BUGGY]  because(out!=  null)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemLen);  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();    [BUGGY]  because(out!=  null)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemLen);  }  [BUGGY]    closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	because(out!=  null)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemLen);  }	  if(out!=    null)    {    out.close();    }    else    {    buffer.write(assemBuf,    0,    assemLen);    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
46	[BUG]  [BUGGY]  if(assemLen!=  0)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemLen);  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();    [BUGGY]  if(assemLen!=  0)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemLen);  }  [BUGGY]    closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(assemLen!=  0)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemLen);  }	  if(out!=    null)    {    out.close();    }    else    {    buffer.write(assemBuf,    0,    assemLen);    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
47	[BUG]  [BUGGY]  if(assemLen!=  0)  {  if(out!=  null)  {  out.close();  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();    [BUGGY]  if(assemLen!=  0)  {  if(out!=  null)  {  out.close();  }  [BUGGY]    closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(assemLen!=  0)  {  if(out!=  null)  {  out.close();  }	  if(out!=    null)    {    out.close();    }    else    {    buffer.write(assemBuf,    0,    assemLen);    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
48	[BUG]  [BUGGY]  if(assemLen  >=  0)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemLen);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();    [BUGGY]  if(assemLen  >=  0)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemLen);  }  [BUGGY]    closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(assemLen  >=  0)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemLen);  }	  if(out!=    null)    {    out.close();    }    else    {    buffer.write(assemBuf,    0,    assemLen);    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
49	[BUG]  [BUGGY]  if(assemLen  >  0)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemLen);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();    [BUGGY]  if(assemLen  >  0)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemLen);  }  [BUGGY]    closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(assemLen  >  0)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemLen);  }	  if(out!=    null)    {    out.close();    }    else    {    buffer.write(assemBuf,    0,    assemLen);    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
50	[BUG]  [BUGGY]  if(assemLen  >  0)  {  if(out!=  null)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemLen);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();    [BUGGY]  if(assemLen  >  0)  {  if(out!=  null)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemLen);  }  [BUGGY]    closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(assemLen  >  0)  {  if(out!=  null)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemLen);  }	  if(out!=    null)    {    out.close();    }    else    {    buffer.write(assemBuf,    0,    assemLen);    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
51	[BUG]  [BUGGY]  OutputStream  out  =(TarBuffer)this.recordBuf.clone();  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();    [BUGGY]  OutputStream  out  =(TarBuffer)this.recordBuf.clone();  [BUGGY]    closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	OutputStream  out  =(TarBuffer)this.recordBuf.clone();	  if(out!=    null)    {    out.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
52	[BUG]  [BUGGY]  OutputStream  out  =  this.recordBuf.getOutputStream();  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();    [BUGGY]  OutputStream  out  =  this.recordBuf.getOutputStream();  [BUGGY]    closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	OutputStream  out  =  this.recordBuf.getOutputStream();	  if(out!=    null)    {    out.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
53	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  out.close();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();    [BUGGY]  if(hasUnclosedEntry)  {  out.close();  }  else  {  buffer.close();  }  [BUGGY]    closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(hasUnclosedEntry)  {  out.close();  }  else  {  buffer.close();  }	  if(!finished)    {    out.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
54	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();    [BUGGY]  if(hasUnclosedEntry)  {  out.close();  }  [BUGGY]    closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(hasUnclosedEntry)  {  out.close();  }	  if(!finished)    {    out.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
55	[BUG]  [BUGGY]  OutputStream  os  =  getOutputStream();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();    [BUGGY]  OutputStream  os  =  getOutputStream();  [BUGGY]    closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	OutputStream  os  =  getOutputStream();	  if(!finished)    {    out.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
56	[BUG]  [BUGGY]  out.write(assemBuf,  0,  currSize);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();    [BUGGY]  out.write(assemBuf,  0,  currSize);  [BUGGY]    closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	out.write(assemBuf,  0,  currSize);	  out.write(assemBuf,    0,    assemLen);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
57	[BUG]  [BUGGY]  out.write(assemBuf,  0,  assemLen  -  1);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();    [BUGGY]  out.write(assemBuf,  0,  assemLen  -  1);  [BUGGY]    closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	out.write(assemBuf,  0,  assemLen  -  1);	  out.write(assemBuf,    0,    assemLen);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
58	[BUG]  [BUGGY]  out.write(assemBuf,  0,  recordBuf.length);  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();    [BUGGY]  out.write(assemBuf,  0,  recordBuf.length);  [BUGGY]    closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	out.write(assemBuf,  0,  recordBuf.length);	  out.write(assemBuf,    0,    assemLen);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
59	[BUG]  [BUGGY]  if(!hasUnclosedEntry)  {  if(out!=  null)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemLen);  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();    [BUGGY]  if(!hasUnclosedEntry)  {  if(out!=  null)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemLen);  }  [BUGGY]    closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(!hasUnclosedEntry)  {  if(out!=  null)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemLen);  }	  if(out!=    null)    {    out.close();    }    else    {    buffer.write(assemBuf,    0,    assemLen);    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
60	[BUG]  [BUGGY]  if(!hasUnclosedEntry)  {  if(out!=  null)  {  out.close();  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();    [BUGGY]  if(!hasUnclosedEntry)  {  if(out!=  null)  {  out.close();  }  [BUGGY]    closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(!hasUnclosedEntry)  {  if(out!=  null)  {  out.close();  }	  if(out!=    null)    {    out.close();    }    else    {    buffer.write(assemBuf,    0,    assemLen);    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
61	[BUG]  [BUGGY]  if(!hasUnclosedEntry)  {  if(out!=  null)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemSize);  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();    [BUGGY]  if(!hasUnclosedEntry)  {  if(out!=  null)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemSize);  }  [BUGGY]    closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(!hasUnclosedEntry)  {  if(out!=  null)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemSize);  }	  if(out!=    null)    {    out.close();    }    else    {    buffer.write(assemBuf,    0,    assemSize);    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
62	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  if(out!=  null)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemSize);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();    [BUGGY]  if(hasUnclosedEntry)  {  if(out!=  null)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemSize);  }  [BUGGY]    closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(hasUnclosedEntry)  {  if(out!=  null)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemSize);  }	  if(out!=    null)    {    out.close();    }    else    {    buffer.write(assemBuf,    0,    assemSize);    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
63	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemSize);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();    [BUGGY]  if(hasUnclosedEntry)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemSize);  }  [BUGGY]    closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(hasUnclosedEntry)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemSize);  }	  if(out!=    null)    {    out.close();    }    else    {    buffer.write(assemBuf,    0,    assemSize);    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
64	[BUG]  [BUGGY]  if(!closed)  {  buffer.close();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();    [BUGGY]  if(!closed)  {  buffer.close();  }  else  {  buffer.close();  }  [BUGGY]    closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(!closed)  {  buffer.close();  }  else  {  buffer.close();  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
65	[BUG]  [BUGGY]  if(buffer!=  null)  {  buffer.close();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();    [BUGGY]  if(buffer!=  null)  {  buffer.close();  }  else  {  buffer.close();  }  [BUGGY]    closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(buffer!=  null)  {  buffer.close();  }  else  {  buffer.close();  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
66	[BUG]  [BUGGY]  if(!closed)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();    [BUGGY]  if(!closed)  {  buffer.close();  }  [BUGGY]    closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(!closed)  {  buffer.close();  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
67	[BUG]  [BUGGY]  if(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.length;  i++)  {  buffer[i]  =  null;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();    [BUGGY]  if(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.length;  i++)  {  buffer[i]  =  null;  }  [BUGGY]    closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.length;  i++)  {  buffer[i]  =  null;  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
68	[BUG]  [BUGGY]  out.write(buffer,  0,  0);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();    [BUGGY]  out.write(buffer,  0,  0);  [BUGGY]    closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	out.write(buffer,  0,  0);	  out.flush();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
69	[BUG]  [BUGGY]  out.write(buffer,  0,  currSize);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();    [BUGGY]  out.write(buffer,  0,  currSize);  [BUGGY]    closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	out.write(buffer,  0,  currSize);	  out.flush();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
70	[BUG]  [BUGGY]  OutputStream  out  =  new  OutputStream(buffer,  0,  buffer.length);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();    [BUGGY]  OutputStream  out  =  new  OutputStream(buffer,  0,  buffer.length);  [BUGGY]    closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	OutputStream  out  =  new  OutputStream(buffer,  0,  buffer.length);	  if(out!=    null)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
71	[BUG]  [BUGGY]  out.write(assemBuf,  0,  assemBuf.length);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();    [BUGGY]  out.write(assemBuf,  0,  assemBuf.length);  [BUGGY]    closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	out.write(assemBuf,  0,  assemBuf.length);	  out.write(assemBuf,    0,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
72	[BUG]  [BUGGY]  if(out!=  null)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();    [BUGGY]  if(out!=  null)  {  buffer.close();  }  [BUGGY]    closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(out!=  null)  {  buffer.close();  }	  if(out!=    null)    {    out.close();    }    else    {    buffer.flush();    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
73	[BUG]  [BUGGY]  because(out!=  null)  {  out.close();  }  else  {  buffer.flush();  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();    [BUGGY]  because(out!=  null)  {  out.close();  }  else  {  buffer.flush();  }  [BUGGY]    closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	because(out!=  null)  {  out.close();  }  else  {  buffer.flush();  }	  if(out!=    null)    {    out.close();    }    else    {    buffer.flush();    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
74	[BUG]  [BUGGY]  if(out!=  null)  {  buffer.close();  }  else  {  buffer.flush();  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();    [BUGGY]  if(out!=  null)  {  buffer.close();  }  else  {  buffer.flush();  }  [BUGGY]    closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(out!=  null)  {  buffer.close();  }  else  {  buffer.flush();  }	  if(out!=    null)    {    out.close();    }    else    {    buffer.flush();    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
75	[BUG]  [BUGGY]  if(assemSize!=  null)  {  out.close();  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();    [BUGGY]  if(assemSize!=  null)  {  out.close();  }  [BUGGY]    closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(assemSize!=  null)  {  out.close();  }	  if(out!=    null)    {    out.close();    }    else    {    buffer.write(assemBuf,    0,    assemSize);    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
76	[BUG]  [BUGGY]  if(assemLen  >  0)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemSize);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();    [BUGGY]  if(assemLen  >  0)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemSize);  }  [BUGGY]    closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(assemLen  >  0)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemSize);  }	  if(out!=    null)    {    out.close();    }    else    {    buffer.write(assemBuf,    0,    assemSize);    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
77	[BUG]  [BUGGY]  if(assemSize  >  0)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemSize);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();    [BUGGY]  if(assemSize  >  0)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemSize);  }  [BUGGY]    closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(assemSize  >  0)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemSize);  }	  if(out!=    null)    {    out.close();    }    else    {    buffer.write(assemBuf,    0,    assemSize);    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
78	[BUG]  [BUGGY]  os.close();  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();    [BUGGY]  os.close();  [BUGGY]    closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	os.close();	  out.flush();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
79	[BUG]  [BUGGY]  if(out!=  null  &&  out.length  >  0)  {  out.close();  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();    [BUGGY]  if(out!=  null  &&  out.length  >  0)  {  out.close();  }  [BUGGY]    closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(out!=  null  &&  out.length  >  0)  {  out.close();  }	  if(out!=    null)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
80	[BUG]  [BUGGY]  if(out!=  null  &&  out.size()  >  0)  {  out.close();  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();    [BUGGY]  if(out!=  null  &&  out.size()  >  0)  {  out.close();  }  [BUGGY]    closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(out!=  null  &&  out.size()  >  0)  {  out.close();  }	  if(out!=    null)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
81	[BUG]  [BUGGY]  out.write(assemBuf,  0,  assemLen  +  4);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();    [BUGGY]  out.write(assemBuf,  0,  assemLen  +  4);  [BUGGY]    closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	out.write(assemBuf,  0,  assemLen  +  4);	  out.write(assemBuf,    0,    assemLen);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
82	[BUG]  [BUGGY]  out.write(assemBuf,  0,  assemLen  +  3);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();    [BUGGY]  out.write(assemBuf,  0,  assemLen  +  3);  [BUGGY]    closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	out.write(assemBuf,  0,  assemLen  +  3);	  out.write(assemBuf,    0,    assemLen);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
83	[BUG]  [BUGGY]  if(out!=  null)  {  buffer.close();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();    [BUGGY]  if(out!=  null)  {  buffer.close();  }  else  {  buffer.close();  }  [BUGGY]    closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(out!=  null)  {  buffer.close();  }  else  {  buffer.close();  }	  if(out!=    null)    {    out.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
84	[BUG]  [BUGGY]  because(out!=  null)  {  out.close();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();    [BUGGY]  because(out!=  null)  {  out.close();  }  else  {  buffer.close();  }  [BUGGY]    closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	because(out!=  null)  {  out.close();  }  else  {  buffer.close();  }	  if(out!=    null)    {    out.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
85	[BUG]  [BUGGY]  if(assemLen  >  0)  {  out.close();  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();    [BUGGY]  if(assemLen  >  0)  {  out.close();  }  [BUGGY]    closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(assemLen  >  0)  {  out.close();  }	  if(out!=    null)    {    out.close();    }    else    {    buffer.write(assemBuf,    0,    assemLen);    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
86	[BUG]  [BUGGY]  if(assemLen  ==  0)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemLen);  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();    [BUGGY]  if(assemLen  ==  0)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemLen);  }  [BUGGY]    closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(assemLen  ==  0)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  assemLen);  }	  if(out!=    null)    {    out.close();    }    else    {    buffer.write(assemBuf,    0,    assemLen);    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
87	[BUG]  [BUGGY]  if(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.size();  ++i)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();    [BUGGY]  if(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.size();  ++i)  {  buffer.close();  }  [BUGGY]    closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(buffer!=  null)  {  for(int  i  =  0;  i  <  buffer.size();  ++i)  {  buffer.close();  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
88	[BUG]  [BUGGY]  if(buffer!=  null)  {  for(int  i  =  0;  i  <  currSize;  ++i)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {  buffer.close();    [BUGGY]  if(buffer!=  null)  {  for(int  i  =  0;  i  <  currSize;  ++i)  {  buffer.close();  }  [BUGGY]    closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	146	146	1	replace	if(buffer!=  null)  {  for(int  i  =  0;  i  <  currSize;  ++i)  {  buffer.close();  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
