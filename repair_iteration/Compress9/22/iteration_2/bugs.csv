bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Thread.currentThread().interrupt();  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  Thread.currentThread().interrupt();  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	Thread.currentThread().interrupt();	  if(hasUnclosed)    {    finish();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
2	[BUG]  [BUGGY]  castError( "TarArchiveOutputStream  closed: "  +  getMessage());  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  castError( "TarArchiveOutputStream  closed: "  +  getMessage());  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	castError( "TarArchiveOutputStream  closed: "  +  getMessage());	  if(hasUnclosed)    {    finish();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
3	[BUG]  [BUGGY]  castError( "Can  not  close  the  TarBuffer. ");  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  castError( "Can  not  close  the  TarBuffer. ");  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	castError( "Can  not  close  the  TarBuffer. ");	  if(hasUnclosed)    {    finish();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
4	[BUG]  [BUGGY]  safeTarBuffer.close();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  safeTarBuffer.close();  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	safeTarBuffer.close();	  if(hasUnclosed)    {    finish();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
5	[BUG]  [BUGGY]  castError( "Current  token( "+getMessage()  + ")not  yet  closed ");  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  castError( "Current  token( "+getMessage()  + ")not  yet  closed ");  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	castError( "Current  token( "+getMessage()  + ")not  yet  closed ");	  if(hasUnclosed)    {    finish();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
6	[BUG]  [BUGGY]  if(!finished)  {  rehashTable();  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  if(!finished)  {  rehashTable();  }  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!finished)  {  rehashTable();  }	  rehashTable();    	non-compiled	[CE]  <identifier>  expected	14	None	replace
7	[BUG]  [BUGGY]  if(!finished)  {  rehashTable();  }  else  {  buffer.close();  out.close();  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  if(!finished)  {  rehashTable();  }  else  {  buffer.close();  out.close();  }  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!finished)  {  rehashTable();  }  else  {  buffer.close();  out.close();  }	  rehashTable();    	non-compiled	[CE]  <identifier>  expected	14	None	replace
8	[BUG]  [BUGGY]  if(!finished)  {  rehashTable();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  if(!finished)  {  rehashTable();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!finished)  {  rehashTable();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  rehashTable();    	non-compiled	[CE]  <identifier>  expected	14	None	replace
9	[BUG]  [BUGGY]  if(!finished)  {  rehashTable();  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  if(!finished)  {  rehashTable();  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!finished)  {  rehashTable();  }  else  {  throw  new  IllegalStateException( " ");  }	  rehashTable();    	non-compiled	[CE]  <identifier>  expected	14	None	replace
10	[BUG]  [BUGGY]  if(!finished)  {  rehashTable();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  if(!finished)  {  rehashTable();  }  else  {  buffer.close();  }  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!finished)  {  rehashTable();  }  else  {  buffer.close();  }	  rehashTable();    	non-compiled	[CE]  <identifier>  expected	14	None	replace
11	[BUG]  [BUGGY]  if(!finished)  {  rehashTable();  }  else  {  out.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  if(!finished)  {  rehashTable();  }  else  {  out.close();  }  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!finished)  {  rehashTable();  }  else  {  out.close();  }	  rehashTable();    	non-compiled	[CE]  <identifier>  expected	14	None	replace
12	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  if(!finished)  {  finish();  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  if(hasUnclosedEntry)  {  if(!finished)  {  finish();  }  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry)  {  if(!finished)  {  finish();  }	  if(!finished)    {    finish();    }    else    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
13	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  if(!finished)  {  finish();  }  else  {  buffer.close();  out  =  null;  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  if(hasUnclosedEntry)  {  if(!finished)  {  finish();  }  else  {  buffer.close();  out  =  null;  }  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry)  {  if(!finished)  {  finish();  }  else  {  buffer.close();  out  =  null;  }	  if(!finished)    {    finish();    }    else    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
14	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  if(finished)  {  finish();  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  if(hasUnclosedEntry)  {  if(finished)  {  finish();  }  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry)  {  if(finished)  {  finish();  }	  if(!finished)    {    finish();    }    else    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
15	[BUG]  [BUGGY]  if(!hasUnclosedEntry)  {  finish();  }  else  {  buffer.close();  out  =  null;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  if(!hasUnclosedEntry)  {  finish();  }  else  {  buffer.close();  out  =  null;  }  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!hasUnclosedEntry)  {  finish();  }  else  {  buffer.close();  out  =  null;  }	  if(!finished)    {    finish();    }    else    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
16	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  if(finished)  {  finish();  }  else  {  buffer.close();  out  =  null;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  if(hasUnclosedEntry)  {  if(finished)  {  finish();  }  else  {  buffer.close();  out  =  null;  }  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry)  {  if(finished)  {  finish();  }  else  {  buffer.close();  out  =  null;  }	  if(!finished)    {    finish();    }    else    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
17	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  if(!finished)  {  start();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  if(hasUnclosedEntry)  {  if(!finished)  {  start();  }  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry)  {  if(!finished)  {  start();  }	  if(!finished)    {    finish();    }    else    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
18	[BUG]  [BUGGY]  if(!hasUnclosedEntry)  {  finish();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  if(!hasUnclosedEntry)  {  finish();  }  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!hasUnclosedEntry)  {  finish();  }	  if(!finished)    {    finish();    }    else    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
19	[BUG]  [BUGGY]  castError( "Current  token( "+getMessage()  + ")not  a  valid  file  type ");  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  castError( "Current  token( "+getMessage()  + ")not  a  valid  file  type ");  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	castError( "Current  token( "+getMessage()  + ")not  a  valid  file  type ");	  if(hasUnclosedEntry)    {    finish();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
20	[BUG]  [BUGGY]  castError( "Current  token( "+getName()  + ")not  a  valid  file  type ");  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  castError( "Current  token( "+getName()  + ")not  a  valid  file  type ");  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	castError( "Current  token( "+getName()  + ")not  a  valid  file  type ");	  if(hasUnclosedEntry)    {    finish();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
21	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  finish();  }  else  {  buffer.close();  out  =  null;  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  if(hasUnclosedEntry)  {  finish();  }  else  {  buffer.close();  out  =  null;  }  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry)  {  finish();  }  else  {  buffer.close();  out  =  null;  }	  if(finished)    {    finish();    }    else    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
22	[BUG]  [BUGGY]  if(!hasUnclosedEntry)  {  if(finished)  {  finish();  }  else  {  buffer.close();  out  =  null;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  if(!hasUnclosedEntry)  {  if(finished)  {  finish();  }  else  {  buffer.close();  out  =  null;  }  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!hasUnclosedEntry)  {  if(finished)  {  finish();  }  else  {  buffer.close();  out  =  null;  }	  if(finished)    {    finish();    }    else    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
23	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(TarBuffer.class.getClassLoader());  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  Thread.currentThread().setContextClassLoader(TarBuffer.class.getClassLoader());  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	Thread.currentThread().setContextClassLoader(TarBuffer.class.getClassLoader());	  if(!finished)    {    finish();    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
24	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().reset();  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  Thread.currentThread().getContextClassLoader().reset();  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	Thread.currentThread().getContextClassLoader().reset();	  if(!finished)    {    finish();    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
25	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().close();  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  Thread.currentThread().getContextClassLoader().close();  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	Thread.currentThread().getContextClassLoader().close();	  if(!finished)    {    finish();    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
26	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(getRawClass().getClassLoader());  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  Thread.currentThread().setContextClassLoader(getRawClass().getClassLoader());  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	Thread.currentThread().setContextClassLoader(getRawClass().getClassLoader());	  if(!finished)    {    finish();    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
27	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  if(!finished)  {  finish();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  if(hasUnclosedEntry)  {  if(!finished)  {  finish();  }  else  {  buffer.close();  }  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry)  {  if(!finished)  {  finish();  }  else  {  buffer.close();  }	  if(!finished)    {    finish();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
28	[BUG]  [BUGGY]  if(!hasUnclosedEntry)  {  finish();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  if(!hasUnclosedEntry)  {  finish();  }  else  {  buffer.close();  }  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!hasUnclosedEntry)  {  finish();  }  else  {  buffer.close();  }	  if(!finished)    {    finish();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
29	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  if(!finished)  {  finish();  }  else  {  buffer.close();  out  =  true;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  if(hasUnclosedEntry)  {  if(!finished)  {  finish();  }  else  {  buffer.close();  out  =  true;  }  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry)  {  if(!finished)  {  finish();  }  else  {  buffer.close();  out  =  true;  }	  if(!finished)    {    finish();    }    else    {    buffer.close();    out    =    true;    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
30	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  if(finished)  {  finish();  }  else  {  buffer.close();  out  =  true;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  if(hasUnclosedEntry)  {  if(finished)  {  finish();  }  else  {  buffer.close();  out  =  true;  }  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry)  {  if(finished)  {  finish();  }  else  {  buffer.close();  out  =  true;  }	  if(!finished)    {    finish();    }    else    {    buffer.close();    out    =    true;    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
31	[BUG]  [BUGGY]  if(!hasUnclosedEntry)  {  finish();  }  else  {  buffer.close();  out  =  true;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  if(!hasUnclosedEntry)  {  finish();  }  else  {  buffer.close();  out  =  true;  }  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!hasUnclosedEntry)  {  finish();  }  else  {  buffer.close();  out  =  true;  }	  if(!finished)    {    finish();    }    else    {    buffer.close();    out    =    true;    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
32	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  if(!finished)  {  start();  }  else  {  buffer.close();  out  =  true;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  if(hasUnclosedEntry)  {  if(!finished)  {  start();  }  else  {  buffer.close();  out  =  true;  }  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry)  {  if(!finished)  {  start();  }  else  {  buffer.close();  out  =  true;  }	  if(!finished)    {    finish();    }    else    {    buffer.close();    out    =    true;    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
33	[BUG]  [BUGGY]  os.close();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  os.close();  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	os.close();	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
34	[BUG]  [BUGGY]  if(!finished)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  if(!finished)  {  buffer.close();  }  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!finished)  {  buffer.close();  }	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
35	[BUG]  [BUGGY]  if(!finished)  {  buffer.close();  }  else  {  out.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  if(!finished)  {  buffer.close();  }  else  {  out.close();  }  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!finished)  {  buffer.close();  }  else  {  out.close();  }	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
36	[BUG]  [BUGGY]  if(!finished)  {  buffer.close();  out.close();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  if(!finished)  {  buffer.close();  out.close();  }  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!finished)  {  buffer.close();  out.close();  }	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
37	[BUG]  [BUGGY]  this.assemBuf.close();  [CE]  <identifier>  expected  [FE]                              AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  this.assemBuf.close();  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	this.assemBuf.close();	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
38	[BUG]  [BUGGY]  if(!finished)  {  buffer.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  if(!finished)  {  buffer.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!finished)  {  buffer.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
39	[BUG]  [BUGGY]  if(!finished)  {  rehash();  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  if(!finished)  {  rehash();  }  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!finished)  {  rehash();  }	  rehash();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
40	[BUG]  [BUGGY]  rehashCode();  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  rehashCode();  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	rehashCode();	  rehash();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
41	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  rehash();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  if(recordBuf!=  null)  {  rehash();  }  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(recordBuf!=  null)  {  rehash();  }	  rehash();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
42	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  rehash();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  if(recordBuf!=  null)  {  rehash();  }  else  {  buffer.close();  }  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(recordBuf!=  null)  {  rehash();  }  else  {  buffer.close();  }	  rehash();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
43	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  rehash();  }  else  {  buffer.close();  out.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  if(recordBuf!=  null)  {  rehash();  }  else  {  buffer.close();  out.close();  }  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(recordBuf!=  null)  {  rehash();  }  else  {  buffer.close();  out.close();  }	  rehash();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
44	[BUG]  [BUGGY]  if(!finished)  {  rehash();  }  else  {  buffer.close();  out.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  if(!finished)  {  rehash();  }  else  {  buffer.close();  out.close();  }  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!finished)  {  rehash();  }  else  {  buffer.close();  out.close();  }	  rehash();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
45	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  if(!finished)  {  finish();  }  else  {  buffer.close();  out.close();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  if(hasUnclosedEntry)  {  if(!finished)  {  finish();  }  else  {  buffer.close();  out.close();  }  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry)  {  if(!finished)  {  finish();  }  else  {  buffer.close();  out.close();  }	  if(!finished)    {    finish();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
46	[BUG]  [BUGGY]  if(!hasUnclosedEntry)  {  finish();  }  else  {  buffer.close();  out.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  if(!hasUnclosedEntry)  {  finish();  }  else  {  buffer.close();  out.close();  }  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!hasUnclosedEntry)  {  finish();  }  else  {  buffer.close();  out.close();  }	  if(!finished)    {    finish();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
47	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  if(finished)  {  finish();  }  else  {  buffer.close();  out.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  if(hasUnclosedEntry)  {  if(finished)  {  finish();  }  else  {  buffer.close();  out.close();  }  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry)  {  if(finished)  {  finish();  }  else  {  buffer.close();  out.close();  }	  if(!finished)    {    finish();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
48	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(getCurrentThreadContext());  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  Thread.currentThread().setContextClassLoader(getCurrentThreadContext());  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	Thread.currentThread().setContextClassLoader(getCurrentThreadContext());	  if(hasUnclosedEntry)    {    finish();    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
49	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(TarBuffer.class);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  Thread.currentThread().setContextClassLoader(TarBuffer.class);  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	Thread.currentThread().setContextClassLoader(TarBuffer.class);	  if(hasUnclosedEntry)    {    finish();    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
50	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  if(finished)  {  start();  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  if(hasUnclosedEntry)  {  if(finished)  {  start();  }  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry)  {  if(finished)  {  start();  }	  if(finished)    {    finish();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
51	[BUG]  [BUGGY]  this.recordBuf.flush();  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  this.recordBuf.flush();  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	this.recordBuf.flush();	  this.recordBuf.close();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
52	[BUG]  [BUGGY]  this.recordBuf  =  null;  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  this.recordBuf  =  null;  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	this.recordBuf  =  null;	  this.recordBuf.close();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
53	[BUG]  [BUGGY]  this.recordBuf.closeAll();  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  this.recordBuf.closeAll();  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	this.recordBuf.closeAll();	  this.recordBuf.close();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
54	[BUG]  [BUGGY]  assemBuf.close();  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  assemBuf.close();  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	assemBuf.close();	  this.recordBuf.close();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
55	[BUG]  [BUGGY]  this.recordBuf.release();  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  this.recordBuf.release();  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	this.recordBuf.release();	  this.recordBuf.close();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
56	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  buffer.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  finish();  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  if(hasUnclosedEntry  ||  buffer.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  finish();  }  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||  buffer.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  finish();  }	  if(hasUnclosedEntry)    {    finish();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
57	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  buffer!=  null)  {  finish();  }  else  {  buffer.close();  out.close();  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  if(hasUnclosedEntry  ||  buffer!=  null)  {  finish();  }  else  {  buffer.close();  out.close();  }  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||  buffer!=  null)  {  finish();  }  else  {  buffer.close();  out.close();  }	  if(hasUnclosedEntry)    {    finish();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
58	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  start();  }  else  {  buffer.close();  out.close();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  if(hasUnclosedEntry)  {  start();  }  else  {  buffer.close();  out.close();  }  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry)  {  start();  }  else  {  buffer.close();  out.close();  }	  if(hasUnclosedEntry)    {    finish();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
59	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  buffer.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  start();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  if(hasUnclosedEntry  ||  buffer.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  start();  }  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||  buffer.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  start();  }	  if(hasUnclosedEntry)    {    finish();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
60	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  buffer  ==  null)  {  finish();  }  else  {  buffer.close();  out.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  if(hasUnclosedEntry  ||  buffer  ==  null)  {  finish();  }  else  {  buffer.close();  out.close();  }  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||  buffer  ==  null)  {  finish();  }  else  {  buffer.close();  out.close();  }	  if(hasUnclosedEntry)    {    finish();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
61	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  if(hasUnclosedEntry)  {  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry)  {	  if(!finished)    {    finish();    }    else    {    buffer.close();    out    =    true;    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
62	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  finish();  }  else  {  buffer.close();  out  =  true;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  if(hasUnclosedEntry)  {  finish();  }  else  {  buffer.close();  out  =  true;  }  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry)  {  finish();  }  else  {  buffer.close();  out  =  true;  }	  if(!finished)    {    finish();    }    else    {    buffer.close();    out    =    true;    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
63	[BUG]  [BUGGY]  if(!hasUnclosedEntry)  {  start();  }  else  {  buffer.close();  out  =  true;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  if(!hasUnclosedEntry)  {  start();  }  else  {  buffer.close();  out  =  true;  }  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!hasUnclosedEntry)  {  start();  }  else  {  buffer.close();  out  =  true;  }	  if(!finished)    {    finish();    }    else    {    buffer.close();    out    =    true;    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
64	[BUG]  [BUGGY]  if(!hasUnclosedEntry)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  if(!hasUnclosedEntry)  {  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!hasUnclosedEntry)  {	  if(!finished)    {    finish();    }    else    {    buffer.close();    out    =    true;    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
65	[BUG]  [BUGGY]  this.recordBuf.close(out);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  this.recordBuf.close(out);  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	this.recordBuf.close(out);	  this.recordBuf.close();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
66	[BUG]  [BUGGY]  this.recordBuf.close(true);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  this.recordBuf.close(true);  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	this.recordBuf.close(true);	  this.recordBuf.close();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
67	[BUG]  [BUGGY]  if(!hasUnclosedEntry)  {  start();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  if(!hasUnclosedEntry)  {  start();  }  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!hasUnclosedEntry)  {  start();  }	  if(!finished)    {    finish();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
68	[BUG]  [BUGGY]  if(!hasUnclosedEntry)  {  end();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  if(!hasUnclosedEntry)  {  end();  }  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!hasUnclosedEntry)  {  end();  }	  if(!finished)    {    finish();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
69	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  finish();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  if(hasUnclosedEntry)  {  finish();  }  else  {  buffer.close();  }  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry)  {  finish();  }  else  {  buffer.close();  }	  if(!finished)    {    finish();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
70	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  start();  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  if(hasUnclosedEntry)  {  start();  }  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry)  {  start();  }	  if(!finished)    {    finish();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
71	[BUG]  [BUGGY]  if(haveUnclosedEntry)  {  finish();  }  else  {  buffer.close();  out  =  null;  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  if(haveUnclosedEntry)  {  finish();  }  else  {  buffer.close();  out  =  null;  }  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(haveUnclosedEntry)  {  finish();  }  else  {  buffer.close();  out  =  null;  }	  if(finished)    {    finish();    }    else    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
72	[BUG]  [BUGGY]  if(haveUnclosedEntry)  {  finish();  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  if(haveUnclosedEntry)  {  finish();  }  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(haveUnclosedEntry)  {  finish();  }	  if(finished)    {    finish();    }    else    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
73	[BUG]  [BUGGY]  if(!finished)  {  rehashTable();  }  else  {  buffer.close();  out  =  null;  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  if(!finished)  {  rehashTable();  }  else  {  buffer.close();  out  =  null;  }  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!finished)  {  rehashTable();  }  else  {  buffer.close();  out  =  null;  }	  rehashTable();    	non-compiled	[CE]  <identifier>  expected	14	None	replace
74	[BUG]  [BUGGY]  if(!finished)  {  rehashTable();  }  else  {  buffer.close();  out  =  true;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  if(!finished)  {  rehashTable();  }  else  {  buffer.close();  out  =  true;  }  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!finished)  {  rehashTable();  }  else  {  buffer.close();  out  =  true;  }	  rehashTable();    	non-compiled	[CE]  <identifier>  expected	14	None	replace
75	[BUG]  [BUGGY]  if(!finished)  {  rehashTable();  }  else  {  buffer.close();  out  =  false;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  if(!finished)  {  rehashTable();  }  else  {  buffer.close();  out  =  false;  }  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!finished)  {  rehashTable();  }  else  {  buffer.close();  out  =  false;  }	  rehashTable();    	non-compiled	[CE]  <identifier>  expected	14	None	replace
76	[BUG]  [BUGGY]  _reportUnsupportedOperation();  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  _reportUnsupportedOperation();  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	_reportUnsupportedOperation();	  rehashTable();    	non-compiled	[CE]  <identifier>  expected	14	None	replace
77	[BUG]  [BUGGY]  if(!hasUnclosed)  {  finish();  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  if(!hasUnclosed)  {  finish();  }  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!hasUnclosed)  {  finish();  }	  if(!finished)    {    finish();    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
78	[BUG]  [BUGGY]  if(!haveUnclosedEntry)  {  finish();  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  if(!haveUnclosedEntry)  {  finish();  }  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!haveUnclosedEntry)  {  finish();  }	  if(!finished)    {    finish();    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
79	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  buffer!=  null)  {  finish();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  if(hasUnclosedEntry  ||  buffer!=  null)  {  finish();  }  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||  buffer!=  null)  {  finish();  }	  if(hasUnclosedEntry)    {    finish();    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
80	[BUG]  [BUGGY]  Thread.currentThread().setContextClass(getClass().getName());  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  Thread.currentThread().setContextClass(getClass().getName());  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	Thread.currentThread().setContextClass(getClass().getName());	  if(hasUnclosedEntry)    {    finish();    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
81	[BUG]  [BUGGY]  if(!finished)  {  rehash();  }  else  {  buffer.close();  out  =  null;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  if(!finished)  {  rehash();  }  else  {  buffer.close();  out  =  null;  }  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!finished)  {  rehash();  }  else  {  buffer.close();  out  =  null;  }	  rehash();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
82	[BUG]  [BUGGY]  rethrowInternal();  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  rethrowInternal();  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	rethrowInternal();	  rehash();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
83	[BUG]  [BUGGY]  rethrowAsIOException( " ");  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  rethrowAsIOException( " ");  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	rethrowAsIOException( " ");	  rehash();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
84	[BUG]  [BUGGY]  if(!finished)  {  buffer.close();  out  =  null;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  if(!finished)  {  buffer.close();  out  =  null;  }  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!finished)  {  buffer.close();  out  =  null;  }	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
85	[BUG]  [BUGGY]  out.close();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  out.close();  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	out.close();	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
86	[BUG]  [BUGGY]  System.err.println( "TarBuffer  cloned ");  [CE]  <identifier>  expected  [FE]                          AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  System.err.println( "TarBuffer  cloned ");  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	System.err.println( "TarBuffer  cloned ");	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
87	[BUG]  [BUGGY]  if(!hasUnclosed)  {  finish();  }  else  {  buffer.close();  out.close();  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  if(!hasUnclosed)  {  finish();  }  else  {  buffer.close();  out.close();  }  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!hasUnclosed)  {  finish();  }  else  {  buffer.close();  out.close();  }	  if(hasUnclosed)    {    finish();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
88	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().finish();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  Thread.currentThread().getContextClassLoader().finish();  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	Thread.currentThread().getContextClassLoader().finish();	  if(hasUnclosed)    {    finish();    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
89	[BUG]  [BUGGY]  if(hadUnclosed)  {  finish();  }  else  {  buffer.close();  out.close();  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  if(hadUnclosed)  {  finish();  }  else  {  buffer.close();  out.close();  }  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hadUnclosed)  {  finish();  }  else  {  buffer.close();  out.close();  }	  if(finished)    {    finish();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
90	[BUG]  [BUGGY]  if(hadUnclosed)  {  finish();  }  else  {  buffer.close();  out  =  null;  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  if(hadUnclosed)  {  finish();  }  else  {  buffer.close();  out  =  null;  }  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hadUnclosed)  {  finish();  }  else  {  buffer.close();  out  =  null;  }	  if(finished)    {    finish();    }    else    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
91	[BUG]  [BUGGY]  if(!hasUnclosed)  {  finish();  }  else  {  buffer.close();  out  =  null;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  if(!hasUnclosed)  {  finish();  }  else  {  buffer.close();  out  =  null;  }  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!hasUnclosed)  {  finish();  }  else  {  buffer.close();  out  =  null;  }	  if(finished)    {    finish();    }    else    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
92	[BUG]  [BUGGY]  if(hasUnclosed)  {  finish();  }  else  {  buffer.close();  out  =  null;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  if(hasUnclosed)  {  finish();  }  else  {  buffer.close();  out  =  null;  }  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosed)  {  finish();  }  else  {  buffer.close();  out  =  null;  }	  if(finished)    {    finish();    }    else    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
93	[BUG]  [BUGGY]  if(!closed)  {  finish();  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  if(!closed)  {  finish();  }  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!closed)  {  finish();  }	  if(!finished)    {    finish();    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
94	[BUG]  [BUGGY]  if(!finished)  {  rehash();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  if(!finished)  {  rehash();  }  else  {  buffer.close();  }  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!finished)  {  rehash();  }  else  {  buffer.close();  }	  rehash();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
95	[BUG]  [BUGGY]  _reportError( "Current  token( "+currName+ ")not  in  the  cache. ");  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  _reportError( "Current  token( "+currName+ ")not  in  the  cache. ");  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	_reportError( "Current  token( "+currName+ ")not  in  the  cache. ");	  rehash();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
96	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  out!=  null)  {  finish();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  if(hasUnclosedEntry  ||  out!=  null)  {  finish();  }  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||  out!=  null)  {  finish();  }	  if(hasUnclosedEntry)    {    finish();    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
97	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  buffer  ==  null)  {  finish();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  if(hasUnclosedEntry  ||  buffer  ==  null)  {  finish();  }  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||  buffer  ==  null)  {  finish();  }	  if(hasUnclosedEntry)    {    finish();    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
98	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  buffer.isEnabled())  {  finish();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  if(hasUnclosedEntry  ||  buffer.isEnabled())  {  finish();  }  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||  buffer.isEnabled())  {  finish();  }	  if(hasUnclosedEntry)    {    finish();    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
99	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  buffer.length  >  0)  {  finish();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  if(hasUnclosedEntry  ||  buffer.length  >  0)  {  finish();  }  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||  buffer.length  >  0)  {  finish();  }	  if(hasUnclosedEntry)    {    finish();    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
100	[BUG]  [BUGGY]  if(!haveUnclosedEntry)  {  finish();  }  else  {  buffer.close();  out  =  null;  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  if(!haveUnclosedEntry)  {  finish();  }  else  {  buffer.close();  out  =  null;  }  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!haveUnclosedEntry)  {  finish();  }  else  {  buffer.close();  out  =  null;  }	  if(!finished)    {    finish();    }    else    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
101	[BUG]  [BUGGY]  if(!hasUnclosedEntry)  {  start();  }  else  {  buffer.close();  out  =  null;  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  if(!hasUnclosedEntry)  {  start();  }  else  {  buffer.close();  out  =  null;  }  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!hasUnclosedEntry)  {  start();  }  else  {  buffer.close();  out  =  null;  }	  if(!finished)    {    finish();    }    else    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
102	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  finish();  }  else  {  buffer.close();  out  =  false;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  if(hasUnclosedEntry)  {  finish();  }  else  {  buffer.close();  out  =  false;  }  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry)  {  finish();  }  else  {  buffer.close();  out  =  false;  }	  if(!finished)    {    finish();    }    else    {    buffer.close();    out    =    true;    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
103	[BUG]  [BUGGY]  if(!hasUnclosedEntry)  {  finish();  }  else  {  buffer.close();  out  =  false;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  if(!hasUnclosedEntry)  {  finish();  }  else  {  buffer.close();  out  =  false;  }  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!hasUnclosedEntry)  {  finish();  }  else  {  buffer.close();  out  =  false;  }	  if(!finished)    {    finish();    }    else    {    buffer.close();    out    =    true;    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
104	[BUG]  [BUGGY]  if(!haveUnclosedEntry)  {  finish();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  if(!haveUnclosedEntry)  {  finish();  }  else  {  buffer.close();  }  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!haveUnclosedEntry)  {  finish();  }  else  {  buffer.close();  }	  if(!finished)    {    finish();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
105	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  buffer.close();  }  else  {  out.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  if(recordBuf!=  null)  {  buffer.close();  }  else  {  out.close();  }  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(recordBuf!=  null)  {  buffer.close();  }  else  {  out.close();  }	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
106	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  buffer.close();  out  =  null;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  if(recordBuf!=  null)  {  buffer.close();  out  =  null;  }  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(recordBuf!=  null)  {  buffer.close();  out  =  null;  }	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
107	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  buffer.close();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  if(recordBuf!=  null)  {  buffer.close();  }  else  {  buffer.close();  }  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(recordBuf!=  null)  {  buffer.close();  }  else  {  buffer.close();  }	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
108	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  buffer.isEnabled(Feature.QUOTED_FIELD_NAMES))  {  finish();  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  if(hasUnclosedEntry  ||  buffer.isEnabled(Feature.QUOTED_FIELD_NAMES))  {  finish();  }  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||  buffer.isEnabled(Feature.QUOTED_FIELD_NAMES))  {  finish();  }	  if(hasUnclosedEntry)    {    finish();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
109	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  buffer.isEnabled(Surrogate.DEFAULT_CLOSE_ERROR))  {  finish();  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  if(hasUnclosedEntry  ||  buffer.isEnabled(Surrogate.DEFAULT_CLOSE_ERROR))  {  finish();  }  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||  buffer.isEnabled(Surrogate.DEFAULT_CLOSE_ERROR))  {  finish();  }	  if(hasUnclosedEntry)    {    finish();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
110	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  buffer.close();  }  else  {  buffer.close();  out.close();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  if(hasUnclosedEntry)  {  buffer.close();  }  else  {  buffer.close();  out.close();  }  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry)  {  buffer.close();  }  else  {  buffer.close();  out.close();  }	  if(hasUnclosedEntry)    {    finish();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
111	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  buffer.isEnabled(Surrogate.DEPRECATED))  {  finish();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  if(hasUnclosedEntry  ||  buffer.isEnabled(Surrogate.DEPRECATED))  {  finish();  }  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||  buffer.isEnabled(Surrogate.DEPRECATED))  {  finish();  }	  if(hasUnclosedEntry)    {    finish();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
112	[BUG]  [BUGGY]  if(this.recordBuf!=  null)  {  this.recordBuf.close();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  if(this.recordBuf!=  null)  {  this.recordBuf.close();  }  else  {  buffer.close();  }  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(this.recordBuf!=  null)  {  this.recordBuf.close();  }  else  {  buffer.close();  }	  this.recordBuf.close();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
113	[BUG]  [BUGGY]  if(this.recordBuf!=  null)  {  this.recordBuf.close();  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  if(this.recordBuf!=  null)  {  this.recordBuf.close();  }  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(this.recordBuf!=  null)  {  this.recordBuf.close();  }	  this.recordBuf.close();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
114	[BUG]  [BUGGY]  if(this.recordBuf!=  null)  {  this.recordBuf.close();  }  else  {  buffer  =  null;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  if(this.recordBuf!=  null)  {  this.recordBuf.close();  }  else  {  buffer  =  null;  }  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(this.recordBuf!=  null)  {  this.recordBuf.close();  }  else  {  buffer  =  null;  }	  this.recordBuf.close();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
115	[BUG]  [BUGGY]  if(this.recordBuf!=  null)  {  this.recordBuf.close();  }  else  {  out.close();  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  if(this.recordBuf!=  null)  {  this.recordBuf.close();  }  else  {  out.close();  }  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(this.recordBuf!=  null)  {  this.recordBuf.close();  }  else  {  out.close();  }	  this.recordBuf.close();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
116	[BUG]  [BUGGY]  if(this.recordBuf!=  null)  {  this.recordBuf.close();  }  else  {  buffer.close();  out.close();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  if(this.recordBuf!=  null)  {  this.recordBuf.close();  }  else  {  buffer.close();  out.close();  }  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(this.recordBuf!=  null)  {  this.recordBuf.close();  }  else  {  buffer.close();  out.close();  }	  this.recordBuf.close();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
117	[BUG]  [BUGGY]  if(this.recordBuf!=  null)  {  this.recordBuf.close();  }  else  {  buffer.close();  out  =  true;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  if(this.recordBuf!=  null)  {  this.recordBuf.close();  }  else  {  buffer.close();  out  =  true;  }  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(this.recordBuf!=  null)  {  this.recordBuf.close();  }  else  {  buffer.close();  out  =  true;  }	  this.recordBuf.close();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
118	[BUG]  [BUGGY]  if(!hasUnclosedEntry)  {  start();  }  else  {  buffer.close();  out.close();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  void  close()  throws  IOException  {  if(!finished)  {    [BUGGY]  if(!hasUnclosedEntry)  {  start();  }  else  {  buffer.close();  out.close();  }  [BUGGY]    }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!hasUnclosedEntry)  {  start();  }  else  {  buffer.close();  out.close();  }	  if(!finished)    {    finish();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
